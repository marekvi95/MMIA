
cv10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019268  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000f320  08019418  08019418  00029418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08028738  08028738  000401f0  2**0
                  CONTENTS
  4 .ARM          00000008  08028738  08028738  00038738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08028740  08028740  000401f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08028740  08028740  00038740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08028744  08028744  00038744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08028748  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f934  200001f0  08028938  000401f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000fb24  08028938  0004fb24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000486ec  00000000  00000000  00040220  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008493  00000000  00000000  0008890c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000025c0  00000000  00000000  00090da0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000023d8  00000000  00000000  00093360  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00034847  00000000  00000000  00095738  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00030078  00000000  00000000  000c9f7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001018f8  00000000  00000000  000f9ff7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001fb8ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a49c  00000000  00000000  001fb96c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08019400 	.word	0x08019400

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f4 	.word	0x200001f4
 80001ec:	08019400 	.word	0x08019400

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	4a07      	ldr	r2, [pc, #28]	; (80005ec <vApplicationGetIdleTaskMemory+0x2c>)
 80005d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005d2:	68bb      	ldr	r3, [r7, #8]
 80005d4:	4a06      	ldr	r2, [pc, #24]	; (80005f0 <vApplicationGetIdleTaskMemory+0x30>)
 80005d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2280      	movs	r2, #128	; 0x80
 80005dc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80005de:	bf00      	nop
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	2000020c 	.word	0x2000020c
 80005f0:	20000260 	.word	0x20000260

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b5b0      	push	{r4, r5, r7, lr}
 80005f6:	b088      	sub	sp, #32
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fa:	f000 fe8f 	bl	800131c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fe:	f000 f81f 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000602:	f000 f8df 	bl	80007c4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000606:	f000 f885 	bl	8000714 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800060a:	f000 f8ad 	bl	8000768 <MX_USB_OTG_FS_PCD_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800060e:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <main+0x44>)
 8000610:	1d3c      	adds	r4, r7, #4
 8000612:	461d      	mov	r5, r3
 8000614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000618:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800061c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	2100      	movs	r1, #0
 8000624:	4618      	mov	r0, r3
 8000626:	f004 fbfb 	bl	8004e20 <osThreadCreate>
 800062a:	4602      	mov	r2, r0
 800062c:	4b03      	ldr	r3, [pc, #12]	; (800063c <main+0x48>)
 800062e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000630:	f004 fbdf 	bl	8004df2 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000634:	e7fe      	b.n	8000634 <main+0x40>
 8000636:	bf00      	nop
 8000638:	08019424 	.word	0x08019424
 800063c:	20008da8 	.word	0x20008da8

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b094      	sub	sp, #80	; 0x50
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0320 	add.w	r3, r7, #32
 800064a:	2230      	movs	r2, #48	; 0x30
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f017 fd95 	bl	801817e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000664:	2300      	movs	r3, #0
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	4b28      	ldr	r3, [pc, #160]	; (800070c <SystemClock_Config+0xcc>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066c:	4a27      	ldr	r2, [pc, #156]	; (800070c <SystemClock_Config+0xcc>)
 800066e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000672:	6413      	str	r3, [r2, #64]	; 0x40
 8000674:	4b25      	ldr	r3, [pc, #148]	; (800070c <SystemClock_Config+0xcc>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000680:	2300      	movs	r3, #0
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	4b22      	ldr	r3, [pc, #136]	; (8000710 <SystemClock_Config+0xd0>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a21      	ldr	r2, [pc, #132]	; (8000710 <SystemClock_Config+0xd0>)
 800068a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	4b1f      	ldr	r3, [pc, #124]	; (8000710 <SystemClock_Config+0xd0>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800069c:	2301      	movs	r3, #1
 800069e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006a0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a6:	2302      	movs	r3, #2
 80006a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006b0:	2304      	movs	r3, #4
 80006b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006b4:	23a8      	movs	r3, #168	; 0xa8
 80006b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b8:	2302      	movs	r3, #2
 80006ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006bc:	2307      	movs	r3, #7
 80006be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	f107 0320 	add.w	r3, r7, #32
 80006c4:	4618      	mov	r0, r3
 80006c6:	f002 fa79 	bl	8002bbc <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d0:	f000 f948 	bl	8000964 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d4:	230f      	movs	r3, #15
 80006d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d8:	2302      	movs	r3, #2
 80006da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2105      	movs	r1, #5
 80006f2:	4618      	mov	r0, r3
 80006f4:	f002 fcd2 	bl	800309c <HAL_RCC_ClockConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006fe:	f000 f931 	bl	8000964 <Error_Handler>
  }
}
 8000702:	bf00      	nop
 8000704:	3750      	adds	r7, #80	; 0x50
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800
 8000710:	40007000 	.word	0x40007000

08000714 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000718:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 800071a:	4a12      	ldr	r2, [pc, #72]	; (8000764 <MX_USART3_UART_Init+0x50>)
 800071c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 8000720:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000724:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 800073a:	220c      	movs	r2, #12
 800073c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073e:	4b08      	ldr	r3, [pc, #32]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 8000746:	2200      	movs	r2, #0
 8000748:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 800074c:	f003 f908 	bl	8003960 <HAL_UART_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000756:	f000 f905 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20008dac 	.word	0x20008dac
 8000764:	40004800 	.word	0x40004800

08000768 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800076c:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800076e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000772:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000776:	2204      	movs	r2, #4
 8000778:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800077c:	2202      	movs	r2, #2
 800077e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000780:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000788:	2202      	movs	r2, #2
 800078a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800078e:	2201      	movs	r2, #1
 8000790:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000792:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000794:	2200      	movs	r2, #0
 8000796:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800079a:	2200      	movs	r2, #0
 800079c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007aa:	4805      	ldr	r0, [pc, #20]	; (80007c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ac:	f002 f8e9 	bl	8002982 <HAL_PCD_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007b6:	f000 f8d5 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20008dec 	.word	0x20008dec

080007c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08c      	sub	sp, #48	; 0x30
 80007c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	f107 031c 	add.w	r3, r7, #28
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	61bb      	str	r3, [r7, #24]
 80007de:	4b4b      	ldr	r3, [pc, #300]	; (800090c <MX_GPIO_Init+0x148>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a4a      	ldr	r2, [pc, #296]	; (800090c <MX_GPIO_Init+0x148>)
 80007e4:	f043 0304 	orr.w	r3, r3, #4
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b48      	ldr	r3, [pc, #288]	; (800090c <MX_GPIO_Init+0x148>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0304 	and.w	r3, r3, #4
 80007f2:	61bb      	str	r3, [r7, #24]
 80007f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]
 80007fa:	4b44      	ldr	r3, [pc, #272]	; (800090c <MX_GPIO_Init+0x148>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a43      	ldr	r2, [pc, #268]	; (800090c <MX_GPIO_Init+0x148>)
 8000800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b41      	ldr	r3, [pc, #260]	; (800090c <MX_GPIO_Init+0x148>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
 8000816:	4b3d      	ldr	r3, [pc, #244]	; (800090c <MX_GPIO_Init+0x148>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a3c      	ldr	r2, [pc, #240]	; (800090c <MX_GPIO_Init+0x148>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b3a      	ldr	r3, [pc, #232]	; (800090c <MX_GPIO_Init+0x148>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	4b36      	ldr	r3, [pc, #216]	; (800090c <MX_GPIO_Init+0x148>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a35      	ldr	r2, [pc, #212]	; (800090c <MX_GPIO_Init+0x148>)
 8000838:	f043 0302 	orr.w	r3, r3, #2
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b33      	ldr	r3, [pc, #204]	; (800090c <MX_GPIO_Init+0x148>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	4b2f      	ldr	r3, [pc, #188]	; (800090c <MX_GPIO_Init+0x148>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a2e      	ldr	r2, [pc, #184]	; (800090c <MX_GPIO_Init+0x148>)
 8000854:	f043 0308 	orr.w	r3, r3, #8
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b2c      	ldr	r3, [pc, #176]	; (800090c <MX_GPIO_Init+0x148>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0308 	and.w	r3, r3, #8
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	4b28      	ldr	r3, [pc, #160]	; (800090c <MX_GPIO_Init+0x148>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a27      	ldr	r2, [pc, #156]	; (800090c <MX_GPIO_Init+0x148>)
 8000870:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b25      	ldr	r3, [pc, #148]	; (800090c <MX_GPIO_Init+0x148>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	f244 0181 	movw	r1, #16513	; 0x4081
 8000888:	4821      	ldr	r0, [pc, #132]	; (8000910 <MX_GPIO_Init+0x14c>)
 800088a:	f002 f861 	bl	8002950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	2140      	movs	r1, #64	; 0x40
 8000892:	4820      	ldr	r0, [pc, #128]	; (8000914 <MX_GPIO_Init+0x150>)
 8000894:	f002 f85c 	bl	8002950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000898:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800089e:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <MX_GPIO_Init+0x154>)
 80008a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	481b      	ldr	r0, [pc, #108]	; (800091c <MX_GPIO_Init+0x158>)
 80008ae:	f001 fe8d 	bl	80025cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008b2:	f244 0381 	movw	r3, #16513	; 0x4081
 80008b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b8:	2301      	movs	r3, #1
 80008ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	2300      	movs	r3, #0
 80008c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c4:	f107 031c 	add.w	r3, r7, #28
 80008c8:	4619      	mov	r1, r3
 80008ca:	4811      	ldr	r0, [pc, #68]	; (8000910 <MX_GPIO_Init+0x14c>)
 80008cc:	f001 fe7e 	bl	80025cc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008d0:	2340      	movs	r3, #64	; 0x40
 80008d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d4:	2301      	movs	r3, #1
 80008d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	2300      	movs	r3, #0
 80008de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	480b      	ldr	r0, [pc, #44]	; (8000914 <MX_GPIO_Init+0x150>)
 80008e8:	f001 fe70 	bl	80025cc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008ec:	2380      	movs	r3, #128	; 0x80
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f0:	2300      	movs	r3, #0
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008f8:	f107 031c 	add.w	r3, r7, #28
 80008fc:	4619      	mov	r1, r3
 80008fe:	4805      	ldr	r0, [pc, #20]	; (8000914 <MX_GPIO_Init+0x150>)
 8000900:	f001 fe64 	bl	80025cc <HAL_GPIO_Init>

}
 8000904:	bf00      	nop
 8000906:	3730      	adds	r7, #48	; 0x30
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40023800 	.word	0x40023800
 8000910:	40020400 	.word	0x40020400
 8000914:	40021800 	.word	0x40021800
 8000918:	10110000 	.word	0x10110000
 800091c:	40020800 	.word	0x40020800

08000920 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000928:	f003 fe92 	bl	8004650 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  tcpecho_init();
 800092c:	f000 fa8a 	bl	8000e44 <tcpecho_init>
  telnet_init();
 8000930:	f000 fcb6 	bl	80012a0 <telnet_init>
  httpd_init();
 8000934:	f00a fb70 	bl	800b018 <httpd_init>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000938:	2001      	movs	r0, #1
 800093a:	f004 fabd 	bl	8004eb8 <osDelay>
 800093e:	e7fb      	b.n	8000938 <StartDefaultTask+0x18>

08000940 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a04      	ldr	r2, [pc, #16]	; (8000960 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d101      	bne.n	8000956 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000952:	f000 fd05 	bl	8001360 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40010000 	.word	0x40010000

08000964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
	...

08000974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <HAL_MspInit+0x54>)
 8000980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000982:	4a11      	ldr	r2, [pc, #68]	; (80009c8 <HAL_MspInit+0x54>)
 8000984:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000988:	6453      	str	r3, [r2, #68]	; 0x44
 800098a:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <HAL_MspInit+0x54>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	603b      	str	r3, [r7, #0]
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <HAL_MspInit+0x54>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	4a0a      	ldr	r2, [pc, #40]	; (80009c8 <HAL_MspInit+0x54>)
 80009a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a4:	6413      	str	r3, [r2, #64]	; 0x40
 80009a6:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <HAL_MspInit+0x54>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	210f      	movs	r1, #15
 80009b6:	f06f 0001 	mvn.w	r0, #1
 80009ba:	f000 fdcb 	bl	8001554 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40023800 	.word	0x40023800

080009cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08a      	sub	sp, #40	; 0x28
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a19      	ldr	r2, [pc, #100]	; (8000a50 <HAL_UART_MspInit+0x84>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d12c      	bne.n	8000a48 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	613b      	str	r3, [r7, #16]
 80009f2:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <HAL_UART_MspInit+0x88>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f6:	4a17      	ldr	r2, [pc, #92]	; (8000a54 <HAL_UART_MspInit+0x88>)
 80009f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009fc:	6413      	str	r3, [r2, #64]	; 0x40
 80009fe:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <HAL_UART_MspInit+0x88>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <HAL_UART_MspInit+0x88>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a10      	ldr	r2, [pc, #64]	; (8000a54 <HAL_UART_MspInit+0x88>)
 8000a14:	f043 0308 	orr.w	r3, r3, #8
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <HAL_UART_MspInit+0x88>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0308 	and.w	r3, r3, #8
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a26:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a34:	2303      	movs	r3, #3
 8000a36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a38:	2307      	movs	r3, #7
 8000a3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	4619      	mov	r1, r3
 8000a42:	4805      	ldr	r0, [pc, #20]	; (8000a58 <HAL_UART_MspInit+0x8c>)
 8000a44:	f001 fdc2 	bl	80025cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a48:	bf00      	nop
 8000a4a:	3728      	adds	r7, #40	; 0x28
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40004800 	.word	0x40004800
 8000a54:	40023800 	.word	0x40023800
 8000a58:	40020c00 	.word	0x40020c00

08000a5c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	; 0x28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a7c:	d13f      	bne.n	8000afe <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	4b21      	ldr	r3, [pc, #132]	; (8000b08 <HAL_PCD_MspInit+0xac>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a20      	ldr	r2, [pc, #128]	; (8000b08 <HAL_PCD_MspInit+0xac>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b1e      	ldr	r3, [pc, #120]	; (8000b08 <HAL_PCD_MspInit+0xac>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a9a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000aac:	230a      	movs	r3, #10
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4815      	ldr	r0, [pc, #84]	; (8000b0c <HAL_PCD_MspInit+0xb0>)
 8000ab8:	f001 fd88 	bl	80025cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000abc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ac0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000aca:	f107 0314 	add.w	r3, r7, #20
 8000ace:	4619      	mov	r1, r3
 8000ad0:	480e      	ldr	r0, [pc, #56]	; (8000b0c <HAL_PCD_MspInit+0xb0>)
 8000ad2:	f001 fd7b 	bl	80025cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ad6:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <HAL_PCD_MspInit+0xac>)
 8000ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ada:	4a0b      	ldr	r2, [pc, #44]	; (8000b08 <HAL_PCD_MspInit+0xac>)
 8000adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ae0:	6353      	str	r3, [r2, #52]	; 0x34
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <HAL_PCD_MspInit+0xac>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aea:	4a07      	ldr	r2, [pc, #28]	; (8000b08 <HAL_PCD_MspInit+0xac>)
 8000aec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af0:	6453      	str	r3, [r2, #68]	; 0x44
 8000af2:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <HAL_PCD_MspInit+0xac>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000afe:	bf00      	nop
 8000b00:	3728      	adds	r7, #40	; 0x28
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	40020000 	.word	0x40020000

08000b10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08c      	sub	sp, #48	; 0x30
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8000b20:	2200      	movs	r2, #0
 8000b22:	6879      	ldr	r1, [r7, #4]
 8000b24:	2019      	movs	r0, #25
 8000b26:	f000 fd15 	bl	8001554 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8000b2a:	2019      	movs	r0, #25
 8000b2c:	f000 fd2e 	bl	800158c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b30:	2300      	movs	r3, #0
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	4b1f      	ldr	r3, [pc, #124]	; (8000bb4 <HAL_InitTick+0xa4>)
 8000b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b38:	4a1e      	ldr	r2, [pc, #120]	; (8000bb4 <HAL_InitTick+0xa4>)
 8000b3a:	f043 0301 	orr.w	r3, r3, #1
 8000b3e:	6453      	str	r3, [r2, #68]	; 0x44
 8000b40:	4b1c      	ldr	r3, [pc, #112]	; (8000bb4 <HAL_InitTick+0xa4>)
 8000b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b44:	f003 0301 	and.w	r3, r3, #1
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b4c:	f107 0210 	add.w	r2, r7, #16
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4611      	mov	r1, r2
 8000b56:	4618      	mov	r0, r3
 8000b58:	f002 fc92 	bl	8003480 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000b5c:	f002 fc7c 	bl	8003458 <HAL_RCC_GetPCLK2Freq>
 8000b60:	4603      	mov	r3, r0
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b68:	4a13      	ldr	r2, [pc, #76]	; (8000bb8 <HAL_InitTick+0xa8>)
 8000b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b6e:	0c9b      	lsrs	r3, r3, #18
 8000b70:	3b01      	subs	r3, #1
 8000b72:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <HAL_InitTick+0xac>)
 8000b76:	4a12      	ldr	r2, [pc, #72]	; (8000bc0 <HAL_InitTick+0xb0>)
 8000b78:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000b7a:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <HAL_InitTick+0xac>)
 8000b7c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b80:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b82:	4a0e      	ldr	r2, [pc, #56]	; (8000bbc <HAL_InitTick+0xac>)
 8000b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b86:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b88:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <HAL_InitTick+0xac>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8e:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <HAL_InitTick+0xac>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000b94:	4809      	ldr	r0, [pc, #36]	; (8000bbc <HAL_InitTick+0xac>)
 8000b96:	f002 fca5 	bl	80034e4 <HAL_TIM_Base_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d104      	bne.n	8000baa <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000ba0:	4806      	ldr	r0, [pc, #24]	; (8000bbc <HAL_InitTick+0xac>)
 8000ba2:	f002 fcd4 	bl	800354e <HAL_TIM_Base_Start_IT>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	e000      	b.n	8000bac <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3730      	adds	r7, #48	; 0x30
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	431bde83 	.word	0x431bde83
 8000bbc:	200091f4 	.word	0x200091f4
 8000bc0:	40010000 	.word	0x40010000

08000bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr

08000bd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd6:	e7fe      	b.n	8000bd6 <HardFault_Handler+0x4>

08000bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <MemManage_Handler+0x4>

08000bde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be2:	e7fe      	b.n	8000be2 <BusFault_Handler+0x4>

08000be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <UsageFault_Handler+0x4>

08000bea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bfc:	4802      	ldr	r0, [pc, #8]	; (8000c08 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000bfe:	f002 fcca 	bl	8003596 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	200091f4 	.word	0x200091f4

08000c0c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000c10:	4802      	ldr	r0, [pc, #8]	; (8000c1c <ETH_IRQHandler+0x10>)
 8000c12:	f001 f8af 	bl	8001d74 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	2000ab48 	.word	0x2000ab48

08000c20 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]
 8000c30:	e00a      	b.n	8000c48 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c32:	f3af 8000 	nop.w
 8000c36:	4601      	mov	r1, r0
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	1c5a      	adds	r2, r3, #1
 8000c3c:	60ba      	str	r2, [r7, #8]
 8000c3e:	b2ca      	uxtb	r2, r1
 8000c40:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	3301      	adds	r3, #1
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	697a      	ldr	r2, [r7, #20]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	dbf0      	blt.n	8000c32 <_read+0x12>
	}

return len;
 8000c50:	687b      	ldr	r3, [r7, #4]
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3718      	adds	r7, #24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b086      	sub	sp, #24
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	60f8      	str	r0, [r7, #12]
 8000c62:	60b9      	str	r1, [r7, #8]
 8000c64:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]
 8000c6a:	e009      	b.n	8000c80 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	1c5a      	adds	r2, r3, #1
 8000c70:	60ba      	str	r2, [r7, #8]
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	617b      	str	r3, [r7, #20]
 8000c80:	697a      	ldr	r2, [r7, #20]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	dbf1      	blt.n	8000c6c <_write+0x12>
	}
	return len;
 8000c88:	687b      	ldr	r3, [r7, #4]
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3718      	adds	r7, #24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <_close>:

int _close(int file)
{
 8000c92:	b480      	push	{r7}
 8000c94:	b083      	sub	sp, #12
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
	return -1;
 8000c9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000caa:	b480      	push	{r7}
 8000cac:	b083      	sub	sp, #12
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
 8000cb2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cba:	605a      	str	r2, [r3, #4]
	return 0;
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <_isatty>:

int _isatty(int file)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	b083      	sub	sp, #12
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
	return 1;
 8000cd2:	2301      	movs	r3, #1
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
	return 0;
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3714      	adds	r7, #20
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
	...

08000cfc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000d04:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <_sbrk+0x50>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d102      	bne.n	8000d12 <_sbrk+0x16>
		heap_end = &end;
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <_sbrk+0x50>)
 8000d0e:	4a10      	ldr	r2, [pc, #64]	; (8000d50 <_sbrk+0x54>)
 8000d10:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000d12:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <_sbrk+0x50>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000d18:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <_sbrk+0x50>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4413      	add	r3, r2
 8000d20:	466a      	mov	r2, sp
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d905      	bls.n	8000d32 <_sbrk+0x36>
	{
		errno = ENOMEM;
 8000d26:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <_sbrk+0x58>)
 8000d28:	220c      	movs	r2, #12
 8000d2a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d30:	e006      	b.n	8000d40 <_sbrk+0x44>
	}

	heap_end += incr;
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <_sbrk+0x50>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4413      	add	r3, r2
 8000d3a:	4a04      	ldr	r2, [pc, #16]	; (8000d4c <_sbrk+0x50>)
 8000d3c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	20000460 	.word	0x20000460
 8000d50:	2000fb28 	.word	0x2000fb28
 8000d54:	2000fb1c 	.word	0x2000fb1c

08000d58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d5c:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <SystemInit+0x28>)
 8000d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d62:	4a07      	ldr	r2, [pc, #28]	; (8000d80 <SystemInit+0x28>)
 8000d64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d6c:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <SystemInit+0x28>)
 8000d6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d72:	609a      	str	r2, [r3, #8]
#endif
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <tcpecho_thread>:



/*-----------------------------------------------------------------------------------*/
static void tcpecho_thread(void *arg)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08a      	sub	sp, #40	; 0x28
 8000d88:	af02      	add	r7, sp, #8
 8000d8a:	6078      	str	r0, [r7, #4]
  u16_t len;
      
  LWIP_UNUSED_ARG(arg);

  /* Create a new connection identifier. */
  conn = netconn_new(NETCONN_TCP);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2100      	movs	r1, #0
 8000d90:	2010      	movs	r0, #16
 8000d92:	f006 ffb9 	bl	8007d08 <netconn_new_with_proto_and_callback>
 8000d96:	61f8      	str	r0, [r7, #28]
  
  if (conn!=NULL)
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d04e      	beq.n	8000e3c <tcpecho_thread+0xb8>
  {  
    /* Bind connection to well known port number 7. */
    err = netconn_bind(conn, NULL, 7);
 8000d9e:	2207      	movs	r2, #7
 8000da0:	2100      	movs	r1, #0
 8000da2:	69f8      	ldr	r0, [r7, #28]
 8000da4:	f007 f86a 	bl	8007e7c <netconn_bind>
 8000da8:	4603      	mov	r3, r0
 8000daa:	76fb      	strb	r3, [r7, #27]
    
    if (err == ERR_OK)
 8000dac:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d13f      	bne.n	8000e34 <tcpecho_thread+0xb0>
    {
      /* Tell connection to go into listening mode. */
      netconn_listen(conn);
 8000db4:	21ff      	movs	r1, #255	; 0xff
 8000db6:	69f8      	ldr	r0, [r7, #28]
 8000db8:	f007 f898 	bl	8007eec <netconn_listen_with_backlog>
    
      while (1) 
      {
        /* Grab new connection. */
         accept_err = netconn_accept(conn, &newconn);
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	69f8      	ldr	r0, [r7, #28]
 8000dc4:	f007 f8be 	bl	8007f44 <netconn_accept>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	76bb      	strb	r3, [r7, #26]
    
        /* Process the new connection. */
        if (accept_err == ERR_OK) 
 8000dcc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d1f3      	bne.n	8000dbc <tcpecho_thread+0x38>
        {

          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000dd4:	e01b      	b.n	8000e0e <tcpecho_thread+0x8a>
          {
            do 
            {
              netbuf_data(buf, &data, &len);
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	f107 020a 	add.w	r2, r7, #10
 8000ddc:	f107 010c 	add.w	r1, r7, #12
 8000de0:	4618      	mov	r0, r3
 8000de2:	f009 f84b 	bl	8009e7c <netbuf_data>
              netconn_write(newconn, data, len, NETCONN_COPY);
 8000de6:	6978      	ldr	r0, [r7, #20]
 8000de8:	68f9      	ldr	r1, [r7, #12]
 8000dea:	897b      	ldrh	r3, [r7, #10]
 8000dec:	461a      	mov	r2, r3
 8000dee:	2300      	movs	r3, #0
 8000df0:	9300      	str	r3, [sp, #0]
 8000df2:	2301      	movs	r3, #1
 8000df4:	f007 fb28 	bl	8008448 <netconn_write_partly>
          
            } 
            while (netbuf_next(buf) >= 0);
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f009 f888 	bl	8009f10 <netbuf_next>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	dae7      	bge.n	8000dd6 <tcpecho_thread+0x52>
          
            netbuf_delete(buf);
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f009 f817 	bl	8009e3c <netbuf_delete>
          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	f107 0210 	add.w	r2, r7, #16
 8000e14:	4611      	mov	r1, r2
 8000e16:	4618      	mov	r0, r3
 8000e18:	f007 fa9c 	bl	8008354 <netconn_recv>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d0d9      	beq.n	8000dd6 <tcpecho_thread+0x52>
          }
        
          /* Close connection and discard connection identifier. */
          netconn_close(newconn);
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f007 fc11 	bl	800864c <netconn_close>
          netconn_delete(newconn);
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f007 f809 	bl	8007e44 <netconn_delete>
         accept_err = netconn_accept(conn, &newconn);
 8000e32:	e7c3      	b.n	8000dbc <tcpecho_thread+0x38>
        }
      }
    }
    else
    {
      netconn_delete(newconn);
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f007 f804 	bl	8007e44 <netconn_delete>
    }
  }
}
 8000e3c:	bf00      	nop
 8000e3e:	3720      	adds	r7, #32
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <tcpecho_init>:
/*-----------------------------------------------------------------------------------*/

void tcpecho_init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af02      	add	r7, sp, #8
  sys_thread_new("tcpecho_thread", tcpecho_thread, NULL, DEFAULT_THREAD_STACKSIZE, TCPECHO_THREAD_PRIO);
 8000e4a:	2304      	movs	r3, #4
 8000e4c:	9300      	str	r3, [sp, #0]
 8000e4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e52:	2200      	movs	r2, #0
 8000e54:	4903      	ldr	r1, [pc, #12]	; (8000e64 <tcpecho_init+0x20>)
 8000e56:	4804      	ldr	r0, [pc, #16]	; (8000e68 <tcpecho_init+0x24>)
 8000e58:	f017 f8d6 	bl	8018008 <sys_thread_new>
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	08000d85 	.word	0x08000d85
 8000e68:	08019440 	.word	0x08019440

08000e6c <telnet_process_command>:
#define TELNET_THREAD_PRIO  ( tskIDLE_PRIORITY + 4 )
#define NETCONN_BUFFER_LEN 255
#define CMD_BUFFER_LEN 255

static void telnet_process_command(char *cmd, struct netconn *conn)
{
 8000e6c:	b590      	push	{r4, r7, lr}
 8000e6e:	b089      	sub	sp, #36	; 0x24
 8000e70:	af02      	add	r7, sp, #8
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
  char *token, *saveptr;
  token = strtok_r(cmd, " ", &saveptr);
 8000e76:	f107 030c 	add.w	r3, r7, #12
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	49a7      	ldr	r1, [pc, #668]	; (800111c <telnet_process_command+0x2b0>)
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f017 fa59 	bl	8018336 <strtok_r>
 8000e84:	6178      	str	r0, [r7, #20]
  static char s[NETCONN_BUFFER_LEN];

  if (strcasecmp(token, "HELLO") == 0) {
 8000e86:	49a6      	ldr	r1, [pc, #664]	; (8001120 <telnet_process_command+0x2b4>)
 8000e88:	6978      	ldr	r0, [r7, #20]
 8000e8a:	f017 f9ed 	bl	8018268 <strcasecmp>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d114      	bne.n	8000ebe <telnet_process_command+0x52>
    sprintf(s, "Komunikace OK\n");
 8000e94:	4aa3      	ldr	r2, [pc, #652]	; (8001124 <telnet_process_command+0x2b8>)
 8000e96:	4ba4      	ldr	r3, [pc, #656]	; (8001128 <telnet_process_command+0x2bc>)
 8000e98:	4614      	mov	r4, r2
 8000e9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e9c:	c407      	stmia	r4!, {r0, r1, r2}
 8000e9e:	8023      	strh	r3, [r4, #0]
 8000ea0:	3402      	adds	r4, #2
 8000ea2:	0c1b      	lsrs	r3, r3, #16
 8000ea4:	7023      	strb	r3, [r4, #0]
    netconn_write(conn, s, strlen(s), NETCONN_COPY);
 8000ea6:	489f      	ldr	r0, [pc, #636]	; (8001124 <telnet_process_command+0x2b8>)
 8000ea8:	f7ff f9ac 	bl	8000204 <strlen>
 8000eac:	4602      	mov	r2, r0
 8000eae:	2300      	movs	r3, #0
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	499b      	ldr	r1, [pc, #620]	; (8001124 <telnet_process_command+0x2b8>)
 8000eb6:	6838      	ldr	r0, [r7, #0]
 8000eb8:	f007 fac6 	bl	8008448 <netconn_write_partly>
      netconn_write(conn, s, strlen(s), NETCONN_COPY);
      HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
    }

  }
}
 8000ebc:	e129      	b.n	8001112 <telnet_process_command+0x2a6>
  else if (strcasecmp(token, "STATUS") == 0) {
 8000ebe:	499b      	ldr	r1, [pc, #620]	; (800112c <telnet_process_command+0x2c0>)
 8000ec0:	6978      	ldr	r0, [r7, #20]
 8000ec2:	f017 f9d1 	bl	8018268 <strcasecmp>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d127      	bne.n	8000f1c <telnet_process_command+0xb0>
	uint8_t ld1 = HAL_GPIO_ReadPin(LD1_GPIO_Port, LD1_Pin);
 8000ecc:	2101      	movs	r1, #1
 8000ece:	4898      	ldr	r0, [pc, #608]	; (8001130 <telnet_process_command+0x2c4>)
 8000ed0:	f001 fd26 	bl	8002920 <HAL_GPIO_ReadPin>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	74fb      	strb	r3, [r7, #19]
	uint8_t ld2 = HAL_GPIO_ReadPin(LD2_GPIO_Port, LD2_Pin);
 8000ed8:	2180      	movs	r1, #128	; 0x80
 8000eda:	4895      	ldr	r0, [pc, #596]	; (8001130 <telnet_process_command+0x2c4>)
 8000edc:	f001 fd20 	bl	8002920 <HAL_GPIO_ReadPin>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	74bb      	strb	r3, [r7, #18]
	uint8_t ld3 = HAL_GPIO_ReadPin(LD3_GPIO_Port, LD3_Pin);
 8000ee4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ee8:	4891      	ldr	r0, [pc, #580]	; (8001130 <telnet_process_command+0x2c4>)
 8000eea:	f001 fd19 	bl	8002920 <HAL_GPIO_ReadPin>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	747b      	strb	r3, [r7, #17]
	sprintf(s, "LED1: %d \n LED2: %d \n, LED3: %d \n", ld1, ld2, ld3);
 8000ef2:	7cfa      	ldrb	r2, [r7, #19]
 8000ef4:	7cb9      	ldrb	r1, [r7, #18]
 8000ef6:	7c7b      	ldrb	r3, [r7, #17]
 8000ef8:	9300      	str	r3, [sp, #0]
 8000efa:	460b      	mov	r3, r1
 8000efc:	498d      	ldr	r1, [pc, #564]	; (8001134 <telnet_process_command+0x2c8>)
 8000efe:	4889      	ldr	r0, [pc, #548]	; (8001124 <telnet_process_command+0x2b8>)
 8000f00:	f017 f992 	bl	8018228 <siprintf>
    netconn_write(conn, s, strlen(s), NETCONN_COPY);
 8000f04:	4887      	ldr	r0, [pc, #540]	; (8001124 <telnet_process_command+0x2b8>)
 8000f06:	f7ff f97d 	bl	8000204 <strlen>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	2301      	movs	r3, #1
 8000f12:	4984      	ldr	r1, [pc, #528]	; (8001124 <telnet_process_command+0x2b8>)
 8000f14:	6838      	ldr	r0, [r7, #0]
 8000f16:	f007 fa97 	bl	8008448 <netconn_write_partly>
}
 8000f1a:	e0fa      	b.n	8001112 <telnet_process_command+0x2a6>
  else if (strcasecmp(token, "LED1") == 0) {
 8000f1c:	4986      	ldr	r1, [pc, #536]	; (8001138 <telnet_process_command+0x2cc>)
 8000f1e:	6978      	ldr	r0, [r7, #20]
 8000f20:	f017 f9a2 	bl	8018268 <strcasecmp>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d14c      	bne.n	8000fc4 <telnet_process_command+0x158>
    token = strtok_r(NULL, " ", &saveptr);
 8000f2a:	f107 030c 	add.w	r3, r7, #12
 8000f2e:	461a      	mov	r2, r3
 8000f30:	497a      	ldr	r1, [pc, #488]	; (800111c <telnet_process_command+0x2b0>)
 8000f32:	2000      	movs	r0, #0
 8000f34:	f017 f9ff 	bl	8018336 <strtok_r>
 8000f38:	6178      	str	r0, [r7, #20]
    if (strcasecmp(token, "ON") == 0) {
 8000f3a:	4980      	ldr	r1, [pc, #512]	; (800113c <telnet_process_command+0x2d0>)
 8000f3c:	6978      	ldr	r0, [r7, #20]
 8000f3e:	f017 f993 	bl	8018268 <strcasecmp>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d11e      	bne.n	8000f86 <telnet_process_command+0x11a>
      sprintf(s, "LED1 zapnout\n");
 8000f48:	4a76      	ldr	r2, [pc, #472]	; (8001124 <telnet_process_command+0x2b8>)
 8000f4a:	4b7d      	ldr	r3, [pc, #500]	; (8001140 <telnet_process_command+0x2d4>)
 8000f4c:	4614      	mov	r4, r2
 8000f4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f50:	c407      	stmia	r4!, {r0, r1, r2}
 8000f52:	8023      	strh	r3, [r4, #0]
      netconn_write(conn, s, strlen(s), NETCONN_COPY);
 8000f54:	4873      	ldr	r0, [pc, #460]	; (8001124 <telnet_process_command+0x2b8>)
 8000f56:	f7ff f955 	bl	8000204 <strlen>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	9300      	str	r3, [sp, #0]
 8000f60:	2301      	movs	r3, #1
 8000f62:	4970      	ldr	r1, [pc, #448]	; (8001124 <telnet_process_command+0x2b8>)
 8000f64:	6838      	ldr	r0, [r7, #0]
 8000f66:	f007 fa6f 	bl	8008448 <netconn_write_partly>
      token = strtok_r(NULL, " ", &saveptr);
 8000f6a:	f107 030c 	add.w	r3, r7, #12
 8000f6e:	461a      	mov	r2, r3
 8000f70:	496a      	ldr	r1, [pc, #424]	; (800111c <telnet_process_command+0x2b0>)
 8000f72:	2000      	movs	r0, #0
 8000f74:	f017 f9df 	bl	8018336 <strtok_r>
 8000f78:	6178      	str	r0, [r7, #20]
      HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	486c      	ldr	r0, [pc, #432]	; (8001130 <telnet_process_command+0x2c4>)
 8000f80:	f001 fce6 	bl	8002950 <HAL_GPIO_WritePin>
}
 8000f84:	e0c5      	b.n	8001112 <telnet_process_command+0x2a6>
    else if (strcasecmp(token, "OFF") == 0) {
 8000f86:	496f      	ldr	r1, [pc, #444]	; (8001144 <telnet_process_command+0x2d8>)
 8000f88:	6978      	ldr	r0, [r7, #20]
 8000f8a:	f017 f96d 	bl	8018268 <strcasecmp>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	f040 80be 	bne.w	8001112 <telnet_process_command+0x2a6>
      sprintf(s, "LED1 vypnout\n");
 8000f96:	4a63      	ldr	r2, [pc, #396]	; (8001124 <telnet_process_command+0x2b8>)
 8000f98:	4b6b      	ldr	r3, [pc, #428]	; (8001148 <telnet_process_command+0x2dc>)
 8000f9a:	4614      	mov	r4, r2
 8000f9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f9e:	c407      	stmia	r4!, {r0, r1, r2}
 8000fa0:	8023      	strh	r3, [r4, #0]
      netconn_write(conn, s, strlen(s), NETCONN_COPY);
 8000fa2:	4860      	ldr	r0, [pc, #384]	; (8001124 <telnet_process_command+0x2b8>)
 8000fa4:	f7ff f92e 	bl	8000204 <strlen>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	2300      	movs	r3, #0
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	2301      	movs	r3, #1
 8000fb0:	495c      	ldr	r1, [pc, #368]	; (8001124 <telnet_process_command+0x2b8>)
 8000fb2:	6838      	ldr	r0, [r7, #0]
 8000fb4:	f007 fa48 	bl	8008448 <netconn_write_partly>
      HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 0);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2101      	movs	r1, #1
 8000fbc:	485c      	ldr	r0, [pc, #368]	; (8001130 <telnet_process_command+0x2c4>)
 8000fbe:	f001 fcc7 	bl	8002950 <HAL_GPIO_WritePin>
}
 8000fc2:	e0a6      	b.n	8001112 <telnet_process_command+0x2a6>
  else if (strcasecmp(token, "LED2") == 0) {
 8000fc4:	4961      	ldr	r1, [pc, #388]	; (800114c <telnet_process_command+0x2e0>)
 8000fc6:	6978      	ldr	r0, [r7, #20]
 8000fc8:	f017 f94e 	bl	8018268 <strcasecmp>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d14b      	bne.n	800106a <telnet_process_command+0x1fe>
    token = strtok_r(NULL, " ", &saveptr);
 8000fd2:	f107 030c 	add.w	r3, r7, #12
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	4950      	ldr	r1, [pc, #320]	; (800111c <telnet_process_command+0x2b0>)
 8000fda:	2000      	movs	r0, #0
 8000fdc:	f017 f9ab 	bl	8018336 <strtok_r>
 8000fe0:	6178      	str	r0, [r7, #20]
    if (strcasecmp(token, "ON") == 0) {
 8000fe2:	4956      	ldr	r1, [pc, #344]	; (800113c <telnet_process_command+0x2d0>)
 8000fe4:	6978      	ldr	r0, [r7, #20]
 8000fe6:	f017 f93f 	bl	8018268 <strcasecmp>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d11e      	bne.n	800102e <telnet_process_command+0x1c2>
      sprintf(s, "LED2 zapnout\n");
 8000ff0:	4a4c      	ldr	r2, [pc, #304]	; (8001124 <telnet_process_command+0x2b8>)
 8000ff2:	4b57      	ldr	r3, [pc, #348]	; (8001150 <telnet_process_command+0x2e4>)
 8000ff4:	4614      	mov	r4, r2
 8000ff6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ff8:	c407      	stmia	r4!, {r0, r1, r2}
 8000ffa:	8023      	strh	r3, [r4, #0]
      netconn_write(conn, s, strlen(s), NETCONN_COPY);
 8000ffc:	4849      	ldr	r0, [pc, #292]	; (8001124 <telnet_process_command+0x2b8>)
 8000ffe:	f7ff f901 	bl	8000204 <strlen>
 8001002:	4602      	mov	r2, r0
 8001004:	2300      	movs	r3, #0
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	2301      	movs	r3, #1
 800100a:	4946      	ldr	r1, [pc, #280]	; (8001124 <telnet_process_command+0x2b8>)
 800100c:	6838      	ldr	r0, [r7, #0]
 800100e:	f007 fa1b 	bl	8008448 <netconn_write_partly>
      token = strtok_r(NULL, " ", &saveptr);
 8001012:	f107 030c 	add.w	r3, r7, #12
 8001016:	461a      	mov	r2, r3
 8001018:	4940      	ldr	r1, [pc, #256]	; (800111c <telnet_process_command+0x2b0>)
 800101a:	2000      	movs	r0, #0
 800101c:	f017 f98b 	bl	8018336 <strtok_r>
 8001020:	6178      	str	r0, [r7, #20]
      HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8001022:	2201      	movs	r2, #1
 8001024:	2180      	movs	r1, #128	; 0x80
 8001026:	4842      	ldr	r0, [pc, #264]	; (8001130 <telnet_process_command+0x2c4>)
 8001028:	f001 fc92 	bl	8002950 <HAL_GPIO_WritePin>
}
 800102c:	e071      	b.n	8001112 <telnet_process_command+0x2a6>
    else if (strcasecmp(token, "OFF") == 0) {
 800102e:	4945      	ldr	r1, [pc, #276]	; (8001144 <telnet_process_command+0x2d8>)
 8001030:	6978      	ldr	r0, [r7, #20]
 8001032:	f017 f919 	bl	8018268 <strcasecmp>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d16a      	bne.n	8001112 <telnet_process_command+0x2a6>
      sprintf(s, "LED2 vypnout\n");
 800103c:	4a39      	ldr	r2, [pc, #228]	; (8001124 <telnet_process_command+0x2b8>)
 800103e:	4b45      	ldr	r3, [pc, #276]	; (8001154 <telnet_process_command+0x2e8>)
 8001040:	4614      	mov	r4, r2
 8001042:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001044:	c407      	stmia	r4!, {r0, r1, r2}
 8001046:	8023      	strh	r3, [r4, #0]
      netconn_write(conn, s, strlen(s), NETCONN_COPY);
 8001048:	4836      	ldr	r0, [pc, #216]	; (8001124 <telnet_process_command+0x2b8>)
 800104a:	f7ff f8db 	bl	8000204 <strlen>
 800104e:	4602      	mov	r2, r0
 8001050:	2300      	movs	r3, #0
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	2301      	movs	r3, #1
 8001056:	4933      	ldr	r1, [pc, #204]	; (8001124 <telnet_process_command+0x2b8>)
 8001058:	6838      	ldr	r0, [r7, #0]
 800105a:	f007 f9f5 	bl	8008448 <netconn_write_partly>
      HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	2180      	movs	r1, #128	; 0x80
 8001062:	4833      	ldr	r0, [pc, #204]	; (8001130 <telnet_process_command+0x2c4>)
 8001064:	f001 fc74 	bl	8002950 <HAL_GPIO_WritePin>
}
 8001068:	e053      	b.n	8001112 <telnet_process_command+0x2a6>
    else if (strcasecmp(token, "LED3") == 0) {
 800106a:	493b      	ldr	r1, [pc, #236]	; (8001158 <telnet_process_command+0x2ec>)
 800106c:	6978      	ldr	r0, [r7, #20]
 800106e:	f017 f8fb 	bl	8018268 <strcasecmp>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d14c      	bne.n	8001112 <telnet_process_command+0x2a6>
    token = strtok_r(NULL, " ", &saveptr);
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	461a      	mov	r2, r3
 800107e:	4927      	ldr	r1, [pc, #156]	; (800111c <telnet_process_command+0x2b0>)
 8001080:	2000      	movs	r0, #0
 8001082:	f017 f958 	bl	8018336 <strtok_r>
 8001086:	6178      	str	r0, [r7, #20]
    if (strcasecmp(token, "ON") == 0) {
 8001088:	492c      	ldr	r1, [pc, #176]	; (800113c <telnet_process_command+0x2d0>)
 800108a:	6978      	ldr	r0, [r7, #20]
 800108c:	f017 f8ec 	bl	8018268 <strcasecmp>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d11f      	bne.n	80010d6 <telnet_process_command+0x26a>
      sprintf(s, "LED3 zapnout\n");
 8001096:	4a23      	ldr	r2, [pc, #140]	; (8001124 <telnet_process_command+0x2b8>)
 8001098:	4b30      	ldr	r3, [pc, #192]	; (800115c <telnet_process_command+0x2f0>)
 800109a:	4614      	mov	r4, r2
 800109c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800109e:	c407      	stmia	r4!, {r0, r1, r2}
 80010a0:	8023      	strh	r3, [r4, #0]
      netconn_write(conn, s, strlen(s), NETCONN_COPY);
 80010a2:	4820      	ldr	r0, [pc, #128]	; (8001124 <telnet_process_command+0x2b8>)
 80010a4:	f7ff f8ae 	bl	8000204 <strlen>
 80010a8:	4602      	mov	r2, r0
 80010aa:	2300      	movs	r3, #0
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	2301      	movs	r3, #1
 80010b0:	491c      	ldr	r1, [pc, #112]	; (8001124 <telnet_process_command+0x2b8>)
 80010b2:	6838      	ldr	r0, [r7, #0]
 80010b4:	f007 f9c8 	bl	8008448 <netconn_write_partly>
      token = strtok_r(NULL, " ", &saveptr);
 80010b8:	f107 030c 	add.w	r3, r7, #12
 80010bc:	461a      	mov	r2, r3
 80010be:	4917      	ldr	r1, [pc, #92]	; (800111c <telnet_process_command+0x2b0>)
 80010c0:	2000      	movs	r0, #0
 80010c2:	f017 f938 	bl	8018336 <strtok_r>
 80010c6:	6178      	str	r0, [r7, #20]
      HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80010c8:	2201      	movs	r2, #1
 80010ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010ce:	4818      	ldr	r0, [pc, #96]	; (8001130 <telnet_process_command+0x2c4>)
 80010d0:	f001 fc3e 	bl	8002950 <HAL_GPIO_WritePin>
}
 80010d4:	e01d      	b.n	8001112 <telnet_process_command+0x2a6>
    else if (strcasecmp(token, "OFF") == 0) {
 80010d6:	491b      	ldr	r1, [pc, #108]	; (8001144 <telnet_process_command+0x2d8>)
 80010d8:	6978      	ldr	r0, [r7, #20]
 80010da:	f017 f8c5 	bl	8018268 <strcasecmp>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d116      	bne.n	8001112 <telnet_process_command+0x2a6>
      sprintf(s, "LED3 vypnout\n");
 80010e4:	4a0f      	ldr	r2, [pc, #60]	; (8001124 <telnet_process_command+0x2b8>)
 80010e6:	4b1e      	ldr	r3, [pc, #120]	; (8001160 <telnet_process_command+0x2f4>)
 80010e8:	4614      	mov	r4, r2
 80010ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010ec:	c407      	stmia	r4!, {r0, r1, r2}
 80010ee:	8023      	strh	r3, [r4, #0]
      netconn_write(conn, s, strlen(s), NETCONN_COPY);
 80010f0:	480c      	ldr	r0, [pc, #48]	; (8001124 <telnet_process_command+0x2b8>)
 80010f2:	f7ff f887 	bl	8000204 <strlen>
 80010f6:	4602      	mov	r2, r0
 80010f8:	2300      	movs	r3, #0
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	2301      	movs	r3, #1
 80010fe:	4909      	ldr	r1, [pc, #36]	; (8001124 <telnet_process_command+0x2b8>)
 8001100:	6838      	ldr	r0, [r7, #0]
 8001102:	f007 f9a1 	bl	8008448 <netconn_write_partly>
      HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8001106:	2200      	movs	r2, #0
 8001108:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800110c:	4808      	ldr	r0, [pc, #32]	; (8001130 <telnet_process_command+0x2c4>)
 800110e:	f001 fc1f 	bl	8002950 <HAL_GPIO_WritePin>
}
 8001112:	bf00      	nop
 8001114:	371c      	adds	r7, #28
 8001116:	46bd      	mov	sp, r7
 8001118:	bd90      	pop	{r4, r7, pc}
 800111a:	bf00      	nop
 800111c:	08019450 	.word	0x08019450
 8001120:	08019454 	.word	0x08019454
 8001124:	20000464 	.word	0x20000464
 8001128:	0801945c 	.word	0x0801945c
 800112c:	0801946c 	.word	0x0801946c
 8001130:	40020400 	.word	0x40020400
 8001134:	08019474 	.word	0x08019474
 8001138:	08019498 	.word	0x08019498
 800113c:	080194a0 	.word	0x080194a0
 8001140:	080194a4 	.word	0x080194a4
 8001144:	080194b4 	.word	0x080194b4
 8001148:	080194b8 	.word	0x080194b8
 800114c:	080194c8 	.word	0x080194c8
 8001150:	080194d0 	.word	0x080194d0
 8001154:	080194e0 	.word	0x080194e0
 8001158:	080194f0 	.word	0x080194f0
 800115c:	080194f8 	.word	0x080194f8
 8001160:	08019508 	.word	0x08019508

08001164 <telnet_byte_available>:

static void telnet_byte_available(uint8_t c, struct netconn *conn) 
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	6039      	str	r1, [r7, #0]
 800116e:	71fb      	strb	r3, [r7, #7]
	static uint16_t cnt;
	static char data[CMD_BUFFER_LEN];

	if (cnt < CMD_BUFFER_LEN && c >= 32 && c <= 127) data[cnt++] = c;
 8001170:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <telnet_byte_available+0x64>)
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	2bfe      	cmp	r3, #254	; 0xfe
 8001176:	d810      	bhi.n	800119a <telnet_byte_available+0x36>
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	2b1f      	cmp	r3, #31
 800117c:	d90d      	bls.n	800119a <telnet_byte_available+0x36>
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	2b00      	cmp	r3, #0
 8001184:	db09      	blt.n	800119a <telnet_byte_available+0x36>
 8001186:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <telnet_byte_available+0x64>)
 8001188:	881b      	ldrh	r3, [r3, #0]
 800118a:	1c5a      	adds	r2, r3, #1
 800118c:	b291      	uxth	r1, r2
 800118e:	4a0e      	ldr	r2, [pc, #56]	; (80011c8 <telnet_byte_available+0x64>)
 8001190:	8011      	strh	r1, [r2, #0]
 8001192:	4619      	mov	r1, r3
 8001194:	4a0d      	ldr	r2, [pc, #52]	; (80011cc <telnet_byte_available+0x68>)
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	5453      	strb	r3, [r2, r1]
	if (c == '\n' || c == '\r')
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	2b0a      	cmp	r3, #10
 800119e:	d002      	beq.n	80011a6 <telnet_byte_available+0x42>
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	2b0d      	cmp	r3, #13
 80011a4:	d10c      	bne.n	80011c0 <telnet_byte_available+0x5c>
	{
		data[cnt] = '\0';
 80011a6:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <telnet_byte_available+0x64>)
 80011a8:	881b      	ldrh	r3, [r3, #0]
 80011aa:	461a      	mov	r2, r3
 80011ac:	4b07      	ldr	r3, [pc, #28]	; (80011cc <telnet_byte_available+0x68>)
 80011ae:	2100      	movs	r1, #0
 80011b0:	5499      	strb	r1, [r3, r2]
		telnet_process_command(data, conn);
 80011b2:	6839      	ldr	r1, [r7, #0]
 80011b4:	4805      	ldr	r0, [pc, #20]	; (80011cc <telnet_byte_available+0x68>)
 80011b6:	f7ff fe59 	bl	8000e6c <telnet_process_command>
		cnt = 0;
 80011ba:	4b03      	ldr	r3, [pc, #12]	; (80011c8 <telnet_byte_available+0x64>)
 80011bc:	2200      	movs	r2, #0
 80011be:	801a      	strh	r2, [r3, #0]
	}
}
 80011c0:	bf00      	nop
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000564 	.word	0x20000564
 80011cc:	20000568 	.word	0x20000568

080011d0 <telnet_thread>:

/*-----------------------------------------------------------------------------------*/
static void telnet_thread(void *arg)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b088      	sub	sp, #32
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  u16_t len;
      
  LWIP_UNUSED_ARG(arg);

  /* Create a new connection identifier. */
  conn = netconn_new(NETCONN_TCP);
 80011d8:	2200      	movs	r2, #0
 80011da:	2100      	movs	r1, #0
 80011dc:	2010      	movs	r0, #16
 80011de:	f006 fd93 	bl	8007d08 <netconn_new_with_proto_and_callback>
 80011e2:	61f8      	str	r0, [r7, #28]
  
  if (conn!=NULL)
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d055      	beq.n	8001296 <telnet_thread+0xc6>
  {  
    /* Bind connection to well known port number 23. */
    err = netconn_bind(conn, NULL, 23);
 80011ea:	2217      	movs	r2, #23
 80011ec:	2100      	movs	r1, #0
 80011ee:	69f8      	ldr	r0, [r7, #28]
 80011f0:	f006 fe44 	bl	8007e7c <netconn_bind>
 80011f4:	4603      	mov	r3, r0
 80011f6:	76fb      	strb	r3, [r7, #27]
    
    if (err == ERR_OK)
 80011f8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d146      	bne.n	800128e <telnet_thread+0xbe>
    {
      /* Tell connection to go into listening mode. */
      netconn_listen(conn);
 8001200:	21ff      	movs	r1, #255	; 0xff
 8001202:	69f8      	ldr	r0, [r7, #28]
 8001204:	f006 fe72 	bl	8007eec <netconn_listen_with_backlog>
    
      while (1) 
      {
        /* Grab new connection. */
         accept_err = netconn_accept(conn, &newconn);
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	4619      	mov	r1, r3
 800120e:	69f8      	ldr	r0, [r7, #28]
 8001210:	f006 fe98 	bl	8007f44 <netconn_accept>
 8001214:	4603      	mov	r3, r0
 8001216:	76bb      	strb	r3, [r7, #26]
    
        /* Process the new connection. */
        if (accept_err == ERR_OK) 
 8001218:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d1f3      	bne.n	8001208 <telnet_thread+0x38>
        {

          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8001220:	e022      	b.n	8001268 <telnet_thread+0x98>
          {
            do 
            {
              netbuf_data(buf, &data, &len);
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	f107 020a 	add.w	r2, r7, #10
 8001228:	f107 010c 	add.w	r1, r7, #12
 800122c:	4618      	mov	r0, r3
 800122e:	f008 fe25 	bl	8009e7c <netbuf_data>
              while (len--) telnet_byte_available((uintptr_t)data++, newconn);
 8001232:	e008      	b.n	8001246 <telnet_thread+0x76>
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	1c5a      	adds	r2, r3, #1
 8001238:	60fa      	str	r2, [r7, #12]
 800123a:	b2db      	uxtb	r3, r3
 800123c:	697a      	ldr	r2, [r7, #20]
 800123e:	4611      	mov	r1, r2
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff ff8f 	bl	8001164 <telnet_byte_available>
 8001246:	897b      	ldrh	r3, [r7, #10]
 8001248:	1e5a      	subs	r2, r3, #1
 800124a:	b292      	uxth	r2, r2
 800124c:	817a      	strh	r2, [r7, #10]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1f0      	bne.n	8001234 <telnet_thread+0x64>
              // netconn_write(newconn, data, len, NETCONN_COPY);
          
            } 
            while (netbuf_next(buf) >= 0);
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	4618      	mov	r0, r3
 8001256:	f008 fe5b 	bl	8009f10 <netbuf_next>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	dae0      	bge.n	8001222 <telnet_thread+0x52>
          
            netbuf_delete(buf);
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	4618      	mov	r0, r3
 8001264:	f008 fdea 	bl	8009e3c <netbuf_delete>
          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	f107 0210 	add.w	r2, r7, #16
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f007 f86f 	bl	8008354 <netconn_recv>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d0d2      	beq.n	8001222 <telnet_thread+0x52>
          }
        
          /* Close connection and discard connection identifier. */
          netconn_close(newconn);
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	4618      	mov	r0, r3
 8001280:	f007 f9e4 	bl	800864c <netconn_close>
          netconn_delete(newconn);
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	4618      	mov	r0, r3
 8001288:	f006 fddc 	bl	8007e44 <netconn_delete>
         accept_err = netconn_accept(conn, &newconn);
 800128c:	e7bc      	b.n	8001208 <telnet_thread+0x38>
        }
      }
    }
    else
    {
      netconn_delete(newconn);
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	4618      	mov	r0, r3
 8001292:	f006 fdd7 	bl	8007e44 <netconn_delete>
    }
  }
}
 8001296:	bf00      	nop
 8001298:	3720      	adds	r7, #32
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <telnet_init>:
/*-----------------------------------------------------------------------------------*/

void telnet_init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af02      	add	r7, sp, #8
  sys_thread_new("telnet_thread", telnet_thread, NULL, DEFAULT_THREAD_STACKSIZE, TELNET_THREAD_PRIO);
 80012a6:	2304      	movs	r3, #4
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012ae:	2200      	movs	r2, #0
 80012b0:	4903      	ldr	r1, [pc, #12]	; (80012c0 <telnet_init+0x20>)
 80012b2:	4804      	ldr	r0, [pc, #16]	; (80012c4 <telnet_init+0x24>)
 80012b4:	f016 fea8 	bl	8018008 <sys_thread_new>
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	080011d1 	.word	0x080011d1
 80012c4:	08019518 	.word	0x08019518

080012c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80012c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001300 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80012cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80012ce:	e003      	b.n	80012d8 <LoopCopyDataInit>

080012d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80012d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80012d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80012d6:	3104      	adds	r1, #4

080012d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80012d8:	480b      	ldr	r0, [pc, #44]	; (8001308 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80012da:	4b0c      	ldr	r3, [pc, #48]	; (800130c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80012dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80012de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80012e0:	d3f6      	bcc.n	80012d0 <CopyDataInit>
  ldr  r2, =_sbss
 80012e2:	4a0b      	ldr	r2, [pc, #44]	; (8001310 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80012e4:	e002      	b.n	80012ec <LoopFillZerobss>

080012e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80012e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80012e8:	f842 3b04 	str.w	r3, [r2], #4

080012ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80012ec:	4b09      	ldr	r3, [pc, #36]	; (8001314 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80012ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80012f0:	d3f9      	bcc.n	80012e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012f2:	f7ff fd31 	bl	8000d58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012f6:	f016 fecb 	bl	8018090 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012fa:	f7ff f97b 	bl	80005f4 <main>
  bx  lr    
 80012fe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001300:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001304:	08028748 	.word	0x08028748
  ldr  r0, =_sdata
 8001308:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800130c:	200001f0 	.word	0x200001f0
  ldr  r2, =_sbss
 8001310:	200001f0 	.word	0x200001f0
  ldr  r3, = _ebss
 8001314:	2000fb24 	.word	0x2000fb24

08001318 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001318:	e7fe      	b.n	8001318 <ADC_IRQHandler>
	...

0800131c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001320:	4b0e      	ldr	r3, [pc, #56]	; (800135c <HAL_Init+0x40>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a0d      	ldr	r2, [pc, #52]	; (800135c <HAL_Init+0x40>)
 8001326:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800132a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800132c:	4b0b      	ldr	r3, [pc, #44]	; (800135c <HAL_Init+0x40>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a0a      	ldr	r2, [pc, #40]	; (800135c <HAL_Init+0x40>)
 8001332:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001336:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001338:	4b08      	ldr	r3, [pc, #32]	; (800135c <HAL_Init+0x40>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a07      	ldr	r2, [pc, #28]	; (800135c <HAL_Init+0x40>)
 800133e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001342:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001344:	2003      	movs	r0, #3
 8001346:	f000 f8fa 	bl	800153e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800134a:	2000      	movs	r0, #0
 800134c:	f7ff fbe0 	bl	8000b10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001350:	f7ff fb10 	bl	8000974 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40023c00 	.word	0x40023c00

08001360 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001364:	4b06      	ldr	r3, [pc, #24]	; (8001380 <HAL_IncTick+0x20>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	461a      	mov	r2, r3
 800136a:	4b06      	ldr	r3, [pc, #24]	; (8001384 <HAL_IncTick+0x24>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4413      	add	r3, r2
 8001370:	4a04      	ldr	r2, [pc, #16]	; (8001384 <HAL_IncTick+0x24>)
 8001372:	6013      	str	r3, [r2, #0]
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	20000008 	.word	0x20000008
 8001384:	20009234 	.word	0x20009234

08001388 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  return uwTick;
 800138c:	4b03      	ldr	r3, [pc, #12]	; (800139c <HAL_GetTick+0x14>)
 800138e:	681b      	ldr	r3, [r3, #0]
}
 8001390:	4618      	mov	r0, r3
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	20009234 	.word	0x20009234

080013a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013a8:	f7ff ffee 	bl	8001388 <HAL_GetTick>
 80013ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013b8:	d005      	beq.n	80013c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ba:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <HAL_Delay+0x40>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	461a      	mov	r2, r3
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	4413      	add	r3, r2
 80013c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013c6:	bf00      	nop
 80013c8:	f7ff ffde 	bl	8001388 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	68fa      	ldr	r2, [r7, #12]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d8f7      	bhi.n	80013c8 <HAL_Delay+0x28>
  {
  }
}
 80013d8:	bf00      	nop
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20000008 	.word	0x20000008

080013e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f003 0307 	and.w	r3, r3, #7
 80013f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013f4:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <__NVIC_SetPriorityGrouping+0x44>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013fa:	68ba      	ldr	r2, [r7, #8]
 80013fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001400:	4013      	ands	r3, r2
 8001402:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800140c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001414:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001416:	4a04      	ldr	r2, [pc, #16]	; (8001428 <__NVIC_SetPriorityGrouping+0x44>)
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	60d3      	str	r3, [r2, #12]
}
 800141c:	bf00      	nop
 800141e:	3714      	adds	r7, #20
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001430:	4b04      	ldr	r3, [pc, #16]	; (8001444 <__NVIC_GetPriorityGrouping+0x18>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	0a1b      	lsrs	r3, r3, #8
 8001436:	f003 0307 	and.w	r3, r3, #7
}
 800143a:	4618      	mov	r0, r3
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001456:	2b00      	cmp	r3, #0
 8001458:	db0b      	blt.n	8001472 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	f003 021f 	and.w	r2, r3, #31
 8001460:	4907      	ldr	r1, [pc, #28]	; (8001480 <__NVIC_EnableIRQ+0x38>)
 8001462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001466:	095b      	lsrs	r3, r3, #5
 8001468:	2001      	movs	r0, #1
 800146a:	fa00 f202 	lsl.w	r2, r0, r2
 800146e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	e000e100 	.word	0xe000e100

08001484 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	6039      	str	r1, [r7, #0]
 800148e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001494:	2b00      	cmp	r3, #0
 8001496:	db0a      	blt.n	80014ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	b2da      	uxtb	r2, r3
 800149c:	490c      	ldr	r1, [pc, #48]	; (80014d0 <__NVIC_SetPriority+0x4c>)
 800149e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a2:	0112      	lsls	r2, r2, #4
 80014a4:	b2d2      	uxtb	r2, r2
 80014a6:	440b      	add	r3, r1
 80014a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014ac:	e00a      	b.n	80014c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	4908      	ldr	r1, [pc, #32]	; (80014d4 <__NVIC_SetPriority+0x50>)
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	f003 030f 	and.w	r3, r3, #15
 80014ba:	3b04      	subs	r3, #4
 80014bc:	0112      	lsls	r2, r2, #4
 80014be:	b2d2      	uxtb	r2, r2
 80014c0:	440b      	add	r3, r1
 80014c2:	761a      	strb	r2, [r3, #24]
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	e000e100 	.word	0xe000e100
 80014d4:	e000ed00 	.word	0xe000ed00

080014d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d8:	b480      	push	{r7}
 80014da:	b089      	sub	sp, #36	; 0x24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	f1c3 0307 	rsb	r3, r3, #7
 80014f2:	2b04      	cmp	r3, #4
 80014f4:	bf28      	it	cs
 80014f6:	2304      	movcs	r3, #4
 80014f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	3304      	adds	r3, #4
 80014fe:	2b06      	cmp	r3, #6
 8001500:	d902      	bls.n	8001508 <NVIC_EncodePriority+0x30>
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	3b03      	subs	r3, #3
 8001506:	e000      	b.n	800150a <NVIC_EncodePriority+0x32>
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800150c:	f04f 32ff 	mov.w	r2, #4294967295
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	43da      	mvns	r2, r3
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	401a      	ands	r2, r3
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001520:	f04f 31ff 	mov.w	r1, #4294967295
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	fa01 f303 	lsl.w	r3, r1, r3
 800152a:	43d9      	mvns	r1, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001530:	4313      	orrs	r3, r2
         );
}
 8001532:	4618      	mov	r0, r3
 8001534:	3724      	adds	r7, #36	; 0x24
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr

0800153e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b082      	sub	sp, #8
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f7ff ff4c 	bl	80013e4 <__NVIC_SetPriorityGrouping>
}
 800154c:	bf00      	nop
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
 8001560:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001566:	f7ff ff61 	bl	800142c <__NVIC_GetPriorityGrouping>
 800156a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	68b9      	ldr	r1, [r7, #8]
 8001570:	6978      	ldr	r0, [r7, #20]
 8001572:	f7ff ffb1 	bl	80014d8 <NVIC_EncodePriority>
 8001576:	4602      	mov	r2, r0
 8001578:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800157c:	4611      	mov	r1, r2
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff ff80 	bl	8001484 <__NVIC_SetPriority>
}
 8001584:	bf00      	nop
 8001586:	3718      	adds	r7, #24
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff ff54 	bl	8001448 <__NVIC_EnableIRQ>
}
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b088      	sub	sp, #32
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80015b0:	2300      	movs	r3, #0
 80015b2:	61fb      	str	r3, [r7, #28]
 80015b4:	2300      	movs	r3, #0
 80015b6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80015b8:	4baa      	ldr	r3, [pc, #680]	; (8001864 <HAL_ETH_Init+0x2bc>)
 80015ba:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80015c0:	2300      	movs	r3, #0
 80015c2:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d101      	bne.n	80015ce <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e185      	b.n	80018da <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d106      	bne.n	80015e8 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f003 f876 	bl	80046d4 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e8:	2300      	movs	r3, #0
 80015ea:	60bb      	str	r3, [r7, #8]
 80015ec:	4b9e      	ldr	r3, [pc, #632]	; (8001868 <HAL_ETH_Init+0x2c0>)
 80015ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f0:	4a9d      	ldr	r2, [pc, #628]	; (8001868 <HAL_ETH_Init+0x2c0>)
 80015f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015f6:	6453      	str	r3, [r2, #68]	; 0x44
 80015f8:	4b9b      	ldr	r3, [pc, #620]	; (8001868 <HAL_ETH_Init+0x2c0>)
 80015fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001600:	60bb      	str	r3, [r7, #8]
 8001602:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001604:	4b99      	ldr	r3, [pc, #612]	; (800186c <HAL_ETH_Init+0x2c4>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	4a98      	ldr	r2, [pc, #608]	; (800186c <HAL_ETH_Init+0x2c4>)
 800160a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800160e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001610:	4b96      	ldr	r3, [pc, #600]	; (800186c <HAL_ETH_Init+0x2c4>)
 8001612:	685a      	ldr	r2, [r3, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a1b      	ldr	r3, [r3, #32]
 8001618:	4994      	ldr	r1, [pc, #592]	; (800186c <HAL_ETH_Init+0x2c4>)
 800161a:	4313      	orrs	r3, r2
 800161c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f042 0201 	orr.w	r2, r2, #1
 8001630:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001634:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001636:	f7ff fea7 	bl	8001388 <HAL_GetTick>
 800163a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800163c:	e011      	b.n	8001662 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800163e:	f7ff fea3 	bl	8001388 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800164c:	d909      	bls.n	8001662 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2203      	movs	r2, #3
 8001652:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e13b      	b.n	80018da <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1e4      	bne.n	800163e <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	f023 031c 	bic.w	r3, r3, #28
 8001682:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001684:	f001 fec8 	bl	8003418 <HAL_RCC_GetHCLKFreq>
 8001688:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	4a78      	ldr	r2, [pc, #480]	; (8001870 <HAL_ETH_Init+0x2c8>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d908      	bls.n	80016a4 <HAL_ETH_Init+0xfc>
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	4a77      	ldr	r2, [pc, #476]	; (8001874 <HAL_ETH_Init+0x2cc>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d804      	bhi.n	80016a4 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	f043 0308 	orr.w	r3, r3, #8
 80016a0:	61fb      	str	r3, [r7, #28]
 80016a2:	e027      	b.n	80016f4 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	4a73      	ldr	r2, [pc, #460]	; (8001874 <HAL_ETH_Init+0x2cc>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d908      	bls.n	80016be <HAL_ETH_Init+0x116>
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	4a72      	ldr	r2, [pc, #456]	; (8001878 <HAL_ETH_Init+0x2d0>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d804      	bhi.n	80016be <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	f043 030c 	orr.w	r3, r3, #12
 80016ba:	61fb      	str	r3, [r7, #28]
 80016bc:	e01a      	b.n	80016f4 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	4a6d      	ldr	r2, [pc, #436]	; (8001878 <HAL_ETH_Init+0x2d0>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d903      	bls.n	80016ce <HAL_ETH_Init+0x126>
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	4a6c      	ldr	r2, [pc, #432]	; (800187c <HAL_ETH_Init+0x2d4>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d911      	bls.n	80016f2 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	4a6a      	ldr	r2, [pc, #424]	; (800187c <HAL_ETH_Init+0x2d4>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d908      	bls.n	80016e8 <HAL_ETH_Init+0x140>
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	4a69      	ldr	r2, [pc, #420]	; (8001880 <HAL_ETH_Init+0x2d8>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d804      	bhi.n	80016e8 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	f043 0304 	orr.w	r3, r3, #4
 80016e4:	61fb      	str	r3, [r7, #28]
 80016e6:	e005      	b.n	80016f4 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	f043 0310 	orr.w	r3, r3, #16
 80016ee:	61fb      	str	r3, [r7, #28]
 80016f0:	e000      	b.n	80016f4 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80016f2:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	69fa      	ldr	r2, [r7, #28]
 80016fa:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80016fc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001700:	2100      	movs	r1, #0
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f000 fc19 	bl	8001f3a <HAL_ETH_WritePHYRegister>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d00b      	beq.n	8001726 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001712:	6939      	ldr	r1, [r7, #16]
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f000 fca5 	bl	8002064 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2201      	movs	r2, #1
 800171e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e0d9      	b.n	80018da <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001726:	20ff      	movs	r0, #255	; 0xff
 8001728:	f7ff fe3a 	bl	80013a0 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	2b00      	cmp	r3, #0
 8001732:	f000 80a7 	beq.w	8001884 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001736:	f7ff fe27 	bl	8001388 <HAL_GetTick>
 800173a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800173c:	f107 030c 	add.w	r3, r7, #12
 8001740:	461a      	mov	r2, r3
 8001742:	2101      	movs	r1, #1
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f000 fb90 	bl	8001e6a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800174a:	f7ff fe1d 	bl	8001388 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	f241 3288 	movw	r2, #5000	; 0x1388
 8001758:	4293      	cmp	r3, r2
 800175a:	d90f      	bls.n	800177c <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001760:	6939      	ldr	r1, [r7, #16]
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f000 fc7e 	bl	8002064 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2201      	movs	r2, #1
 800176c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e0ae      	b.n	80018da <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f003 0304 	and.w	r3, r3, #4
 8001782:	2b00      	cmp	r3, #0
 8001784:	d0da      	beq.n	800173c <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001786:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800178a:	2100      	movs	r1, #0
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f000 fbd4 	bl	8001f3a <HAL_ETH_WritePHYRegister>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d00b      	beq.n	80017b0 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800179c:	6939      	ldr	r1, [r7, #16]
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f000 fc60 	bl	8002064 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2201      	movs	r2, #1
 80017a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80017ac:	2301      	movs	r3, #1
 80017ae:	e094      	b.n	80018da <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80017b0:	f7ff fdea 	bl	8001388 <HAL_GetTick>
 80017b4:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80017b6:	f107 030c 	add.w	r3, r7, #12
 80017ba:	461a      	mov	r2, r3
 80017bc:	2101      	movs	r1, #1
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f000 fb53 	bl	8001e6a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80017c4:	f7ff fde0 	bl	8001388 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d90f      	bls.n	80017f6 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80017da:	6939      	ldr	r1, [r7, #16]
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f000 fc41 	bl	8002064 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2201      	movs	r2, #1
 80017e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e071      	b.n	80018da <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f003 0320 	and.w	r3, r3, #32
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d0da      	beq.n	80017b6 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001800:	f107 030c 	add.w	r3, r7, #12
 8001804:	461a      	mov	r2, r3
 8001806:	211f      	movs	r1, #31
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f000 fb2e 	bl	8001e6a <HAL_ETH_ReadPHYRegister>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d00b      	beq.n	800182c <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001818:	6939      	ldr	r1, [r7, #16]
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f000 fc22 	bl	8002064 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2201      	movs	r2, #1
 8001824:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001828:	2301      	movs	r3, #1
 800182a:	e056      	b.n	80018da <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f003 0310 	and.w	r3, r3, #16
 8001832:	2b00      	cmp	r3, #0
 8001834:	d004      	beq.n	8001840 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	e002      	b.n	8001846 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f003 0304 	and.w	r3, r3, #4
 800184c:	2b00      	cmp	r3, #0
 800184e:	d003      	beq.n	8001858 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
 8001856:	e037      	b.n	80018c8 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	e032      	b.n	80018c8 <HAL_ETH_Init+0x320>
 8001862:	bf00      	nop
 8001864:	03938700 	.word	0x03938700
 8001868:	40023800 	.word	0x40023800
 800186c:	40013800 	.word	0x40013800
 8001870:	01312cff 	.word	0x01312cff
 8001874:	02160ebf 	.word	0x02160ebf
 8001878:	039386ff 	.word	0x039386ff
 800187c:	05f5e0ff 	.word	0x05f5e0ff
 8001880:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	08db      	lsrs	r3, r3, #3
 800188a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	085b      	lsrs	r3, r3, #1
 8001892:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001894:	4313      	orrs	r3, r2
 8001896:	b29b      	uxth	r3, r3
 8001898:	461a      	mov	r2, r3
 800189a:	2100      	movs	r1, #0
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f000 fb4c 	bl	8001f3a <HAL_ETH_WritePHYRegister>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d00b      	beq.n	80018c0 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80018ac:	6939      	ldr	r1, [r7, #16]
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f000 fbd8 	bl	8002064 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2201      	movs	r2, #1
 80018b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e00c      	b.n	80018da <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80018c0:	f640 70ff 	movw	r0, #4095	; 0xfff
 80018c4:	f7ff fd6c 	bl	80013a0 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80018c8:	6939      	ldr	r1, [r7, #16]
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 fbca 	bl	8002064 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2201      	movs	r2, #1
 80018d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3720      	adds	r7, #32
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop

080018e4 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b087      	sub	sp, #28
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
 80018f0:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80018f2:	2300      	movs	r3, #0
 80018f4:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d101      	bne.n	8001904 <HAL_ETH_DMATxDescListInit+0x20>
 8001900:	2302      	movs	r3, #2
 8001902:	e052      	b.n	80019aa <HAL_ETH_DMATxDescListInit+0xc6>
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2202      	movs	r2, #2
 8001910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	68ba      	ldr	r2, [r7, #8]
 8001918:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800191a:	2300      	movs	r3, #0
 800191c:	617b      	str	r3, [r7, #20]
 800191e:	e030      	b.n	8001982 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	015b      	lsls	r3, r3, #5
 8001924:	68ba      	ldr	r2, [r7, #8]
 8001926:	4413      	add	r3, r2
 8001928:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001930:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001938:	fb02 f303 	mul.w	r3, r2, r3
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	4413      	add	r3, r2
 8001940:	461a      	mov	r2, r3
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	69db      	ldr	r3, [r3, #28]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d105      	bne.n	800195a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	3b01      	subs	r3, #1
 800195e:	697a      	ldr	r2, [r7, #20]
 8001960:	429a      	cmp	r2, r3
 8001962:	d208      	bcs.n	8001976 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	3301      	adds	r3, #1
 8001968:	015b      	lsls	r3, r3, #5
 800196a:	68ba      	ldr	r2, [r7, #8]
 800196c:	4413      	add	r3, r2
 800196e:	461a      	mov	r2, r3
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	60da      	str	r2, [r3, #12]
 8001974:	e002      	b.n	800197c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001976:	68ba      	ldr	r2, [r7, #8]
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	3301      	adds	r3, #1
 8001980:	617b      	str	r3, [r7, #20]
 8001982:	697a      	ldr	r2, [r7, #20]
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	429a      	cmp	r2, r3
 8001988:	d3ca      	bcc.n	8001920 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	68ba      	ldr	r2, [r7, #8]
 8001990:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001994:	3310      	adds	r3, #16
 8001996:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2201      	movs	r2, #1
 800199c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	371c      	adds	r7, #28
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b087      	sub	sp, #28
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	60f8      	str	r0, [r7, #12]
 80019be:	60b9      	str	r1, [r7, #8]
 80019c0:	607a      	str	r2, [r7, #4]
 80019c2:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d101      	bne.n	80019d6 <HAL_ETH_DMARxDescListInit+0x20>
 80019d2:	2302      	movs	r3, #2
 80019d4:	e056      	b.n	8001a84 <HAL_ETH_DMARxDescListInit+0xce>
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2201      	movs	r2, #1
 80019da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2202      	movs	r2, #2
 80019e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	68ba      	ldr	r2, [r7, #8]
 80019ea:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]
 80019f0:	e034      	b.n	8001a5c <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	015b      	lsls	r3, r3, #5
 80019f6:	68ba      	ldr	r2, [r7, #8]
 80019f8:	4413      	add	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001a02:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001a0a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001a12:	fb02 f303 	mul.w	r3, r2, r3
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	4413      	add	r3, r2
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d105      	bne.n	8001a34 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	3b01      	subs	r3, #1
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d208      	bcs.n	8001a50 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	3301      	adds	r3, #1
 8001a42:	015b      	lsls	r3, r3, #5
 8001a44:	68ba      	ldr	r2, [r7, #8]
 8001a46:	4413      	add	r3, r2
 8001a48:	461a      	mov	r2, r3
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	e002      	b.n	8001a56 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001a50:	68ba      	ldr	r2, [r7, #8]
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	697a      	ldr	r2, [r7, #20]
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d3c6      	bcc.n	80019f2 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	68ba      	ldr	r2, [r7, #8]
 8001a6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a6e:	330c      	adds	r3, #12
 8001a70:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2201      	movs	r2, #1
 8001a76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	371c      	adds	r7, #28
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b087      	sub	sp, #28
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	617b      	str	r3, [r7, #20]
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d101      	bne.n	8001ab4 <HAL_ETH_TransmitFrame+0x24>
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	e0cd      	b.n	8001c50 <HAL_ETH_TransmitFrame+0x1c0>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2202      	movs	r2, #2
 8001ac0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d109      	bne.n	8001ade <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2201      	movs	r2, #1
 8001ace:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001ada:	2301      	movs	r3, #1
 8001adc:	e0b8      	b.n	8001c50 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	da09      	bge.n	8001afc <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2212      	movs	r2, #18
 8001aec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e0a9      	b.n	8001c50 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d915      	bls.n	8001b32 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	4a54      	ldr	r2, [pc, #336]	; (8001c5c <HAL_ETH_TransmitFrame+0x1cc>)
 8001b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b0e:	0a9b      	lsrs	r3, r3, #10
 8001b10:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	4b51      	ldr	r3, [pc, #324]	; (8001c5c <HAL_ETH_TransmitFrame+0x1cc>)
 8001b16:	fba3 1302 	umull	r1, r3, r3, r2
 8001b1a:	0a9b      	lsrs	r3, r3, #10
 8001b1c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001b20:	fb01 f303 	mul.w	r3, r1, r3
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d005      	beq.n	8001b36 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	617b      	str	r3, [r7, #20]
 8001b30:	e001      	b.n	8001b36 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8001b32:	2301      	movs	r3, #1
 8001b34:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d11c      	bne.n	8001b76 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b46:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001b4a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001b56:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b62:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001b66:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b74:	e04b      	b.n	8001c0e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8001b76:	2300      	movs	r3, #0
 8001b78:	613b      	str	r3, [r7, #16]
 8001b7a:	e044      	b.n	8001c06 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b86:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b8a:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d107      	bne.n	8001ba2 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ba0:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001baa:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d116      	bne.n	8001be4 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001bc4:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	4a25      	ldr	r2, [pc, #148]	; (8001c60 <HAL_ETH_TransmitFrame+0x1d0>)
 8001bca:	fb02 f203 	mul.w	r2, r2, r3
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001bd6:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bdc:	68fa      	ldr	r2, [r7, #12]
 8001bde:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001be2:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bee:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001bf2:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	3301      	adds	r3, #1
 8001c04:	613b      	str	r3, [r7, #16]
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d3b6      	bcc.n	8001b7c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c16:	3314      	adds	r3, #20
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0304 	and.w	r3, r3, #4
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d00d      	beq.n	8001c3e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c2a:	3314      	adds	r3, #20
 8001c2c:	2204      	movs	r2, #4
 8001c2e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c38:	3304      	adds	r3, #4
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	371c      	adds	r7, #28
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	ac02b00b 	.word	0xac02b00b
 8001c60:	fffffa0c 	.word	0xfffffa0c

08001c64 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d101      	bne.n	8001c7e <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	e074      	b.n	8001d68 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2201      	movs	r2, #1
 8001c82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2202      	movs	r2, #2
 8001c8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001c8e:	e05a      	b.n	8001d46 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	3301      	adds	r3, #1
 8001c94:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ca4:	d10d      	bne.n	8001cc2 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	461a      	mov	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	629a      	str	r2, [r3, #40]	; 0x28
 8001cc0:	e041      	b.n	8001d46 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d10b      	bne.n	8001ce8 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd4:	1c5a      	adds	r2, r3, #1
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	629a      	str	r2, [r3, #40]	; 0x28
 8001ce6:	e02e      	b.n	8001d46 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cf4:	1c5a      	adds	r2, r3, #1
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d103      	bne.n	8001d0a <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	0c1b      	lsrs	r3, r3, #16
 8001d12:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001d16:	1f1a      	subs	r2, r3, #4
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d20:	689a      	ldr	r2, [r3, #8]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2201      	movs	r2, #1
 8001d36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8001d42:	2300      	movs	r3, #0
 8001d44:	e010      	b.n	8001d68 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	db02      	blt.n	8001d56 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2b03      	cmp	r3, #3
 8001d54:	d99c      	bls.n	8001c90 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3714      	adds	r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d84:	3314      	adds	r3, #20
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d8c:	2b40      	cmp	r3, #64	; 0x40
 8001d8e:	d112      	bne.n	8001db6 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f002 fd6d 	bl	8004870 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d9e:	3314      	adds	r3, #20
 8001da0:	2240      	movs	r2, #64	; 0x40
 8001da2:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001db4:	e01b      	b.n	8001dee <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dbe:	3314      	adds	r3, #20
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d111      	bne.n	8001dee <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f839 	bl	8001e42 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dd8:	3314      	adds	r3, #20
 8001dda:	2201      	movs	r2, #1
 8001ddc:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001df6:	3314      	adds	r3, #20
 8001df8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001dfc:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e06:	3314      	adds	r3, #20
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e12:	d112      	bne.n	8001e3a <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 f81e 	bl	8001e56 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e22:	3314      	adds	r3, #20
 8001e24:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e28:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001e3a:	bf00      	nop
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001e42:	b480      	push	{r7}
 8001e44:	b083      	sub	sp, #12
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001e5e:	bf00      	nop
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b086      	sub	sp, #24
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	60f8      	str	r0, [r7, #12]
 8001e72:	460b      	mov	r3, r1
 8001e74:	607a      	str	r2, [r7, #4]
 8001e76:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001e78:	2300      	movs	r3, #0
 8001e7a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b82      	cmp	r3, #130	; 0x82
 8001e8a:	d101      	bne.n	8001e90 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	e050      	b.n	8001f32 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2282      	movs	r2, #130	; 0x82
 8001e94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	f003 031c 	and.w	r3, r3, #28
 8001ea6:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	8a1b      	ldrh	r3, [r3, #16]
 8001eac:	02db      	lsls	r3, r3, #11
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	697a      	ldr	r2, [r7, #20]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001eb6:	897b      	ldrh	r3, [r7, #10]
 8001eb8:	019b      	lsls	r3, r3, #6
 8001eba:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001ebe:	697a      	ldr	r2, [r7, #20]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	f023 0302 	bic.w	r3, r3, #2
 8001eca:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	f043 0301 	orr.w	r3, r3, #1
 8001ed2:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	697a      	ldr	r2, [r7, #20]
 8001eda:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001edc:	f7ff fa54 	bl	8001388 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ee2:	e015      	b.n	8001f10 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001ee4:	f7ff fa50 	bl	8001388 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ef2:	d309      	bcc.n	8001f08 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e014      	b.n	8001f32 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1e4      	bne.n	8001ee4 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	695b      	ldr	r3, [r3, #20]
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	461a      	mov	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3718      	adds	r7, #24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b086      	sub	sp, #24
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	60f8      	str	r0, [r7, #12]
 8001f42:	460b      	mov	r3, r1
 8001f44:	607a      	str	r2, [r7, #4]
 8001f46:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	2b42      	cmp	r3, #66	; 0x42
 8001f5a:	d101      	bne.n	8001f60 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	e04e      	b.n	8001ffe <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2242      	movs	r2, #66	; 0x42
 8001f64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	f003 031c 	and.w	r3, r3, #28
 8001f76:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	8a1b      	ldrh	r3, [r3, #16]
 8001f7c:	02db      	lsls	r3, r3, #11
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	697a      	ldr	r2, [r7, #20]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001f86:	897b      	ldrh	r3, [r7, #10]
 8001f88:	019b      	lsls	r3, r3, #6
 8001f8a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001f8e:	697a      	ldr	r2, [r7, #20]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	f043 0302 	orr.w	r3, r3, #2
 8001f9a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	f043 0301 	orr.w	r3, r3, #1
 8001fa2:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	697a      	ldr	r2, [r7, #20]
 8001fb4:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001fb6:	f7ff f9e7 	bl	8001388 <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001fbc:	e015      	b.n	8001fea <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001fbe:	f7ff f9e3 	bl	8001388 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fcc:	d309      	bcc.n	8001fe2 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e00d      	b.n	8001ffe <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1e4      	bne.n	8001fbe <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3718      	adds	r7, #24
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8002006:	b580      	push	{r7, lr}
 8002008:	b082      	sub	sp, #8
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002014:	2b01      	cmp	r3, #1
 8002016:	d101      	bne.n	800201c <HAL_ETH_Start+0x16>
 8002018:	2302      	movs	r3, #2
 800201a:	e01f      	b.n	800205c <HAL_ETH_Start+0x56>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2202      	movs	r2, #2
 8002028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 fa1b 	bl	8002468 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 fa35 	bl	80024a2 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 fa7f 	bl	800253c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 fa4c 	bl	80024dc <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 fa61 	bl	800250c <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2201      	movs	r2, #1
 800204e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b0b0      	sub	sp, #192	; 0xc0
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800206e:	2300      	movs	r3, #0
 8002070:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d007      	beq.n	800208a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002080:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002088:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800208a:	2300      	movs	r3, #0
 800208c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800208e:	2300      	movs	r3, #0
 8002090:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002092:	2300      	movs	r3, #0
 8002094:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002096:	2300      	movs	r3, #0
 8002098:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800209a:	2300      	movs	r3, #0
 800209c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800209e:	2300      	movs	r3, #0
 80020a0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d103      	bne.n	80020b2 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80020aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020ae:	663b      	str	r3, [r7, #96]	; 0x60
 80020b0:	e001      	b.n	80020b6 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80020b2:	2300      	movs	r3, #0
 80020b4:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80020b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020ba:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80020bc:	2300      	movs	r3, #0
 80020be:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80020c0:	2300      	movs	r3, #0
 80020c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80020c4:	2300      	movs	r3, #0
 80020c6:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80020c8:	2300      	movs	r3, #0
 80020ca:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80020cc:	2300      	movs	r3, #0
 80020ce:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80020d0:	2340      	movs	r3, #64	; 0x40
 80020d2:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80020d4:	2300      	movs	r3, #0
 80020d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80020da:	2300      	movs	r3, #0
 80020dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80020e0:	2300      	movs	r3, #0
 80020e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80020e6:	2300      	movs	r3, #0
 80020e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80020ec:	2300      	movs	r3, #0
 80020ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80020f2:	2300      	movs	r3, #0
 80020f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80020f8:	2300      	movs	r3, #0
 80020fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80020fe:	2300      	movs	r3, #0
 8002100:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002104:	2380      	movs	r3, #128	; 0x80
 8002106:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800210a:	2300      	movs	r3, #0
 800210c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002110:	2300      	movs	r3, #0
 8002112:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002116:	2300      	movs	r3, #0
 8002118:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800211c:	2300      	movs	r3, #0
 800211e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002122:	2300      	movs	r3, #0
 8002124:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8002128:	2300      	movs	r3, #0
 800212a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002138:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800213c:	4bac      	ldr	r3, [pc, #688]	; (80023f0 <ETH_MACDMAConfig+0x38c>)
 800213e:	4013      	ands	r3, r2
 8002140:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002144:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002148:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800214a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 800214c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800214e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002150:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002156:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002158:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800215a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 800215c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800215e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002164:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002166:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002168:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800216a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 800216c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800216e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002170:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002174:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002176:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002178:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800217a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800217e:	4313      	orrs	r3, r2
 8002180:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800218c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002198:	2001      	movs	r0, #1
 800219a:	f7ff f901 	bl	80013a0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021a6:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80021a8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80021aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80021ac:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80021ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80021b0:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80021b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80021b6:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80021b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80021bc:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80021be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80021c2:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80021c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80021c8:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80021cc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80021d4:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80021d6:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80021e2:	2001      	movs	r0, #1
 80021e4:	f7ff f8dc 	bl	80013a0 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021f0:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80021fa:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002204:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002210:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002214:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002218:	4013      	ands	r3, r2
 800221a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800221e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002222:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002224:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002228:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800222a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800222e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002230:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002234:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002236:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800223a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800223c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002240:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002242:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002246:	4313      	orrs	r3, r2
 8002248:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002254:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002260:	2001      	movs	r0, #1
 8002262:	f7ff f89d 	bl	80013a0 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800226e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002270:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002274:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	430a      	orrs	r2, r1
 800227e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	69db      	ldr	r3, [r3, #28]
 8002286:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800228a:	2001      	movs	r0, #1
 800228c:	f7ff f888 	bl	80013a0 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002298:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800229a:	2300      	movs	r3, #0
 800229c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800229e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022a2:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80022a4:	2300      	movs	r3, #0
 80022a6:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80022a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80022ac:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80022ae:	2300      	movs	r3, #0
 80022b0:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80022b2:	2300      	movs	r3, #0
 80022b4:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80022b6:	2300      	movs	r3, #0
 80022b8:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80022ba:	2300      	movs	r3, #0
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80022be:	2304      	movs	r3, #4
 80022c0:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80022c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80022c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022cc:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80022ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022d2:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80022d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022d8:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80022da:	2380      	movs	r3, #128	; 0x80
 80022dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 80022de:	2300      	movs	r3, #0
 80022e0:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80022e2:	2300      	movs	r3, #0
 80022e4:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022ee:	3318      	adds	r3, #24
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80022f6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022fa:	4b3e      	ldr	r3, [pc, #248]	; (80023f4 <ETH_MACDMAConfig+0x390>)
 80022fc:	4013      	ands	r3, r2
 80022fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002302:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002304:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002306:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002308:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800230a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800230c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800230e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002310:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002312:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002314:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002316:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002318:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800231a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800231c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800231e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002320:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002322:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002324:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002328:	4313      	orrs	r3, r2
 800232a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002336:	3318      	adds	r3, #24
 8002338:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800233c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002346:	3318      	adds	r3, #24
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800234e:	2001      	movs	r0, #1
 8002350:	f7ff f826 	bl	80013a0 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800235c:	3318      	adds	r3, #24
 800235e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002362:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002364:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002368:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800236a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800236c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800236e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002370:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002374:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002376:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002378:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800237a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 800237c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 800237e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002388:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800238c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800239c:	2001      	movs	r0, #1
 800239e:	f7fe ffff 	bl	80013a0 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023aa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023ae:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d10f      	bne.n	80023d8 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023c0:	331c      	adds	r3, #28
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80023cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023d4:	331c      	adds	r3, #28
 80023d6:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	695b      	ldr	r3, [r3, #20]
 80023dc:	461a      	mov	r2, r3
 80023de:	2100      	movs	r1, #0
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 f809 	bl	80023f8 <ETH_MACAddressConfig>
}
 80023e6:	bf00      	nop
 80023e8:	37c0      	adds	r7, #192	; 0xc0
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	ff20810f 	.word	0xff20810f
 80023f4:	f8de3f23 	.word	0xf8de3f23

080023f8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b087      	sub	sp, #28
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3305      	adds	r3, #5
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	021b      	lsls	r3, r3, #8
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	3204      	adds	r2, #4
 8002410:	7812      	ldrb	r2, [r2, #0]
 8002412:	4313      	orrs	r3, r2
 8002414:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	4b11      	ldr	r3, [pc, #68]	; (8002460 <ETH_MACAddressConfig+0x68>)
 800241a:	4413      	add	r3, r2
 800241c:	461a      	mov	r2, r3
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	3303      	adds	r3, #3
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	061a      	lsls	r2, r3, #24
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	3302      	adds	r3, #2
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	041b      	lsls	r3, r3, #16
 8002432:	431a      	orrs	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3301      	adds	r3, #1
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	021b      	lsls	r3, r3, #8
 800243c:	4313      	orrs	r3, r2
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	7812      	ldrb	r2, [r2, #0]
 8002442:	4313      	orrs	r3, r2
 8002444:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	4b06      	ldr	r3, [pc, #24]	; (8002464 <ETH_MACAddressConfig+0x6c>)
 800244a:	4413      	add	r3, r2
 800244c:	461a      	mov	r2, r3
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	6013      	str	r3, [r2, #0]
}
 8002452:	bf00      	nop
 8002454:	371c      	adds	r7, #28
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	40028040 	.word	0x40028040
 8002464:	40028044 	.word	0x40028044

08002468 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002470:	2300      	movs	r3, #0
 8002472:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f042 0208 	orr.w	r2, r2, #8
 8002482:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800248c:	2001      	movs	r0, #1
 800248e:	f000 f87f 	bl	8002590 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	601a      	str	r2, [r3, #0]
}
 800249a:	bf00      	nop
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b084      	sub	sp, #16
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f042 0204 	orr.w	r2, r2, #4
 80024bc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80024c6:	2001      	movs	r0, #1
 80024c8:	f000 f862 	bl	8002590 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	601a      	str	r2, [r3, #0]
}
 80024d4:	bf00      	nop
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024ec:	3318      	adds	r3, #24
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024fc:	3318      	adds	r3, #24
 80024fe:	601a      	str	r2, [r3, #0]
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800251c:	3318      	adds	r3, #24
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f042 0202 	orr.w	r2, r2, #2
 8002528:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800252c:	3318      	adds	r3, #24
 800252e:	601a      	str	r2, [r3, #0]
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002544:	2300      	movs	r3, #0
 8002546:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002550:	3318      	adds	r3, #24
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800255c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002560:	3318      	adds	r3, #24
 8002562:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800256c:	3318      	adds	r3, #24
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002572:	2001      	movs	r0, #1
 8002574:	f000 f80c 	bl	8002590 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002582:	3318      	adds	r3, #24
 8002584:	601a      	str	r2, [r3, #0]
}
 8002586:	bf00      	nop
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
	...

08002590 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002598:	4b0a      	ldr	r3, [pc, #40]	; (80025c4 <ETH_Delay+0x34>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a0a      	ldr	r2, [pc, #40]	; (80025c8 <ETH_Delay+0x38>)
 800259e:	fba2 2303 	umull	r2, r3, r2, r3
 80025a2:	0a5b      	lsrs	r3, r3, #9
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	fb02 f303 	mul.w	r3, r2, r3
 80025aa:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 80025ac:	bf00      	nop
  } 
  while (Delay --);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	1e5a      	subs	r2, r3, #1
 80025b2:	60fa      	str	r2, [r7, #12]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1f9      	bne.n	80025ac <ETH_Delay+0x1c>
}
 80025b8:	bf00      	nop
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	20000000 	.word	0x20000000
 80025c8:	10624dd3 	.word	0x10624dd3

080025cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b089      	sub	sp, #36	; 0x24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025da:	2300      	movs	r3, #0
 80025dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025de:	2300      	movs	r3, #0
 80025e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025e2:	2300      	movs	r3, #0
 80025e4:	61fb      	str	r3, [r7, #28]
 80025e6:	e177      	b.n	80028d8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025e8:	2201      	movs	r2, #1
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	4013      	ands	r3, r2
 80025fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	429a      	cmp	r2, r3
 8002602:	f040 8166 	bne.w	80028d2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d00b      	beq.n	8002626 <HAL_GPIO_Init+0x5a>
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	2b02      	cmp	r3, #2
 8002614:	d007      	beq.n	8002626 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800261a:	2b11      	cmp	r3, #17
 800261c:	d003      	beq.n	8002626 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b12      	cmp	r3, #18
 8002624:	d130      	bne.n	8002688 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	2203      	movs	r2, #3
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	43db      	mvns	r3, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4013      	ands	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	68da      	ldr	r2, [r3, #12]
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	4313      	orrs	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800265c:	2201      	movs	r2, #1
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	43db      	mvns	r3, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4013      	ands	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	091b      	lsrs	r3, r3, #4
 8002672:	f003 0201 	and.w	r2, r3, #1
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4313      	orrs	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	2203      	movs	r2, #3
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	43db      	mvns	r3, r3
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	4013      	ands	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	689a      	ldr	r2, [r3, #8]
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d003      	beq.n	80026c8 <HAL_GPIO_Init+0xfc>
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	2b12      	cmp	r3, #18
 80026c6:	d123      	bne.n	8002710 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	08da      	lsrs	r2, r3, #3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3208      	adds	r2, #8
 80026d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	220f      	movs	r2, #15
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	43db      	mvns	r3, r3
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	4013      	ands	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	691a      	ldr	r2, [r3, #16]
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4313      	orrs	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	08da      	lsrs	r2, r3, #3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	3208      	adds	r2, #8
 800270a:	69b9      	ldr	r1, [r7, #24]
 800270c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	2203      	movs	r2, #3
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	43db      	mvns	r3, r3
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4013      	ands	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f003 0203 	and.w	r2, r3, #3
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4313      	orrs	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274c:	2b00      	cmp	r3, #0
 800274e:	f000 80c0 	beq.w	80028d2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002752:	2300      	movs	r3, #0
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	4b65      	ldr	r3, [pc, #404]	; (80028ec <HAL_GPIO_Init+0x320>)
 8002758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275a:	4a64      	ldr	r2, [pc, #400]	; (80028ec <HAL_GPIO_Init+0x320>)
 800275c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002760:	6453      	str	r3, [r2, #68]	; 0x44
 8002762:	4b62      	ldr	r3, [pc, #392]	; (80028ec <HAL_GPIO_Init+0x320>)
 8002764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002766:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800276a:	60fb      	str	r3, [r7, #12]
 800276c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800276e:	4a60      	ldr	r2, [pc, #384]	; (80028f0 <HAL_GPIO_Init+0x324>)
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	089b      	lsrs	r3, r3, #2
 8002774:	3302      	adds	r3, #2
 8002776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800277a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	f003 0303 	and.w	r3, r3, #3
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	220f      	movs	r2, #15
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	43db      	mvns	r3, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4013      	ands	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a57      	ldr	r2, [pc, #348]	; (80028f4 <HAL_GPIO_Init+0x328>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d037      	beq.n	800280a <HAL_GPIO_Init+0x23e>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a56      	ldr	r2, [pc, #344]	; (80028f8 <HAL_GPIO_Init+0x32c>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d031      	beq.n	8002806 <HAL_GPIO_Init+0x23a>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a55      	ldr	r2, [pc, #340]	; (80028fc <HAL_GPIO_Init+0x330>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d02b      	beq.n	8002802 <HAL_GPIO_Init+0x236>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a54      	ldr	r2, [pc, #336]	; (8002900 <HAL_GPIO_Init+0x334>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d025      	beq.n	80027fe <HAL_GPIO_Init+0x232>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a53      	ldr	r2, [pc, #332]	; (8002904 <HAL_GPIO_Init+0x338>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d01f      	beq.n	80027fa <HAL_GPIO_Init+0x22e>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a52      	ldr	r2, [pc, #328]	; (8002908 <HAL_GPIO_Init+0x33c>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d019      	beq.n	80027f6 <HAL_GPIO_Init+0x22a>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a51      	ldr	r2, [pc, #324]	; (800290c <HAL_GPIO_Init+0x340>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d013      	beq.n	80027f2 <HAL_GPIO_Init+0x226>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a50      	ldr	r2, [pc, #320]	; (8002910 <HAL_GPIO_Init+0x344>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d00d      	beq.n	80027ee <HAL_GPIO_Init+0x222>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a4f      	ldr	r2, [pc, #316]	; (8002914 <HAL_GPIO_Init+0x348>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d007      	beq.n	80027ea <HAL_GPIO_Init+0x21e>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a4e      	ldr	r2, [pc, #312]	; (8002918 <HAL_GPIO_Init+0x34c>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d101      	bne.n	80027e6 <HAL_GPIO_Init+0x21a>
 80027e2:	2309      	movs	r3, #9
 80027e4:	e012      	b.n	800280c <HAL_GPIO_Init+0x240>
 80027e6:	230a      	movs	r3, #10
 80027e8:	e010      	b.n	800280c <HAL_GPIO_Init+0x240>
 80027ea:	2308      	movs	r3, #8
 80027ec:	e00e      	b.n	800280c <HAL_GPIO_Init+0x240>
 80027ee:	2307      	movs	r3, #7
 80027f0:	e00c      	b.n	800280c <HAL_GPIO_Init+0x240>
 80027f2:	2306      	movs	r3, #6
 80027f4:	e00a      	b.n	800280c <HAL_GPIO_Init+0x240>
 80027f6:	2305      	movs	r3, #5
 80027f8:	e008      	b.n	800280c <HAL_GPIO_Init+0x240>
 80027fa:	2304      	movs	r3, #4
 80027fc:	e006      	b.n	800280c <HAL_GPIO_Init+0x240>
 80027fe:	2303      	movs	r3, #3
 8002800:	e004      	b.n	800280c <HAL_GPIO_Init+0x240>
 8002802:	2302      	movs	r3, #2
 8002804:	e002      	b.n	800280c <HAL_GPIO_Init+0x240>
 8002806:	2301      	movs	r3, #1
 8002808:	e000      	b.n	800280c <HAL_GPIO_Init+0x240>
 800280a:	2300      	movs	r3, #0
 800280c:	69fa      	ldr	r2, [r7, #28]
 800280e:	f002 0203 	and.w	r2, r2, #3
 8002812:	0092      	lsls	r2, r2, #2
 8002814:	4093      	lsls	r3, r2
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	4313      	orrs	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800281c:	4934      	ldr	r1, [pc, #208]	; (80028f0 <HAL_GPIO_Init+0x324>)
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	089b      	lsrs	r3, r3, #2
 8002822:	3302      	adds	r3, #2
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800282a:	4b3c      	ldr	r3, [pc, #240]	; (800291c <HAL_GPIO_Init+0x350>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	43db      	mvns	r3, r3
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	4013      	ands	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	4313      	orrs	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800284e:	4a33      	ldr	r2, [pc, #204]	; (800291c <HAL_GPIO_Init+0x350>)
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002854:	4b31      	ldr	r3, [pc, #196]	; (800291c <HAL_GPIO_Init+0x350>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	43db      	mvns	r3, r3
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	4013      	ands	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d003      	beq.n	8002878 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	4313      	orrs	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002878:	4a28      	ldr	r2, [pc, #160]	; (800291c <HAL_GPIO_Init+0x350>)
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800287e:	4b27      	ldr	r3, [pc, #156]	; (800291c <HAL_GPIO_Init+0x350>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	43db      	mvns	r3, r3
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	4013      	ands	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	4313      	orrs	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028a2:	4a1e      	ldr	r2, [pc, #120]	; (800291c <HAL_GPIO_Init+0x350>)
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028a8:	4b1c      	ldr	r3, [pc, #112]	; (800291c <HAL_GPIO_Init+0x350>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	43db      	mvns	r3, r3
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	4013      	ands	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d003      	beq.n	80028cc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028cc:	4a13      	ldr	r2, [pc, #76]	; (800291c <HAL_GPIO_Init+0x350>)
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	3301      	adds	r3, #1
 80028d6:	61fb      	str	r3, [r7, #28]
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	2b0f      	cmp	r3, #15
 80028dc:	f67f ae84 	bls.w	80025e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028e0:	bf00      	nop
 80028e2:	3724      	adds	r7, #36	; 0x24
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	40023800 	.word	0x40023800
 80028f0:	40013800 	.word	0x40013800
 80028f4:	40020000 	.word	0x40020000
 80028f8:	40020400 	.word	0x40020400
 80028fc:	40020800 	.word	0x40020800
 8002900:	40020c00 	.word	0x40020c00
 8002904:	40021000 	.word	0x40021000
 8002908:	40021400 	.word	0x40021400
 800290c:	40021800 	.word	0x40021800
 8002910:	40021c00 	.word	0x40021c00
 8002914:	40022000 	.word	0x40022000
 8002918:	40022400 	.word	0x40022400
 800291c:	40013c00 	.word	0x40013c00

08002920 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	460b      	mov	r3, r1
 800292a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	691a      	ldr	r2, [r3, #16]
 8002930:	887b      	ldrh	r3, [r7, #2]
 8002932:	4013      	ands	r3, r2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d002      	beq.n	800293e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002938:	2301      	movs	r3, #1
 800293a:	73fb      	strb	r3, [r7, #15]
 800293c:	e001      	b.n	8002942 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800293e:	2300      	movs	r3, #0
 8002940:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002942:	7bfb      	ldrb	r3, [r7, #15]
}
 8002944:	4618      	mov	r0, r3
 8002946:	3714      	adds	r7, #20
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	460b      	mov	r3, r1
 800295a:	807b      	strh	r3, [r7, #2]
 800295c:	4613      	mov	r3, r2
 800295e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002960:	787b      	ldrb	r3, [r7, #1]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d003      	beq.n	800296e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002966:	887a      	ldrh	r2, [r7, #2]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800296c:	e003      	b.n	8002976 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800296e:	887b      	ldrh	r3, [r7, #2]
 8002970:	041a      	lsls	r2, r3, #16
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	619a      	str	r2, [r3, #24]
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002982:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002984:	b08f      	sub	sp, #60	; 0x3c
 8002986:	af0a      	add	r7, sp, #40	; 0x28
 8002988:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d101      	bne.n	8002994 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e10f      	b.n	8002bb4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d106      	bne.n	80029b4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7fe f854 	bl	8000a5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2203      	movs	r2, #3
 80029b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d102      	bne.n	80029ce <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f001 fbef 	bl	80041b6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	603b      	str	r3, [r7, #0]
 80029de:	687e      	ldr	r6, [r7, #4]
 80029e0:	466d      	mov	r5, sp
 80029e2:	f106 0410 	add.w	r4, r6, #16
 80029e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80029f6:	1d33      	adds	r3, r6, #4
 80029f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029fa:	6838      	ldr	r0, [r7, #0]
 80029fc:	f001 fb7a 	bl	80040f4 <USB_CoreInit>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d005      	beq.n	8002a12 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2202      	movs	r2, #2
 8002a0a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e0d0      	b.n	8002bb4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2100      	movs	r1, #0
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f001 fbdd 	bl	80041d8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a1e:	2300      	movs	r3, #0
 8002a20:	73fb      	strb	r3, [r7, #15]
 8002a22:	e04a      	b.n	8002aba <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a24:	7bfa      	ldrb	r2, [r7, #15]
 8002a26:	6879      	ldr	r1, [r7, #4]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	1a9b      	subs	r3, r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	440b      	add	r3, r1
 8002a32:	333d      	adds	r3, #61	; 0x3d
 8002a34:	2201      	movs	r2, #1
 8002a36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a38:	7bfa      	ldrb	r2, [r7, #15]
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	1a9b      	subs	r3, r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	440b      	add	r3, r1
 8002a46:	333c      	adds	r3, #60	; 0x3c
 8002a48:	7bfa      	ldrb	r2, [r7, #15]
 8002a4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a4c:	7bfa      	ldrb	r2, [r7, #15]
 8002a4e:	7bfb      	ldrb	r3, [r7, #15]
 8002a50:	b298      	uxth	r0, r3
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	4613      	mov	r3, r2
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	1a9b      	subs	r3, r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	3342      	adds	r3, #66	; 0x42
 8002a60:	4602      	mov	r2, r0
 8002a62:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a64:	7bfa      	ldrb	r2, [r7, #15]
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	1a9b      	subs	r3, r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	440b      	add	r3, r1
 8002a72:	333f      	adds	r3, #63	; 0x3f
 8002a74:	2200      	movs	r2, #0
 8002a76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a78:	7bfa      	ldrb	r2, [r7, #15]
 8002a7a:	6879      	ldr	r1, [r7, #4]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	1a9b      	subs	r3, r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	440b      	add	r3, r1
 8002a86:	3344      	adds	r3, #68	; 0x44
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a8c:	7bfa      	ldrb	r2, [r7, #15]
 8002a8e:	6879      	ldr	r1, [r7, #4]
 8002a90:	4613      	mov	r3, r2
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	1a9b      	subs	r3, r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	440b      	add	r3, r1
 8002a9a:	3348      	adds	r3, #72	; 0x48
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002aa0:	7bfa      	ldrb	r2, [r7, #15]
 8002aa2:	6879      	ldr	r1, [r7, #4]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	1a9b      	subs	r3, r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	440b      	add	r3, r1
 8002aae:	3350      	adds	r3, #80	; 0x50
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ab4:	7bfb      	ldrb	r3, [r7, #15]
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	73fb      	strb	r3, [r7, #15]
 8002aba:	7bfa      	ldrb	r2, [r7, #15]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d3af      	bcc.n	8002a24 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	73fb      	strb	r3, [r7, #15]
 8002ac8:	e044      	b.n	8002b54 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002aca:	7bfa      	ldrb	r2, [r7, #15]
 8002acc:	6879      	ldr	r1, [r7, #4]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	00db      	lsls	r3, r3, #3
 8002ad2:	1a9b      	subs	r3, r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	440b      	add	r3, r1
 8002ad8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002adc:	2200      	movs	r2, #0
 8002ade:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ae0:	7bfa      	ldrb	r2, [r7, #15]
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	1a9b      	subs	r3, r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	440b      	add	r3, r1
 8002aee:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002af2:	7bfa      	ldrb	r2, [r7, #15]
 8002af4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002af6:	7bfa      	ldrb	r2, [r7, #15]
 8002af8:	6879      	ldr	r1, [r7, #4]
 8002afa:	4613      	mov	r3, r2
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	1a9b      	subs	r3, r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	440b      	add	r3, r1
 8002b04:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002b08:	2200      	movs	r2, #0
 8002b0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b0c:	7bfa      	ldrb	r2, [r7, #15]
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	4613      	mov	r3, r2
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	1a9b      	subs	r3, r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	440b      	add	r3, r1
 8002b1a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002b1e:	2200      	movs	r2, #0
 8002b20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b22:	7bfa      	ldrb	r2, [r7, #15]
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	4613      	mov	r3, r2
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	1a9b      	subs	r3, r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	440b      	add	r3, r1
 8002b30:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b38:	7bfa      	ldrb	r2, [r7, #15]
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	1a9b      	subs	r3, r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	440b      	add	r3, r1
 8002b46:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b4e:	7bfb      	ldrb	r3, [r7, #15]
 8002b50:	3301      	adds	r3, #1
 8002b52:	73fb      	strb	r3, [r7, #15]
 8002b54:	7bfa      	ldrb	r2, [r7, #15]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d3b5      	bcc.n	8002aca <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	603b      	str	r3, [r7, #0]
 8002b64:	687e      	ldr	r6, [r7, #4]
 8002b66:	466d      	mov	r5, sp
 8002b68:	f106 0410 	add.w	r4, r6, #16
 8002b6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b74:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b78:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b7c:	1d33      	adds	r3, r6, #4
 8002b7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b80:	6838      	ldr	r0, [r7, #0]
 8002b82:	f001 fb53 	bl	800422c <USB_DevInit>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d005      	beq.n	8002b98 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2202      	movs	r2, #2
 8002b90:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e00d      	b.n	8002bb4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f001 fd02 	bl	80045b6 <USB_DevDisconnect>

  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002bbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e25b      	b.n	8003086 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d075      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bda:	4ba3      	ldr	r3, [pc, #652]	; (8002e68 <HAL_RCC_OscConfig+0x2ac>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 030c 	and.w	r3, r3, #12
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d00c      	beq.n	8002c00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002be6:	4ba0      	ldr	r3, [pc, #640]	; (8002e68 <HAL_RCC_OscConfig+0x2ac>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bee:	2b08      	cmp	r3, #8
 8002bf0:	d112      	bne.n	8002c18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bf2:	4b9d      	ldr	r3, [pc, #628]	; (8002e68 <HAL_RCC_OscConfig+0x2ac>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bfe:	d10b      	bne.n	8002c18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c00:	4b99      	ldr	r3, [pc, #612]	; (8002e68 <HAL_RCC_OscConfig+0x2ac>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d05b      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x108>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d157      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e236      	b.n	8003086 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c20:	d106      	bne.n	8002c30 <HAL_RCC_OscConfig+0x74>
 8002c22:	4b91      	ldr	r3, [pc, #580]	; (8002e68 <HAL_RCC_OscConfig+0x2ac>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a90      	ldr	r2, [pc, #576]	; (8002e68 <HAL_RCC_OscConfig+0x2ac>)
 8002c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c2c:	6013      	str	r3, [r2, #0]
 8002c2e:	e01d      	b.n	8002c6c <HAL_RCC_OscConfig+0xb0>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c38:	d10c      	bne.n	8002c54 <HAL_RCC_OscConfig+0x98>
 8002c3a:	4b8b      	ldr	r3, [pc, #556]	; (8002e68 <HAL_RCC_OscConfig+0x2ac>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a8a      	ldr	r2, [pc, #552]	; (8002e68 <HAL_RCC_OscConfig+0x2ac>)
 8002c40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	4b88      	ldr	r3, [pc, #544]	; (8002e68 <HAL_RCC_OscConfig+0x2ac>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a87      	ldr	r2, [pc, #540]	; (8002e68 <HAL_RCC_OscConfig+0x2ac>)
 8002c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	e00b      	b.n	8002c6c <HAL_RCC_OscConfig+0xb0>
 8002c54:	4b84      	ldr	r3, [pc, #528]	; (8002e68 <HAL_RCC_OscConfig+0x2ac>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a83      	ldr	r2, [pc, #524]	; (8002e68 <HAL_RCC_OscConfig+0x2ac>)
 8002c5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c5e:	6013      	str	r3, [r2, #0]
 8002c60:	4b81      	ldr	r3, [pc, #516]	; (8002e68 <HAL_RCC_OscConfig+0x2ac>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a80      	ldr	r2, [pc, #512]	; (8002e68 <HAL_RCC_OscConfig+0x2ac>)
 8002c66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d013      	beq.n	8002c9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c74:	f7fe fb88 	bl	8001388 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c7c:	f7fe fb84 	bl	8001388 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b64      	cmp	r3, #100	; 0x64
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e1fb      	b.n	8003086 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8e:	4b76      	ldr	r3, [pc, #472]	; (8002e68 <HAL_RCC_OscConfig+0x2ac>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d0f0      	beq.n	8002c7c <HAL_RCC_OscConfig+0xc0>
 8002c9a:	e014      	b.n	8002cc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9c:	f7fe fb74 	bl	8001388 <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ca4:	f7fe fb70 	bl	8001388 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b64      	cmp	r3, #100	; 0x64
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e1e7      	b.n	8003086 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cb6:	4b6c      	ldr	r3, [pc, #432]	; (8002e68 <HAL_RCC_OscConfig+0x2ac>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1f0      	bne.n	8002ca4 <HAL_RCC_OscConfig+0xe8>
 8002cc2:	e000      	b.n	8002cc6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d063      	beq.n	8002d9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cd2:	4b65      	ldr	r3, [pc, #404]	; (8002e68 <HAL_RCC_OscConfig+0x2ac>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 030c 	and.w	r3, r3, #12
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00b      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cde:	4b62      	ldr	r3, [pc, #392]	; (8002e68 <HAL_RCC_OscConfig+0x2ac>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ce6:	2b08      	cmp	r3, #8
 8002ce8:	d11c      	bne.n	8002d24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cea:	4b5f      	ldr	r3, [pc, #380]	; (8002e68 <HAL_RCC_OscConfig+0x2ac>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d116      	bne.n	8002d24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cf6:	4b5c      	ldr	r3, [pc, #368]	; (8002e68 <HAL_RCC_OscConfig+0x2ac>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d005      	beq.n	8002d0e <HAL_RCC_OscConfig+0x152>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d001      	beq.n	8002d0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e1bb      	b.n	8003086 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d0e:	4b56      	ldr	r3, [pc, #344]	; (8002e68 <HAL_RCC_OscConfig+0x2ac>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	4952      	ldr	r1, [pc, #328]	; (8002e68 <HAL_RCC_OscConfig+0x2ac>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d22:	e03a      	b.n	8002d9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d020      	beq.n	8002d6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d2c:	4b4f      	ldr	r3, [pc, #316]	; (8002e6c <HAL_RCC_OscConfig+0x2b0>)
 8002d2e:	2201      	movs	r2, #1
 8002d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d32:	f7fe fb29 	bl	8001388 <HAL_GetTick>
 8002d36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d38:	e008      	b.n	8002d4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d3a:	f7fe fb25 	bl	8001388 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e19c      	b.n	8003086 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d4c:	4b46      	ldr	r3, [pc, #280]	; (8002e68 <HAL_RCC_OscConfig+0x2ac>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d0f0      	beq.n	8002d3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d58:	4b43      	ldr	r3, [pc, #268]	; (8002e68 <HAL_RCC_OscConfig+0x2ac>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	4940      	ldr	r1, [pc, #256]	; (8002e68 <HAL_RCC_OscConfig+0x2ac>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	600b      	str	r3, [r1, #0]
 8002d6c:	e015      	b.n	8002d9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d6e:	4b3f      	ldr	r3, [pc, #252]	; (8002e6c <HAL_RCC_OscConfig+0x2b0>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d74:	f7fe fb08 	bl	8001388 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d7c:	f7fe fb04 	bl	8001388 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e17b      	b.n	8003086 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d8e:	4b36      	ldr	r3, [pc, #216]	; (8002e68 <HAL_RCC_OscConfig+0x2ac>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1f0      	bne.n	8002d7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0308 	and.w	r3, r3, #8
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d030      	beq.n	8002e08 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d016      	beq.n	8002ddc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dae:	4b30      	ldr	r3, [pc, #192]	; (8002e70 <HAL_RCC_OscConfig+0x2b4>)
 8002db0:	2201      	movs	r2, #1
 8002db2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db4:	f7fe fae8 	bl	8001388 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dbc:	f7fe fae4 	bl	8001388 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e15b      	b.n	8003086 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dce:	4b26      	ldr	r3, [pc, #152]	; (8002e68 <HAL_RCC_OscConfig+0x2ac>)
 8002dd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d0f0      	beq.n	8002dbc <HAL_RCC_OscConfig+0x200>
 8002dda:	e015      	b.n	8002e08 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ddc:	4b24      	ldr	r3, [pc, #144]	; (8002e70 <HAL_RCC_OscConfig+0x2b4>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de2:	f7fe fad1 	bl	8001388 <HAL_GetTick>
 8002de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002de8:	e008      	b.n	8002dfc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dea:	f7fe facd 	bl	8001388 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e144      	b.n	8003086 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dfc:	4b1a      	ldr	r3, [pc, #104]	; (8002e68 <HAL_RCC_OscConfig+0x2ac>)
 8002dfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1f0      	bne.n	8002dea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 80a0 	beq.w	8002f56 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e16:	2300      	movs	r3, #0
 8002e18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e1a:	4b13      	ldr	r3, [pc, #76]	; (8002e68 <HAL_RCC_OscConfig+0x2ac>)
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10f      	bne.n	8002e46 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e26:	2300      	movs	r3, #0
 8002e28:	60bb      	str	r3, [r7, #8]
 8002e2a:	4b0f      	ldr	r3, [pc, #60]	; (8002e68 <HAL_RCC_OscConfig+0x2ac>)
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	4a0e      	ldr	r2, [pc, #56]	; (8002e68 <HAL_RCC_OscConfig+0x2ac>)
 8002e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e34:	6413      	str	r3, [r2, #64]	; 0x40
 8002e36:	4b0c      	ldr	r3, [pc, #48]	; (8002e68 <HAL_RCC_OscConfig+0x2ac>)
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3e:	60bb      	str	r3, [r7, #8]
 8002e40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e42:	2301      	movs	r3, #1
 8002e44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e46:	4b0b      	ldr	r3, [pc, #44]	; (8002e74 <HAL_RCC_OscConfig+0x2b8>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d121      	bne.n	8002e96 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e52:	4b08      	ldr	r3, [pc, #32]	; (8002e74 <HAL_RCC_OscConfig+0x2b8>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a07      	ldr	r2, [pc, #28]	; (8002e74 <HAL_RCC_OscConfig+0x2b8>)
 8002e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e5e:	f7fe fa93 	bl	8001388 <HAL_GetTick>
 8002e62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e64:	e011      	b.n	8002e8a <HAL_RCC_OscConfig+0x2ce>
 8002e66:	bf00      	nop
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	42470000 	.word	0x42470000
 8002e70:	42470e80 	.word	0x42470e80
 8002e74:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e78:	f7fe fa86 	bl	8001388 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e0fd      	b.n	8003086 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e8a:	4b81      	ldr	r3, [pc, #516]	; (8003090 <HAL_RCC_OscConfig+0x4d4>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0f0      	beq.n	8002e78 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d106      	bne.n	8002eac <HAL_RCC_OscConfig+0x2f0>
 8002e9e:	4b7d      	ldr	r3, [pc, #500]	; (8003094 <HAL_RCC_OscConfig+0x4d8>)
 8002ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea2:	4a7c      	ldr	r2, [pc, #496]	; (8003094 <HAL_RCC_OscConfig+0x4d8>)
 8002ea4:	f043 0301 	orr.w	r3, r3, #1
 8002ea8:	6713      	str	r3, [r2, #112]	; 0x70
 8002eaa:	e01c      	b.n	8002ee6 <HAL_RCC_OscConfig+0x32a>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	2b05      	cmp	r3, #5
 8002eb2:	d10c      	bne.n	8002ece <HAL_RCC_OscConfig+0x312>
 8002eb4:	4b77      	ldr	r3, [pc, #476]	; (8003094 <HAL_RCC_OscConfig+0x4d8>)
 8002eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb8:	4a76      	ldr	r2, [pc, #472]	; (8003094 <HAL_RCC_OscConfig+0x4d8>)
 8002eba:	f043 0304 	orr.w	r3, r3, #4
 8002ebe:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec0:	4b74      	ldr	r3, [pc, #464]	; (8003094 <HAL_RCC_OscConfig+0x4d8>)
 8002ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec4:	4a73      	ldr	r2, [pc, #460]	; (8003094 <HAL_RCC_OscConfig+0x4d8>)
 8002ec6:	f043 0301 	orr.w	r3, r3, #1
 8002eca:	6713      	str	r3, [r2, #112]	; 0x70
 8002ecc:	e00b      	b.n	8002ee6 <HAL_RCC_OscConfig+0x32a>
 8002ece:	4b71      	ldr	r3, [pc, #452]	; (8003094 <HAL_RCC_OscConfig+0x4d8>)
 8002ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed2:	4a70      	ldr	r2, [pc, #448]	; (8003094 <HAL_RCC_OscConfig+0x4d8>)
 8002ed4:	f023 0301 	bic.w	r3, r3, #1
 8002ed8:	6713      	str	r3, [r2, #112]	; 0x70
 8002eda:	4b6e      	ldr	r3, [pc, #440]	; (8003094 <HAL_RCC_OscConfig+0x4d8>)
 8002edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ede:	4a6d      	ldr	r2, [pc, #436]	; (8003094 <HAL_RCC_OscConfig+0x4d8>)
 8002ee0:	f023 0304 	bic.w	r3, r3, #4
 8002ee4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d015      	beq.n	8002f1a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eee:	f7fe fa4b 	bl	8001388 <HAL_GetTick>
 8002ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ef4:	e00a      	b.n	8002f0c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ef6:	f7fe fa47 	bl	8001388 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d901      	bls.n	8002f0c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e0bc      	b.n	8003086 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f0c:	4b61      	ldr	r3, [pc, #388]	; (8003094 <HAL_RCC_OscConfig+0x4d8>)
 8002f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d0ee      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x33a>
 8002f18:	e014      	b.n	8002f44 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f1a:	f7fe fa35 	bl	8001388 <HAL_GetTick>
 8002f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f20:	e00a      	b.n	8002f38 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f22:	f7fe fa31 	bl	8001388 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e0a6      	b.n	8003086 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f38:	4b56      	ldr	r3, [pc, #344]	; (8003094 <HAL_RCC_OscConfig+0x4d8>)
 8002f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1ee      	bne.n	8002f22 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f44:	7dfb      	ldrb	r3, [r7, #23]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d105      	bne.n	8002f56 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f4a:	4b52      	ldr	r3, [pc, #328]	; (8003094 <HAL_RCC_OscConfig+0x4d8>)
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	4a51      	ldr	r2, [pc, #324]	; (8003094 <HAL_RCC_OscConfig+0x4d8>)
 8002f50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f54:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 8092 	beq.w	8003084 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f60:	4b4c      	ldr	r3, [pc, #304]	; (8003094 <HAL_RCC_OscConfig+0x4d8>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f003 030c 	and.w	r3, r3, #12
 8002f68:	2b08      	cmp	r3, #8
 8002f6a:	d05c      	beq.n	8003026 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d141      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f74:	4b48      	ldr	r3, [pc, #288]	; (8003098 <HAL_RCC_OscConfig+0x4dc>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7a:	f7fe fa05 	bl	8001388 <HAL_GetTick>
 8002f7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f80:	e008      	b.n	8002f94 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f82:	f7fe fa01 	bl	8001388 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e078      	b.n	8003086 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f94:	4b3f      	ldr	r3, [pc, #252]	; (8003094 <HAL_RCC_OscConfig+0x4d8>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1f0      	bne.n	8002f82 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	69da      	ldr	r2, [r3, #28]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	431a      	orrs	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	019b      	lsls	r3, r3, #6
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb6:	085b      	lsrs	r3, r3, #1
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	041b      	lsls	r3, r3, #16
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc2:	061b      	lsls	r3, r3, #24
 8002fc4:	4933      	ldr	r1, [pc, #204]	; (8003094 <HAL_RCC_OscConfig+0x4d8>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fca:	4b33      	ldr	r3, [pc, #204]	; (8003098 <HAL_RCC_OscConfig+0x4dc>)
 8002fcc:	2201      	movs	r2, #1
 8002fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd0:	f7fe f9da 	bl	8001388 <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fd8:	f7fe f9d6 	bl	8001388 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e04d      	b.n	8003086 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fea:	4b2a      	ldr	r3, [pc, #168]	; (8003094 <HAL_RCC_OscConfig+0x4d8>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d0f0      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x41c>
 8002ff6:	e045      	b.n	8003084 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ff8:	4b27      	ldr	r3, [pc, #156]	; (8003098 <HAL_RCC_OscConfig+0x4dc>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffe:	f7fe f9c3 	bl	8001388 <HAL_GetTick>
 8003002:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003004:	e008      	b.n	8003018 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003006:	f7fe f9bf 	bl	8001388 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e036      	b.n	8003086 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003018:	4b1e      	ldr	r3, [pc, #120]	; (8003094 <HAL_RCC_OscConfig+0x4d8>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1f0      	bne.n	8003006 <HAL_RCC_OscConfig+0x44a>
 8003024:	e02e      	b.n	8003084 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d101      	bne.n	8003032 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e029      	b.n	8003086 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003032:	4b18      	ldr	r3, [pc, #96]	; (8003094 <HAL_RCC_OscConfig+0x4d8>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	429a      	cmp	r2, r3
 8003044:	d11c      	bne.n	8003080 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003050:	429a      	cmp	r2, r3
 8003052:	d115      	bne.n	8003080 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800305a:	4013      	ands	r3, r2
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003060:	4293      	cmp	r3, r2
 8003062:	d10d      	bne.n	8003080 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800306e:	429a      	cmp	r2, r3
 8003070:	d106      	bne.n	8003080 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800307c:	429a      	cmp	r2, r3
 800307e:	d001      	beq.n	8003084 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e000      	b.n	8003086 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	40007000 	.word	0x40007000
 8003094:	40023800 	.word	0x40023800
 8003098:	42470060 	.word	0x42470060

0800309c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d101      	bne.n	80030b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e0cc      	b.n	800324a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030b0:	4b68      	ldr	r3, [pc, #416]	; (8003254 <HAL_RCC_ClockConfig+0x1b8>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 030f 	and.w	r3, r3, #15
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d90c      	bls.n	80030d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030be:	4b65      	ldr	r3, [pc, #404]	; (8003254 <HAL_RCC_ClockConfig+0x1b8>)
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	b2d2      	uxtb	r2, r2
 80030c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030c6:	4b63      	ldr	r3, [pc, #396]	; (8003254 <HAL_RCC_ClockConfig+0x1b8>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 030f 	and.w	r3, r3, #15
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d001      	beq.n	80030d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e0b8      	b.n	800324a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d020      	beq.n	8003126 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0304 	and.w	r3, r3, #4
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d005      	beq.n	80030fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030f0:	4b59      	ldr	r3, [pc, #356]	; (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	4a58      	ldr	r2, [pc, #352]	; (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 80030f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0308 	and.w	r3, r3, #8
 8003104:	2b00      	cmp	r3, #0
 8003106:	d005      	beq.n	8003114 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003108:	4b53      	ldr	r3, [pc, #332]	; (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	4a52      	ldr	r2, [pc, #328]	; (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 800310e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003112:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003114:	4b50      	ldr	r3, [pc, #320]	; (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	494d      	ldr	r1, [pc, #308]	; (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 8003122:	4313      	orrs	r3, r2
 8003124:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b00      	cmp	r3, #0
 8003130:	d044      	beq.n	80031bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d107      	bne.n	800314a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800313a:	4b47      	ldr	r3, [pc, #284]	; (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d119      	bne.n	800317a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e07f      	b.n	800324a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2b02      	cmp	r3, #2
 8003150:	d003      	beq.n	800315a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003156:	2b03      	cmp	r3, #3
 8003158:	d107      	bne.n	800316a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800315a:	4b3f      	ldr	r3, [pc, #252]	; (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d109      	bne.n	800317a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e06f      	b.n	800324a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800316a:	4b3b      	ldr	r3, [pc, #236]	; (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e067      	b.n	800324a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800317a:	4b37      	ldr	r3, [pc, #220]	; (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f023 0203 	bic.w	r2, r3, #3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	4934      	ldr	r1, [pc, #208]	; (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 8003188:	4313      	orrs	r3, r2
 800318a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800318c:	f7fe f8fc 	bl	8001388 <HAL_GetTick>
 8003190:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003192:	e00a      	b.n	80031aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003194:	f7fe f8f8 	bl	8001388 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e04f      	b.n	800324a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031aa:	4b2b      	ldr	r3, [pc, #172]	; (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 020c 	and.w	r2, r3, #12
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d1eb      	bne.n	8003194 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031bc:	4b25      	ldr	r3, [pc, #148]	; (8003254 <HAL_RCC_ClockConfig+0x1b8>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 030f 	and.w	r3, r3, #15
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d20c      	bcs.n	80031e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ca:	4b22      	ldr	r3, [pc, #136]	; (8003254 <HAL_RCC_ClockConfig+0x1b8>)
 80031cc:	683a      	ldr	r2, [r7, #0]
 80031ce:	b2d2      	uxtb	r2, r2
 80031d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d2:	4b20      	ldr	r3, [pc, #128]	; (8003254 <HAL_RCC_ClockConfig+0x1b8>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 030f 	and.w	r3, r3, #15
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d001      	beq.n	80031e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e032      	b.n	800324a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0304 	and.w	r3, r3, #4
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d008      	beq.n	8003202 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031f0:	4b19      	ldr	r3, [pc, #100]	; (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	4916      	ldr	r1, [pc, #88]	; (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0308 	and.w	r3, r3, #8
 800320a:	2b00      	cmp	r3, #0
 800320c:	d009      	beq.n	8003222 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800320e:	4b12      	ldr	r3, [pc, #72]	; (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	490e      	ldr	r1, [pc, #56]	; (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 800321e:	4313      	orrs	r3, r2
 8003220:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003222:	f000 f821 	bl	8003268 <HAL_RCC_GetSysClockFreq>
 8003226:	4601      	mov	r1, r0
 8003228:	4b0b      	ldr	r3, [pc, #44]	; (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	091b      	lsrs	r3, r3, #4
 800322e:	f003 030f 	and.w	r3, r3, #15
 8003232:	4a0a      	ldr	r2, [pc, #40]	; (800325c <HAL_RCC_ClockConfig+0x1c0>)
 8003234:	5cd3      	ldrb	r3, [r2, r3]
 8003236:	fa21 f303 	lsr.w	r3, r1, r3
 800323a:	4a09      	ldr	r2, [pc, #36]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 800323c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800323e:	4b09      	ldr	r3, [pc, #36]	; (8003264 <HAL_RCC_ClockConfig+0x1c8>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4618      	mov	r0, r3
 8003244:	f7fd fc64 	bl	8000b10 <HAL_InitTick>

  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	40023c00 	.word	0x40023c00
 8003258:	40023800 	.word	0x40023800
 800325c:	0801d064 	.word	0x0801d064
 8003260:	20000000 	.word	0x20000000
 8003264:	20000004 	.word	0x20000004

08003268 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800326e:	2300      	movs	r3, #0
 8003270:	607b      	str	r3, [r7, #4]
 8003272:	2300      	movs	r3, #0
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	2300      	movs	r3, #0
 8003278:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800327a:	2300      	movs	r3, #0
 800327c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800327e:	4b63      	ldr	r3, [pc, #396]	; (800340c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f003 030c 	and.w	r3, r3, #12
 8003286:	2b04      	cmp	r3, #4
 8003288:	d007      	beq.n	800329a <HAL_RCC_GetSysClockFreq+0x32>
 800328a:	2b08      	cmp	r3, #8
 800328c:	d008      	beq.n	80032a0 <HAL_RCC_GetSysClockFreq+0x38>
 800328e:	2b00      	cmp	r3, #0
 8003290:	f040 80b4 	bne.w	80033fc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003294:	4b5e      	ldr	r3, [pc, #376]	; (8003410 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003296:	60bb      	str	r3, [r7, #8]
       break;
 8003298:	e0b3      	b.n	8003402 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800329a:	4b5e      	ldr	r3, [pc, #376]	; (8003414 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800329c:	60bb      	str	r3, [r7, #8]
      break;
 800329e:	e0b0      	b.n	8003402 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032a0:	4b5a      	ldr	r3, [pc, #360]	; (800340c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032a8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032aa:	4b58      	ldr	r3, [pc, #352]	; (800340c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d04a      	beq.n	800334c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032b6:	4b55      	ldr	r3, [pc, #340]	; (800340c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	099b      	lsrs	r3, r3, #6
 80032bc:	f04f 0400 	mov.w	r4, #0
 80032c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80032c4:	f04f 0200 	mov.w	r2, #0
 80032c8:	ea03 0501 	and.w	r5, r3, r1
 80032cc:	ea04 0602 	and.w	r6, r4, r2
 80032d0:	4629      	mov	r1, r5
 80032d2:	4632      	mov	r2, r6
 80032d4:	f04f 0300 	mov.w	r3, #0
 80032d8:	f04f 0400 	mov.w	r4, #0
 80032dc:	0154      	lsls	r4, r2, #5
 80032de:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80032e2:	014b      	lsls	r3, r1, #5
 80032e4:	4619      	mov	r1, r3
 80032e6:	4622      	mov	r2, r4
 80032e8:	1b49      	subs	r1, r1, r5
 80032ea:	eb62 0206 	sbc.w	r2, r2, r6
 80032ee:	f04f 0300 	mov.w	r3, #0
 80032f2:	f04f 0400 	mov.w	r4, #0
 80032f6:	0194      	lsls	r4, r2, #6
 80032f8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80032fc:	018b      	lsls	r3, r1, #6
 80032fe:	1a5b      	subs	r3, r3, r1
 8003300:	eb64 0402 	sbc.w	r4, r4, r2
 8003304:	f04f 0100 	mov.w	r1, #0
 8003308:	f04f 0200 	mov.w	r2, #0
 800330c:	00e2      	lsls	r2, r4, #3
 800330e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003312:	00d9      	lsls	r1, r3, #3
 8003314:	460b      	mov	r3, r1
 8003316:	4614      	mov	r4, r2
 8003318:	195b      	adds	r3, r3, r5
 800331a:	eb44 0406 	adc.w	r4, r4, r6
 800331e:	f04f 0100 	mov.w	r1, #0
 8003322:	f04f 0200 	mov.w	r2, #0
 8003326:	0262      	lsls	r2, r4, #9
 8003328:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800332c:	0259      	lsls	r1, r3, #9
 800332e:	460b      	mov	r3, r1
 8003330:	4614      	mov	r4, r2
 8003332:	4618      	mov	r0, r3
 8003334:	4621      	mov	r1, r4
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f04f 0400 	mov.w	r4, #0
 800333c:	461a      	mov	r2, r3
 800333e:	4623      	mov	r3, r4
 8003340:	f7fc ffbe 	bl	80002c0 <__aeabi_uldivmod>
 8003344:	4603      	mov	r3, r0
 8003346:	460c      	mov	r4, r1
 8003348:	60fb      	str	r3, [r7, #12]
 800334a:	e049      	b.n	80033e0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800334c:	4b2f      	ldr	r3, [pc, #188]	; (800340c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	099b      	lsrs	r3, r3, #6
 8003352:	f04f 0400 	mov.w	r4, #0
 8003356:	f240 11ff 	movw	r1, #511	; 0x1ff
 800335a:	f04f 0200 	mov.w	r2, #0
 800335e:	ea03 0501 	and.w	r5, r3, r1
 8003362:	ea04 0602 	and.w	r6, r4, r2
 8003366:	4629      	mov	r1, r5
 8003368:	4632      	mov	r2, r6
 800336a:	f04f 0300 	mov.w	r3, #0
 800336e:	f04f 0400 	mov.w	r4, #0
 8003372:	0154      	lsls	r4, r2, #5
 8003374:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003378:	014b      	lsls	r3, r1, #5
 800337a:	4619      	mov	r1, r3
 800337c:	4622      	mov	r2, r4
 800337e:	1b49      	subs	r1, r1, r5
 8003380:	eb62 0206 	sbc.w	r2, r2, r6
 8003384:	f04f 0300 	mov.w	r3, #0
 8003388:	f04f 0400 	mov.w	r4, #0
 800338c:	0194      	lsls	r4, r2, #6
 800338e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003392:	018b      	lsls	r3, r1, #6
 8003394:	1a5b      	subs	r3, r3, r1
 8003396:	eb64 0402 	sbc.w	r4, r4, r2
 800339a:	f04f 0100 	mov.w	r1, #0
 800339e:	f04f 0200 	mov.w	r2, #0
 80033a2:	00e2      	lsls	r2, r4, #3
 80033a4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80033a8:	00d9      	lsls	r1, r3, #3
 80033aa:	460b      	mov	r3, r1
 80033ac:	4614      	mov	r4, r2
 80033ae:	195b      	adds	r3, r3, r5
 80033b0:	eb44 0406 	adc.w	r4, r4, r6
 80033b4:	f04f 0100 	mov.w	r1, #0
 80033b8:	f04f 0200 	mov.w	r2, #0
 80033bc:	02a2      	lsls	r2, r4, #10
 80033be:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80033c2:	0299      	lsls	r1, r3, #10
 80033c4:	460b      	mov	r3, r1
 80033c6:	4614      	mov	r4, r2
 80033c8:	4618      	mov	r0, r3
 80033ca:	4621      	mov	r1, r4
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f04f 0400 	mov.w	r4, #0
 80033d2:	461a      	mov	r2, r3
 80033d4:	4623      	mov	r3, r4
 80033d6:	f7fc ff73 	bl	80002c0 <__aeabi_uldivmod>
 80033da:	4603      	mov	r3, r0
 80033dc:	460c      	mov	r4, r1
 80033de:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033e0:	4b0a      	ldr	r3, [pc, #40]	; (800340c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	0c1b      	lsrs	r3, r3, #16
 80033e6:	f003 0303 	and.w	r3, r3, #3
 80033ea:	3301      	adds	r3, #1
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f8:	60bb      	str	r3, [r7, #8]
      break;
 80033fa:	e002      	b.n	8003402 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033fc:	4b04      	ldr	r3, [pc, #16]	; (8003410 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80033fe:	60bb      	str	r3, [r7, #8]
      break;
 8003400:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003402:	68bb      	ldr	r3, [r7, #8]
}
 8003404:	4618      	mov	r0, r3
 8003406:	3714      	adds	r7, #20
 8003408:	46bd      	mov	sp, r7
 800340a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800340c:	40023800 	.word	0x40023800
 8003410:	00f42400 	.word	0x00f42400
 8003414:	007a1200 	.word	0x007a1200

08003418 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800341c:	4b03      	ldr	r3, [pc, #12]	; (800342c <HAL_RCC_GetHCLKFreq+0x14>)
 800341e:	681b      	ldr	r3, [r3, #0]
}
 8003420:	4618      	mov	r0, r3
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	20000000 	.word	0x20000000

08003430 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003434:	f7ff fff0 	bl	8003418 <HAL_RCC_GetHCLKFreq>
 8003438:	4601      	mov	r1, r0
 800343a:	4b05      	ldr	r3, [pc, #20]	; (8003450 <HAL_RCC_GetPCLK1Freq+0x20>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	0a9b      	lsrs	r3, r3, #10
 8003440:	f003 0307 	and.w	r3, r3, #7
 8003444:	4a03      	ldr	r2, [pc, #12]	; (8003454 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003446:	5cd3      	ldrb	r3, [r2, r3]
 8003448:	fa21 f303 	lsr.w	r3, r1, r3
}
 800344c:	4618      	mov	r0, r3
 800344e:	bd80      	pop	{r7, pc}
 8003450:	40023800 	.word	0x40023800
 8003454:	0801d074 	.word	0x0801d074

08003458 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800345c:	f7ff ffdc 	bl	8003418 <HAL_RCC_GetHCLKFreq>
 8003460:	4601      	mov	r1, r0
 8003462:	4b05      	ldr	r3, [pc, #20]	; (8003478 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	0b5b      	lsrs	r3, r3, #13
 8003468:	f003 0307 	and.w	r3, r3, #7
 800346c:	4a03      	ldr	r2, [pc, #12]	; (800347c <HAL_RCC_GetPCLK2Freq+0x24>)
 800346e:	5cd3      	ldrb	r3, [r2, r3]
 8003470:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003474:	4618      	mov	r0, r3
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40023800 	.word	0x40023800
 800347c:	0801d074 	.word	0x0801d074

08003480 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	220f      	movs	r2, #15
 800348e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003490:	4b12      	ldr	r3, [pc, #72]	; (80034dc <HAL_RCC_GetClockConfig+0x5c>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f003 0203 	and.w	r2, r3, #3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800349c:	4b0f      	ldr	r3, [pc, #60]	; (80034dc <HAL_RCC_GetClockConfig+0x5c>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80034a8:	4b0c      	ldr	r3, [pc, #48]	; (80034dc <HAL_RCC_GetClockConfig+0x5c>)
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80034b4:	4b09      	ldr	r3, [pc, #36]	; (80034dc <HAL_RCC_GetClockConfig+0x5c>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	08db      	lsrs	r3, r3, #3
 80034ba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80034c2:	4b07      	ldr	r3, [pc, #28]	; (80034e0 <HAL_RCC_GetClockConfig+0x60>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 020f 	and.w	r2, r3, #15
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	601a      	str	r2, [r3, #0]
}
 80034ce:	bf00      	nop
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	40023800 	.word	0x40023800
 80034e0:	40023c00 	.word	0x40023c00

080034e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e01d      	b.n	8003532 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d106      	bne.n	8003510 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f815 	bl	800353a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2202      	movs	r2, #2
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	3304      	adds	r3, #4
 8003520:	4619      	mov	r1, r3
 8003522:	4610      	mov	r0, r2
 8003524:	f000 f968 	bl	80037f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800353a:	b480      	push	{r7}
 800353c:	b083      	sub	sp, #12
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003542:	bf00      	nop
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr

0800354e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800354e:	b480      	push	{r7}
 8003550:	b085      	sub	sp, #20
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68da      	ldr	r2, [r3, #12]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f042 0201 	orr.w	r2, r2, #1
 8003564:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f003 0307 	and.w	r3, r3, #7
 8003570:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2b06      	cmp	r3, #6
 8003576:	d007      	beq.n	8003588 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f042 0201 	orr.w	r2, r2, #1
 8003586:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3714      	adds	r7, #20
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr

08003596 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b082      	sub	sp, #8
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d122      	bne.n	80035f2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d11b      	bne.n	80035f2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f06f 0202 	mvn.w	r2, #2
 80035c2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	f003 0303 	and.w	r3, r3, #3
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d003      	beq.n	80035e0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 f8ee 	bl	80037ba <HAL_TIM_IC_CaptureCallback>
 80035de:	e005      	b.n	80035ec <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 f8e0 	bl	80037a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 f8f1 	bl	80037ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	f003 0304 	and.w	r3, r3, #4
 80035fc:	2b04      	cmp	r3, #4
 80035fe:	d122      	bne.n	8003646 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	f003 0304 	and.w	r3, r3, #4
 800360a:	2b04      	cmp	r3, #4
 800360c:	d11b      	bne.n	8003646 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f06f 0204 	mvn.w	r2, #4
 8003616:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2202      	movs	r2, #2
 800361c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003628:	2b00      	cmp	r3, #0
 800362a:	d003      	beq.n	8003634 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 f8c4 	bl	80037ba <HAL_TIM_IC_CaptureCallback>
 8003632:	e005      	b.n	8003640 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 f8b6 	bl	80037a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f8c7 	bl	80037ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	f003 0308 	and.w	r3, r3, #8
 8003650:	2b08      	cmp	r3, #8
 8003652:	d122      	bne.n	800369a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	f003 0308 	and.w	r3, r3, #8
 800365e:	2b08      	cmp	r3, #8
 8003660:	d11b      	bne.n	800369a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f06f 0208 	mvn.w	r2, #8
 800366a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2204      	movs	r2, #4
 8003670:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	69db      	ldr	r3, [r3, #28]
 8003678:	f003 0303 	and.w	r3, r3, #3
 800367c:	2b00      	cmp	r3, #0
 800367e:	d003      	beq.n	8003688 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 f89a 	bl	80037ba <HAL_TIM_IC_CaptureCallback>
 8003686:	e005      	b.n	8003694 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 f88c 	bl	80037a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f89d 	bl	80037ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	f003 0310 	and.w	r3, r3, #16
 80036a4:	2b10      	cmp	r3, #16
 80036a6:	d122      	bne.n	80036ee <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	f003 0310 	and.w	r3, r3, #16
 80036b2:	2b10      	cmp	r3, #16
 80036b4:	d11b      	bne.n	80036ee <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f06f 0210 	mvn.w	r2, #16
 80036be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2208      	movs	r2, #8
 80036c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	69db      	ldr	r3, [r3, #28]
 80036cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d003      	beq.n	80036dc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 f870 	bl	80037ba <HAL_TIM_IC_CaptureCallback>
 80036da:	e005      	b.n	80036e8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 f862 	bl	80037a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f873 	bl	80037ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d10e      	bne.n	800371a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b01      	cmp	r3, #1
 8003708:	d107      	bne.n	800371a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f06f 0201 	mvn.w	r2, #1
 8003712:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f7fd f913 	bl	8000940 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003724:	2b80      	cmp	r3, #128	; 0x80
 8003726:	d10e      	bne.n	8003746 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003732:	2b80      	cmp	r3, #128	; 0x80
 8003734:	d107      	bne.n	8003746 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800373e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 f903 	bl	800394c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003750:	2b40      	cmp	r3, #64	; 0x40
 8003752:	d10e      	bne.n	8003772 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375e:	2b40      	cmp	r3, #64	; 0x40
 8003760:	d107      	bne.n	8003772 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800376a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 f838 	bl	80037e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	f003 0320 	and.w	r3, r3, #32
 800377c:	2b20      	cmp	r3, #32
 800377e:	d10e      	bne.n	800379e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	f003 0320 	and.w	r3, r3, #32
 800378a:	2b20      	cmp	r3, #32
 800378c:	d107      	bne.n	800379e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f06f 0220 	mvn.w	r2, #32
 8003796:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 f8cd 	bl	8003938 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800379e:	bf00      	nop
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037a6:	b480      	push	{r7}
 80037a8:	b083      	sub	sp, #12
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037ae:	bf00      	nop
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr

080037ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037ba:	b480      	push	{r7}
 80037bc:	b083      	sub	sp, #12
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037c2:	bf00      	nop
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr

080037ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037ce:	b480      	push	{r7}
 80037d0:	b083      	sub	sp, #12
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037d6:	bf00      	nop
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr

080037e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b083      	sub	sp, #12
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037ea:	bf00      	nop
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
	...

080037f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a40      	ldr	r2, [pc, #256]	; (800390c <TIM_Base_SetConfig+0x114>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d013      	beq.n	8003838 <TIM_Base_SetConfig+0x40>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003816:	d00f      	beq.n	8003838 <TIM_Base_SetConfig+0x40>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a3d      	ldr	r2, [pc, #244]	; (8003910 <TIM_Base_SetConfig+0x118>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d00b      	beq.n	8003838 <TIM_Base_SetConfig+0x40>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a3c      	ldr	r2, [pc, #240]	; (8003914 <TIM_Base_SetConfig+0x11c>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d007      	beq.n	8003838 <TIM_Base_SetConfig+0x40>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a3b      	ldr	r2, [pc, #236]	; (8003918 <TIM_Base_SetConfig+0x120>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d003      	beq.n	8003838 <TIM_Base_SetConfig+0x40>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a3a      	ldr	r2, [pc, #232]	; (800391c <TIM_Base_SetConfig+0x124>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d108      	bne.n	800384a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800383e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	4313      	orrs	r3, r2
 8003848:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a2f      	ldr	r2, [pc, #188]	; (800390c <TIM_Base_SetConfig+0x114>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d02b      	beq.n	80038aa <TIM_Base_SetConfig+0xb2>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003858:	d027      	beq.n	80038aa <TIM_Base_SetConfig+0xb2>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a2c      	ldr	r2, [pc, #176]	; (8003910 <TIM_Base_SetConfig+0x118>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d023      	beq.n	80038aa <TIM_Base_SetConfig+0xb2>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a2b      	ldr	r2, [pc, #172]	; (8003914 <TIM_Base_SetConfig+0x11c>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d01f      	beq.n	80038aa <TIM_Base_SetConfig+0xb2>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a2a      	ldr	r2, [pc, #168]	; (8003918 <TIM_Base_SetConfig+0x120>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d01b      	beq.n	80038aa <TIM_Base_SetConfig+0xb2>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a29      	ldr	r2, [pc, #164]	; (800391c <TIM_Base_SetConfig+0x124>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d017      	beq.n	80038aa <TIM_Base_SetConfig+0xb2>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a28      	ldr	r2, [pc, #160]	; (8003920 <TIM_Base_SetConfig+0x128>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d013      	beq.n	80038aa <TIM_Base_SetConfig+0xb2>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a27      	ldr	r2, [pc, #156]	; (8003924 <TIM_Base_SetConfig+0x12c>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d00f      	beq.n	80038aa <TIM_Base_SetConfig+0xb2>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a26      	ldr	r2, [pc, #152]	; (8003928 <TIM_Base_SetConfig+0x130>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d00b      	beq.n	80038aa <TIM_Base_SetConfig+0xb2>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a25      	ldr	r2, [pc, #148]	; (800392c <TIM_Base_SetConfig+0x134>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d007      	beq.n	80038aa <TIM_Base_SetConfig+0xb2>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a24      	ldr	r2, [pc, #144]	; (8003930 <TIM_Base_SetConfig+0x138>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d003      	beq.n	80038aa <TIM_Base_SetConfig+0xb2>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a23      	ldr	r2, [pc, #140]	; (8003934 <TIM_Base_SetConfig+0x13c>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d108      	bne.n	80038bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a0a      	ldr	r2, [pc, #40]	; (800390c <TIM_Base_SetConfig+0x114>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d003      	beq.n	80038f0 <TIM_Base_SetConfig+0xf8>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a0c      	ldr	r2, [pc, #48]	; (800391c <TIM_Base_SetConfig+0x124>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d103      	bne.n	80038f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	691a      	ldr	r2, [r3, #16]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	615a      	str	r2, [r3, #20]
}
 80038fe:	bf00      	nop
 8003900:	3714      	adds	r7, #20
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	40010000 	.word	0x40010000
 8003910:	40000400 	.word	0x40000400
 8003914:	40000800 	.word	0x40000800
 8003918:	40000c00 	.word	0x40000c00
 800391c:	40010400 	.word	0x40010400
 8003920:	40014000 	.word	0x40014000
 8003924:	40014400 	.word	0x40014400
 8003928:	40014800 	.word	0x40014800
 800392c:	40001800 	.word	0x40001800
 8003930:	40001c00 	.word	0x40001c00
 8003934:	40002000 	.word	0x40002000

08003938 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e03f      	b.n	80039f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d106      	bne.n	800398c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7fd f820 	bl	80009cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2224      	movs	r2, #36	; 0x24
 8003990:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68da      	ldr	r2, [r3, #12]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 f829 	bl	80039fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	691a      	ldr	r2, [r3, #16]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	695a      	ldr	r2, [r3, #20]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68da      	ldr	r2, [r3, #12]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2220      	movs	r2, #32
 80039e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2220      	movs	r2, #32
 80039ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
	...

080039fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a00:	b085      	sub	sp, #20
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68da      	ldr	r2, [r3, #12]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	431a      	orrs	r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	69db      	ldr	r3, [r3, #28]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003a3e:	f023 030c 	bic.w	r3, r3, #12
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	6812      	ldr	r2, [r2, #0]
 8003a46:	68f9      	ldr	r1, [r7, #12]
 8003a48:	430b      	orrs	r3, r1
 8003a4a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	699a      	ldr	r2, [r3, #24]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	69db      	ldr	r3, [r3, #28]
 8003a66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a6a:	f040 818b 	bne.w	8003d84 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4ac1      	ldr	r2, [pc, #772]	; (8003d78 <UART_SetConfig+0x37c>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d005      	beq.n	8003a84 <UART_SetConfig+0x88>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4abf      	ldr	r2, [pc, #764]	; (8003d7c <UART_SetConfig+0x380>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	f040 80bd 	bne.w	8003bfe <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a84:	f7ff fce8 	bl	8003458 <HAL_RCC_GetPCLK2Freq>
 8003a88:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	461d      	mov	r5, r3
 8003a8e:	f04f 0600 	mov.w	r6, #0
 8003a92:	46a8      	mov	r8, r5
 8003a94:	46b1      	mov	r9, r6
 8003a96:	eb18 0308 	adds.w	r3, r8, r8
 8003a9a:	eb49 0409 	adc.w	r4, r9, r9
 8003a9e:	4698      	mov	r8, r3
 8003aa0:	46a1      	mov	r9, r4
 8003aa2:	eb18 0805 	adds.w	r8, r8, r5
 8003aa6:	eb49 0906 	adc.w	r9, r9, r6
 8003aaa:	f04f 0100 	mov.w	r1, #0
 8003aae:	f04f 0200 	mov.w	r2, #0
 8003ab2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003ab6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003aba:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003abe:	4688      	mov	r8, r1
 8003ac0:	4691      	mov	r9, r2
 8003ac2:	eb18 0005 	adds.w	r0, r8, r5
 8003ac6:	eb49 0106 	adc.w	r1, r9, r6
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	461d      	mov	r5, r3
 8003ad0:	f04f 0600 	mov.w	r6, #0
 8003ad4:	196b      	adds	r3, r5, r5
 8003ad6:	eb46 0406 	adc.w	r4, r6, r6
 8003ada:	461a      	mov	r2, r3
 8003adc:	4623      	mov	r3, r4
 8003ade:	f7fc fbef 	bl	80002c0 <__aeabi_uldivmod>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	460c      	mov	r4, r1
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	4ba5      	ldr	r3, [pc, #660]	; (8003d80 <UART_SetConfig+0x384>)
 8003aea:	fba3 2302 	umull	r2, r3, r3, r2
 8003aee:	095b      	lsrs	r3, r3, #5
 8003af0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	461d      	mov	r5, r3
 8003af8:	f04f 0600 	mov.w	r6, #0
 8003afc:	46a9      	mov	r9, r5
 8003afe:	46b2      	mov	sl, r6
 8003b00:	eb19 0309 	adds.w	r3, r9, r9
 8003b04:	eb4a 040a 	adc.w	r4, sl, sl
 8003b08:	4699      	mov	r9, r3
 8003b0a:	46a2      	mov	sl, r4
 8003b0c:	eb19 0905 	adds.w	r9, r9, r5
 8003b10:	eb4a 0a06 	adc.w	sl, sl, r6
 8003b14:	f04f 0100 	mov.w	r1, #0
 8003b18:	f04f 0200 	mov.w	r2, #0
 8003b1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b20:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b24:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b28:	4689      	mov	r9, r1
 8003b2a:	4692      	mov	sl, r2
 8003b2c:	eb19 0005 	adds.w	r0, r9, r5
 8003b30:	eb4a 0106 	adc.w	r1, sl, r6
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	461d      	mov	r5, r3
 8003b3a:	f04f 0600 	mov.w	r6, #0
 8003b3e:	196b      	adds	r3, r5, r5
 8003b40:	eb46 0406 	adc.w	r4, r6, r6
 8003b44:	461a      	mov	r2, r3
 8003b46:	4623      	mov	r3, r4
 8003b48:	f7fc fbba 	bl	80002c0 <__aeabi_uldivmod>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	460c      	mov	r4, r1
 8003b50:	461a      	mov	r2, r3
 8003b52:	4b8b      	ldr	r3, [pc, #556]	; (8003d80 <UART_SetConfig+0x384>)
 8003b54:	fba3 1302 	umull	r1, r3, r3, r2
 8003b58:	095b      	lsrs	r3, r3, #5
 8003b5a:	2164      	movs	r1, #100	; 0x64
 8003b5c:	fb01 f303 	mul.w	r3, r1, r3
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	3332      	adds	r3, #50	; 0x32
 8003b66:	4a86      	ldr	r2, [pc, #536]	; (8003d80 <UART_SetConfig+0x384>)
 8003b68:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6c:	095b      	lsrs	r3, r3, #5
 8003b6e:	005b      	lsls	r3, r3, #1
 8003b70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b74:	4498      	add	r8, r3
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	461d      	mov	r5, r3
 8003b7a:	f04f 0600 	mov.w	r6, #0
 8003b7e:	46a9      	mov	r9, r5
 8003b80:	46b2      	mov	sl, r6
 8003b82:	eb19 0309 	adds.w	r3, r9, r9
 8003b86:	eb4a 040a 	adc.w	r4, sl, sl
 8003b8a:	4699      	mov	r9, r3
 8003b8c:	46a2      	mov	sl, r4
 8003b8e:	eb19 0905 	adds.w	r9, r9, r5
 8003b92:	eb4a 0a06 	adc.w	sl, sl, r6
 8003b96:	f04f 0100 	mov.w	r1, #0
 8003b9a:	f04f 0200 	mov.w	r2, #0
 8003b9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ba2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ba6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003baa:	4689      	mov	r9, r1
 8003bac:	4692      	mov	sl, r2
 8003bae:	eb19 0005 	adds.w	r0, r9, r5
 8003bb2:	eb4a 0106 	adc.w	r1, sl, r6
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	461d      	mov	r5, r3
 8003bbc:	f04f 0600 	mov.w	r6, #0
 8003bc0:	196b      	adds	r3, r5, r5
 8003bc2:	eb46 0406 	adc.w	r4, r6, r6
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	4623      	mov	r3, r4
 8003bca:	f7fc fb79 	bl	80002c0 <__aeabi_uldivmod>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	460c      	mov	r4, r1
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	4b6a      	ldr	r3, [pc, #424]	; (8003d80 <UART_SetConfig+0x384>)
 8003bd6:	fba3 1302 	umull	r1, r3, r3, r2
 8003bda:	095b      	lsrs	r3, r3, #5
 8003bdc:	2164      	movs	r1, #100	; 0x64
 8003bde:	fb01 f303 	mul.w	r3, r1, r3
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	00db      	lsls	r3, r3, #3
 8003be6:	3332      	adds	r3, #50	; 0x32
 8003be8:	4a65      	ldr	r2, [pc, #404]	; (8003d80 <UART_SetConfig+0x384>)
 8003bea:	fba2 2303 	umull	r2, r3, r2, r3
 8003bee:	095b      	lsrs	r3, r3, #5
 8003bf0:	f003 0207 	and.w	r2, r3, #7
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4442      	add	r2, r8
 8003bfa:	609a      	str	r2, [r3, #8]
 8003bfc:	e26f      	b.n	80040de <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bfe:	f7ff fc17 	bl	8003430 <HAL_RCC_GetPCLK1Freq>
 8003c02:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	461d      	mov	r5, r3
 8003c08:	f04f 0600 	mov.w	r6, #0
 8003c0c:	46a8      	mov	r8, r5
 8003c0e:	46b1      	mov	r9, r6
 8003c10:	eb18 0308 	adds.w	r3, r8, r8
 8003c14:	eb49 0409 	adc.w	r4, r9, r9
 8003c18:	4698      	mov	r8, r3
 8003c1a:	46a1      	mov	r9, r4
 8003c1c:	eb18 0805 	adds.w	r8, r8, r5
 8003c20:	eb49 0906 	adc.w	r9, r9, r6
 8003c24:	f04f 0100 	mov.w	r1, #0
 8003c28:	f04f 0200 	mov.w	r2, #0
 8003c2c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003c30:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003c34:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003c38:	4688      	mov	r8, r1
 8003c3a:	4691      	mov	r9, r2
 8003c3c:	eb18 0005 	adds.w	r0, r8, r5
 8003c40:	eb49 0106 	adc.w	r1, r9, r6
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	461d      	mov	r5, r3
 8003c4a:	f04f 0600 	mov.w	r6, #0
 8003c4e:	196b      	adds	r3, r5, r5
 8003c50:	eb46 0406 	adc.w	r4, r6, r6
 8003c54:	461a      	mov	r2, r3
 8003c56:	4623      	mov	r3, r4
 8003c58:	f7fc fb32 	bl	80002c0 <__aeabi_uldivmod>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	460c      	mov	r4, r1
 8003c60:	461a      	mov	r2, r3
 8003c62:	4b47      	ldr	r3, [pc, #284]	; (8003d80 <UART_SetConfig+0x384>)
 8003c64:	fba3 2302 	umull	r2, r3, r3, r2
 8003c68:	095b      	lsrs	r3, r3, #5
 8003c6a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	461d      	mov	r5, r3
 8003c72:	f04f 0600 	mov.w	r6, #0
 8003c76:	46a9      	mov	r9, r5
 8003c78:	46b2      	mov	sl, r6
 8003c7a:	eb19 0309 	adds.w	r3, r9, r9
 8003c7e:	eb4a 040a 	adc.w	r4, sl, sl
 8003c82:	4699      	mov	r9, r3
 8003c84:	46a2      	mov	sl, r4
 8003c86:	eb19 0905 	adds.w	r9, r9, r5
 8003c8a:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c8e:	f04f 0100 	mov.w	r1, #0
 8003c92:	f04f 0200 	mov.w	r2, #0
 8003c96:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c9a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c9e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ca2:	4689      	mov	r9, r1
 8003ca4:	4692      	mov	sl, r2
 8003ca6:	eb19 0005 	adds.w	r0, r9, r5
 8003caa:	eb4a 0106 	adc.w	r1, sl, r6
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	461d      	mov	r5, r3
 8003cb4:	f04f 0600 	mov.w	r6, #0
 8003cb8:	196b      	adds	r3, r5, r5
 8003cba:	eb46 0406 	adc.w	r4, r6, r6
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	4623      	mov	r3, r4
 8003cc2:	f7fc fafd 	bl	80002c0 <__aeabi_uldivmod>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	460c      	mov	r4, r1
 8003cca:	461a      	mov	r2, r3
 8003ccc:	4b2c      	ldr	r3, [pc, #176]	; (8003d80 <UART_SetConfig+0x384>)
 8003cce:	fba3 1302 	umull	r1, r3, r3, r2
 8003cd2:	095b      	lsrs	r3, r3, #5
 8003cd4:	2164      	movs	r1, #100	; 0x64
 8003cd6:	fb01 f303 	mul.w	r3, r1, r3
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	00db      	lsls	r3, r3, #3
 8003cde:	3332      	adds	r3, #50	; 0x32
 8003ce0:	4a27      	ldr	r2, [pc, #156]	; (8003d80 <UART_SetConfig+0x384>)
 8003ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce6:	095b      	lsrs	r3, r3, #5
 8003ce8:	005b      	lsls	r3, r3, #1
 8003cea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003cee:	4498      	add	r8, r3
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	461d      	mov	r5, r3
 8003cf4:	f04f 0600 	mov.w	r6, #0
 8003cf8:	46a9      	mov	r9, r5
 8003cfa:	46b2      	mov	sl, r6
 8003cfc:	eb19 0309 	adds.w	r3, r9, r9
 8003d00:	eb4a 040a 	adc.w	r4, sl, sl
 8003d04:	4699      	mov	r9, r3
 8003d06:	46a2      	mov	sl, r4
 8003d08:	eb19 0905 	adds.w	r9, r9, r5
 8003d0c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003d10:	f04f 0100 	mov.w	r1, #0
 8003d14:	f04f 0200 	mov.w	r2, #0
 8003d18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d1c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d20:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d24:	4689      	mov	r9, r1
 8003d26:	4692      	mov	sl, r2
 8003d28:	eb19 0005 	adds.w	r0, r9, r5
 8003d2c:	eb4a 0106 	adc.w	r1, sl, r6
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	461d      	mov	r5, r3
 8003d36:	f04f 0600 	mov.w	r6, #0
 8003d3a:	196b      	adds	r3, r5, r5
 8003d3c:	eb46 0406 	adc.w	r4, r6, r6
 8003d40:	461a      	mov	r2, r3
 8003d42:	4623      	mov	r3, r4
 8003d44:	f7fc fabc 	bl	80002c0 <__aeabi_uldivmod>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	460c      	mov	r4, r1
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	4b0c      	ldr	r3, [pc, #48]	; (8003d80 <UART_SetConfig+0x384>)
 8003d50:	fba3 1302 	umull	r1, r3, r3, r2
 8003d54:	095b      	lsrs	r3, r3, #5
 8003d56:	2164      	movs	r1, #100	; 0x64
 8003d58:	fb01 f303 	mul.w	r3, r1, r3
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	00db      	lsls	r3, r3, #3
 8003d60:	3332      	adds	r3, #50	; 0x32
 8003d62:	4a07      	ldr	r2, [pc, #28]	; (8003d80 <UART_SetConfig+0x384>)
 8003d64:	fba2 2303 	umull	r2, r3, r2, r3
 8003d68:	095b      	lsrs	r3, r3, #5
 8003d6a:	f003 0207 	and.w	r2, r3, #7
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4442      	add	r2, r8
 8003d74:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003d76:	e1b2      	b.n	80040de <UART_SetConfig+0x6e2>
 8003d78:	40011000 	.word	0x40011000
 8003d7c:	40011400 	.word	0x40011400
 8003d80:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4ad7      	ldr	r2, [pc, #860]	; (80040e8 <UART_SetConfig+0x6ec>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d005      	beq.n	8003d9a <UART_SetConfig+0x39e>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4ad6      	ldr	r2, [pc, #856]	; (80040ec <UART_SetConfig+0x6f0>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	f040 80d1 	bne.w	8003f3c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d9a:	f7ff fb5d 	bl	8003458 <HAL_RCC_GetPCLK2Freq>
 8003d9e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	469a      	mov	sl, r3
 8003da4:	f04f 0b00 	mov.w	fp, #0
 8003da8:	46d0      	mov	r8, sl
 8003daa:	46d9      	mov	r9, fp
 8003dac:	eb18 0308 	adds.w	r3, r8, r8
 8003db0:	eb49 0409 	adc.w	r4, r9, r9
 8003db4:	4698      	mov	r8, r3
 8003db6:	46a1      	mov	r9, r4
 8003db8:	eb18 080a 	adds.w	r8, r8, sl
 8003dbc:	eb49 090b 	adc.w	r9, r9, fp
 8003dc0:	f04f 0100 	mov.w	r1, #0
 8003dc4:	f04f 0200 	mov.w	r2, #0
 8003dc8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003dcc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003dd0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003dd4:	4688      	mov	r8, r1
 8003dd6:	4691      	mov	r9, r2
 8003dd8:	eb1a 0508 	adds.w	r5, sl, r8
 8003ddc:	eb4b 0609 	adc.w	r6, fp, r9
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	4619      	mov	r1, r3
 8003de6:	f04f 0200 	mov.w	r2, #0
 8003dea:	f04f 0300 	mov.w	r3, #0
 8003dee:	f04f 0400 	mov.w	r4, #0
 8003df2:	0094      	lsls	r4, r2, #2
 8003df4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003df8:	008b      	lsls	r3, r1, #2
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	4623      	mov	r3, r4
 8003dfe:	4628      	mov	r0, r5
 8003e00:	4631      	mov	r1, r6
 8003e02:	f7fc fa5d 	bl	80002c0 <__aeabi_uldivmod>
 8003e06:	4603      	mov	r3, r0
 8003e08:	460c      	mov	r4, r1
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	4bb8      	ldr	r3, [pc, #736]	; (80040f0 <UART_SetConfig+0x6f4>)
 8003e0e:	fba3 2302 	umull	r2, r3, r3, r2
 8003e12:	095b      	lsrs	r3, r3, #5
 8003e14:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	469b      	mov	fp, r3
 8003e1c:	f04f 0c00 	mov.w	ip, #0
 8003e20:	46d9      	mov	r9, fp
 8003e22:	46e2      	mov	sl, ip
 8003e24:	eb19 0309 	adds.w	r3, r9, r9
 8003e28:	eb4a 040a 	adc.w	r4, sl, sl
 8003e2c:	4699      	mov	r9, r3
 8003e2e:	46a2      	mov	sl, r4
 8003e30:	eb19 090b 	adds.w	r9, r9, fp
 8003e34:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003e38:	f04f 0100 	mov.w	r1, #0
 8003e3c:	f04f 0200 	mov.w	r2, #0
 8003e40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e44:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e48:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e4c:	4689      	mov	r9, r1
 8003e4e:	4692      	mov	sl, r2
 8003e50:	eb1b 0509 	adds.w	r5, fp, r9
 8003e54:	eb4c 060a 	adc.w	r6, ip, sl
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	f04f 0200 	mov.w	r2, #0
 8003e62:	f04f 0300 	mov.w	r3, #0
 8003e66:	f04f 0400 	mov.w	r4, #0
 8003e6a:	0094      	lsls	r4, r2, #2
 8003e6c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e70:	008b      	lsls	r3, r1, #2
 8003e72:	461a      	mov	r2, r3
 8003e74:	4623      	mov	r3, r4
 8003e76:	4628      	mov	r0, r5
 8003e78:	4631      	mov	r1, r6
 8003e7a:	f7fc fa21 	bl	80002c0 <__aeabi_uldivmod>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	460c      	mov	r4, r1
 8003e82:	461a      	mov	r2, r3
 8003e84:	4b9a      	ldr	r3, [pc, #616]	; (80040f0 <UART_SetConfig+0x6f4>)
 8003e86:	fba3 1302 	umull	r1, r3, r3, r2
 8003e8a:	095b      	lsrs	r3, r3, #5
 8003e8c:	2164      	movs	r1, #100	; 0x64
 8003e8e:	fb01 f303 	mul.w	r3, r1, r3
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	011b      	lsls	r3, r3, #4
 8003e96:	3332      	adds	r3, #50	; 0x32
 8003e98:	4a95      	ldr	r2, [pc, #596]	; (80040f0 <UART_SetConfig+0x6f4>)
 8003e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9e:	095b      	lsrs	r3, r3, #5
 8003ea0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ea4:	4498      	add	r8, r3
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	469b      	mov	fp, r3
 8003eaa:	f04f 0c00 	mov.w	ip, #0
 8003eae:	46d9      	mov	r9, fp
 8003eb0:	46e2      	mov	sl, ip
 8003eb2:	eb19 0309 	adds.w	r3, r9, r9
 8003eb6:	eb4a 040a 	adc.w	r4, sl, sl
 8003eba:	4699      	mov	r9, r3
 8003ebc:	46a2      	mov	sl, r4
 8003ebe:	eb19 090b 	adds.w	r9, r9, fp
 8003ec2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003ec6:	f04f 0100 	mov.w	r1, #0
 8003eca:	f04f 0200 	mov.w	r2, #0
 8003ece:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ed2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ed6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003eda:	4689      	mov	r9, r1
 8003edc:	4692      	mov	sl, r2
 8003ede:	eb1b 0509 	adds.w	r5, fp, r9
 8003ee2:	eb4c 060a 	adc.w	r6, ip, sl
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	4619      	mov	r1, r3
 8003eec:	f04f 0200 	mov.w	r2, #0
 8003ef0:	f04f 0300 	mov.w	r3, #0
 8003ef4:	f04f 0400 	mov.w	r4, #0
 8003ef8:	0094      	lsls	r4, r2, #2
 8003efa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003efe:	008b      	lsls	r3, r1, #2
 8003f00:	461a      	mov	r2, r3
 8003f02:	4623      	mov	r3, r4
 8003f04:	4628      	mov	r0, r5
 8003f06:	4631      	mov	r1, r6
 8003f08:	f7fc f9da 	bl	80002c0 <__aeabi_uldivmod>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	460c      	mov	r4, r1
 8003f10:	461a      	mov	r2, r3
 8003f12:	4b77      	ldr	r3, [pc, #476]	; (80040f0 <UART_SetConfig+0x6f4>)
 8003f14:	fba3 1302 	umull	r1, r3, r3, r2
 8003f18:	095b      	lsrs	r3, r3, #5
 8003f1a:	2164      	movs	r1, #100	; 0x64
 8003f1c:	fb01 f303 	mul.w	r3, r1, r3
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	011b      	lsls	r3, r3, #4
 8003f24:	3332      	adds	r3, #50	; 0x32
 8003f26:	4a72      	ldr	r2, [pc, #456]	; (80040f0 <UART_SetConfig+0x6f4>)
 8003f28:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2c:	095b      	lsrs	r3, r3, #5
 8003f2e:	f003 020f 	and.w	r2, r3, #15
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4442      	add	r2, r8
 8003f38:	609a      	str	r2, [r3, #8]
 8003f3a:	e0d0      	b.n	80040de <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f3c:	f7ff fa78 	bl	8003430 <HAL_RCC_GetPCLK1Freq>
 8003f40:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	469a      	mov	sl, r3
 8003f46:	f04f 0b00 	mov.w	fp, #0
 8003f4a:	46d0      	mov	r8, sl
 8003f4c:	46d9      	mov	r9, fp
 8003f4e:	eb18 0308 	adds.w	r3, r8, r8
 8003f52:	eb49 0409 	adc.w	r4, r9, r9
 8003f56:	4698      	mov	r8, r3
 8003f58:	46a1      	mov	r9, r4
 8003f5a:	eb18 080a 	adds.w	r8, r8, sl
 8003f5e:	eb49 090b 	adc.w	r9, r9, fp
 8003f62:	f04f 0100 	mov.w	r1, #0
 8003f66:	f04f 0200 	mov.w	r2, #0
 8003f6a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003f6e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003f72:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003f76:	4688      	mov	r8, r1
 8003f78:	4691      	mov	r9, r2
 8003f7a:	eb1a 0508 	adds.w	r5, sl, r8
 8003f7e:	eb4b 0609 	adc.w	r6, fp, r9
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	4619      	mov	r1, r3
 8003f88:	f04f 0200 	mov.w	r2, #0
 8003f8c:	f04f 0300 	mov.w	r3, #0
 8003f90:	f04f 0400 	mov.w	r4, #0
 8003f94:	0094      	lsls	r4, r2, #2
 8003f96:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f9a:	008b      	lsls	r3, r1, #2
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	4623      	mov	r3, r4
 8003fa0:	4628      	mov	r0, r5
 8003fa2:	4631      	mov	r1, r6
 8003fa4:	f7fc f98c 	bl	80002c0 <__aeabi_uldivmod>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	460c      	mov	r4, r1
 8003fac:	461a      	mov	r2, r3
 8003fae:	4b50      	ldr	r3, [pc, #320]	; (80040f0 <UART_SetConfig+0x6f4>)
 8003fb0:	fba3 2302 	umull	r2, r3, r3, r2
 8003fb4:	095b      	lsrs	r3, r3, #5
 8003fb6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	469b      	mov	fp, r3
 8003fbe:	f04f 0c00 	mov.w	ip, #0
 8003fc2:	46d9      	mov	r9, fp
 8003fc4:	46e2      	mov	sl, ip
 8003fc6:	eb19 0309 	adds.w	r3, r9, r9
 8003fca:	eb4a 040a 	adc.w	r4, sl, sl
 8003fce:	4699      	mov	r9, r3
 8003fd0:	46a2      	mov	sl, r4
 8003fd2:	eb19 090b 	adds.w	r9, r9, fp
 8003fd6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003fda:	f04f 0100 	mov.w	r1, #0
 8003fde:	f04f 0200 	mov.w	r2, #0
 8003fe2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fe6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fee:	4689      	mov	r9, r1
 8003ff0:	4692      	mov	sl, r2
 8003ff2:	eb1b 0509 	adds.w	r5, fp, r9
 8003ff6:	eb4c 060a 	adc.w	r6, ip, sl
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	4619      	mov	r1, r3
 8004000:	f04f 0200 	mov.w	r2, #0
 8004004:	f04f 0300 	mov.w	r3, #0
 8004008:	f04f 0400 	mov.w	r4, #0
 800400c:	0094      	lsls	r4, r2, #2
 800400e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004012:	008b      	lsls	r3, r1, #2
 8004014:	461a      	mov	r2, r3
 8004016:	4623      	mov	r3, r4
 8004018:	4628      	mov	r0, r5
 800401a:	4631      	mov	r1, r6
 800401c:	f7fc f950 	bl	80002c0 <__aeabi_uldivmod>
 8004020:	4603      	mov	r3, r0
 8004022:	460c      	mov	r4, r1
 8004024:	461a      	mov	r2, r3
 8004026:	4b32      	ldr	r3, [pc, #200]	; (80040f0 <UART_SetConfig+0x6f4>)
 8004028:	fba3 1302 	umull	r1, r3, r3, r2
 800402c:	095b      	lsrs	r3, r3, #5
 800402e:	2164      	movs	r1, #100	; 0x64
 8004030:	fb01 f303 	mul.w	r3, r1, r3
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	011b      	lsls	r3, r3, #4
 8004038:	3332      	adds	r3, #50	; 0x32
 800403a:	4a2d      	ldr	r2, [pc, #180]	; (80040f0 <UART_SetConfig+0x6f4>)
 800403c:	fba2 2303 	umull	r2, r3, r2, r3
 8004040:	095b      	lsrs	r3, r3, #5
 8004042:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004046:	4498      	add	r8, r3
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	469b      	mov	fp, r3
 800404c:	f04f 0c00 	mov.w	ip, #0
 8004050:	46d9      	mov	r9, fp
 8004052:	46e2      	mov	sl, ip
 8004054:	eb19 0309 	adds.w	r3, r9, r9
 8004058:	eb4a 040a 	adc.w	r4, sl, sl
 800405c:	4699      	mov	r9, r3
 800405e:	46a2      	mov	sl, r4
 8004060:	eb19 090b 	adds.w	r9, r9, fp
 8004064:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004068:	f04f 0100 	mov.w	r1, #0
 800406c:	f04f 0200 	mov.w	r2, #0
 8004070:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004074:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004078:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800407c:	4689      	mov	r9, r1
 800407e:	4692      	mov	sl, r2
 8004080:	eb1b 0509 	adds.w	r5, fp, r9
 8004084:	eb4c 060a 	adc.w	r6, ip, sl
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	4619      	mov	r1, r3
 800408e:	f04f 0200 	mov.w	r2, #0
 8004092:	f04f 0300 	mov.w	r3, #0
 8004096:	f04f 0400 	mov.w	r4, #0
 800409a:	0094      	lsls	r4, r2, #2
 800409c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80040a0:	008b      	lsls	r3, r1, #2
 80040a2:	461a      	mov	r2, r3
 80040a4:	4623      	mov	r3, r4
 80040a6:	4628      	mov	r0, r5
 80040a8:	4631      	mov	r1, r6
 80040aa:	f7fc f909 	bl	80002c0 <__aeabi_uldivmod>
 80040ae:	4603      	mov	r3, r0
 80040b0:	460c      	mov	r4, r1
 80040b2:	461a      	mov	r2, r3
 80040b4:	4b0e      	ldr	r3, [pc, #56]	; (80040f0 <UART_SetConfig+0x6f4>)
 80040b6:	fba3 1302 	umull	r1, r3, r3, r2
 80040ba:	095b      	lsrs	r3, r3, #5
 80040bc:	2164      	movs	r1, #100	; 0x64
 80040be:	fb01 f303 	mul.w	r3, r1, r3
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	011b      	lsls	r3, r3, #4
 80040c6:	3332      	adds	r3, #50	; 0x32
 80040c8:	4a09      	ldr	r2, [pc, #36]	; (80040f0 <UART_SetConfig+0x6f4>)
 80040ca:	fba2 2303 	umull	r2, r3, r2, r3
 80040ce:	095b      	lsrs	r3, r3, #5
 80040d0:	f003 020f 	and.w	r2, r3, #15
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4442      	add	r2, r8
 80040da:	609a      	str	r2, [r3, #8]
}
 80040dc:	e7ff      	b.n	80040de <UART_SetConfig+0x6e2>
 80040de:	bf00      	nop
 80040e0:	3714      	adds	r7, #20
 80040e2:	46bd      	mov	sp, r7
 80040e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040e8:	40011000 	.word	0x40011000
 80040ec:	40011400 	.word	0x40011400
 80040f0:	51eb851f 	.word	0x51eb851f

080040f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80040f4:	b084      	sub	sp, #16
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b084      	sub	sp, #16
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
 80040fe:	f107 001c 	add.w	r0, r7, #28
 8004102:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004108:	2b01      	cmp	r3, #1
 800410a:	d122      	bne.n	8004152 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004110:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004120:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004136:	2b01      	cmp	r3, #1
 8004138:	d105      	bne.n	8004146 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 fa4e 	bl	80045e8 <USB_CoreReset>
 800414c:	4603      	mov	r3, r0
 800414e:	73fb      	strb	r3, [r7, #15]
 8004150:	e01a      	b.n	8004188 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 fa42 	bl	80045e8 <USB_CoreReset>
 8004164:	4603      	mov	r3, r0
 8004166:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004168:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800416a:	2b00      	cmp	r3, #0
 800416c:	d106      	bne.n	800417c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004172:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	639a      	str	r2, [r3, #56]	; 0x38
 800417a:	e005      	b.n	8004188 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004180:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418a:	2b01      	cmp	r3, #1
 800418c:	d10b      	bne.n	80041a6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f043 0206 	orr.w	r2, r3, #6
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f043 0220 	orr.w	r2, r3, #32
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80041a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80041b2:	b004      	add	sp, #16
 80041b4:	4770      	bx	lr

080041b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80041b6:	b480      	push	{r7}
 80041b8:	b083      	sub	sp, #12
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f023 0201 	bic.w	r2, r3, #1
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	460b      	mov	r3, r1
 80041e2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80041f0:	78fb      	ldrb	r3, [r7, #3]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d106      	bne.n	8004204 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	60da      	str	r2, [r3, #12]
 8004202:	e00b      	b.n	800421c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004204:	78fb      	ldrb	r3, [r7, #3]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d106      	bne.n	8004218 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	60da      	str	r2, [r3, #12]
 8004216:	e001      	b.n	800421c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e003      	b.n	8004224 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800421c:	2032      	movs	r0, #50	; 0x32
 800421e:	f7fd f8bf 	bl	80013a0 <HAL_Delay>

  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3708      	adds	r7, #8
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800422c:	b084      	sub	sp, #16
 800422e:	b580      	push	{r7, lr}
 8004230:	b086      	sub	sp, #24
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
 8004236:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800423a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800423e:	2300      	movs	r3, #0
 8004240:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004246:	2300      	movs	r3, #0
 8004248:	613b      	str	r3, [r7, #16]
 800424a:	e009      	b.n	8004260 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	3340      	adds	r3, #64	; 0x40
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4413      	add	r3, r2
 8004256:	2200      	movs	r2, #0
 8004258:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	3301      	adds	r3, #1
 800425e:	613b      	str	r3, [r7, #16]
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	2b0e      	cmp	r3, #14
 8004264:	d9f2      	bls.n	800424c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004268:	2b00      	cmp	r3, #0
 800426a:	d11c      	bne.n	80042a6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800427a:	f043 0302 	orr.w	r3, r3, #2
 800427e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004284:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004290:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	639a      	str	r2, [r3, #56]	; 0x38
 80042a4:	e00b      	b.n	80042be <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042aa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80042c4:	461a      	mov	r2, r3
 80042c6:	2300      	movs	r3, #0
 80042c8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042d0:	4619      	mov	r1, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042d8:	461a      	mov	r2, r3
 80042da:	680b      	ldr	r3, [r1, #0]
 80042dc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80042de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d10c      	bne.n	80042fe <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80042e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d104      	bne.n	80042f4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80042ea:	2100      	movs	r1, #0
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 f949 	bl	8004584 <USB_SetDevSpeed>
 80042f2:	e008      	b.n	8004306 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80042f4:	2101      	movs	r1, #1
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 f944 	bl	8004584 <USB_SetDevSpeed>
 80042fc:	e003      	b.n	8004306 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80042fe:	2103      	movs	r1, #3
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 f93f 	bl	8004584 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004306:	2110      	movs	r1, #16
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 f8f3 	bl	80044f4 <USB_FlushTxFifo>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d001      	beq.n	8004318 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f000 f911 	bl	8004540 <USB_FlushRxFifo>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800432e:	461a      	mov	r2, r3
 8004330:	2300      	movs	r3, #0
 8004332:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800433a:	461a      	mov	r2, r3
 800433c:	2300      	movs	r3, #0
 800433e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004346:	461a      	mov	r2, r3
 8004348:	2300      	movs	r3, #0
 800434a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800434c:	2300      	movs	r3, #0
 800434e:	613b      	str	r3, [r7, #16]
 8004350:	e043      	b.n	80043da <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	015a      	lsls	r2, r3, #5
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	4413      	add	r3, r2
 800435a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004364:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004368:	d118      	bne.n	800439c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d10a      	bne.n	8004386 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	015a      	lsls	r2, r3, #5
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	4413      	add	r3, r2
 8004378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800437c:	461a      	mov	r2, r3
 800437e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004382:	6013      	str	r3, [r2, #0]
 8004384:	e013      	b.n	80043ae <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	015a      	lsls	r2, r3, #5
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	4413      	add	r3, r2
 800438e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004392:	461a      	mov	r2, r3
 8004394:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004398:	6013      	str	r3, [r2, #0]
 800439a:	e008      	b.n	80043ae <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	015a      	lsls	r2, r3, #5
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	4413      	add	r3, r2
 80043a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043a8:	461a      	mov	r2, r3
 80043aa:	2300      	movs	r3, #0
 80043ac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	015a      	lsls	r2, r3, #5
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	4413      	add	r3, r2
 80043b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ba:	461a      	mov	r2, r3
 80043bc:	2300      	movs	r3, #0
 80043be:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	015a      	lsls	r2, r3, #5
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	4413      	add	r3, r2
 80043c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043cc:	461a      	mov	r2, r3
 80043ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80043d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	3301      	adds	r3, #1
 80043d8:	613b      	str	r3, [r7, #16]
 80043da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d3b7      	bcc.n	8004352 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043e2:	2300      	movs	r3, #0
 80043e4:	613b      	str	r3, [r7, #16]
 80043e6:	e043      	b.n	8004470 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	015a      	lsls	r2, r3, #5
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	4413      	add	r3, r2
 80043f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043fe:	d118      	bne.n	8004432 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10a      	bne.n	800441c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	015a      	lsls	r2, r3, #5
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	4413      	add	r3, r2
 800440e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004412:	461a      	mov	r2, r3
 8004414:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004418:	6013      	str	r3, [r2, #0]
 800441a:	e013      	b.n	8004444 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	015a      	lsls	r2, r3, #5
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	4413      	add	r3, r2
 8004424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004428:	461a      	mov	r2, r3
 800442a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800442e:	6013      	str	r3, [r2, #0]
 8004430:	e008      	b.n	8004444 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	015a      	lsls	r2, r3, #5
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	4413      	add	r3, r2
 800443a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800443e:	461a      	mov	r2, r3
 8004440:	2300      	movs	r3, #0
 8004442:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	015a      	lsls	r2, r3, #5
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	4413      	add	r3, r2
 800444c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004450:	461a      	mov	r2, r3
 8004452:	2300      	movs	r3, #0
 8004454:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	015a      	lsls	r2, r3, #5
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	4413      	add	r3, r2
 800445e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004462:	461a      	mov	r2, r3
 8004464:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004468:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	3301      	adds	r3, #1
 800446e:	613b      	str	r3, [r7, #16]
 8004470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	429a      	cmp	r2, r3
 8004476:	d3b7      	bcc.n	80043e8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004486:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800448a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004498:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800449a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449c:	2b00      	cmp	r3, #0
 800449e:	d105      	bne.n	80044ac <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	f043 0210 	orr.w	r2, r3, #16
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	699a      	ldr	r2, [r3, #24]
 80044b0:	4b0f      	ldr	r3, [pc, #60]	; (80044f0 <USB_DevInit+0x2c4>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80044b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d005      	beq.n	80044ca <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	f043 0208 	orr.w	r2, r3, #8
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80044ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d107      	bne.n	80044e0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044d8:	f043 0304 	orr.w	r3, r3, #4
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80044e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3718      	adds	r7, #24
 80044e6:	46bd      	mov	sp, r7
 80044e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044ec:	b004      	add	sp, #16
 80044ee:	4770      	bx	lr
 80044f0:	803c3800 	.word	0x803c3800

080044f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80044fe:	2300      	movs	r3, #0
 8004500:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	019b      	lsls	r3, r3, #6
 8004506:	f043 0220 	orr.w	r2, r3, #32
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	3301      	adds	r3, #1
 8004512:	60fb      	str	r3, [r7, #12]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	4a09      	ldr	r2, [pc, #36]	; (800453c <USB_FlushTxFifo+0x48>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d901      	bls.n	8004520 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e006      	b.n	800452e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	f003 0320 	and.w	r3, r3, #32
 8004528:	2b20      	cmp	r3, #32
 800452a:	d0f0      	beq.n	800450e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3714      	adds	r7, #20
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	00030d40 	.word	0x00030d40

08004540 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004548:	2300      	movs	r3, #0
 800454a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2210      	movs	r2, #16
 8004550:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	3301      	adds	r3, #1
 8004556:	60fb      	str	r3, [r7, #12]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	4a09      	ldr	r2, [pc, #36]	; (8004580 <USB_FlushRxFifo+0x40>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d901      	bls.n	8004564 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e006      	b.n	8004572 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	f003 0310 	and.w	r3, r3, #16
 800456c:	2b10      	cmp	r3, #16
 800456e:	d0f0      	beq.n	8004552 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	3714      	adds	r7, #20
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	00030d40 	.word	0x00030d40

08004584 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	460b      	mov	r3, r1
 800458e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	78fb      	ldrb	r3, [r7, #3]
 800459e:	68f9      	ldr	r1, [r7, #12]
 80045a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045a4:	4313      	orrs	r3, r2
 80045a6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3714      	adds	r7, #20
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr

080045b6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b084      	sub	sp, #16
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045d0:	f043 0302 	orr.w	r3, r3, #2
 80045d4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80045d6:	2003      	movs	r0, #3
 80045d8:	f7fc fee2 	bl	80013a0 <HAL_Delay>

  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
	...

080045e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80045f0:	2300      	movs	r3, #0
 80045f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	3301      	adds	r3, #1
 80045f8:	60fb      	str	r3, [r7, #12]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	4a13      	ldr	r2, [pc, #76]	; (800464c <USB_CoreReset+0x64>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d901      	bls.n	8004606 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e01b      	b.n	800463e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	2b00      	cmp	r3, #0
 800460c:	daf2      	bge.n	80045f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800460e:	2300      	movs	r3, #0
 8004610:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	f043 0201 	orr.w	r2, r3, #1
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	3301      	adds	r3, #1
 8004622:	60fb      	str	r3, [r7, #12]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	4a09      	ldr	r2, [pc, #36]	; (800464c <USB_CoreReset+0x64>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d901      	bls.n	8004630 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e006      	b.n	800463e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b01      	cmp	r3, #1
 800463a:	d0f0      	beq.n	800461e <USB_CoreReset+0x36>

  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3714      	adds	r7, #20
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	00030d40 	.word	0x00030d40

08004650 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8004656:	2100      	movs	r1, #0
 8004658:	2000      	movs	r0, #0
 800465a:	f005 fdf3 	bl	800a244 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800465e:	4b17      	ldr	r3, [pc, #92]	; (80046bc <MX_LWIP_Init+0x6c>)
 8004660:	2200      	movs	r2, #0
 8004662:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8004664:	4b16      	ldr	r3, [pc, #88]	; (80046c0 <MX_LWIP_Init+0x70>)
 8004666:	2200      	movs	r2, #0
 8004668:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800466a:	4b16      	ldr	r3, [pc, #88]	; (80046c4 <MX_LWIP_Init+0x74>)
 800466c:	2200      	movs	r2, #0
 800466e:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004670:	4b15      	ldr	r3, [pc, #84]	; (80046c8 <MX_LWIP_Init+0x78>)
 8004672:	9302      	str	r3, [sp, #8]
 8004674:	4b15      	ldr	r3, [pc, #84]	; (80046cc <MX_LWIP_Init+0x7c>)
 8004676:	9301      	str	r3, [sp, #4]
 8004678:	2300      	movs	r3, #0
 800467a:	9300      	str	r3, [sp, #0]
 800467c:	4b11      	ldr	r3, [pc, #68]	; (80046c4 <MX_LWIP_Init+0x74>)
 800467e:	4a10      	ldr	r2, [pc, #64]	; (80046c0 <MX_LWIP_Init+0x70>)
 8004680:	490e      	ldr	r1, [pc, #56]	; (80046bc <MX_LWIP_Init+0x6c>)
 8004682:	4813      	ldr	r0, [pc, #76]	; (80046d0 <MX_LWIP_Init+0x80>)
 8004684:	f007 fa58 	bl	800bb38 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004688:	4811      	ldr	r0, [pc, #68]	; (80046d0 <MX_LWIP_Init+0x80>)
 800468a:	f007 fc0b 	bl	800bea4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800468e:	4b10      	ldr	r3, [pc, #64]	; (80046d0 <MX_LWIP_Init+0x80>)
 8004690:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004694:	089b      	lsrs	r3, r3, #2
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b00      	cmp	r3, #0
 800469e:	d003      	beq.n	80046a8 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80046a0:	480b      	ldr	r0, [pc, #44]	; (80046d0 <MX_LWIP_Init+0x80>)
 80046a2:	f007 fc0f 	bl	800bec4 <netif_set_up>
 80046a6:	e002      	b.n	80046ae <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80046a8:	4809      	ldr	r0, [pc, #36]	; (80046d0 <MX_LWIP_Init+0x80>)
 80046aa:	f007 fc77 	bl	800bf9c <netif_set_down>
  }

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 80046ae:	4808      	ldr	r0, [pc, #32]	; (80046d0 <MX_LWIP_Init+0x80>)
 80046b0:	f00f fd58 	bl	8014164 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80046b4:	bf00      	nop
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	2000926c 	.word	0x2000926c
 80046c0:	20009270 	.word	0x20009270
 80046c4:	20009274 	.word	0x20009274
 80046c8:	0800a155 	.word	0x0800a155
 80046cc:	08004d35 	.word	0x08004d35
 80046d0:	20009238 	.word	0x20009238

080046d4 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b08e      	sub	sp, #56	; 0x38
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046e0:	2200      	movs	r2, #0
 80046e2:	601a      	str	r2, [r3, #0]
 80046e4:	605a      	str	r2, [r3, #4]
 80046e6:	609a      	str	r2, [r3, #8]
 80046e8:	60da      	str	r2, [r3, #12]
 80046ea:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a59      	ldr	r2, [pc, #356]	; (8004858 <HAL_ETH_MspInit+0x184>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	f040 80ac 	bne.w	8004850 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80046f8:	2300      	movs	r3, #0
 80046fa:	623b      	str	r3, [r7, #32]
 80046fc:	4b57      	ldr	r3, [pc, #348]	; (800485c <HAL_ETH_MspInit+0x188>)
 80046fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004700:	4a56      	ldr	r2, [pc, #344]	; (800485c <HAL_ETH_MspInit+0x188>)
 8004702:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004706:	6313      	str	r3, [r2, #48]	; 0x30
 8004708:	4b54      	ldr	r3, [pc, #336]	; (800485c <HAL_ETH_MspInit+0x188>)
 800470a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004710:	623b      	str	r3, [r7, #32]
 8004712:	6a3b      	ldr	r3, [r7, #32]
 8004714:	2300      	movs	r3, #0
 8004716:	61fb      	str	r3, [r7, #28]
 8004718:	4b50      	ldr	r3, [pc, #320]	; (800485c <HAL_ETH_MspInit+0x188>)
 800471a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471c:	4a4f      	ldr	r2, [pc, #316]	; (800485c <HAL_ETH_MspInit+0x188>)
 800471e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004722:	6313      	str	r3, [r2, #48]	; 0x30
 8004724:	4b4d      	ldr	r3, [pc, #308]	; (800485c <HAL_ETH_MspInit+0x188>)
 8004726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004728:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800472c:	61fb      	str	r3, [r7, #28]
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	2300      	movs	r3, #0
 8004732:	61bb      	str	r3, [r7, #24]
 8004734:	4b49      	ldr	r3, [pc, #292]	; (800485c <HAL_ETH_MspInit+0x188>)
 8004736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004738:	4a48      	ldr	r2, [pc, #288]	; (800485c <HAL_ETH_MspInit+0x188>)
 800473a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800473e:	6313      	str	r3, [r2, #48]	; 0x30
 8004740:	4b46      	ldr	r3, [pc, #280]	; (800485c <HAL_ETH_MspInit+0x188>)
 8004742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004744:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004748:	61bb      	str	r3, [r7, #24]
 800474a:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800474c:	2300      	movs	r3, #0
 800474e:	617b      	str	r3, [r7, #20]
 8004750:	4b42      	ldr	r3, [pc, #264]	; (800485c <HAL_ETH_MspInit+0x188>)
 8004752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004754:	4a41      	ldr	r2, [pc, #260]	; (800485c <HAL_ETH_MspInit+0x188>)
 8004756:	f043 0304 	orr.w	r3, r3, #4
 800475a:	6313      	str	r3, [r2, #48]	; 0x30
 800475c:	4b3f      	ldr	r3, [pc, #252]	; (800485c <HAL_ETH_MspInit+0x188>)
 800475e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004760:	f003 0304 	and.w	r3, r3, #4
 8004764:	617b      	str	r3, [r7, #20]
 8004766:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004768:	2300      	movs	r3, #0
 800476a:	613b      	str	r3, [r7, #16]
 800476c:	4b3b      	ldr	r3, [pc, #236]	; (800485c <HAL_ETH_MspInit+0x188>)
 800476e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004770:	4a3a      	ldr	r2, [pc, #232]	; (800485c <HAL_ETH_MspInit+0x188>)
 8004772:	f043 0301 	orr.w	r3, r3, #1
 8004776:	6313      	str	r3, [r2, #48]	; 0x30
 8004778:	4b38      	ldr	r3, [pc, #224]	; (800485c <HAL_ETH_MspInit+0x188>)
 800477a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477c:	f003 0301 	and.w	r3, r3, #1
 8004780:	613b      	str	r3, [r7, #16]
 8004782:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004784:	2300      	movs	r3, #0
 8004786:	60fb      	str	r3, [r7, #12]
 8004788:	4b34      	ldr	r3, [pc, #208]	; (800485c <HAL_ETH_MspInit+0x188>)
 800478a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478c:	4a33      	ldr	r2, [pc, #204]	; (800485c <HAL_ETH_MspInit+0x188>)
 800478e:	f043 0302 	orr.w	r3, r3, #2
 8004792:	6313      	str	r3, [r2, #48]	; 0x30
 8004794:	4b31      	ldr	r3, [pc, #196]	; (800485c <HAL_ETH_MspInit+0x188>)
 8004796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004798:	f003 0302 	and.w	r3, r3, #2
 800479c:	60fb      	str	r3, [r7, #12]
 800479e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80047a0:	2300      	movs	r3, #0
 80047a2:	60bb      	str	r3, [r7, #8]
 80047a4:	4b2d      	ldr	r3, [pc, #180]	; (800485c <HAL_ETH_MspInit+0x188>)
 80047a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a8:	4a2c      	ldr	r2, [pc, #176]	; (800485c <HAL_ETH_MspInit+0x188>)
 80047aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047ae:	6313      	str	r3, [r2, #48]	; 0x30
 80047b0:	4b2a      	ldr	r3, [pc, #168]	; (800485c <HAL_ETH_MspInit+0x188>)
 80047b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b8:	60bb      	str	r3, [r7, #8]
 80047ba:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80047bc:	2332      	movs	r3, #50	; 0x32
 80047be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047c0:	2302      	movs	r3, #2
 80047c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047c4:	2300      	movs	r3, #0
 80047c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047c8:	2303      	movs	r3, #3
 80047ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80047cc:	230b      	movs	r3, #11
 80047ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047d4:	4619      	mov	r1, r3
 80047d6:	4822      	ldr	r0, [pc, #136]	; (8004860 <HAL_ETH_MspInit+0x18c>)
 80047d8:	f7fd fef8 	bl	80025cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80047dc:	2386      	movs	r3, #134	; 0x86
 80047de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047e0:	2302      	movs	r3, #2
 80047e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047e4:	2300      	movs	r3, #0
 80047e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047e8:	2303      	movs	r3, #3
 80047ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80047ec:	230b      	movs	r3, #11
 80047ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047f4:	4619      	mov	r1, r3
 80047f6:	481b      	ldr	r0, [pc, #108]	; (8004864 <HAL_ETH_MspInit+0x190>)
 80047f8:	f7fd fee8 	bl	80025cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80047fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004800:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004802:	2302      	movs	r3, #2
 8004804:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004806:	2300      	movs	r3, #0
 8004808:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800480a:	2303      	movs	r3, #3
 800480c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800480e:	230b      	movs	r3, #11
 8004810:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004816:	4619      	mov	r1, r3
 8004818:	4813      	ldr	r0, [pc, #76]	; (8004868 <HAL_ETH_MspInit+0x194>)
 800481a:	f7fd fed7 	bl	80025cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800481e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004822:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004824:	2302      	movs	r3, #2
 8004826:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004828:	2300      	movs	r3, #0
 800482a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800482c:	2303      	movs	r3, #3
 800482e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004830:	230b      	movs	r3, #11
 8004832:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004834:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004838:	4619      	mov	r1, r3
 800483a:	480c      	ldr	r0, [pc, #48]	; (800486c <HAL_ETH_MspInit+0x198>)
 800483c:	f7fd fec6 	bl	80025cc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8004840:	2200      	movs	r2, #0
 8004842:	2105      	movs	r1, #5
 8004844:	203d      	movs	r0, #61	; 0x3d
 8004846:	f7fc fe85 	bl	8001554 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800484a:	203d      	movs	r0, #61	; 0x3d
 800484c:	f7fc fe9e 	bl	800158c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004850:	bf00      	nop
 8004852:	3738      	adds	r7, #56	; 0x38
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	40028000 	.word	0x40028000
 800485c:	40023800 	.word	0x40023800
 8004860:	40020800 	.word	0x40020800
 8004864:	40020000 	.word	0x40020000
 8004868:	40020400 	.word	0x40020400
 800486c:	40021800 	.word	0x40021800

08004870 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8004878:	4b04      	ldr	r3, [pc, #16]	; (800488c <HAL_ETH_RxCpltCallback+0x1c>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4618      	mov	r0, r3
 800487e:	f000 fc4d 	bl	800511c <osSemaphoreRelease>
}
 8004882:	bf00      	nop
 8004884:	3708      	adds	r7, #8
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	20000668 	.word	0x20000668

08004890 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 8004890:	b5b0      	push	{r4, r5, r7, lr}
 8004892:	b090      	sub	sp, #64	; 0x40
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004898:	2300      	movs	r3, #0
 800489a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800489c:	4b5c      	ldr	r3, [pc, #368]	; (8004a10 <low_level_init+0x180>)
 800489e:	4a5d      	ldr	r2, [pc, #372]	; (8004a14 <low_level_init+0x184>)
 80048a0:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80048a2:	4b5b      	ldr	r3, [pc, #364]	; (8004a10 <low_level_init+0x180>)
 80048a4:	2201      	movs	r2, #1
 80048a6:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80048a8:	4b59      	ldr	r3, [pc, #356]	; (8004a10 <low_level_init+0x180>)
 80048aa:	2200      	movs	r2, #0
 80048ac:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80048ae:	2300      	movs	r3, #0
 80048b0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 80048b4:	2380      	movs	r3, #128	; 0x80
 80048b6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 80048ba:	23e1      	movs	r3, #225	; 0xe1
 80048bc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 80048c0:	2300      	movs	r3, #0
 80048c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 80048c6:	2300      	movs	r3, #0
 80048c8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 80048cc:	2300      	movs	r3, #0
 80048ce:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 80048d2:	4a4f      	ldr	r2, [pc, #316]	; (8004a10 <low_level_init+0x180>)
 80048d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80048d8:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 80048da:	4b4d      	ldr	r3, [pc, #308]	; (8004a10 <low_level_init+0x180>)
 80048dc:	2201      	movs	r2, #1
 80048de:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80048e0:	4b4b      	ldr	r3, [pc, #300]	; (8004a10 <low_level_init+0x180>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80048e6:	4b4a      	ldr	r3, [pc, #296]	; (8004a10 <low_level_init+0x180>)
 80048e8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80048ec:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80048ee:	4848      	ldr	r0, [pc, #288]	; (8004a10 <low_level_init+0x180>)
 80048f0:	f7fc fe5a 	bl	80015a8 <HAL_ETH_Init>
 80048f4:	4603      	mov	r3, r0
 80048f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 80048fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d108      	bne.n	8004914 <low_level_init+0x84>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004908:	f043 0304 	orr.w	r3, r3, #4
 800490c:	b2da      	uxtb	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8004914:	2304      	movs	r3, #4
 8004916:	4a40      	ldr	r2, [pc, #256]	; (8004a18 <low_level_init+0x188>)
 8004918:	4940      	ldr	r1, [pc, #256]	; (8004a1c <low_level_init+0x18c>)
 800491a:	483d      	ldr	r0, [pc, #244]	; (8004a10 <low_level_init+0x180>)
 800491c:	f7fc ffe2 	bl	80018e4 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8004920:	2304      	movs	r3, #4
 8004922:	4a3f      	ldr	r2, [pc, #252]	; (8004a20 <low_level_init+0x190>)
 8004924:	493f      	ldr	r1, [pc, #252]	; (8004a24 <low_level_init+0x194>)
 8004926:	483a      	ldr	r0, [pc, #232]	; (8004a10 <low_level_init+0x180>)
 8004928:	f7fd f845 	bl	80019b6 <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2206      	movs	r2, #6
 8004930:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004934:	4b36      	ldr	r3, [pc, #216]	; (8004a10 <low_level_init+0x180>)
 8004936:	695b      	ldr	r3, [r3, #20]
 8004938:	781a      	ldrb	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004940:	4b33      	ldr	r3, [pc, #204]	; (8004a10 <low_level_init+0x180>)
 8004942:	695b      	ldr	r3, [r3, #20]
 8004944:	785a      	ldrb	r2, [r3, #1]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800494c:	4b30      	ldr	r3, [pc, #192]	; (8004a10 <low_level_init+0x180>)
 800494e:	695b      	ldr	r3, [r3, #20]
 8004950:	789a      	ldrb	r2, [r3, #2]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004958:	4b2d      	ldr	r3, [pc, #180]	; (8004a10 <low_level_init+0x180>)
 800495a:	695b      	ldr	r3, [r3, #20]
 800495c:	78da      	ldrb	r2, [r3, #3]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004964:	4b2a      	ldr	r3, [pc, #168]	; (8004a10 <low_level_init+0x180>)
 8004966:	695b      	ldr	r3, [r3, #20]
 8004968:	791a      	ldrb	r2, [r3, #4]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004970:	4b27      	ldr	r3, [pc, #156]	; (8004a10 <low_level_init+0x180>)
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	795a      	ldrb	r2, [r3, #5]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004982:	849a      	strh	r2, [r3, #36]	; 0x24
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800498a:	f043 030a 	orr.w	r3, r3, #10
 800498e:	b2da      	uxtb	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8004996:	2300      	movs	r3, #0
 8004998:	62bb      	str	r3, [r7, #40]	; 0x28
 800499a:	2300      	movs	r3, #0
 800499c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800499e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80049a2:	2101      	movs	r1, #1
 80049a4:	4618      	mov	r0, r3
 80049a6:	f000 fb37 	bl	8005018 <osSemaphoreCreate>
 80049aa:	4602      	mov	r2, r0
 80049ac:	4b1e      	ldr	r3, [pc, #120]	; (8004a28 <low_level_init+0x198>)
 80049ae:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80049b0:	4b1e      	ldr	r3, [pc, #120]	; (8004a2c <low_level_init+0x19c>)
 80049b2:	f107 040c 	add.w	r4, r7, #12
 80049b6:	461d      	mov	r5, r3
 80049b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80049bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80049c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80049c4:	f107 030c 	add.w	r3, r7, #12
 80049c8:	6879      	ldr	r1, [r7, #4]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f000 fa28 	bl	8004e20 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */  
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80049d0:	480f      	ldr	r0, [pc, #60]	; (8004a10 <low_level_init+0x180>)
 80049d2:	f7fd fb18 	bl	8002006 <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80049d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80049da:	461a      	mov	r2, r3
 80049dc:	211d      	movs	r1, #29
 80049de:	480c      	ldr	r0, [pc, #48]	; (8004a10 <low_level_init+0x180>)
 80049e0:	f7fd fa43 	bl	8001e6a <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80049e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e6:	f043 030b 	orr.w	r3, r3, #11
 80049ea:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80049ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ee:	461a      	mov	r2, r3
 80049f0:	211d      	movs	r1, #29
 80049f2:	4807      	ldr	r0, [pc, #28]	; (8004a10 <low_level_init+0x180>)
 80049f4:	f7fd faa1 	bl	8001f3a <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80049f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80049fc:	461a      	mov	r2, r3
 80049fe:	211d      	movs	r1, #29
 8004a00:	4803      	ldr	r0, [pc, #12]	; (8004a10 <low_level_init+0x180>)
 8004a02:	f7fd fa32 	bl	8001e6a <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8004a06:	bf00      	nop
 8004a08:	3740      	adds	r7, #64	; 0x40
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bdb0      	pop	{r4, r5, r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	2000ab48 	.word	0x2000ab48
 8004a14:	40028000 	.word	0x40028000
 8004a18:	2000ab90 	.word	0x2000ab90
 8004a1c:	20009278 	.word	0x20009278
 8004a20:	200092f8 	.word	0x200092f8
 8004a24:	2000aac8 	.word	0x2000aac8
 8004a28:	20000668 	.word	0x20000668
 8004a2c:	08019530 	.word	0x08019530

08004a30 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b08a      	sub	sp, #40	; 0x28
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8004a3a:	4b4b      	ldr	r3, [pc, #300]	; (8004b68 <low_level_output+0x138>)
 8004a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8004a42:	2300      	movs	r3, #0
 8004a44:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8004a46:	2300      	movs	r3, #0
 8004a48:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8004a52:	4b45      	ldr	r3, [pc, #276]	; (8004b68 <low_level_output+0x138>)
 8004a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a56:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	623b      	str	r3, [r7, #32]
 8004a60:	e05a      	b.n	8004b18 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	da03      	bge.n	8004a72 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8004a6a:	23f8      	movs	r3, #248	; 0xf8
 8004a6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8004a70:	e05c      	b.n	8004b2c <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8004a72:	6a3b      	ldr	r3, [r7, #32]
 8004a74:	895b      	ldrh	r3, [r3, #10]
 8004a76:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004a7c:	e02f      	b.n	8004ade <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8004a7e:	69fa      	ldr	r2, [r7, #28]
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	18d0      	adds	r0, r2, r3
 8004a84:	6a3b      	ldr	r3, [r7, #32]
 8004a86:	685a      	ldr	r2, [r3, #4]
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	18d1      	adds	r1, r2, r3
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8004a92:	3304      	adds	r3, #4
 8004a94:	461a      	mov	r2, r3
 8004a96:	f013 fb4e 	bl	8018136 <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	da03      	bge.n	8004ab0 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8004aa8:	23f8      	movs	r3, #248	; 0xf8
 8004aaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8004aae:	e03d      	b.n	8004b2c <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4413      	add	r3, r2
 8004abc:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004ac0:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8004ac2:	68ba      	ldr	r2, [r7, #8]
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004acc:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004ad8:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8004ada:	2300      	movs	r3, #0
 8004adc:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d8c8      	bhi.n	8004a7e <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8004aec:	69fa      	ldr	r2, [r7, #28]
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	18d0      	adds	r0, r2, r3
 8004af2:	6a3b      	ldr	r3, [r7, #32]
 8004af4:	685a      	ldr	r2, [r3, #4]
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	4413      	add	r3, r2
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	4619      	mov	r1, r3
 8004afe:	f013 fb1a 	bl	8018136 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	4413      	add	r3, r2
 8004b08:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	4413      	add	r3, r2
 8004b10:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8004b12:	6a3b      	ldr	r3, [r7, #32]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	623b      	str	r3, [r7, #32]
 8004b18:	6a3b      	ldr	r3, [r7, #32]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1a1      	bne.n	8004a62 <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 8004b1e:	6979      	ldr	r1, [r7, #20]
 8004b20:	4811      	ldr	r0, [pc, #68]	; (8004b68 <low_level_output+0x138>)
 8004b22:	f7fc ffb5 	bl	8001a90 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 8004b26:	2300      	movs	r3, #0
 8004b28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8004b2c:	4b0e      	ldr	r3, [pc, #56]	; (8004b68 <low_level_output+0x138>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b34:	3314      	adds	r3, #20
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0320 	and.w	r3, r3, #32
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00d      	beq.n	8004b5c <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8004b40:	4b09      	ldr	r3, [pc, #36]	; (8004b68 <low_level_output+0x138>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b48:	3314      	adds	r3, #20
 8004b4a:	2220      	movs	r2, #32
 8004b4c:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8004b4e:	4b06      	ldr	r3, [pc, #24]	; (8004b68 <low_level_output+0x138>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b56:	3304      	adds	r3, #4
 8004b58:	2200      	movs	r2, #0
 8004b5a:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8004b5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3728      	adds	r7, #40	; 0x28
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	2000ab48 	.word	0x2000ab48

08004b6c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b08c      	sub	sp, #48	; 0x30
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004b74:	2300      	movs	r3, #0
 8004b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8004b80:	2300      	movs	r3, #0
 8004b82:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8004b84:	2300      	movs	r3, #0
 8004b86:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8004b90:	484f      	ldr	r0, [pc, #316]	; (8004cd0 <low_level_input+0x164>)
 8004b92:	f7fd f867 	bl	8001c64 <HAL_ETH_GetReceivedFrame_IT>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d001      	beq.n	8004ba0 <low_level_input+0x34>
  
    return NULL;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	e092      	b.n	8004cc6 <low_level_input+0x15a>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8004ba0:	4b4b      	ldr	r3, [pc, #300]	; (8004cd0 <low_level_input+0x164>)
 8004ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba4:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8004ba6:	4b4a      	ldr	r3, [pc, #296]	; (8004cd0 <low_level_input+0x164>)
 8004ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004baa:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 8004bac:	89fb      	ldrh	r3, [r7, #14]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d007      	beq.n	8004bc2 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8004bb2:	89fb      	ldrh	r3, [r7, #14]
 8004bb4:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8004bb8:	4619      	mov	r1, r3
 8004bba:	2000      	movs	r0, #0
 8004bbc:	f007 fad8 	bl	800c170 <pbuf_alloc>
 8004bc0:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 8004bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d04b      	beq.n	8004c60 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004bc8:	4b41      	ldr	r3, [pc, #260]	; (8004cd0 <low_level_input+0x164>)
 8004bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bcc:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bd6:	e040      	b.n	8004c5a <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8004bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bda:	895b      	ldrh	r3, [r3, #10]
 8004bdc:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8004bde:	2300      	movs	r3, #0
 8004be0:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004be2:	e021      	b.n	8004c28 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8004be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be6:	685a      	ldr	r2, [r3, #4]
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	18d0      	adds	r0, r2, r3
 8004bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	18d1      	adds	r1, r2, r3
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8004bf8:	3304      	adds	r3, #4
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	f013 fa9b 	bl	8018136 <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004c00:	6a3b      	ldr	r3, [r7, #32]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8004c06:	6a3b      	ldr	r3, [r7, #32]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8004c0c:	69fa      	ldr	r2, [r7, #28]
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	4413      	add	r3, r2
 8004c12:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004c16:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004c22:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8004c24:	2300      	movs	r3, #0
 8004c26:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004c28:	697a      	ldr	r2, [r7, #20]
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d8d6      	bhi.n	8004be4 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8004c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c38:	685a      	ldr	r2, [r3, #4]
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	18d0      	adds	r0, r2, r3
 8004c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	4413      	add	r3, r2
 8004c44:	697a      	ldr	r2, [r7, #20]
 8004c46:	4619      	mov	r1, r3
 8004c48:	f013 fa75 	bl	8018136 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004c4c:	69fa      	ldr	r2, [r7, #28]
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	4413      	add	r3, r2
 8004c52:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1bb      	bne.n	8004bd8 <low_level_input+0x6c>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004c60:	4b1b      	ldr	r3, [pc, #108]	; (8004cd0 <low_level_input+0x164>)
 8004c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c64:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004c66:	2300      	movs	r3, #0
 8004c68:	613b      	str	r3, [r7, #16]
 8004c6a:	e00b      	b.n	8004c84 <low_level_input+0x118>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8004c6c:	6a3b      	ldr	r3, [r7, #32]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004c74:	6a3b      	ldr	r3, [r7, #32]
 8004c76:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004c78:	6a3b      	ldr	r3, [r7, #32]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	3301      	adds	r3, #1
 8004c82:	613b      	str	r3, [r7, #16]
 8004c84:	4b12      	ldr	r3, [pc, #72]	; (8004cd0 <low_level_input+0x164>)
 8004c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d3ee      	bcc.n	8004c6c <low_level_input+0x100>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 8004c8e:	4b10      	ldr	r3, [pc, #64]	; (8004cd0 <low_level_input+0x164>)
 8004c90:	2200      	movs	r2, #0
 8004c92:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8004c94:	4b0e      	ldr	r3, [pc, #56]	; (8004cd0 <low_level_input+0x164>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c9c:	3314      	adds	r3, #20
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00d      	beq.n	8004cc4 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8004ca8:	4b09      	ldr	r3, [pc, #36]	; (8004cd0 <low_level_input+0x164>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cb0:	3314      	adds	r3, #20
 8004cb2:	2280      	movs	r2, #128	; 0x80
 8004cb4:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8004cb6:	4b06      	ldr	r3, [pc, #24]	; (8004cd0 <low_level_input+0x164>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cbe:	3308      	adds	r3, #8
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	601a      	str	r2, [r3, #0]
  }
  return p;
 8004cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3730      	adds	r7, #48	; 0x30
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	2000ab48 	.word	0x2000ab48

08004cd4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004ce0:	4b12      	ldr	r3, [pc, #72]	; (8004d2c <ethernetif_input+0x58>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f000 f9c9 	bl	8005080 <osSemaphoreWait>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1f5      	bne.n	8004ce0 <ethernetif_input+0xc>
    {
      do
      {   
        LOCK_TCPIP_CORE();
 8004cf4:	480e      	ldr	r0, [pc, #56]	; (8004d30 <ethernetif_input+0x5c>)
 8004cf6:	f013 f96b 	bl	8017fd0 <sys_mutex_lock>
        p = low_level_input( netif );
 8004cfa:	68f8      	ldr	r0, [r7, #12]
 8004cfc:	f7ff ff36 	bl	8004b6c <low_level_input>
 8004d00:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00a      	beq.n	8004d1e <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	68f9      	ldr	r1, [r7, #12]
 8004d0e:	68b8      	ldr	r0, [r7, #8]
 8004d10:	4798      	blx	r3
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d002      	beq.n	8004d1e <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8004d18:	68b8      	ldr	r0, [r7, #8]
 8004d1a:	f007 fd09 	bl	800c730 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8004d1e:	4804      	ldr	r0, [pc, #16]	; (8004d30 <ethernetif_input+0x5c>)
 8004d20:	f013 f965 	bl	8017fee <sys_mutex_unlock>
      } while(p!=NULL);
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1e4      	bne.n	8004cf4 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004d2a:	e7d9      	b.n	8004ce0 <ethernetif_input+0xc>
 8004d2c:	20000668 	.word	0x20000668
 8004d30:	2000c3a0 	.word	0x2000c3a0

08004d34 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d106      	bne.n	8004d50 <ethernetif_init+0x1c>
 8004d42:	4b0e      	ldr	r3, [pc, #56]	; (8004d7c <ethernetif_init+0x48>)
 8004d44:	f240 2235 	movw	r2, #565	; 0x235
 8004d48:	490d      	ldr	r1, [pc, #52]	; (8004d80 <ethernetif_init+0x4c>)
 8004d4a:	480e      	ldr	r0, [pc, #56]	; (8004d84 <ethernetif_init+0x50>)
 8004d4c:	f013 fa20 	bl	8018190 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2273      	movs	r2, #115	; 0x73
 8004d54:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2274      	movs	r2, #116	; 0x74
 8004d5c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a09      	ldr	r2, [pc, #36]	; (8004d88 <ethernetif_init+0x54>)
 8004d64:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a08      	ldr	r2, [pc, #32]	; (8004d8c <ethernetif_init+0x58>)
 8004d6a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f7ff fd8f 	bl	8004890 <low_level_init>

  return ERR_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3708      	adds	r7, #8
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	0801954c 	.word	0x0801954c
 8004d80:	08019568 	.word	0x08019568
 8004d84:	08019578 	.word	0x08019578
 8004d88:	08015fb5 	.word	0x08015fb5
 8004d8c:	08004a31 	.word	0x08004a31

08004d90 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004d94:	f7fc faf8 	bl	8001388 <HAL_GetTick>
 8004d98:	4603      	mov	r3, r0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b085      	sub	sp, #20
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	4603      	mov	r3, r0
 8004da6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004da8:	2300      	movs	r3, #0
 8004daa:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004dac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004db0:	2b84      	cmp	r3, #132	; 0x84
 8004db2:	d005      	beq.n	8004dc0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004db4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	4413      	add	r3, r2
 8004dbc:	3303      	adds	r3, #3
 8004dbe:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3714      	adds	r7, #20
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr

08004dce <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b083      	sub	sp, #12
 8004dd2:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dd4:	f3ef 8305 	mrs	r3, IPSR
 8004dd8:	607b      	str	r3, [r7, #4]
  return(result);
 8004dda:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	bf14      	ite	ne
 8004de0:	2301      	movne	r3, #1
 8004de2:	2300      	moveq	r3, #0
 8004de4:	b2db      	uxtb	r3, r3
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr

08004df2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004df2:	b580      	push	{r7, lr}
 8004df4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004df6:	f001 fd07 	bl	8006808 <vTaskStartScheduler>
  
  return osOK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8004e04:	f7ff ffe3 	bl	8004dce <inHandlerMode>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d003      	beq.n	8004e16 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8004e0e:	f001 fe13 	bl	8006a38 <xTaskGetTickCountFromISR>
 8004e12:	4603      	mov	r3, r0
 8004e14:	e002      	b.n	8004e1c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8004e16:	f001 fdff 	bl	8006a18 <xTaskGetTickCount>
 8004e1a:	4603      	mov	r3, r0
  }
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e22:	b089      	sub	sp, #36	; 0x24
 8004e24:	af04      	add	r7, sp, #16
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d020      	beq.n	8004e74 <osThreadCreate+0x54>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d01c      	beq.n	8004e74 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685c      	ldr	r4, [r3, #4]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681d      	ldr	r5, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	691e      	ldr	r6, [r3, #16]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7ff ffa6 	bl	8004d9e <makeFreeRtosPriority>
 8004e52:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e5c:	9202      	str	r2, [sp, #8]
 8004e5e:	9301      	str	r3, [sp, #4]
 8004e60:	9100      	str	r1, [sp, #0]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	4632      	mov	r2, r6
 8004e66:	4629      	mov	r1, r5
 8004e68:	4620      	mov	r0, r4
 8004e6a:	f001 fb09 	bl	8006480 <xTaskCreateStatic>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	60fb      	str	r3, [r7, #12]
 8004e72:	e01c      	b.n	8004eae <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685c      	ldr	r4, [r3, #4]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e80:	b29e      	uxth	r6, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7ff ff88 	bl	8004d9e <makeFreeRtosPriority>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	f107 030c 	add.w	r3, r7, #12
 8004e94:	9301      	str	r3, [sp, #4]
 8004e96:	9200      	str	r2, [sp, #0]
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	4632      	mov	r2, r6
 8004e9c:	4629      	mov	r1, r5
 8004e9e:	4620      	mov	r0, r4
 8004ea0:	f001 fb48 	bl	8006534 <xTaskCreate>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d001      	beq.n	8004eae <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	e000      	b.n	8004eb0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004eae:	68fb      	ldr	r3, [r7, #12]
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3714      	adds	r7, #20
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004eb8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d001      	beq.n	8004ece <osDelay+0x16>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	e000      	b.n	8004ed0 <osDelay+0x18>
 8004ece:	2301      	movs	r3, #1
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f001 fc65 	bl	80067a0 <vTaskDelay>
  
  return osOK;
 8004ed6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3710      	adds	r7, #16
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d007      	beq.n	8004f00 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	2001      	movs	r0, #1
 8004ef8:	f000 fc7f 	bl	80057fa <xQueueCreateMutexStatic>
 8004efc:	4603      	mov	r3, r0
 8004efe:	e003      	b.n	8004f08 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8004f00:	2001      	movs	r0, #1
 8004f02:	f000 fc62 	bl	80057ca <xQueueCreateMutex>
 8004f06:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3708      	adds	r7, #8
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d101      	bne.n	8004f28 <osMutexWait+0x18>
    return osErrorParameter;
 8004f24:	2380      	movs	r3, #128	; 0x80
 8004f26:	e03a      	b.n	8004f9e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f32:	d103      	bne.n	8004f3c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8004f34:	f04f 33ff 	mov.w	r3, #4294967295
 8004f38:	60fb      	str	r3, [r7, #12]
 8004f3a:	e009      	b.n	8004f50 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d006      	beq.n	8004f50 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d101      	bne.n	8004f50 <osMutexWait+0x40>
      ticks = 1;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004f50:	f7ff ff3d 	bl	8004dce <inHandlerMode>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d017      	beq.n	8004f8a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004f5a:	f107 0308 	add.w	r3, r7, #8
 8004f5e:	461a      	mov	r2, r3
 8004f60:	2100      	movs	r1, #0
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f001 f860 	bl	8006028 <xQueueReceiveFromISR>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d001      	beq.n	8004f72 <osMutexWait+0x62>
      return osErrorOS;
 8004f6e:	23ff      	movs	r3, #255	; 0xff
 8004f70:	e015      	b.n	8004f9e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d011      	beq.n	8004f9c <osMutexWait+0x8c>
 8004f78:	4b0b      	ldr	r3, [pc, #44]	; (8004fa8 <osMutexWait+0x98>)
 8004f7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f7e:	601a      	str	r2, [r3, #0]
 8004f80:	f3bf 8f4f 	dsb	sy
 8004f84:	f3bf 8f6f 	isb	sy
 8004f88:	e008      	b.n	8004f9c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8004f8a:	68f9      	ldr	r1, [r7, #12]
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 ff43 	bl	8005e18 <xQueueSemaphoreTake>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d001      	beq.n	8004f9c <osMutexWait+0x8c>
    return osErrorOS;
 8004f98:	23ff      	movs	r3, #255	; 0xff
 8004f9a:	e000      	b.n	8004f9e <osMutexWait+0x8e>
  }
  
  return osOK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3710      	adds	r7, #16
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	e000ed04 	.word	0xe000ed04

08004fac <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8004fbc:	f7ff ff07 	bl	8004dce <inHandlerMode>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d016      	beq.n	8004ff4 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004fc6:	f107 0308 	add.w	r3, r7, #8
 8004fca:	4619      	mov	r1, r3
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 fdbd 	bl	8005b4c <xQueueGiveFromISR>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d001      	beq.n	8004fdc <osMutexRelease+0x30>
      return osErrorOS;
 8004fd8:	23ff      	movs	r3, #255	; 0xff
 8004fda:	e017      	b.n	800500c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d013      	beq.n	800500a <osMutexRelease+0x5e>
 8004fe2:	4b0c      	ldr	r3, [pc, #48]	; (8005014 <osMutexRelease+0x68>)
 8004fe4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fe8:	601a      	str	r2, [r3, #0]
 8004fea:	f3bf 8f4f 	dsb	sy
 8004fee:	f3bf 8f6f 	isb	sy
 8004ff2:	e00a      	b.n	800500a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	2100      	movs	r1, #0
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 fc18 	bl	8005830 <xQueueGenericSend>
 8005000:	4603      	mov	r3, r0
 8005002:	2b01      	cmp	r3, #1
 8005004:	d001      	beq.n	800500a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8005006:	23ff      	movs	r3, #255	; 0xff
 8005008:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800500a:	68fb      	ldr	r3, [r7, #12]
}
 800500c:	4618      	mov	r0, r3
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	e000ed04 	.word	0xe000ed04

08005018 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8005018:	b580      	push	{r7, lr}
 800501a:	b086      	sub	sp, #24
 800501c:	af02      	add	r7, sp, #8
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d010      	beq.n	800504c <osSemaphoreCreate+0x34>
    if (count == 1) {
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d10b      	bne.n	8005048 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685a      	ldr	r2, [r3, #4]
 8005034:	2303      	movs	r3, #3
 8005036:	9300      	str	r3, [sp, #0]
 8005038:	4613      	mov	r3, r2
 800503a:	2200      	movs	r2, #0
 800503c:	2100      	movs	r1, #0
 800503e:	2001      	movs	r0, #1
 8005040:	f000 fad8 	bl	80055f4 <xQueueGenericCreateStatic>
 8005044:	4603      	mov	r3, r0
 8005046:	e016      	b.n	8005076 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8005048:	2300      	movs	r3, #0
 800504a:	e014      	b.n	8005076 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d110      	bne.n	8005074 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8005052:	2203      	movs	r2, #3
 8005054:	2100      	movs	r1, #0
 8005056:	2001      	movs	r0, #1
 8005058:	f000 fb3f 	bl	80056da <xQueueGenericCreate>
 800505c:	60f8      	str	r0, [r7, #12]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d005      	beq.n	8005070 <osSemaphoreCreate+0x58>
 8005064:	2300      	movs	r3, #0
 8005066:	2200      	movs	r2, #0
 8005068:	2100      	movs	r1, #0
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f000 fbe0 	bl	8005830 <xQueueGenericSend>
      return sema;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	e000      	b.n	8005076 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8005074:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8005076:	4618      	mov	r0, r3
 8005078:	3710      	adds	r7, #16
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
	...

08005080 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800508a:	2300      	movs	r3, #0
 800508c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d101      	bne.n	8005098 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005094:	2380      	movs	r3, #128	; 0x80
 8005096:	e03a      	b.n	800510e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005098:	2300      	movs	r3, #0
 800509a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a2:	d103      	bne.n	80050ac <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80050a4:	f04f 33ff 	mov.w	r3, #4294967295
 80050a8:	60fb      	str	r3, [r7, #12]
 80050aa:	e009      	b.n	80050c0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d006      	beq.n	80050c0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d101      	bne.n	80050c0 <osSemaphoreWait+0x40>
      ticks = 1;
 80050bc:	2301      	movs	r3, #1
 80050be:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80050c0:	f7ff fe85 	bl	8004dce <inHandlerMode>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d017      	beq.n	80050fa <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80050ca:	f107 0308 	add.w	r3, r7, #8
 80050ce:	461a      	mov	r2, r3
 80050d0:	2100      	movs	r1, #0
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 ffa8 	bl	8006028 <xQueueReceiveFromISR>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d001      	beq.n	80050e2 <osSemaphoreWait+0x62>
      return osErrorOS;
 80050de:	23ff      	movs	r3, #255	; 0xff
 80050e0:	e015      	b.n	800510e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d011      	beq.n	800510c <osSemaphoreWait+0x8c>
 80050e8:	4b0b      	ldr	r3, [pc, #44]	; (8005118 <osSemaphoreWait+0x98>)
 80050ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050ee:	601a      	str	r2, [r3, #0]
 80050f0:	f3bf 8f4f 	dsb	sy
 80050f4:	f3bf 8f6f 	isb	sy
 80050f8:	e008      	b.n	800510c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80050fa:	68f9      	ldr	r1, [r7, #12]
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 fe8b 	bl	8005e18 <xQueueSemaphoreTake>
 8005102:	4603      	mov	r3, r0
 8005104:	2b01      	cmp	r3, #1
 8005106:	d001      	beq.n	800510c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005108:	23ff      	movs	r3, #255	; 0xff
 800510a:	e000      	b.n	800510e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	e000ed04 	.word	0xe000ed04

0800511c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005124:	2300      	movs	r3, #0
 8005126:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005128:	2300      	movs	r3, #0
 800512a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800512c:	f7ff fe4f 	bl	8004dce <inHandlerMode>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d016      	beq.n	8005164 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005136:	f107 0308 	add.w	r3, r7, #8
 800513a:	4619      	mov	r1, r3
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 fd05 	bl	8005b4c <xQueueGiveFromISR>
 8005142:	4603      	mov	r3, r0
 8005144:	2b01      	cmp	r3, #1
 8005146:	d001      	beq.n	800514c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8005148:	23ff      	movs	r3, #255	; 0xff
 800514a:	e017      	b.n	800517c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d013      	beq.n	800517a <osSemaphoreRelease+0x5e>
 8005152:	4b0c      	ldr	r3, [pc, #48]	; (8005184 <osSemaphoreRelease+0x68>)
 8005154:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005158:	601a      	str	r2, [r3, #0]
 800515a:	f3bf 8f4f 	dsb	sy
 800515e:	f3bf 8f6f 	isb	sy
 8005162:	e00a      	b.n	800517a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8005164:	2300      	movs	r3, #0
 8005166:	2200      	movs	r2, #0
 8005168:	2100      	movs	r1, #0
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 fb60 	bl	8005830 <xQueueGenericSend>
 8005170:	4603      	mov	r3, r0
 8005172:	2b01      	cmp	r3, #1
 8005174:	d001      	beq.n	800517a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8005176:	23ff      	movs	r3, #255	; 0xff
 8005178:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800517a:	68fb      	ldr	r3, [r7, #12]
}
 800517c:	4618      	mov	r0, r3
 800517e:	3710      	adds	r7, #16
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	e000ed04 	.word	0xe000ed04

08005188 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005190:	f7ff fe1d 	bl	8004dce <inHandlerMode>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d001      	beq.n	800519e <osSemaphoreDelete+0x16>
    return osErrorISR;
 800519a:	2382      	movs	r3, #130	; 0x82
 800519c:	e003      	b.n	80051a6 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 fff9 	bl	8006196 <vQueueDelete>

  return osOK; 
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3708      	adds	r7, #8
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80051ae:	b590      	push	{r4, r7, lr}
 80051b0:	b085      	sub	sp, #20
 80051b2:	af02      	add	r7, sp, #8
 80051b4:	6078      	str	r0, [r7, #4]
 80051b6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d012      	beq.n	80051e6 <osMessageCreate+0x38>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00e      	beq.n	80051e6 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6818      	ldr	r0, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6859      	ldr	r1, [r3, #4]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	689a      	ldr	r2, [r3, #8]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	68dc      	ldr	r4, [r3, #12]
 80051d8:	2300      	movs	r3, #0
 80051da:	9300      	str	r3, [sp, #0]
 80051dc:	4623      	mov	r3, r4
 80051de:	f000 fa09 	bl	80055f4 <xQueueGenericCreateStatic>
 80051e2:	4603      	mov	r3, r0
 80051e4:	e008      	b.n	80051f8 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6818      	ldr	r0, [r3, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	4619      	mov	r1, r3
 80051f2:	f000 fa72 	bl	80056da <xQueueGenericCreate>
 80051f6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd90      	pop	{r4, r7, pc}

08005200 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b086      	sub	sp, #24
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800520c:	2300      	movs	r3, #0
 800520e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d101      	bne.n	800521e <osMessagePut+0x1e>
    ticks = 1;
 800521a:	2301      	movs	r3, #1
 800521c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800521e:	f7ff fdd6 	bl	8004dce <inHandlerMode>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d018      	beq.n	800525a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005228:	f107 0210 	add.w	r2, r7, #16
 800522c:	f107 0108 	add.w	r1, r7, #8
 8005230:	2300      	movs	r3, #0
 8005232:	68f8      	ldr	r0, [r7, #12]
 8005234:	f000 fbf6 	bl	8005a24 <xQueueGenericSendFromISR>
 8005238:	4603      	mov	r3, r0
 800523a:	2b01      	cmp	r3, #1
 800523c:	d001      	beq.n	8005242 <osMessagePut+0x42>
      return osErrorOS;
 800523e:	23ff      	movs	r3, #255	; 0xff
 8005240:	e018      	b.n	8005274 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d014      	beq.n	8005272 <osMessagePut+0x72>
 8005248:	4b0c      	ldr	r3, [pc, #48]	; (800527c <osMessagePut+0x7c>)
 800524a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800524e:	601a      	str	r2, [r3, #0]
 8005250:	f3bf 8f4f 	dsb	sy
 8005254:	f3bf 8f6f 	isb	sy
 8005258:	e00b      	b.n	8005272 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800525a:	f107 0108 	add.w	r1, r7, #8
 800525e:	2300      	movs	r3, #0
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	f000 fae4 	bl	8005830 <xQueueGenericSend>
 8005268:	4603      	mov	r3, r0
 800526a:	2b01      	cmp	r3, #1
 800526c:	d001      	beq.n	8005272 <osMessagePut+0x72>
      return osErrorOS;
 800526e:	23ff      	movs	r3, #255	; 0xff
 8005270:	e000      	b.n	8005274 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3718      	adds	r7, #24
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}
 800527c:	e000ed04 	.word	0xe000ed04

08005280 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005280:	b590      	push	{r4, r7, lr}
 8005282:	b08b      	sub	sp, #44	; 0x2c
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8005290:	2300      	movs	r3, #0
 8005292:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d10a      	bne.n	80052b0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800529a:	2380      	movs	r3, #128	; 0x80
 800529c:	617b      	str	r3, [r7, #20]
    return event;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	461c      	mov	r4, r3
 80052a2:	f107 0314 	add.w	r3, r7, #20
 80052a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80052aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80052ae:	e054      	b.n	800535a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80052b0:	2300      	movs	r3, #0
 80052b2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80052b4:	2300      	movs	r3, #0
 80052b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052be:	d103      	bne.n	80052c8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80052c0:	f04f 33ff 	mov.w	r3, #4294967295
 80052c4:	627b      	str	r3, [r7, #36]	; 0x24
 80052c6:	e009      	b.n	80052dc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d006      	beq.n	80052dc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80052d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d101      	bne.n	80052dc <osMessageGet+0x5c>
      ticks = 1;
 80052d8:	2301      	movs	r3, #1
 80052da:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80052dc:	f7ff fd77 	bl	8004dce <inHandlerMode>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d01c      	beq.n	8005320 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80052e6:	f107 0220 	add.w	r2, r7, #32
 80052ea:	f107 0314 	add.w	r3, r7, #20
 80052ee:	3304      	adds	r3, #4
 80052f0:	4619      	mov	r1, r3
 80052f2:	68b8      	ldr	r0, [r7, #8]
 80052f4:	f000 fe98 	bl	8006028 <xQueueReceiveFromISR>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d102      	bne.n	8005304 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80052fe:	2310      	movs	r3, #16
 8005300:	617b      	str	r3, [r7, #20]
 8005302:	e001      	b.n	8005308 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005304:	2300      	movs	r3, #0
 8005306:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005308:	6a3b      	ldr	r3, [r7, #32]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d01d      	beq.n	800534a <osMessageGet+0xca>
 800530e:	4b15      	ldr	r3, [pc, #84]	; (8005364 <osMessageGet+0xe4>)
 8005310:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005314:	601a      	str	r2, [r3, #0]
 8005316:	f3bf 8f4f 	dsb	sy
 800531a:	f3bf 8f6f 	isb	sy
 800531e:	e014      	b.n	800534a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005320:	f107 0314 	add.w	r3, r7, #20
 8005324:	3304      	adds	r3, #4
 8005326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005328:	4619      	mov	r1, r3
 800532a:	68b8      	ldr	r0, [r7, #8]
 800532c:	f000 fc98 	bl	8005c60 <xQueueReceive>
 8005330:	4603      	mov	r3, r0
 8005332:	2b01      	cmp	r3, #1
 8005334:	d102      	bne.n	800533c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005336:	2310      	movs	r3, #16
 8005338:	617b      	str	r3, [r7, #20]
 800533a:	e006      	b.n	800534a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800533c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <osMessageGet+0xc6>
 8005342:	2300      	movs	r3, #0
 8005344:	e000      	b.n	8005348 <osMessageGet+0xc8>
 8005346:	2340      	movs	r3, #64	; 0x40
 8005348:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	461c      	mov	r4, r3
 800534e:	f107 0314 	add.w	r3, r7, #20
 8005352:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005356:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	372c      	adds	r7, #44	; 0x2c
 800535e:	46bd      	mov	sp, r7
 8005360:	bd90      	pop	{r4, r7, pc}
 8005362:	bf00      	nop
 8005364:	e000ed04 	.word	0xe000ed04

08005368 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005370:	f7ff fd2d 	bl	8004dce <inHandlerMode>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d004      	beq.n	8005384 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 feee 	bl	800615c <uxQueueMessagesWaitingFromISR>
 8005380:	4603      	mov	r3, r0
 8005382:	e003      	b.n	800538c <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 fecc 	bl	8006122 <uxQueueMessagesWaiting>
 800538a:	4603      	mov	r3, r0
  }
}
 800538c:	4618      	mov	r0, r3
 800538e:	3708      	adds	r7, #8
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800539c:	f7ff fd17 	bl	8004dce <inHandlerMode>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d001      	beq.n	80053aa <osMessageDelete+0x16>
    return osErrorISR;
 80053a6:	2382      	movs	r3, #130	; 0x82
 80053a8:	e003      	b.n	80053b2 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 fef3 	bl	8006196 <vQueueDelete>

  return osOK; 
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3708      	adds	r7, #8
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}

080053ba <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80053ba:	b480      	push	{r7}
 80053bc:	b083      	sub	sp, #12
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f103 0208 	add.w	r2, r3, #8
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f04f 32ff 	mov.w	r2, #4294967295
 80053d2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f103 0208 	add.w	r2, r3, #8
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f103 0208 	add.w	r2, r3, #8
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80053ee:	bf00      	nop
 80053f0:	370c      	adds	r7, #12
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr

080053fa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80053fa:	b480      	push	{r7}
 80053fc:	b083      	sub	sp, #12
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005408:	bf00      	nop
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	689a      	ldr	r2, [r3, #8]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	683a      	ldr	r2, [r7, #0]
 8005438:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	683a      	ldr	r2, [r7, #0]
 800543e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	1c5a      	adds	r2, r3, #1
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	601a      	str	r2, [r3, #0]
}
 8005450:	bf00      	nop
 8005452:	3714      	adds	r7, #20
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005472:	d103      	bne.n	800547c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	60fb      	str	r3, [r7, #12]
 800547a:	e00c      	b.n	8005496 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	3308      	adds	r3, #8
 8005480:	60fb      	str	r3, [r7, #12]
 8005482:	e002      	b.n	800548a <vListInsert+0x2e>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	60fb      	str	r3, [r7, #12]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68ba      	ldr	r2, [r7, #8]
 8005492:	429a      	cmp	r2, r3
 8005494:	d2f6      	bcs.n	8005484 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	685a      	ldr	r2, [r3, #4]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	683a      	ldr	r2, [r7, #0]
 80054a4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	683a      	ldr	r2, [r7, #0]
 80054b0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	1c5a      	adds	r2, r3, #1
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	601a      	str	r2, [r3, #0]
}
 80054c2:	bf00      	nop
 80054c4:	3714      	adds	r7, #20
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr

080054ce <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80054ce:	b480      	push	{r7}
 80054d0:	b085      	sub	sp, #20
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	6892      	ldr	r2, [r2, #8]
 80054e4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	6852      	ldr	r2, [r2, #4]
 80054ee:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d103      	bne.n	8005502 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	689a      	ldr	r2, [r3, #8]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	1e5a      	subs	r2, r3, #1
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
}
 8005516:	4618      	mov	r0, r3
 8005518:	3714      	adds	r7, #20
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
	...

08005524 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d109      	bne.n	800554c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800553c:	f383 8811 	msr	BASEPRI, r3
 8005540:	f3bf 8f6f 	isb	sy
 8005544:	f3bf 8f4f 	dsb	sy
 8005548:	60bb      	str	r3, [r7, #8]
 800554a:	e7fe      	b.n	800554a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800554c:	f002 f8ce 	bl	80076ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005558:	68f9      	ldr	r1, [r7, #12]
 800555a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800555c:	fb01 f303 	mul.w	r3, r1, r3
 8005560:	441a      	add	r2, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800557c:	3b01      	subs	r3, #1
 800557e:	68f9      	ldr	r1, [r7, #12]
 8005580:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005582:	fb01 f303 	mul.w	r3, r1, r3
 8005586:	441a      	add	r2, r3
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	22ff      	movs	r2, #255	; 0xff
 8005590:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	22ff      	movs	r2, #255	; 0xff
 8005598:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d114      	bne.n	80055cc <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d01a      	beq.n	80055e0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	3310      	adds	r3, #16
 80055ae:	4618      	mov	r0, r3
 80055b0:	f001 fb8a 	bl	8006cc8 <xTaskRemoveFromEventList>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d012      	beq.n	80055e0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80055ba:	4b0d      	ldr	r3, [pc, #52]	; (80055f0 <xQueueGenericReset+0xcc>)
 80055bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055c0:	601a      	str	r2, [r3, #0]
 80055c2:	f3bf 8f4f 	dsb	sy
 80055c6:	f3bf 8f6f 	isb	sy
 80055ca:	e009      	b.n	80055e0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	3310      	adds	r3, #16
 80055d0:	4618      	mov	r0, r3
 80055d2:	f7ff fef2 	bl	80053ba <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	3324      	adds	r3, #36	; 0x24
 80055da:	4618      	mov	r0, r3
 80055dc:	f7ff feed 	bl	80053ba <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80055e0:	f002 f8b2 	bl	8007748 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80055e4:	2301      	movs	r3, #1
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3710      	adds	r7, #16
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	e000ed04 	.word	0xe000ed04

080055f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b08e      	sub	sp, #56	; 0x38
 80055f8:	af02      	add	r7, sp, #8
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]
 8005600:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d109      	bne.n	800561c <xQueueGenericCreateStatic+0x28>
 8005608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560c:	f383 8811 	msr	BASEPRI, r3
 8005610:	f3bf 8f6f 	isb	sy
 8005614:	f3bf 8f4f 	dsb	sy
 8005618:	62bb      	str	r3, [r7, #40]	; 0x28
 800561a:	e7fe      	b.n	800561a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d109      	bne.n	8005636 <xQueueGenericCreateStatic+0x42>
 8005622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005626:	f383 8811 	msr	BASEPRI, r3
 800562a:	f3bf 8f6f 	isb	sy
 800562e:	f3bf 8f4f 	dsb	sy
 8005632:	627b      	str	r3, [r7, #36]	; 0x24
 8005634:	e7fe      	b.n	8005634 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d002      	beq.n	8005642 <xQueueGenericCreateStatic+0x4e>
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d001      	beq.n	8005646 <xQueueGenericCreateStatic+0x52>
 8005642:	2301      	movs	r3, #1
 8005644:	e000      	b.n	8005648 <xQueueGenericCreateStatic+0x54>
 8005646:	2300      	movs	r3, #0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d109      	bne.n	8005660 <xQueueGenericCreateStatic+0x6c>
 800564c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005650:	f383 8811 	msr	BASEPRI, r3
 8005654:	f3bf 8f6f 	isb	sy
 8005658:	f3bf 8f4f 	dsb	sy
 800565c:	623b      	str	r3, [r7, #32]
 800565e:	e7fe      	b.n	800565e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d102      	bne.n	800566c <xQueueGenericCreateStatic+0x78>
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d101      	bne.n	8005670 <xQueueGenericCreateStatic+0x7c>
 800566c:	2301      	movs	r3, #1
 800566e:	e000      	b.n	8005672 <xQueueGenericCreateStatic+0x7e>
 8005670:	2300      	movs	r3, #0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d109      	bne.n	800568a <xQueueGenericCreateStatic+0x96>
 8005676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800567a:	f383 8811 	msr	BASEPRI, r3
 800567e:	f3bf 8f6f 	isb	sy
 8005682:	f3bf 8f4f 	dsb	sy
 8005686:	61fb      	str	r3, [r7, #28]
 8005688:	e7fe      	b.n	8005688 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800568a:	2348      	movs	r3, #72	; 0x48
 800568c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	2b48      	cmp	r3, #72	; 0x48
 8005692:	d009      	beq.n	80056a8 <xQueueGenericCreateStatic+0xb4>
 8005694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005698:	f383 8811 	msr	BASEPRI, r3
 800569c:	f3bf 8f6f 	isb	sy
 80056a0:	f3bf 8f4f 	dsb	sy
 80056a4:	61bb      	str	r3, [r7, #24]
 80056a6:	e7fe      	b.n	80056a6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80056a8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80056ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d00d      	beq.n	80056d0 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80056b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80056bc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80056c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c2:	9300      	str	r3, [sp, #0]
 80056c4:	4613      	mov	r3, r2
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	68b9      	ldr	r1, [r7, #8]
 80056ca:	68f8      	ldr	r0, [r7, #12]
 80056cc:	f000 f844 	bl	8005758 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80056d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3730      	adds	r7, #48	; 0x30
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}

080056da <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80056da:	b580      	push	{r7, lr}
 80056dc:	b08a      	sub	sp, #40	; 0x28
 80056de:	af02      	add	r7, sp, #8
 80056e0:	60f8      	str	r0, [r7, #12]
 80056e2:	60b9      	str	r1, [r7, #8]
 80056e4:	4613      	mov	r3, r2
 80056e6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d109      	bne.n	8005702 <xQueueGenericCreate+0x28>
 80056ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f2:	f383 8811 	msr	BASEPRI, r3
 80056f6:	f3bf 8f6f 	isb	sy
 80056fa:	f3bf 8f4f 	dsb	sy
 80056fe:	613b      	str	r3, [r7, #16]
 8005700:	e7fe      	b.n	8005700 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d102      	bne.n	800570e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005708:	2300      	movs	r3, #0
 800570a:	61fb      	str	r3, [r7, #28]
 800570c:	e004      	b.n	8005718 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	68ba      	ldr	r2, [r7, #8]
 8005712:	fb02 f303 	mul.w	r3, r2, r3
 8005716:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	3348      	adds	r3, #72	; 0x48
 800571c:	4618      	mov	r0, r3
 800571e:	f002 f8ff 	bl	8007920 <pvPortMalloc>
 8005722:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d011      	beq.n	800574e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	3348      	adds	r3, #72	; 0x48
 8005732:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800573c:	79fa      	ldrb	r2, [r7, #7]
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	9300      	str	r3, [sp, #0]
 8005742:	4613      	mov	r3, r2
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	68b9      	ldr	r1, [r7, #8]
 8005748:	68f8      	ldr	r0, [r7, #12]
 800574a:	f000 f805 	bl	8005758 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800574e:	69bb      	ldr	r3, [r7, #24]
	}
 8005750:	4618      	mov	r0, r3
 8005752:	3720      	adds	r7, #32
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	607a      	str	r2, [r7, #4]
 8005764:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d103      	bne.n	8005774 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	69ba      	ldr	r2, [r7, #24]
 8005770:	601a      	str	r2, [r3, #0]
 8005772:	e002      	b.n	800577a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	68ba      	ldr	r2, [r7, #8]
 8005784:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005786:	2101      	movs	r1, #1
 8005788:	69b8      	ldr	r0, [r7, #24]
 800578a:	f7ff fecb 	bl	8005524 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800578e:	bf00      	nop
 8005790:	3710      	adds	r7, #16
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}

08005796 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005796:	b580      	push	{r7, lr}
 8005798:	b082      	sub	sp, #8
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d00e      	beq.n	80057c2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80057b6:	2300      	movs	r3, #0
 80057b8:	2200      	movs	r2, #0
 80057ba:	2100      	movs	r1, #0
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 f837 	bl	8005830 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80057c2:	bf00      	nop
 80057c4:	3708      	adds	r7, #8
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b086      	sub	sp, #24
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	4603      	mov	r3, r0
 80057d2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80057d4:	2301      	movs	r3, #1
 80057d6:	617b      	str	r3, [r7, #20]
 80057d8:	2300      	movs	r3, #0
 80057da:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80057dc:	79fb      	ldrb	r3, [r7, #7]
 80057de:	461a      	mov	r2, r3
 80057e0:	6939      	ldr	r1, [r7, #16]
 80057e2:	6978      	ldr	r0, [r7, #20]
 80057e4:	f7ff ff79 	bl	80056da <xQueueGenericCreate>
 80057e8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f7ff ffd3 	bl	8005796 <prvInitialiseMutex>

		return xNewQueue;
 80057f0:	68fb      	ldr	r3, [r7, #12]
	}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3718      	adds	r7, #24
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}

080057fa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b088      	sub	sp, #32
 80057fe:	af02      	add	r7, sp, #8
 8005800:	4603      	mov	r3, r0
 8005802:	6039      	str	r1, [r7, #0]
 8005804:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005806:	2301      	movs	r3, #1
 8005808:	617b      	str	r3, [r7, #20]
 800580a:	2300      	movs	r3, #0
 800580c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800580e:	79fb      	ldrb	r3, [r7, #7]
 8005810:	9300      	str	r3, [sp, #0]
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	2200      	movs	r2, #0
 8005816:	6939      	ldr	r1, [r7, #16]
 8005818:	6978      	ldr	r0, [r7, #20]
 800581a:	f7ff feeb 	bl	80055f4 <xQueueGenericCreateStatic>
 800581e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f7ff ffb8 	bl	8005796 <prvInitialiseMutex>

		return xNewQueue;
 8005826:	68fb      	ldr	r3, [r7, #12]
	}
 8005828:	4618      	mov	r0, r3
 800582a:	3718      	adds	r7, #24
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b08e      	sub	sp, #56	; 0x38
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	607a      	str	r2, [r7, #4]
 800583c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800583e:	2300      	movs	r3, #0
 8005840:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005848:	2b00      	cmp	r3, #0
 800584a:	d109      	bne.n	8005860 <xQueueGenericSend+0x30>
 800584c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005850:	f383 8811 	msr	BASEPRI, r3
 8005854:	f3bf 8f6f 	isb	sy
 8005858:	f3bf 8f4f 	dsb	sy
 800585c:	62bb      	str	r3, [r7, #40]	; 0x28
 800585e:	e7fe      	b.n	800585e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d103      	bne.n	800586e <xQueueGenericSend+0x3e>
 8005866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586a:	2b00      	cmp	r3, #0
 800586c:	d101      	bne.n	8005872 <xQueueGenericSend+0x42>
 800586e:	2301      	movs	r3, #1
 8005870:	e000      	b.n	8005874 <xQueueGenericSend+0x44>
 8005872:	2300      	movs	r3, #0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d109      	bne.n	800588c <xQueueGenericSend+0x5c>
 8005878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587c:	f383 8811 	msr	BASEPRI, r3
 8005880:	f3bf 8f6f 	isb	sy
 8005884:	f3bf 8f4f 	dsb	sy
 8005888:	627b      	str	r3, [r7, #36]	; 0x24
 800588a:	e7fe      	b.n	800588a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	2b02      	cmp	r3, #2
 8005890:	d103      	bne.n	800589a <xQueueGenericSend+0x6a>
 8005892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005896:	2b01      	cmp	r3, #1
 8005898:	d101      	bne.n	800589e <xQueueGenericSend+0x6e>
 800589a:	2301      	movs	r3, #1
 800589c:	e000      	b.n	80058a0 <xQueueGenericSend+0x70>
 800589e:	2300      	movs	r3, #0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d109      	bne.n	80058b8 <xQueueGenericSend+0x88>
 80058a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a8:	f383 8811 	msr	BASEPRI, r3
 80058ac:	f3bf 8f6f 	isb	sy
 80058b0:	f3bf 8f4f 	dsb	sy
 80058b4:	623b      	str	r3, [r7, #32]
 80058b6:	e7fe      	b.n	80058b6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058b8:	f001 fbbc 	bl	8007034 <xTaskGetSchedulerState>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d102      	bne.n	80058c8 <xQueueGenericSend+0x98>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d101      	bne.n	80058cc <xQueueGenericSend+0x9c>
 80058c8:	2301      	movs	r3, #1
 80058ca:	e000      	b.n	80058ce <xQueueGenericSend+0x9e>
 80058cc:	2300      	movs	r3, #0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d109      	bne.n	80058e6 <xQueueGenericSend+0xb6>
 80058d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d6:	f383 8811 	msr	BASEPRI, r3
 80058da:	f3bf 8f6f 	isb	sy
 80058de:	f3bf 8f4f 	dsb	sy
 80058e2:	61fb      	str	r3, [r7, #28]
 80058e4:	e7fe      	b.n	80058e4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80058e6:	f001 ff01 	bl	80076ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80058ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d302      	bcc.n	80058fc <xQueueGenericSend+0xcc>
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	d129      	bne.n	8005950 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80058fc:	683a      	ldr	r2, [r7, #0]
 80058fe:	68b9      	ldr	r1, [r7, #8]
 8005900:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005902:	f000 fc82 	bl	800620a <prvCopyDataToQueue>
 8005906:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590c:	2b00      	cmp	r3, #0
 800590e:	d010      	beq.n	8005932 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005912:	3324      	adds	r3, #36	; 0x24
 8005914:	4618      	mov	r0, r3
 8005916:	f001 f9d7 	bl	8006cc8 <xTaskRemoveFromEventList>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d013      	beq.n	8005948 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005920:	4b3f      	ldr	r3, [pc, #252]	; (8005a20 <xQueueGenericSend+0x1f0>)
 8005922:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005926:	601a      	str	r2, [r3, #0]
 8005928:	f3bf 8f4f 	dsb	sy
 800592c:	f3bf 8f6f 	isb	sy
 8005930:	e00a      	b.n	8005948 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005934:	2b00      	cmp	r3, #0
 8005936:	d007      	beq.n	8005948 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005938:	4b39      	ldr	r3, [pc, #228]	; (8005a20 <xQueueGenericSend+0x1f0>)
 800593a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800593e:	601a      	str	r2, [r3, #0]
 8005940:	f3bf 8f4f 	dsb	sy
 8005944:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005948:	f001 fefe 	bl	8007748 <vPortExitCritical>
				return pdPASS;
 800594c:	2301      	movs	r3, #1
 800594e:	e063      	b.n	8005a18 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d103      	bne.n	800595e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005956:	f001 fef7 	bl	8007748 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800595a:	2300      	movs	r3, #0
 800595c:	e05c      	b.n	8005a18 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800595e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005960:	2b00      	cmp	r3, #0
 8005962:	d106      	bne.n	8005972 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005964:	f107 0314 	add.w	r3, r7, #20
 8005968:	4618      	mov	r0, r3
 800596a:	f001 fa0f 	bl	8006d8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800596e:	2301      	movs	r3, #1
 8005970:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005972:	f001 fee9 	bl	8007748 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005976:	f000 ffa5 	bl	80068c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800597a:	f001 feb7 	bl	80076ec <vPortEnterCritical>
 800597e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005980:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005984:	b25b      	sxtb	r3, r3
 8005986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800598a:	d103      	bne.n	8005994 <xQueueGenericSend+0x164>
 800598c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598e:	2200      	movs	r2, #0
 8005990:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005996:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800599a:	b25b      	sxtb	r3, r3
 800599c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059a0:	d103      	bne.n	80059aa <xQueueGenericSend+0x17a>
 80059a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059aa:	f001 fecd 	bl	8007748 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80059ae:	1d3a      	adds	r2, r7, #4
 80059b0:	f107 0314 	add.w	r3, r7, #20
 80059b4:	4611      	mov	r1, r2
 80059b6:	4618      	mov	r0, r3
 80059b8:	f001 f9fe 	bl	8006db8 <xTaskCheckForTimeOut>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d124      	bne.n	8005a0c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80059c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059c4:	f000 fd19 	bl	80063fa <prvIsQueueFull>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d018      	beq.n	8005a00 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80059ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d0:	3310      	adds	r3, #16
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	4611      	mov	r1, r2
 80059d6:	4618      	mov	r0, r3
 80059d8:	f001 f952 	bl	8006c80 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80059dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059de:	f000 fca4 	bl	800632a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80059e2:	f000 ff7d 	bl	80068e0 <xTaskResumeAll>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	f47f af7c 	bne.w	80058e6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80059ee:	4b0c      	ldr	r3, [pc, #48]	; (8005a20 <xQueueGenericSend+0x1f0>)
 80059f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059f4:	601a      	str	r2, [r3, #0]
 80059f6:	f3bf 8f4f 	dsb	sy
 80059fa:	f3bf 8f6f 	isb	sy
 80059fe:	e772      	b.n	80058e6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005a00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a02:	f000 fc92 	bl	800632a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a06:	f000 ff6b 	bl	80068e0 <xTaskResumeAll>
 8005a0a:	e76c      	b.n	80058e6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005a0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a0e:	f000 fc8c 	bl	800632a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a12:	f000 ff65 	bl	80068e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005a16:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3738      	adds	r7, #56	; 0x38
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	e000ed04 	.word	0xe000ed04

08005a24 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b08e      	sub	sp, #56	; 0x38
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	607a      	str	r2, [r7, #4]
 8005a30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d109      	bne.n	8005a50 <xQueueGenericSendFromISR+0x2c>
 8005a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a40:	f383 8811 	msr	BASEPRI, r3
 8005a44:	f3bf 8f6f 	isb	sy
 8005a48:	f3bf 8f4f 	dsb	sy
 8005a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a4e:	e7fe      	b.n	8005a4e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d103      	bne.n	8005a5e <xQueueGenericSendFromISR+0x3a>
 8005a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d101      	bne.n	8005a62 <xQueueGenericSendFromISR+0x3e>
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e000      	b.n	8005a64 <xQueueGenericSendFromISR+0x40>
 8005a62:	2300      	movs	r3, #0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d109      	bne.n	8005a7c <xQueueGenericSendFromISR+0x58>
 8005a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6c:	f383 8811 	msr	BASEPRI, r3
 8005a70:	f3bf 8f6f 	isb	sy
 8005a74:	f3bf 8f4f 	dsb	sy
 8005a78:	623b      	str	r3, [r7, #32]
 8005a7a:	e7fe      	b.n	8005a7a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d103      	bne.n	8005a8a <xQueueGenericSendFromISR+0x66>
 8005a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d101      	bne.n	8005a8e <xQueueGenericSendFromISR+0x6a>
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e000      	b.n	8005a90 <xQueueGenericSendFromISR+0x6c>
 8005a8e:	2300      	movs	r3, #0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d109      	bne.n	8005aa8 <xQueueGenericSendFromISR+0x84>
 8005a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a98:	f383 8811 	msr	BASEPRI, r3
 8005a9c:	f3bf 8f6f 	isb	sy
 8005aa0:	f3bf 8f4f 	dsb	sy
 8005aa4:	61fb      	str	r3, [r7, #28]
 8005aa6:	e7fe      	b.n	8005aa6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005aa8:	f001 fefc 	bl	80078a4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005aac:	f3ef 8211 	mrs	r2, BASEPRI
 8005ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab4:	f383 8811 	msr	BASEPRI, r3
 8005ab8:	f3bf 8f6f 	isb	sy
 8005abc:	f3bf 8f4f 	dsb	sy
 8005ac0:	61ba      	str	r2, [r7, #24]
 8005ac2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005ac4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d302      	bcc.n	8005ada <xQueueGenericSendFromISR+0xb6>
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	d12c      	bne.n	8005b34 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005adc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ae0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ae4:	683a      	ldr	r2, [r7, #0]
 8005ae6:	68b9      	ldr	r1, [r7, #8]
 8005ae8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005aea:	f000 fb8e 	bl	800620a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005aee:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af6:	d112      	bne.n	8005b1e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d016      	beq.n	8005b2e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b02:	3324      	adds	r3, #36	; 0x24
 8005b04:	4618      	mov	r0, r3
 8005b06:	f001 f8df 	bl	8006cc8 <xTaskRemoveFromEventList>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00e      	beq.n	8005b2e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00b      	beq.n	8005b2e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	601a      	str	r2, [r3, #0]
 8005b1c:	e007      	b.n	8005b2e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005b1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b22:	3301      	adds	r3, #1
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	b25a      	sxtb	r2, r3
 8005b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005b32:	e001      	b.n	8005b38 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005b34:	2300      	movs	r3, #0
 8005b36:	637b      	str	r3, [r7, #52]	; 0x34
 8005b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b3a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3738      	adds	r7, #56	; 0x38
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b08e      	sub	sp, #56	; 0x38
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d109      	bne.n	8005b74 <xQueueGiveFromISR+0x28>
	__asm volatile
 8005b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b64:	f383 8811 	msr	BASEPRI, r3
 8005b68:	f3bf 8f6f 	isb	sy
 8005b6c:	f3bf 8f4f 	dsb	sy
 8005b70:	623b      	str	r3, [r7, #32]
 8005b72:	e7fe      	b.n	8005b72 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d009      	beq.n	8005b90 <xQueueGiveFromISR+0x44>
 8005b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b80:	f383 8811 	msr	BASEPRI, r3
 8005b84:	f3bf 8f6f 	isb	sy
 8005b88:	f3bf 8f4f 	dsb	sy
 8005b8c:	61fb      	str	r3, [r7, #28]
 8005b8e:	e7fe      	b.n	8005b8e <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d103      	bne.n	8005ba0 <xQueueGiveFromISR+0x54>
 8005b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d101      	bne.n	8005ba4 <xQueueGiveFromISR+0x58>
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e000      	b.n	8005ba6 <xQueueGiveFromISR+0x5a>
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d109      	bne.n	8005bbe <xQueueGiveFromISR+0x72>
 8005baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bae:	f383 8811 	msr	BASEPRI, r3
 8005bb2:	f3bf 8f6f 	isb	sy
 8005bb6:	f3bf 8f4f 	dsb	sy
 8005bba:	61bb      	str	r3, [r7, #24]
 8005bbc:	e7fe      	b.n	8005bbc <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005bbe:	f001 fe71 	bl	80078a4 <vPortValidateInterruptPriority>
	__asm volatile
 8005bc2:	f3ef 8211 	mrs	r2, BASEPRI
 8005bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bca:	f383 8811 	msr	BASEPRI, r3
 8005bce:	f3bf 8f6f 	isb	sy
 8005bd2:	f3bf 8f4f 	dsb	sy
 8005bd6:	617a      	str	r2, [r7, #20]
 8005bd8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005bda:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005be8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d22b      	bcs.n	8005c46 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfa:	1c5a      	adds	r2, r3, #1
 8005bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfe:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005c00:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c08:	d112      	bne.n	8005c30 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d016      	beq.n	8005c40 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c14:	3324      	adds	r3, #36	; 0x24
 8005c16:	4618      	mov	r0, r3
 8005c18:	f001 f856 	bl	8006cc8 <xTaskRemoveFromEventList>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00e      	beq.n	8005c40 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d00b      	beq.n	8005c40 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	601a      	str	r2, [r3, #0]
 8005c2e:	e007      	b.n	8005c40 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005c30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c34:	3301      	adds	r3, #1
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	b25a      	sxtb	r2, r3
 8005c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005c40:	2301      	movs	r3, #1
 8005c42:	637b      	str	r3, [r7, #52]	; 0x34
 8005c44:	e001      	b.n	8005c4a <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005c46:	2300      	movs	r3, #0
 8005c48:	637b      	str	r3, [r7, #52]	; 0x34
 8005c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c4c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3738      	adds	r7, #56	; 0x38
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
	...

08005c60 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b08c      	sub	sp, #48	; 0x30
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d109      	bne.n	8005c8e <xQueueReceive+0x2e>
	__asm volatile
 8005c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7e:	f383 8811 	msr	BASEPRI, r3
 8005c82:	f3bf 8f6f 	isb	sy
 8005c86:	f3bf 8f4f 	dsb	sy
 8005c8a:	623b      	str	r3, [r7, #32]
 8005c8c:	e7fe      	b.n	8005c8c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d103      	bne.n	8005c9c <xQueueReceive+0x3c>
 8005c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d101      	bne.n	8005ca0 <xQueueReceive+0x40>
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e000      	b.n	8005ca2 <xQueueReceive+0x42>
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d109      	bne.n	8005cba <xQueueReceive+0x5a>
 8005ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005caa:	f383 8811 	msr	BASEPRI, r3
 8005cae:	f3bf 8f6f 	isb	sy
 8005cb2:	f3bf 8f4f 	dsb	sy
 8005cb6:	61fb      	str	r3, [r7, #28]
 8005cb8:	e7fe      	b.n	8005cb8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005cba:	f001 f9bb 	bl	8007034 <xTaskGetSchedulerState>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d102      	bne.n	8005cca <xQueueReceive+0x6a>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d101      	bne.n	8005cce <xQueueReceive+0x6e>
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e000      	b.n	8005cd0 <xQueueReceive+0x70>
 8005cce:	2300      	movs	r3, #0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d109      	bne.n	8005ce8 <xQueueReceive+0x88>
 8005cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd8:	f383 8811 	msr	BASEPRI, r3
 8005cdc:	f3bf 8f6f 	isb	sy
 8005ce0:	f3bf 8f4f 	dsb	sy
 8005ce4:	61bb      	str	r3, [r7, #24]
 8005ce6:	e7fe      	b.n	8005ce6 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ce8:	f001 fd00 	bl	80076ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d01f      	beq.n	8005d38 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005cf8:	68b9      	ldr	r1, [r7, #8]
 8005cfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cfc:	f000 faef 	bl	80062de <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d02:	1e5a      	subs	r2, r3, #1
 8005d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d06:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00f      	beq.n	8005d30 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d12:	3310      	adds	r3, #16
 8005d14:	4618      	mov	r0, r3
 8005d16:	f000 ffd7 	bl	8006cc8 <xTaskRemoveFromEventList>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d007      	beq.n	8005d30 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005d20:	4b3c      	ldr	r3, [pc, #240]	; (8005e14 <xQueueReceive+0x1b4>)
 8005d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d26:	601a      	str	r2, [r3, #0]
 8005d28:	f3bf 8f4f 	dsb	sy
 8005d2c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005d30:	f001 fd0a 	bl	8007748 <vPortExitCritical>
				return pdPASS;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e069      	b.n	8005e0c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d103      	bne.n	8005d46 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d3e:	f001 fd03 	bl	8007748 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005d42:	2300      	movs	r3, #0
 8005d44:	e062      	b.n	8005e0c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d106      	bne.n	8005d5a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d4c:	f107 0310 	add.w	r3, r7, #16
 8005d50:	4618      	mov	r0, r3
 8005d52:	f001 f81b 	bl	8006d8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d56:	2301      	movs	r3, #1
 8005d58:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d5a:	f001 fcf5 	bl	8007748 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d5e:	f000 fdb1 	bl	80068c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d62:	f001 fcc3 	bl	80076ec <vPortEnterCritical>
 8005d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d6c:	b25b      	sxtb	r3, r3
 8005d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d72:	d103      	bne.n	8005d7c <xQueueReceive+0x11c>
 8005d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d82:	b25b      	sxtb	r3, r3
 8005d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d88:	d103      	bne.n	8005d92 <xQueueReceive+0x132>
 8005d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d92:	f001 fcd9 	bl	8007748 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d96:	1d3a      	adds	r2, r7, #4
 8005d98:	f107 0310 	add.w	r3, r7, #16
 8005d9c:	4611      	mov	r1, r2
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f001 f80a 	bl	8006db8 <xTaskCheckForTimeOut>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d123      	bne.n	8005df2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005daa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dac:	f000 fb0f 	bl	80063ce <prvIsQueueEmpty>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d017      	beq.n	8005de6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db8:	3324      	adds	r3, #36	; 0x24
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	4611      	mov	r1, r2
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f000 ff5e 	bl	8006c80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005dc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dc6:	f000 fab0 	bl	800632a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005dca:	f000 fd89 	bl	80068e0 <xTaskResumeAll>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d189      	bne.n	8005ce8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005dd4:	4b0f      	ldr	r3, [pc, #60]	; (8005e14 <xQueueReceive+0x1b4>)
 8005dd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dda:	601a      	str	r2, [r3, #0]
 8005ddc:	f3bf 8f4f 	dsb	sy
 8005de0:	f3bf 8f6f 	isb	sy
 8005de4:	e780      	b.n	8005ce8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005de6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005de8:	f000 fa9f 	bl	800632a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005dec:	f000 fd78 	bl	80068e0 <xTaskResumeAll>
 8005df0:	e77a      	b.n	8005ce8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005df2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005df4:	f000 fa99 	bl	800632a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005df8:	f000 fd72 	bl	80068e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005dfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dfe:	f000 fae6 	bl	80063ce <prvIsQueueEmpty>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	f43f af6f 	beq.w	8005ce8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005e0a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3730      	adds	r7, #48	; 0x30
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	e000ed04 	.word	0xe000ed04

08005e18 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b08e      	sub	sp, #56	; 0x38
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005e22:	2300      	movs	r3, #0
 8005e24:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d109      	bne.n	8005e48 <xQueueSemaphoreTake+0x30>
 8005e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e38:	f383 8811 	msr	BASEPRI, r3
 8005e3c:	f3bf 8f6f 	isb	sy
 8005e40:	f3bf 8f4f 	dsb	sy
 8005e44:	623b      	str	r3, [r7, #32]
 8005e46:	e7fe      	b.n	8005e46 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d009      	beq.n	8005e64 <xQueueSemaphoreTake+0x4c>
 8005e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e54:	f383 8811 	msr	BASEPRI, r3
 8005e58:	f3bf 8f6f 	isb	sy
 8005e5c:	f3bf 8f4f 	dsb	sy
 8005e60:	61fb      	str	r3, [r7, #28]
 8005e62:	e7fe      	b.n	8005e62 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e64:	f001 f8e6 	bl	8007034 <xTaskGetSchedulerState>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d102      	bne.n	8005e74 <xQueueSemaphoreTake+0x5c>
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d101      	bne.n	8005e78 <xQueueSemaphoreTake+0x60>
 8005e74:	2301      	movs	r3, #1
 8005e76:	e000      	b.n	8005e7a <xQueueSemaphoreTake+0x62>
 8005e78:	2300      	movs	r3, #0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d109      	bne.n	8005e92 <xQueueSemaphoreTake+0x7a>
 8005e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e82:	f383 8811 	msr	BASEPRI, r3
 8005e86:	f3bf 8f6f 	isb	sy
 8005e8a:	f3bf 8f4f 	dsb	sy
 8005e8e:	61bb      	str	r3, [r7, #24]
 8005e90:	e7fe      	b.n	8005e90 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e92:	f001 fc2b 	bl	80076ec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d024      	beq.n	8005eec <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea4:	1e5a      	subs	r2, r3, #1
 8005ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d104      	bne.n	8005ebc <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005eb2:	f001 fa79 	bl	80073a8 <pvTaskIncrementMutexHeldCount>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eba:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ebe:	691b      	ldr	r3, [r3, #16]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d00f      	beq.n	8005ee4 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec6:	3310      	adds	r3, #16
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f000 fefd 	bl	8006cc8 <xTaskRemoveFromEventList>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d007      	beq.n	8005ee4 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005ed4:	4b53      	ldr	r3, [pc, #332]	; (8006024 <xQueueSemaphoreTake+0x20c>)
 8005ed6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eda:	601a      	str	r2, [r3, #0]
 8005edc:	f3bf 8f4f 	dsb	sy
 8005ee0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005ee4:	f001 fc30 	bl	8007748 <vPortExitCritical>
				return pdPASS;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e096      	b.n	800601a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d110      	bne.n	8005f14 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d009      	beq.n	8005f0c <xQueueSemaphoreTake+0xf4>
 8005ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efc:	f383 8811 	msr	BASEPRI, r3
 8005f00:	f3bf 8f6f 	isb	sy
 8005f04:	f3bf 8f4f 	dsb	sy
 8005f08:	617b      	str	r3, [r7, #20]
 8005f0a:	e7fe      	b.n	8005f0a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005f0c:	f001 fc1c 	bl	8007748 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005f10:	2300      	movs	r3, #0
 8005f12:	e082      	b.n	800601a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d106      	bne.n	8005f28 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f1a:	f107 030c 	add.w	r3, r7, #12
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f000 ff34 	bl	8006d8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f24:	2301      	movs	r3, #1
 8005f26:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f28:	f001 fc0e 	bl	8007748 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f2c:	f000 fcca 	bl	80068c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f30:	f001 fbdc 	bl	80076ec <vPortEnterCritical>
 8005f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f3a:	b25b      	sxtb	r3, r3
 8005f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f40:	d103      	bne.n	8005f4a <xQueueSemaphoreTake+0x132>
 8005f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f50:	b25b      	sxtb	r3, r3
 8005f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f56:	d103      	bne.n	8005f60 <xQueueSemaphoreTake+0x148>
 8005f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f60:	f001 fbf2 	bl	8007748 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f64:	463a      	mov	r2, r7
 8005f66:	f107 030c 	add.w	r3, r7, #12
 8005f6a:	4611      	mov	r1, r2
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f000 ff23 	bl	8006db8 <xTaskCheckForTimeOut>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d132      	bne.n	8005fde <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f7a:	f000 fa28 	bl	80063ce <prvIsQueueEmpty>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d026      	beq.n	8005fd2 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d109      	bne.n	8005fa0 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8005f8c:	f001 fbae 	bl	80076ec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	4618      	mov	r0, r3
 8005f96:	f001 f86b 	bl	8007070 <xTaskPriorityInherit>
 8005f9a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005f9c:	f001 fbd4 	bl	8007748 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa2:	3324      	adds	r3, #36	; 0x24
 8005fa4:	683a      	ldr	r2, [r7, #0]
 8005fa6:	4611      	mov	r1, r2
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f000 fe69 	bl	8006c80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005fae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005fb0:	f000 f9bb 	bl	800632a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005fb4:	f000 fc94 	bl	80068e0 <xTaskResumeAll>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	f47f af69 	bne.w	8005e92 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8005fc0:	4b18      	ldr	r3, [pc, #96]	; (8006024 <xQueueSemaphoreTake+0x20c>)
 8005fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fc6:	601a      	str	r2, [r3, #0]
 8005fc8:	f3bf 8f4f 	dsb	sy
 8005fcc:	f3bf 8f6f 	isb	sy
 8005fd0:	e75f      	b.n	8005e92 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005fd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005fd4:	f000 f9a9 	bl	800632a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005fd8:	f000 fc82 	bl	80068e0 <xTaskResumeAll>
 8005fdc:	e759      	b.n	8005e92 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005fde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005fe0:	f000 f9a3 	bl	800632a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005fe4:	f000 fc7c 	bl	80068e0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005fe8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005fea:	f000 f9f0 	bl	80063ce <prvIsQueueEmpty>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	f43f af4e 	beq.w	8005e92 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d00d      	beq.n	8006018 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8005ffc:	f001 fb76 	bl	80076ec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006000:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006002:	f000 f8ea 	bl	80061da <prvGetDisinheritPriorityAfterTimeout>
 8006006:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800600e:	4618      	mov	r0, r3
 8006010:	f001 f932 	bl	8007278 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006014:	f001 fb98 	bl	8007748 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006018:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800601a:	4618      	mov	r0, r3
 800601c:	3738      	adds	r7, #56	; 0x38
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	e000ed04 	.word	0xe000ed04

08006028 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b08e      	sub	sp, #56	; 0x38
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603a:	2b00      	cmp	r3, #0
 800603c:	d109      	bne.n	8006052 <xQueueReceiveFromISR+0x2a>
 800603e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006042:	f383 8811 	msr	BASEPRI, r3
 8006046:	f3bf 8f6f 	isb	sy
 800604a:	f3bf 8f4f 	dsb	sy
 800604e:	623b      	str	r3, [r7, #32]
 8006050:	e7fe      	b.n	8006050 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d103      	bne.n	8006060 <xQueueReceiveFromISR+0x38>
 8006058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605c:	2b00      	cmp	r3, #0
 800605e:	d101      	bne.n	8006064 <xQueueReceiveFromISR+0x3c>
 8006060:	2301      	movs	r3, #1
 8006062:	e000      	b.n	8006066 <xQueueReceiveFromISR+0x3e>
 8006064:	2300      	movs	r3, #0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d109      	bne.n	800607e <xQueueReceiveFromISR+0x56>
 800606a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606e:	f383 8811 	msr	BASEPRI, r3
 8006072:	f3bf 8f6f 	isb	sy
 8006076:	f3bf 8f4f 	dsb	sy
 800607a:	61fb      	str	r3, [r7, #28]
 800607c:	e7fe      	b.n	800607c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800607e:	f001 fc11 	bl	80078a4 <vPortValidateInterruptPriority>
	__asm volatile
 8006082:	f3ef 8211 	mrs	r2, BASEPRI
 8006086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800608a:	f383 8811 	msr	BASEPRI, r3
 800608e:	f3bf 8f6f 	isb	sy
 8006092:	f3bf 8f4f 	dsb	sy
 8006096:	61ba      	str	r2, [r7, #24]
 8006098:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800609a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800609c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800609e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d02f      	beq.n	800610a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80060aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80060b4:	68b9      	ldr	r1, [r7, #8]
 80060b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060b8:	f000 f911 	bl	80062de <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80060bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060be:	1e5a      	subs	r2, r3, #1
 80060c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80060c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80060c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060cc:	d112      	bne.n	80060f4 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d016      	beq.n	8006104 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d8:	3310      	adds	r3, #16
 80060da:	4618      	mov	r0, r3
 80060dc:	f000 fdf4 	bl	8006cc8 <xTaskRemoveFromEventList>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00e      	beq.n	8006104 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00b      	beq.n	8006104 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	601a      	str	r2, [r3, #0]
 80060f2:	e007      	b.n	8006104 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80060f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060f8:	3301      	adds	r3, #1
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	b25a      	sxtb	r2, r3
 80060fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006104:	2301      	movs	r3, #1
 8006106:	637b      	str	r3, [r7, #52]	; 0x34
 8006108:	e001      	b.n	800610e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800610a:	2300      	movs	r3, #0
 800610c:	637b      	str	r3, [r7, #52]	; 0x34
 800610e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006110:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800611a:	4618      	mov	r0, r3
 800611c:	3738      	adds	r7, #56	; 0x38
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b084      	sub	sp, #16
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d109      	bne.n	8006144 <uxQueueMessagesWaiting+0x22>
	__asm volatile
 8006130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006134:	f383 8811 	msr	BASEPRI, r3
 8006138:	f3bf 8f6f 	isb	sy
 800613c:	f3bf 8f4f 	dsb	sy
 8006140:	60bb      	str	r3, [r7, #8]
 8006142:	e7fe      	b.n	8006142 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 8006144:	f001 fad2 	bl	80076ec <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800614e:	f001 fafb 	bl	8007748 <vPortExitCritical>

	return uxReturn;
 8006152:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006154:	4618      	mov	r0, r3
 8006156:	3710      	adds	r7, #16
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800615c:	b480      	push	{r7}
 800615e:	b087      	sub	sp, #28
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d109      	bne.n	8006182 <uxQueueMessagesWaitingFromISR+0x26>
 800616e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006172:	f383 8811 	msr	BASEPRI, r3
 8006176:	f3bf 8f6f 	isb	sy
 800617a:	f3bf 8f4f 	dsb	sy
 800617e:	60fb      	str	r3, [r7, #12]
 8006180:	e7fe      	b.n	8006180 <uxQueueMessagesWaitingFromISR+0x24>
	uxReturn = pxQueue->uxMessagesWaiting;
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006186:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8006188:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800618a:	4618      	mov	r0, r3
 800618c:	371c      	adds	r7, #28
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr

08006196 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006196:	b580      	push	{r7, lr}
 8006198:	b084      	sub	sp, #16
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d109      	bne.n	80061bc <vQueueDelete+0x26>
 80061a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ac:	f383 8811 	msr	BASEPRI, r3
 80061b0:	f3bf 8f6f 	isb	sy
 80061b4:	f3bf 8f4f 	dsb	sy
 80061b8:	60bb      	str	r3, [r7, #8]
 80061ba:	e7fe      	b.n	80061ba <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f000 f935 	bl	800642c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d102      	bne.n	80061d2 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	f001 fc69 	bl	8007aa4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80061d2:	bf00      	nop
 80061d4:	3710      	adds	r7, #16
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}

080061da <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80061da:	b480      	push	{r7}
 80061dc:	b085      	sub	sp, #20
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d006      	beq.n	80061f8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f1c3 0307 	rsb	r3, r3, #7
 80061f4:	60fb      	str	r3, [r7, #12]
 80061f6:	e001      	b.n	80061fc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80061f8:	2300      	movs	r3, #0
 80061fa:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80061fc:	68fb      	ldr	r3, [r7, #12]
	}
 80061fe:	4618      	mov	r0, r3
 8006200:	3714      	adds	r7, #20
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr

0800620a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800620a:	b580      	push	{r7, lr}
 800620c:	b086      	sub	sp, #24
 800620e:	af00      	add	r7, sp, #0
 8006210:	60f8      	str	r0, [r7, #12]
 8006212:	60b9      	str	r1, [r7, #8]
 8006214:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006216:	2300      	movs	r3, #0
 8006218:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800621e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006224:	2b00      	cmp	r3, #0
 8006226:	d10d      	bne.n	8006244 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d14d      	bne.n	80062cc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	4618      	mov	r0, r3
 8006236:	f000 ff9b 	bl	8007170 <xTaskPriorityDisinherit>
 800623a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2200      	movs	r2, #0
 8006240:	609a      	str	r2, [r3, #8]
 8006242:	e043      	b.n	80062cc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d119      	bne.n	800627e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6858      	ldr	r0, [r3, #4]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006252:	461a      	mov	r2, r3
 8006254:	68b9      	ldr	r1, [r7, #8]
 8006256:	f011 ff6e 	bl	8018136 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	685a      	ldr	r2, [r3, #4]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006262:	441a      	add	r2, r3
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	685a      	ldr	r2, [r3, #4]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	429a      	cmp	r2, r3
 8006272:	d32b      	bcc.n	80062cc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	605a      	str	r2, [r3, #4]
 800627c:	e026      	b.n	80062cc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	68d8      	ldr	r0, [r3, #12]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006286:	461a      	mov	r2, r3
 8006288:	68b9      	ldr	r1, [r7, #8]
 800628a:	f011 ff54 	bl	8018136 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	68da      	ldr	r2, [r3, #12]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006296:	425b      	negs	r3, r3
 8006298:	441a      	add	r2, r3
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	68da      	ldr	r2, [r3, #12]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d207      	bcs.n	80062ba <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	689a      	ldr	r2, [r3, #8]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b2:	425b      	negs	r3, r3
 80062b4:	441a      	add	r2, r3
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2b02      	cmp	r3, #2
 80062be:	d105      	bne.n	80062cc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d002      	beq.n	80062cc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	3b01      	subs	r3, #1
 80062ca:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	1c5a      	adds	r2, r3, #1
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80062d4:	697b      	ldr	r3, [r7, #20]
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3718      	adds	r7, #24
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}

080062de <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80062de:	b580      	push	{r7, lr}
 80062e0:	b082      	sub	sp, #8
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
 80062e6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d018      	beq.n	8006322 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	68da      	ldr	r2, [r3, #12]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f8:	441a      	add	r2, r3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	68da      	ldr	r2, [r3, #12]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	429a      	cmp	r2, r3
 8006308:	d303      	bcc.n	8006312 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	68d9      	ldr	r1, [r3, #12]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631a:	461a      	mov	r2, r3
 800631c:	6838      	ldr	r0, [r7, #0]
 800631e:	f011 ff0a 	bl	8018136 <memcpy>
	}
}
 8006322:	bf00      	nop
 8006324:	3708      	adds	r7, #8
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}

0800632a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800632a:	b580      	push	{r7, lr}
 800632c:	b084      	sub	sp, #16
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006332:	f001 f9db 	bl	80076ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800633c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800633e:	e011      	b.n	8006364 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006344:	2b00      	cmp	r3, #0
 8006346:	d012      	beq.n	800636e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	3324      	adds	r3, #36	; 0x24
 800634c:	4618      	mov	r0, r3
 800634e:	f000 fcbb 	bl	8006cc8 <xTaskRemoveFromEventList>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d001      	beq.n	800635c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006358:	f000 fd8e 	bl	8006e78 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800635c:	7bfb      	ldrb	r3, [r7, #15]
 800635e:	3b01      	subs	r3, #1
 8006360:	b2db      	uxtb	r3, r3
 8006362:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006364:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006368:	2b00      	cmp	r3, #0
 800636a:	dce9      	bgt.n	8006340 <prvUnlockQueue+0x16>
 800636c:	e000      	b.n	8006370 <prvUnlockQueue+0x46>
					break;
 800636e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	22ff      	movs	r2, #255	; 0xff
 8006374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006378:	f001 f9e6 	bl	8007748 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800637c:	f001 f9b6 	bl	80076ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006386:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006388:	e011      	b.n	80063ae <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d012      	beq.n	80063b8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	3310      	adds	r3, #16
 8006396:	4618      	mov	r0, r3
 8006398:	f000 fc96 	bl	8006cc8 <xTaskRemoveFromEventList>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d001      	beq.n	80063a6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80063a2:	f000 fd69 	bl	8006e78 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80063a6:	7bbb      	ldrb	r3, [r7, #14]
 80063a8:	3b01      	subs	r3, #1
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80063ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	dce9      	bgt.n	800638a <prvUnlockQueue+0x60>
 80063b6:	e000      	b.n	80063ba <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80063b8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	22ff      	movs	r2, #255	; 0xff
 80063be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80063c2:	f001 f9c1 	bl	8007748 <vPortExitCritical>
}
 80063c6:	bf00      	nop
 80063c8:	3710      	adds	r7, #16
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}

080063ce <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80063ce:	b580      	push	{r7, lr}
 80063d0:	b084      	sub	sp, #16
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80063d6:	f001 f989 	bl	80076ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d102      	bne.n	80063e8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80063e2:	2301      	movs	r3, #1
 80063e4:	60fb      	str	r3, [r7, #12]
 80063e6:	e001      	b.n	80063ec <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80063e8:	2300      	movs	r3, #0
 80063ea:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80063ec:	f001 f9ac 	bl	8007748 <vPortExitCritical>

	return xReturn;
 80063f0:	68fb      	ldr	r3, [r7, #12]
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80063fa:	b580      	push	{r7, lr}
 80063fc:	b084      	sub	sp, #16
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006402:	f001 f973 	bl	80076ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800640e:	429a      	cmp	r2, r3
 8006410:	d102      	bne.n	8006418 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006412:	2301      	movs	r3, #1
 8006414:	60fb      	str	r3, [r7, #12]
 8006416:	e001      	b.n	800641c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006418:	2300      	movs	r3, #0
 800641a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800641c:	f001 f994 	bl	8007748 <vPortExitCritical>

	return xReturn;
 8006420:	68fb      	ldr	r3, [r7, #12]
}
 8006422:	4618      	mov	r0, r3
 8006424:	3710      	adds	r7, #16
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
	...

0800642c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006434:	2300      	movs	r3, #0
 8006436:	60fb      	str	r3, [r7, #12]
 8006438:	e016      	b.n	8006468 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800643a:	4a10      	ldr	r2, [pc, #64]	; (800647c <vQueueUnregisterQueue+0x50>)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	00db      	lsls	r3, r3, #3
 8006440:	4413      	add	r3, r2
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	429a      	cmp	r2, r3
 8006448:	d10b      	bne.n	8006462 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800644a:	4a0c      	ldr	r2, [pc, #48]	; (800647c <vQueueUnregisterQueue+0x50>)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2100      	movs	r1, #0
 8006450:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006454:	4a09      	ldr	r2, [pc, #36]	; (800647c <vQueueUnregisterQueue+0x50>)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	00db      	lsls	r3, r3, #3
 800645a:	4413      	add	r3, r2
 800645c:	2200      	movs	r2, #0
 800645e:	605a      	str	r2, [r3, #4]
				break;
 8006460:	e005      	b.n	800646e <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	3301      	adds	r3, #1
 8006466:	60fb      	str	r3, [r7, #12]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2b07      	cmp	r3, #7
 800646c:	d9e5      	bls.n	800643a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800646e:	bf00      	nop
 8006470:	3714      	adds	r7, #20
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop
 800647c:	2000c360 	.word	0x2000c360

08006480 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006480:	b580      	push	{r7, lr}
 8006482:	b08e      	sub	sp, #56	; 0x38
 8006484:	af04      	add	r7, sp, #16
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	607a      	str	r2, [r7, #4]
 800648c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800648e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006490:	2b00      	cmp	r3, #0
 8006492:	d109      	bne.n	80064a8 <xTaskCreateStatic+0x28>
 8006494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006498:	f383 8811 	msr	BASEPRI, r3
 800649c:	f3bf 8f6f 	isb	sy
 80064a0:	f3bf 8f4f 	dsb	sy
 80064a4:	623b      	str	r3, [r7, #32]
 80064a6:	e7fe      	b.n	80064a6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80064a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d109      	bne.n	80064c2 <xTaskCreateStatic+0x42>
 80064ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b2:	f383 8811 	msr	BASEPRI, r3
 80064b6:	f3bf 8f6f 	isb	sy
 80064ba:	f3bf 8f4f 	dsb	sy
 80064be:	61fb      	str	r3, [r7, #28]
 80064c0:	e7fe      	b.n	80064c0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80064c2:	2354      	movs	r3, #84	; 0x54
 80064c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	2b54      	cmp	r3, #84	; 0x54
 80064ca:	d009      	beq.n	80064e0 <xTaskCreateStatic+0x60>
 80064cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d0:	f383 8811 	msr	BASEPRI, r3
 80064d4:	f3bf 8f6f 	isb	sy
 80064d8:	f3bf 8f4f 	dsb	sy
 80064dc:	61bb      	str	r3, [r7, #24]
 80064de:	e7fe      	b.n	80064de <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80064e0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80064e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d01e      	beq.n	8006526 <xTaskCreateStatic+0xa6>
 80064e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d01b      	beq.n	8006526 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80064ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80064f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064f6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80064f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fa:	2202      	movs	r2, #2
 80064fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006500:	2300      	movs	r3, #0
 8006502:	9303      	str	r3, [sp, #12]
 8006504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006506:	9302      	str	r3, [sp, #8]
 8006508:	f107 0314 	add.w	r3, r7, #20
 800650c:	9301      	str	r3, [sp, #4]
 800650e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006510:	9300      	str	r3, [sp, #0]
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	68b9      	ldr	r1, [r7, #8]
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	f000 f850 	bl	80065be <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800651e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006520:	f000 f8d4 	bl	80066cc <prvAddNewTaskToReadyList>
 8006524:	e001      	b.n	800652a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8006526:	2300      	movs	r3, #0
 8006528:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800652a:	697b      	ldr	r3, [r7, #20]
	}
 800652c:	4618      	mov	r0, r3
 800652e:	3728      	adds	r7, #40	; 0x28
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006534:	b580      	push	{r7, lr}
 8006536:	b08c      	sub	sp, #48	; 0x30
 8006538:	af04      	add	r7, sp, #16
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	603b      	str	r3, [r7, #0]
 8006540:	4613      	mov	r3, r2
 8006542:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006544:	88fb      	ldrh	r3, [r7, #6]
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	4618      	mov	r0, r3
 800654a:	f001 f9e9 	bl	8007920 <pvPortMalloc>
 800654e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00e      	beq.n	8006574 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006556:	2054      	movs	r0, #84	; 0x54
 8006558:	f001 f9e2 	bl	8007920 <pvPortMalloc>
 800655c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d003      	beq.n	800656c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	697a      	ldr	r2, [r7, #20]
 8006568:	631a      	str	r2, [r3, #48]	; 0x30
 800656a:	e005      	b.n	8006578 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800656c:	6978      	ldr	r0, [r7, #20]
 800656e:	f001 fa99 	bl	8007aa4 <vPortFree>
 8006572:	e001      	b.n	8006578 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006574:	2300      	movs	r3, #0
 8006576:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d017      	beq.n	80065ae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	2200      	movs	r2, #0
 8006582:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006586:	88fa      	ldrh	r2, [r7, #6]
 8006588:	2300      	movs	r3, #0
 800658a:	9303      	str	r3, [sp, #12]
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	9302      	str	r3, [sp, #8]
 8006590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006592:	9301      	str	r3, [sp, #4]
 8006594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006596:	9300      	str	r3, [sp, #0]
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	68b9      	ldr	r1, [r7, #8]
 800659c:	68f8      	ldr	r0, [r7, #12]
 800659e:	f000 f80e 	bl	80065be <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80065a2:	69f8      	ldr	r0, [r7, #28]
 80065a4:	f000 f892 	bl	80066cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80065a8:	2301      	movs	r3, #1
 80065aa:	61bb      	str	r3, [r7, #24]
 80065ac:	e002      	b.n	80065b4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80065ae:	f04f 33ff 	mov.w	r3, #4294967295
 80065b2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80065b4:	69bb      	ldr	r3, [r7, #24]
	}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3720      	adds	r7, #32
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}

080065be <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80065be:	b580      	push	{r7, lr}
 80065c0:	b088      	sub	sp, #32
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	60f8      	str	r0, [r7, #12]
 80065c6:	60b9      	str	r1, [r7, #8]
 80065c8:	607a      	str	r2, [r7, #4]
 80065ca:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80065cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80065d6:	3b01      	subs	r3, #1
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	4413      	add	r3, r2
 80065dc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	f023 0307 	bic.w	r3, r3, #7
 80065e4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	f003 0307 	and.w	r3, r3, #7
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d009      	beq.n	8006604 <prvInitialiseNewTask+0x46>
 80065f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f4:	f383 8811 	msr	BASEPRI, r3
 80065f8:	f3bf 8f6f 	isb	sy
 80065fc:	f3bf 8f4f 	dsb	sy
 8006600:	617b      	str	r3, [r7, #20]
 8006602:	e7fe      	b.n	8006602 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d01f      	beq.n	800664a <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800660a:	2300      	movs	r3, #0
 800660c:	61fb      	str	r3, [r7, #28]
 800660e:	e012      	b.n	8006636 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006610:	68ba      	ldr	r2, [r7, #8]
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	4413      	add	r3, r2
 8006616:	7819      	ldrb	r1, [r3, #0]
 8006618:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	4413      	add	r3, r2
 800661e:	3334      	adds	r3, #52	; 0x34
 8006620:	460a      	mov	r2, r1
 8006622:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006624:	68ba      	ldr	r2, [r7, #8]
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	4413      	add	r3, r2
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d006      	beq.n	800663e <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	3301      	adds	r3, #1
 8006634:	61fb      	str	r3, [r7, #28]
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	2b0f      	cmp	r3, #15
 800663a:	d9e9      	bls.n	8006610 <prvInitialiseNewTask+0x52>
 800663c:	e000      	b.n	8006640 <prvInitialiseNewTask+0x82>
			{
				break;
 800663e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006642:	2200      	movs	r2, #0
 8006644:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006648:	e003      	b.n	8006652 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800664a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664c:	2200      	movs	r2, #0
 800664e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006654:	2b06      	cmp	r3, #6
 8006656:	d901      	bls.n	800665c <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006658:	2306      	movs	r3, #6
 800665a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800665c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006660:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006664:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006666:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666a:	2200      	movs	r2, #0
 800666c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800666e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006670:	3304      	adds	r3, #4
 8006672:	4618      	mov	r0, r3
 8006674:	f7fe fec1 	bl	80053fa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800667a:	3318      	adds	r3, #24
 800667c:	4618      	mov	r0, r3
 800667e:	f7fe febc 	bl	80053fa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006686:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668a:	f1c3 0207 	rsb	r2, r3, #7
 800668e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006690:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006696:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669a:	2200      	movs	r2, #0
 800669c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800669e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a0:	2200      	movs	r2, #0
 80066a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80066a6:	683a      	ldr	r2, [r7, #0]
 80066a8:	68f9      	ldr	r1, [r7, #12]
 80066aa:	69b8      	ldr	r0, [r7, #24]
 80066ac:	f000 fef6 	bl	800749c <pxPortInitialiseStack>
 80066b0:	4602      	mov	r2, r0
 80066b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80066b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d002      	beq.n	80066c2 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80066bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066c2:	bf00      	nop
 80066c4:	3720      	adds	r7, #32
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
	...

080066cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80066d4:	f001 f80a 	bl	80076ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80066d8:	4b2a      	ldr	r3, [pc, #168]	; (8006784 <prvAddNewTaskToReadyList+0xb8>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	3301      	adds	r3, #1
 80066de:	4a29      	ldr	r2, [pc, #164]	; (8006784 <prvAddNewTaskToReadyList+0xb8>)
 80066e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80066e2:	4b29      	ldr	r3, [pc, #164]	; (8006788 <prvAddNewTaskToReadyList+0xbc>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d109      	bne.n	80066fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80066ea:	4a27      	ldr	r2, [pc, #156]	; (8006788 <prvAddNewTaskToReadyList+0xbc>)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80066f0:	4b24      	ldr	r3, [pc, #144]	; (8006784 <prvAddNewTaskToReadyList+0xb8>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d110      	bne.n	800671a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80066f8:	f000 fbe2 	bl	8006ec0 <prvInitialiseTaskLists>
 80066fc:	e00d      	b.n	800671a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80066fe:	4b23      	ldr	r3, [pc, #140]	; (800678c <prvAddNewTaskToReadyList+0xc0>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d109      	bne.n	800671a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006706:	4b20      	ldr	r3, [pc, #128]	; (8006788 <prvAddNewTaskToReadyList+0xbc>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006710:	429a      	cmp	r2, r3
 8006712:	d802      	bhi.n	800671a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006714:	4a1c      	ldr	r2, [pc, #112]	; (8006788 <prvAddNewTaskToReadyList+0xbc>)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800671a:	4b1d      	ldr	r3, [pc, #116]	; (8006790 <prvAddNewTaskToReadyList+0xc4>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	3301      	adds	r3, #1
 8006720:	4a1b      	ldr	r2, [pc, #108]	; (8006790 <prvAddNewTaskToReadyList+0xc4>)
 8006722:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006728:	2201      	movs	r2, #1
 800672a:	409a      	lsls	r2, r3
 800672c:	4b19      	ldr	r3, [pc, #100]	; (8006794 <prvAddNewTaskToReadyList+0xc8>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4313      	orrs	r3, r2
 8006732:	4a18      	ldr	r2, [pc, #96]	; (8006794 <prvAddNewTaskToReadyList+0xc8>)
 8006734:	6013      	str	r3, [r2, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800673a:	4613      	mov	r3, r2
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	4413      	add	r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	4a15      	ldr	r2, [pc, #84]	; (8006798 <prvAddNewTaskToReadyList+0xcc>)
 8006744:	441a      	add	r2, r3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	3304      	adds	r3, #4
 800674a:	4619      	mov	r1, r3
 800674c:	4610      	mov	r0, r2
 800674e:	f7fe fe61 	bl	8005414 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006752:	f000 fff9 	bl	8007748 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006756:	4b0d      	ldr	r3, [pc, #52]	; (800678c <prvAddNewTaskToReadyList+0xc0>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d00e      	beq.n	800677c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800675e:	4b0a      	ldr	r3, [pc, #40]	; (8006788 <prvAddNewTaskToReadyList+0xbc>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006768:	429a      	cmp	r2, r3
 800676a:	d207      	bcs.n	800677c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800676c:	4b0b      	ldr	r3, [pc, #44]	; (800679c <prvAddNewTaskToReadyList+0xd0>)
 800676e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006772:	601a      	str	r2, [r3, #0]
 8006774:	f3bf 8f4f 	dsb	sy
 8006778:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800677c:	bf00      	nop
 800677e:	3708      	adds	r7, #8
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}
 8006784:	2000076c 	.word	0x2000076c
 8006788:	2000066c 	.word	0x2000066c
 800678c:	20000778 	.word	0x20000778
 8006790:	20000788 	.word	0x20000788
 8006794:	20000774 	.word	0x20000774
 8006798:	20000670 	.word	0x20000670
 800679c:	e000ed04 	.word	0xe000ed04

080067a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80067a8:	2300      	movs	r3, #0
 80067aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d016      	beq.n	80067e0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80067b2:	4b13      	ldr	r3, [pc, #76]	; (8006800 <vTaskDelay+0x60>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d009      	beq.n	80067ce <vTaskDelay+0x2e>
 80067ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067be:	f383 8811 	msr	BASEPRI, r3
 80067c2:	f3bf 8f6f 	isb	sy
 80067c6:	f3bf 8f4f 	dsb	sy
 80067ca:	60bb      	str	r3, [r7, #8]
 80067cc:	e7fe      	b.n	80067cc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80067ce:	f000 f879 	bl	80068c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80067d2:	2100      	movs	r1, #0
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 fdfb 	bl	80073d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80067da:	f000 f881 	bl	80068e0 <xTaskResumeAll>
 80067de:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d107      	bne.n	80067f6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80067e6:	4b07      	ldr	r3, [pc, #28]	; (8006804 <vTaskDelay+0x64>)
 80067e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067ec:	601a      	str	r2, [r3, #0]
 80067ee:	f3bf 8f4f 	dsb	sy
 80067f2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80067f6:	bf00      	nop
 80067f8:	3710      	adds	r7, #16
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	20000794 	.word	0x20000794
 8006804:	e000ed04 	.word	0xe000ed04

08006808 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b08a      	sub	sp, #40	; 0x28
 800680c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800680e:	2300      	movs	r3, #0
 8006810:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006812:	2300      	movs	r3, #0
 8006814:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006816:	463a      	mov	r2, r7
 8006818:	1d39      	adds	r1, r7, #4
 800681a:	f107 0308 	add.w	r3, r7, #8
 800681e:	4618      	mov	r0, r3
 8006820:	f7f9 fece 	bl	80005c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006824:	6839      	ldr	r1, [r7, #0]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	68ba      	ldr	r2, [r7, #8]
 800682a:	9202      	str	r2, [sp, #8]
 800682c:	9301      	str	r3, [sp, #4]
 800682e:	2300      	movs	r3, #0
 8006830:	9300      	str	r3, [sp, #0]
 8006832:	2300      	movs	r3, #0
 8006834:	460a      	mov	r2, r1
 8006836:	491d      	ldr	r1, [pc, #116]	; (80068ac <vTaskStartScheduler+0xa4>)
 8006838:	481d      	ldr	r0, [pc, #116]	; (80068b0 <vTaskStartScheduler+0xa8>)
 800683a:	f7ff fe21 	bl	8006480 <xTaskCreateStatic>
 800683e:	4602      	mov	r2, r0
 8006840:	4b1c      	ldr	r3, [pc, #112]	; (80068b4 <vTaskStartScheduler+0xac>)
 8006842:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006844:	4b1b      	ldr	r3, [pc, #108]	; (80068b4 <vTaskStartScheduler+0xac>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d002      	beq.n	8006852 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800684c:	2301      	movs	r3, #1
 800684e:	617b      	str	r3, [r7, #20]
 8006850:	e001      	b.n	8006856 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006852:	2300      	movs	r3, #0
 8006854:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	2b01      	cmp	r3, #1
 800685a:	d115      	bne.n	8006888 <vTaskStartScheduler+0x80>
 800685c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006860:	f383 8811 	msr	BASEPRI, r3
 8006864:	f3bf 8f6f 	isb	sy
 8006868:	f3bf 8f4f 	dsb	sy
 800686c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800686e:	4b12      	ldr	r3, [pc, #72]	; (80068b8 <vTaskStartScheduler+0xb0>)
 8006870:	f04f 32ff 	mov.w	r2, #4294967295
 8006874:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006876:	4b11      	ldr	r3, [pc, #68]	; (80068bc <vTaskStartScheduler+0xb4>)
 8006878:	2201      	movs	r2, #1
 800687a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800687c:	4b10      	ldr	r3, [pc, #64]	; (80068c0 <vTaskStartScheduler+0xb8>)
 800687e:	2200      	movs	r2, #0
 8006880:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006882:	f000 fe95 	bl	80075b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006886:	e00d      	b.n	80068a4 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800688e:	d109      	bne.n	80068a4 <vTaskStartScheduler+0x9c>
 8006890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006894:	f383 8811 	msr	BASEPRI, r3
 8006898:	f3bf 8f6f 	isb	sy
 800689c:	f3bf 8f4f 	dsb	sy
 80068a0:	60fb      	str	r3, [r7, #12]
 80068a2:	e7fe      	b.n	80068a2 <vTaskStartScheduler+0x9a>
}
 80068a4:	bf00      	nop
 80068a6:	3718      	adds	r7, #24
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}
 80068ac:	080195a0 	.word	0x080195a0
 80068b0:	08006e91 	.word	0x08006e91
 80068b4:	20000790 	.word	0x20000790
 80068b8:	2000078c 	.word	0x2000078c
 80068bc:	20000778 	.word	0x20000778
 80068c0:	20000770 	.word	0x20000770

080068c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80068c4:	b480      	push	{r7}
 80068c6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80068c8:	4b04      	ldr	r3, [pc, #16]	; (80068dc <vTaskSuspendAll+0x18>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	3301      	adds	r3, #1
 80068ce:	4a03      	ldr	r2, [pc, #12]	; (80068dc <vTaskSuspendAll+0x18>)
 80068d0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80068d2:	bf00      	nop
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr
 80068dc:	20000794 	.word	0x20000794

080068e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80068e6:	2300      	movs	r3, #0
 80068e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80068ea:	2300      	movs	r3, #0
 80068ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80068ee:	4b41      	ldr	r3, [pc, #260]	; (80069f4 <xTaskResumeAll+0x114>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d109      	bne.n	800690a <xTaskResumeAll+0x2a>
 80068f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068fa:	f383 8811 	msr	BASEPRI, r3
 80068fe:	f3bf 8f6f 	isb	sy
 8006902:	f3bf 8f4f 	dsb	sy
 8006906:	603b      	str	r3, [r7, #0]
 8006908:	e7fe      	b.n	8006908 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800690a:	f000 feef 	bl	80076ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800690e:	4b39      	ldr	r3, [pc, #228]	; (80069f4 <xTaskResumeAll+0x114>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	3b01      	subs	r3, #1
 8006914:	4a37      	ldr	r2, [pc, #220]	; (80069f4 <xTaskResumeAll+0x114>)
 8006916:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006918:	4b36      	ldr	r3, [pc, #216]	; (80069f4 <xTaskResumeAll+0x114>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d161      	bne.n	80069e4 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006920:	4b35      	ldr	r3, [pc, #212]	; (80069f8 <xTaskResumeAll+0x118>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d05d      	beq.n	80069e4 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006928:	e02e      	b.n	8006988 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800692a:	4b34      	ldr	r3, [pc, #208]	; (80069fc <xTaskResumeAll+0x11c>)
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	3318      	adds	r3, #24
 8006936:	4618      	mov	r0, r3
 8006938:	f7fe fdc9 	bl	80054ce <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	3304      	adds	r3, #4
 8006940:	4618      	mov	r0, r3
 8006942:	f7fe fdc4 	bl	80054ce <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800694a:	2201      	movs	r2, #1
 800694c:	409a      	lsls	r2, r3
 800694e:	4b2c      	ldr	r3, [pc, #176]	; (8006a00 <xTaskResumeAll+0x120>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4313      	orrs	r3, r2
 8006954:	4a2a      	ldr	r2, [pc, #168]	; (8006a00 <xTaskResumeAll+0x120>)
 8006956:	6013      	str	r3, [r2, #0]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800695c:	4613      	mov	r3, r2
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	4413      	add	r3, r2
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	4a27      	ldr	r2, [pc, #156]	; (8006a04 <xTaskResumeAll+0x124>)
 8006966:	441a      	add	r2, r3
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	3304      	adds	r3, #4
 800696c:	4619      	mov	r1, r3
 800696e:	4610      	mov	r0, r2
 8006970:	f7fe fd50 	bl	8005414 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006978:	4b23      	ldr	r3, [pc, #140]	; (8006a08 <xTaskResumeAll+0x128>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800697e:	429a      	cmp	r2, r3
 8006980:	d302      	bcc.n	8006988 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8006982:	4b22      	ldr	r3, [pc, #136]	; (8006a0c <xTaskResumeAll+0x12c>)
 8006984:	2201      	movs	r2, #1
 8006986:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006988:	4b1c      	ldr	r3, [pc, #112]	; (80069fc <xTaskResumeAll+0x11c>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1cc      	bne.n	800692a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d001      	beq.n	800699a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006996:	f000 fb2d 	bl	8006ff4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800699a:	4b1d      	ldr	r3, [pc, #116]	; (8006a10 <xTaskResumeAll+0x130>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d010      	beq.n	80069c8 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80069a6:	f000 f859 	bl	8006a5c <xTaskIncrementTick>
 80069aa:	4603      	mov	r3, r0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d002      	beq.n	80069b6 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80069b0:	4b16      	ldr	r3, [pc, #88]	; (8006a0c <xTaskResumeAll+0x12c>)
 80069b2:	2201      	movs	r2, #1
 80069b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	3b01      	subs	r3, #1
 80069ba:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d1f1      	bne.n	80069a6 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80069c2:	4b13      	ldr	r3, [pc, #76]	; (8006a10 <xTaskResumeAll+0x130>)
 80069c4:	2200      	movs	r2, #0
 80069c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80069c8:	4b10      	ldr	r3, [pc, #64]	; (8006a0c <xTaskResumeAll+0x12c>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d009      	beq.n	80069e4 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80069d0:	2301      	movs	r3, #1
 80069d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80069d4:	4b0f      	ldr	r3, [pc, #60]	; (8006a14 <xTaskResumeAll+0x134>)
 80069d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069da:	601a      	str	r2, [r3, #0]
 80069dc:	f3bf 8f4f 	dsb	sy
 80069e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80069e4:	f000 feb0 	bl	8007748 <vPortExitCritical>

	return xAlreadyYielded;
 80069e8:	68bb      	ldr	r3, [r7, #8]
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3710      	adds	r7, #16
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	20000794 	.word	0x20000794
 80069f8:	2000076c 	.word	0x2000076c
 80069fc:	2000072c 	.word	0x2000072c
 8006a00:	20000774 	.word	0x20000774
 8006a04:	20000670 	.word	0x20000670
 8006a08:	2000066c 	.word	0x2000066c
 8006a0c:	20000780 	.word	0x20000780
 8006a10:	2000077c 	.word	0x2000077c
 8006a14:	e000ed04 	.word	0xe000ed04

08006a18 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006a1e:	4b05      	ldr	r3, [pc, #20]	; (8006a34 <xTaskGetTickCount+0x1c>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006a24:	687b      	ldr	r3, [r7, #4]
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	370c      	adds	r7, #12
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr
 8006a32:	bf00      	nop
 8006a34:	20000770 	.word	0x20000770

08006a38 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b082      	sub	sp, #8
 8006a3c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a3e:	f000 ff31 	bl	80078a4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006a42:	2300      	movs	r3, #0
 8006a44:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006a46:	4b04      	ldr	r3, [pc, #16]	; (8006a58 <xTaskGetTickCountFromISR+0x20>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006a4c:	683b      	ldr	r3, [r7, #0]
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3708      	adds	r7, #8
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	20000770 	.word	0x20000770

08006a5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b086      	sub	sp, #24
 8006a60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006a62:	2300      	movs	r3, #0
 8006a64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a66:	4b4e      	ldr	r3, [pc, #312]	; (8006ba0 <xTaskIncrementTick+0x144>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	f040 8087 	bne.w	8006b7e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006a70:	4b4c      	ldr	r3, [pc, #304]	; (8006ba4 <xTaskIncrementTick+0x148>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	3301      	adds	r3, #1
 8006a76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006a78:	4a4a      	ldr	r2, [pc, #296]	; (8006ba4 <xTaskIncrementTick+0x148>)
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d11f      	bne.n	8006ac4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006a84:	4b48      	ldr	r3, [pc, #288]	; (8006ba8 <xTaskIncrementTick+0x14c>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d009      	beq.n	8006aa2 <xTaskIncrementTick+0x46>
 8006a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a92:	f383 8811 	msr	BASEPRI, r3
 8006a96:	f3bf 8f6f 	isb	sy
 8006a9a:	f3bf 8f4f 	dsb	sy
 8006a9e:	603b      	str	r3, [r7, #0]
 8006aa0:	e7fe      	b.n	8006aa0 <xTaskIncrementTick+0x44>
 8006aa2:	4b41      	ldr	r3, [pc, #260]	; (8006ba8 <xTaskIncrementTick+0x14c>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	60fb      	str	r3, [r7, #12]
 8006aa8:	4b40      	ldr	r3, [pc, #256]	; (8006bac <xTaskIncrementTick+0x150>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a3e      	ldr	r2, [pc, #248]	; (8006ba8 <xTaskIncrementTick+0x14c>)
 8006aae:	6013      	str	r3, [r2, #0]
 8006ab0:	4a3e      	ldr	r2, [pc, #248]	; (8006bac <xTaskIncrementTick+0x150>)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6013      	str	r3, [r2, #0]
 8006ab6:	4b3e      	ldr	r3, [pc, #248]	; (8006bb0 <xTaskIncrementTick+0x154>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	3301      	adds	r3, #1
 8006abc:	4a3c      	ldr	r2, [pc, #240]	; (8006bb0 <xTaskIncrementTick+0x154>)
 8006abe:	6013      	str	r3, [r2, #0]
 8006ac0:	f000 fa98 	bl	8006ff4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006ac4:	4b3b      	ldr	r3, [pc, #236]	; (8006bb4 <xTaskIncrementTick+0x158>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	693a      	ldr	r2, [r7, #16]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d348      	bcc.n	8006b60 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ace:	4b36      	ldr	r3, [pc, #216]	; (8006ba8 <xTaskIncrementTick+0x14c>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d104      	bne.n	8006ae2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ad8:	4b36      	ldr	r3, [pc, #216]	; (8006bb4 <xTaskIncrementTick+0x158>)
 8006ada:	f04f 32ff 	mov.w	r2, #4294967295
 8006ade:	601a      	str	r2, [r3, #0]
					break;
 8006ae0:	e03e      	b.n	8006b60 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ae2:	4b31      	ldr	r3, [pc, #196]	; (8006ba8 <xTaskIncrementTick+0x14c>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006af2:	693a      	ldr	r2, [r7, #16]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d203      	bcs.n	8006b02 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006afa:	4a2e      	ldr	r2, [pc, #184]	; (8006bb4 <xTaskIncrementTick+0x158>)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006b00:	e02e      	b.n	8006b60 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	3304      	adds	r3, #4
 8006b06:	4618      	mov	r0, r3
 8006b08:	f7fe fce1 	bl	80054ce <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d004      	beq.n	8006b1e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	3318      	adds	r3, #24
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7fe fcd8 	bl	80054ce <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b22:	2201      	movs	r2, #1
 8006b24:	409a      	lsls	r2, r3
 8006b26:	4b24      	ldr	r3, [pc, #144]	; (8006bb8 <xTaskIncrementTick+0x15c>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	4a22      	ldr	r2, [pc, #136]	; (8006bb8 <xTaskIncrementTick+0x15c>)
 8006b2e:	6013      	str	r3, [r2, #0]
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b34:	4613      	mov	r3, r2
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	4413      	add	r3, r2
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	4a1f      	ldr	r2, [pc, #124]	; (8006bbc <xTaskIncrementTick+0x160>)
 8006b3e:	441a      	add	r2, r3
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	3304      	adds	r3, #4
 8006b44:	4619      	mov	r1, r3
 8006b46:	4610      	mov	r0, r2
 8006b48:	f7fe fc64 	bl	8005414 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b50:	4b1b      	ldr	r3, [pc, #108]	; (8006bc0 <xTaskIncrementTick+0x164>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d3b9      	bcc.n	8006ace <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b5e:	e7b6      	b.n	8006ace <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006b60:	4b17      	ldr	r3, [pc, #92]	; (8006bc0 <xTaskIncrementTick+0x164>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b66:	4915      	ldr	r1, [pc, #84]	; (8006bbc <xTaskIncrementTick+0x160>)
 8006b68:	4613      	mov	r3, r2
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	4413      	add	r3, r2
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	440b      	add	r3, r1
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d907      	bls.n	8006b88 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	617b      	str	r3, [r7, #20]
 8006b7c:	e004      	b.n	8006b88 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006b7e:	4b11      	ldr	r3, [pc, #68]	; (8006bc4 <xTaskIncrementTick+0x168>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	3301      	adds	r3, #1
 8006b84:	4a0f      	ldr	r2, [pc, #60]	; (8006bc4 <xTaskIncrementTick+0x168>)
 8006b86:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006b88:	4b0f      	ldr	r3, [pc, #60]	; (8006bc8 <xTaskIncrementTick+0x16c>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d001      	beq.n	8006b94 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8006b90:	2301      	movs	r3, #1
 8006b92:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006b94:	697b      	ldr	r3, [r7, #20]
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3718      	adds	r7, #24
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	20000794 	.word	0x20000794
 8006ba4:	20000770 	.word	0x20000770
 8006ba8:	20000724 	.word	0x20000724
 8006bac:	20000728 	.word	0x20000728
 8006bb0:	20000784 	.word	0x20000784
 8006bb4:	2000078c 	.word	0x2000078c
 8006bb8:	20000774 	.word	0x20000774
 8006bbc:	20000670 	.word	0x20000670
 8006bc0:	2000066c 	.word	0x2000066c
 8006bc4:	2000077c 	.word	0x2000077c
 8006bc8:	20000780 	.word	0x20000780

08006bcc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b087      	sub	sp, #28
 8006bd0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006bd2:	4b26      	ldr	r3, [pc, #152]	; (8006c6c <vTaskSwitchContext+0xa0>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d003      	beq.n	8006be2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006bda:	4b25      	ldr	r3, [pc, #148]	; (8006c70 <vTaskSwitchContext+0xa4>)
 8006bdc:	2201      	movs	r2, #1
 8006bde:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006be0:	e03e      	b.n	8006c60 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8006be2:	4b23      	ldr	r3, [pc, #140]	; (8006c70 <vTaskSwitchContext+0xa4>)
 8006be4:	2200      	movs	r2, #0
 8006be6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006be8:	4b22      	ldr	r3, [pc, #136]	; (8006c74 <vTaskSwitchContext+0xa8>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	fab3 f383 	clz	r3, r3
 8006bf4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006bf6:	7afb      	ldrb	r3, [r7, #11]
 8006bf8:	f1c3 031f 	rsb	r3, r3, #31
 8006bfc:	617b      	str	r3, [r7, #20]
 8006bfe:	491e      	ldr	r1, [pc, #120]	; (8006c78 <vTaskSwitchContext+0xac>)
 8006c00:	697a      	ldr	r2, [r7, #20]
 8006c02:	4613      	mov	r3, r2
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	4413      	add	r3, r2
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	440b      	add	r3, r1
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d109      	bne.n	8006c26 <vTaskSwitchContext+0x5a>
	__asm volatile
 8006c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c16:	f383 8811 	msr	BASEPRI, r3
 8006c1a:	f3bf 8f6f 	isb	sy
 8006c1e:	f3bf 8f4f 	dsb	sy
 8006c22:	607b      	str	r3, [r7, #4]
 8006c24:	e7fe      	b.n	8006c24 <vTaskSwitchContext+0x58>
 8006c26:	697a      	ldr	r2, [r7, #20]
 8006c28:	4613      	mov	r3, r2
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	4413      	add	r3, r2
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	4a11      	ldr	r2, [pc, #68]	; (8006c78 <vTaskSwitchContext+0xac>)
 8006c32:	4413      	add	r3, r2
 8006c34:	613b      	str	r3, [r7, #16]
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	685a      	ldr	r2, [r3, #4]
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	605a      	str	r2, [r3, #4]
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	685a      	ldr	r2, [r3, #4]
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	3308      	adds	r3, #8
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d104      	bne.n	8006c56 <vTaskSwitchContext+0x8a>
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	685a      	ldr	r2, [r3, #4]
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	605a      	str	r2, [r3, #4]
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	4a07      	ldr	r2, [pc, #28]	; (8006c7c <vTaskSwitchContext+0xb0>)
 8006c5e:	6013      	str	r3, [r2, #0]
}
 8006c60:	bf00      	nop
 8006c62:	371c      	adds	r7, #28
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr
 8006c6c:	20000794 	.word	0x20000794
 8006c70:	20000780 	.word	0x20000780
 8006c74:	20000774 	.word	0x20000774
 8006c78:	20000670 	.word	0x20000670
 8006c7c:	2000066c 	.word	0x2000066c

08006c80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d109      	bne.n	8006ca4 <vTaskPlaceOnEventList+0x24>
 8006c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c94:	f383 8811 	msr	BASEPRI, r3
 8006c98:	f3bf 8f6f 	isb	sy
 8006c9c:	f3bf 8f4f 	dsb	sy
 8006ca0:	60fb      	str	r3, [r7, #12]
 8006ca2:	e7fe      	b.n	8006ca2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ca4:	4b07      	ldr	r3, [pc, #28]	; (8006cc4 <vTaskPlaceOnEventList+0x44>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	3318      	adds	r3, #24
 8006caa:	4619      	mov	r1, r3
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f7fe fbd5 	bl	800545c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006cb2:	2101      	movs	r1, #1
 8006cb4:	6838      	ldr	r0, [r7, #0]
 8006cb6:	f000 fb8b 	bl	80073d0 <prvAddCurrentTaskToDelayedList>
}
 8006cba:	bf00      	nop
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	2000066c 	.word	0x2000066c

08006cc8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b086      	sub	sp, #24
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d109      	bne.n	8006cf2 <xTaskRemoveFromEventList+0x2a>
 8006cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce2:	f383 8811 	msr	BASEPRI, r3
 8006ce6:	f3bf 8f6f 	isb	sy
 8006cea:	f3bf 8f4f 	dsb	sy
 8006cee:	60fb      	str	r3, [r7, #12]
 8006cf0:	e7fe      	b.n	8006cf0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	3318      	adds	r3, #24
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f7fe fbe9 	bl	80054ce <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cfc:	4b1d      	ldr	r3, [pc, #116]	; (8006d74 <xTaskRemoveFromEventList+0xac>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d11c      	bne.n	8006d3e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	3304      	adds	r3, #4
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f7fe fbe0 	bl	80054ce <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d12:	2201      	movs	r2, #1
 8006d14:	409a      	lsls	r2, r3
 8006d16:	4b18      	ldr	r3, [pc, #96]	; (8006d78 <xTaskRemoveFromEventList+0xb0>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	4a16      	ldr	r2, [pc, #88]	; (8006d78 <xTaskRemoveFromEventList+0xb0>)
 8006d1e:	6013      	str	r3, [r2, #0]
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d24:	4613      	mov	r3, r2
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	4413      	add	r3, r2
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	4a13      	ldr	r2, [pc, #76]	; (8006d7c <xTaskRemoveFromEventList+0xb4>)
 8006d2e:	441a      	add	r2, r3
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	3304      	adds	r3, #4
 8006d34:	4619      	mov	r1, r3
 8006d36:	4610      	mov	r0, r2
 8006d38:	f7fe fb6c 	bl	8005414 <vListInsertEnd>
 8006d3c:	e005      	b.n	8006d4a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	3318      	adds	r3, #24
 8006d42:	4619      	mov	r1, r3
 8006d44:	480e      	ldr	r0, [pc, #56]	; (8006d80 <xTaskRemoveFromEventList+0xb8>)
 8006d46:	f7fe fb65 	bl	8005414 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d4e:	4b0d      	ldr	r3, [pc, #52]	; (8006d84 <xTaskRemoveFromEventList+0xbc>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d905      	bls.n	8006d64 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006d5c:	4b0a      	ldr	r3, [pc, #40]	; (8006d88 <xTaskRemoveFromEventList+0xc0>)
 8006d5e:	2201      	movs	r2, #1
 8006d60:	601a      	str	r2, [r3, #0]
 8006d62:	e001      	b.n	8006d68 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8006d64:	2300      	movs	r3, #0
 8006d66:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006d68:	697b      	ldr	r3, [r7, #20]
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3718      	adds	r7, #24
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	20000794 	.word	0x20000794
 8006d78:	20000774 	.word	0x20000774
 8006d7c:	20000670 	.word	0x20000670
 8006d80:	2000072c 	.word	0x2000072c
 8006d84:	2000066c 	.word	0x2000066c
 8006d88:	20000780 	.word	0x20000780

08006d8c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006d94:	4b06      	ldr	r3, [pc, #24]	; (8006db0 <vTaskInternalSetTimeOutState+0x24>)
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006d9c:	4b05      	ldr	r3, [pc, #20]	; (8006db4 <vTaskInternalSetTimeOutState+0x28>)
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	605a      	str	r2, [r3, #4]
}
 8006da4:	bf00      	nop
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr
 8006db0:	20000784 	.word	0x20000784
 8006db4:	20000770 	.word	0x20000770

08006db8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b088      	sub	sp, #32
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d109      	bne.n	8006ddc <xTaskCheckForTimeOut+0x24>
 8006dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dcc:	f383 8811 	msr	BASEPRI, r3
 8006dd0:	f3bf 8f6f 	isb	sy
 8006dd4:	f3bf 8f4f 	dsb	sy
 8006dd8:	613b      	str	r3, [r7, #16]
 8006dda:	e7fe      	b.n	8006dda <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d109      	bne.n	8006df6 <xTaskCheckForTimeOut+0x3e>
 8006de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de6:	f383 8811 	msr	BASEPRI, r3
 8006dea:	f3bf 8f6f 	isb	sy
 8006dee:	f3bf 8f4f 	dsb	sy
 8006df2:	60fb      	str	r3, [r7, #12]
 8006df4:	e7fe      	b.n	8006df4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8006df6:	f000 fc79 	bl	80076ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006dfa:	4b1d      	ldr	r3, [pc, #116]	; (8006e70 <xTaskCheckForTimeOut+0xb8>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	69ba      	ldr	r2, [r7, #24]
 8006e06:	1ad3      	subs	r3, r2, r3
 8006e08:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e12:	d102      	bne.n	8006e1a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006e14:	2300      	movs	r3, #0
 8006e16:	61fb      	str	r3, [r7, #28]
 8006e18:	e023      	b.n	8006e62 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	4b15      	ldr	r3, [pc, #84]	; (8006e74 <xTaskCheckForTimeOut+0xbc>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d007      	beq.n	8006e36 <xTaskCheckForTimeOut+0x7e>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	69ba      	ldr	r2, [r7, #24]
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d302      	bcc.n	8006e36 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006e30:	2301      	movs	r3, #1
 8006e32:	61fb      	str	r3, [r7, #28]
 8006e34:	e015      	b.n	8006e62 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	697a      	ldr	r2, [r7, #20]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d20b      	bcs.n	8006e58 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	1ad2      	subs	r2, r2, r3
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f7ff ff9d 	bl	8006d8c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006e52:	2300      	movs	r3, #0
 8006e54:	61fb      	str	r3, [r7, #28]
 8006e56:	e004      	b.n	8006e62 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006e62:	f000 fc71 	bl	8007748 <vPortExitCritical>

	return xReturn;
 8006e66:	69fb      	ldr	r3, [r7, #28]
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3720      	adds	r7, #32
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	20000770 	.word	0x20000770
 8006e74:	20000784 	.word	0x20000784

08006e78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006e78:	b480      	push	{r7}
 8006e7a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006e7c:	4b03      	ldr	r3, [pc, #12]	; (8006e8c <vTaskMissedYield+0x14>)
 8006e7e:	2201      	movs	r2, #1
 8006e80:	601a      	str	r2, [r3, #0]
}
 8006e82:	bf00      	nop
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr
 8006e8c:	20000780 	.word	0x20000780

08006e90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006e98:	f000 f852 	bl	8006f40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006e9c:	4b06      	ldr	r3, [pc, #24]	; (8006eb8 <prvIdleTask+0x28>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d9f9      	bls.n	8006e98 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006ea4:	4b05      	ldr	r3, [pc, #20]	; (8006ebc <prvIdleTask+0x2c>)
 8006ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eaa:	601a      	str	r2, [r3, #0]
 8006eac:	f3bf 8f4f 	dsb	sy
 8006eb0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006eb4:	e7f0      	b.n	8006e98 <prvIdleTask+0x8>
 8006eb6:	bf00      	nop
 8006eb8:	20000670 	.word	0x20000670
 8006ebc:	e000ed04 	.word	0xe000ed04

08006ec0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	607b      	str	r3, [r7, #4]
 8006eca:	e00c      	b.n	8006ee6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	4613      	mov	r3, r2
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	4413      	add	r3, r2
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	4a12      	ldr	r2, [pc, #72]	; (8006f20 <prvInitialiseTaskLists+0x60>)
 8006ed8:	4413      	add	r3, r2
 8006eda:	4618      	mov	r0, r3
 8006edc:	f7fe fa6d 	bl	80053ba <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	607b      	str	r3, [r7, #4]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2b06      	cmp	r3, #6
 8006eea:	d9ef      	bls.n	8006ecc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006eec:	480d      	ldr	r0, [pc, #52]	; (8006f24 <prvInitialiseTaskLists+0x64>)
 8006eee:	f7fe fa64 	bl	80053ba <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006ef2:	480d      	ldr	r0, [pc, #52]	; (8006f28 <prvInitialiseTaskLists+0x68>)
 8006ef4:	f7fe fa61 	bl	80053ba <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006ef8:	480c      	ldr	r0, [pc, #48]	; (8006f2c <prvInitialiseTaskLists+0x6c>)
 8006efa:	f7fe fa5e 	bl	80053ba <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006efe:	480c      	ldr	r0, [pc, #48]	; (8006f30 <prvInitialiseTaskLists+0x70>)
 8006f00:	f7fe fa5b 	bl	80053ba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006f04:	480b      	ldr	r0, [pc, #44]	; (8006f34 <prvInitialiseTaskLists+0x74>)
 8006f06:	f7fe fa58 	bl	80053ba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006f0a:	4b0b      	ldr	r3, [pc, #44]	; (8006f38 <prvInitialiseTaskLists+0x78>)
 8006f0c:	4a05      	ldr	r2, [pc, #20]	; (8006f24 <prvInitialiseTaskLists+0x64>)
 8006f0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006f10:	4b0a      	ldr	r3, [pc, #40]	; (8006f3c <prvInitialiseTaskLists+0x7c>)
 8006f12:	4a05      	ldr	r2, [pc, #20]	; (8006f28 <prvInitialiseTaskLists+0x68>)
 8006f14:	601a      	str	r2, [r3, #0]
}
 8006f16:	bf00      	nop
 8006f18:	3708      	adds	r7, #8
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	20000670 	.word	0x20000670
 8006f24:	200006fc 	.word	0x200006fc
 8006f28:	20000710 	.word	0x20000710
 8006f2c:	2000072c 	.word	0x2000072c
 8006f30:	20000740 	.word	0x20000740
 8006f34:	20000758 	.word	0x20000758
 8006f38:	20000724 	.word	0x20000724
 8006f3c:	20000728 	.word	0x20000728

08006f40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f46:	e019      	b.n	8006f7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006f48:	f000 fbd0 	bl	80076ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f4c:	4b0f      	ldr	r3, [pc, #60]	; (8006f8c <prvCheckTasksWaitingTermination+0x4c>)
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	3304      	adds	r3, #4
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f7fe fab8 	bl	80054ce <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006f5e:	4b0c      	ldr	r3, [pc, #48]	; (8006f90 <prvCheckTasksWaitingTermination+0x50>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	3b01      	subs	r3, #1
 8006f64:	4a0a      	ldr	r2, [pc, #40]	; (8006f90 <prvCheckTasksWaitingTermination+0x50>)
 8006f66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006f68:	4b0a      	ldr	r3, [pc, #40]	; (8006f94 <prvCheckTasksWaitingTermination+0x54>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	3b01      	subs	r3, #1
 8006f6e:	4a09      	ldr	r2, [pc, #36]	; (8006f94 <prvCheckTasksWaitingTermination+0x54>)
 8006f70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006f72:	f000 fbe9 	bl	8007748 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 f80e 	bl	8006f98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f7c:	4b05      	ldr	r3, [pc, #20]	; (8006f94 <prvCheckTasksWaitingTermination+0x54>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d1e1      	bne.n	8006f48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006f84:	bf00      	nop
 8006f86:	3708      	adds	r7, #8
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	20000740 	.word	0x20000740
 8006f90:	2000076c 	.word	0x2000076c
 8006f94:	20000754 	.word	0x20000754

08006f98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d108      	bne.n	8006fbc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f000 fd78 	bl	8007aa4 <vPortFree>
				vPortFree( pxTCB );
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 fd75 	bl	8007aa4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006fba:	e017      	b.n	8006fec <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d103      	bne.n	8006fce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 fd6c 	bl	8007aa4 <vPortFree>
	}
 8006fcc:	e00e      	b.n	8006fec <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006fd4:	2b02      	cmp	r3, #2
 8006fd6:	d009      	beq.n	8006fec <prvDeleteTCB+0x54>
 8006fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fdc:	f383 8811 	msr	BASEPRI, r3
 8006fe0:	f3bf 8f6f 	isb	sy
 8006fe4:	f3bf 8f4f 	dsb	sy
 8006fe8:	60fb      	str	r3, [r7, #12]
 8006fea:	e7fe      	b.n	8006fea <prvDeleteTCB+0x52>
	}
 8006fec:	bf00      	nop
 8006fee:	3710      	adds	r7, #16
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ffa:	4b0c      	ldr	r3, [pc, #48]	; (800702c <prvResetNextTaskUnblockTime+0x38>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d104      	bne.n	800700e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007004:	4b0a      	ldr	r3, [pc, #40]	; (8007030 <prvResetNextTaskUnblockTime+0x3c>)
 8007006:	f04f 32ff 	mov.w	r2, #4294967295
 800700a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800700c:	e008      	b.n	8007020 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800700e:	4b07      	ldr	r3, [pc, #28]	; (800702c <prvResetNextTaskUnblockTime+0x38>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	4a04      	ldr	r2, [pc, #16]	; (8007030 <prvResetNextTaskUnblockTime+0x3c>)
 800701e:	6013      	str	r3, [r2, #0]
}
 8007020:	bf00      	nop
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr
 800702c:	20000724 	.word	0x20000724
 8007030:	2000078c 	.word	0x2000078c

08007034 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800703a:	4b0b      	ldr	r3, [pc, #44]	; (8007068 <xTaskGetSchedulerState+0x34>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d102      	bne.n	8007048 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007042:	2301      	movs	r3, #1
 8007044:	607b      	str	r3, [r7, #4]
 8007046:	e008      	b.n	800705a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007048:	4b08      	ldr	r3, [pc, #32]	; (800706c <xTaskGetSchedulerState+0x38>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d102      	bne.n	8007056 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007050:	2302      	movs	r3, #2
 8007052:	607b      	str	r3, [r7, #4]
 8007054:	e001      	b.n	800705a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007056:	2300      	movs	r3, #0
 8007058:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800705a:	687b      	ldr	r3, [r7, #4]
	}
 800705c:	4618      	mov	r0, r3
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr
 8007068:	20000778 	.word	0x20000778
 800706c:	20000794 	.word	0x20000794

08007070 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800707c:	2300      	movs	r3, #0
 800707e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d069      	beq.n	800715a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800708a:	4b36      	ldr	r3, [pc, #216]	; (8007164 <xTaskPriorityInherit+0xf4>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007090:	429a      	cmp	r2, r3
 8007092:	d259      	bcs.n	8007148 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	699b      	ldr	r3, [r3, #24]
 8007098:	2b00      	cmp	r3, #0
 800709a:	db06      	blt.n	80070aa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800709c:	4b31      	ldr	r3, [pc, #196]	; (8007164 <xTaskPriorityInherit+0xf4>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a2:	f1c3 0207 	rsb	r2, r3, #7
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	6959      	ldr	r1, [r3, #20]
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070b2:	4613      	mov	r3, r2
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	4413      	add	r3, r2
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	4a2b      	ldr	r2, [pc, #172]	; (8007168 <xTaskPriorityInherit+0xf8>)
 80070bc:	4413      	add	r3, r2
 80070be:	4299      	cmp	r1, r3
 80070c0:	d13a      	bne.n	8007138 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	3304      	adds	r3, #4
 80070c6:	4618      	mov	r0, r3
 80070c8:	f7fe fa01 	bl	80054ce <uxListRemove>
 80070cc:	4603      	mov	r3, r0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d115      	bne.n	80070fe <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070d6:	4924      	ldr	r1, [pc, #144]	; (8007168 <xTaskPriorityInherit+0xf8>)
 80070d8:	4613      	mov	r3, r2
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	4413      	add	r3, r2
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	440b      	add	r3, r1
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d10a      	bne.n	80070fe <xTaskPriorityInherit+0x8e>
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ec:	2201      	movs	r2, #1
 80070ee:	fa02 f303 	lsl.w	r3, r2, r3
 80070f2:	43da      	mvns	r2, r3
 80070f4:	4b1d      	ldr	r3, [pc, #116]	; (800716c <xTaskPriorityInherit+0xfc>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4013      	ands	r3, r2
 80070fa:	4a1c      	ldr	r2, [pc, #112]	; (800716c <xTaskPriorityInherit+0xfc>)
 80070fc:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80070fe:	4b19      	ldr	r3, [pc, #100]	; (8007164 <xTaskPriorityInherit+0xf4>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710c:	2201      	movs	r2, #1
 800710e:	409a      	lsls	r2, r3
 8007110:	4b16      	ldr	r3, [pc, #88]	; (800716c <xTaskPriorityInherit+0xfc>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4313      	orrs	r3, r2
 8007116:	4a15      	ldr	r2, [pc, #84]	; (800716c <xTaskPriorityInherit+0xfc>)
 8007118:	6013      	str	r3, [r2, #0]
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800711e:	4613      	mov	r3, r2
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	4413      	add	r3, r2
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	4a10      	ldr	r2, [pc, #64]	; (8007168 <xTaskPriorityInherit+0xf8>)
 8007128:	441a      	add	r2, r3
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	3304      	adds	r3, #4
 800712e:	4619      	mov	r1, r3
 8007130:	4610      	mov	r0, r2
 8007132:	f7fe f96f 	bl	8005414 <vListInsertEnd>
 8007136:	e004      	b.n	8007142 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007138:	4b0a      	ldr	r3, [pc, #40]	; (8007164 <xTaskPriorityInherit+0xf4>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007142:	2301      	movs	r3, #1
 8007144:	60fb      	str	r3, [r7, #12]
 8007146:	e008      	b.n	800715a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800714c:	4b05      	ldr	r3, [pc, #20]	; (8007164 <xTaskPriorityInherit+0xf4>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007152:	429a      	cmp	r2, r3
 8007154:	d201      	bcs.n	800715a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007156:	2301      	movs	r3, #1
 8007158:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800715a:	68fb      	ldr	r3, [r7, #12]
	}
 800715c:	4618      	mov	r0, r3
 800715e:	3710      	adds	r7, #16
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}
 8007164:	2000066c 	.word	0x2000066c
 8007168:	20000670 	.word	0x20000670
 800716c:	20000774 	.word	0x20000774

08007170 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007170:	b580      	push	{r7, lr}
 8007172:	b086      	sub	sp, #24
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800717c:	2300      	movs	r3, #0
 800717e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d06c      	beq.n	8007260 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007186:	4b39      	ldr	r3, [pc, #228]	; (800726c <xTaskPriorityDisinherit+0xfc>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	693a      	ldr	r2, [r7, #16]
 800718c:	429a      	cmp	r2, r3
 800718e:	d009      	beq.n	80071a4 <xTaskPriorityDisinherit+0x34>
 8007190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007194:	f383 8811 	msr	BASEPRI, r3
 8007198:	f3bf 8f6f 	isb	sy
 800719c:	f3bf 8f4f 	dsb	sy
 80071a0:	60fb      	str	r3, [r7, #12]
 80071a2:	e7fe      	b.n	80071a2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d109      	bne.n	80071c0 <xTaskPriorityDisinherit+0x50>
 80071ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b0:	f383 8811 	msr	BASEPRI, r3
 80071b4:	f3bf 8f6f 	isb	sy
 80071b8:	f3bf 8f4f 	dsb	sy
 80071bc:	60bb      	str	r3, [r7, #8]
 80071be:	e7fe      	b.n	80071be <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071c4:	1e5a      	subs	r2, r3, #1
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d044      	beq.n	8007260 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d140      	bne.n	8007260 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	3304      	adds	r3, #4
 80071e2:	4618      	mov	r0, r3
 80071e4:	f7fe f973 	bl	80054ce <uxListRemove>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d115      	bne.n	800721a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071f2:	491f      	ldr	r1, [pc, #124]	; (8007270 <xTaskPriorityDisinherit+0x100>)
 80071f4:	4613      	mov	r3, r2
 80071f6:	009b      	lsls	r3, r3, #2
 80071f8:	4413      	add	r3, r2
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	440b      	add	r3, r1
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d10a      	bne.n	800721a <xTaskPriorityDisinherit+0xaa>
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007208:	2201      	movs	r2, #1
 800720a:	fa02 f303 	lsl.w	r3, r2, r3
 800720e:	43da      	mvns	r2, r3
 8007210:	4b18      	ldr	r3, [pc, #96]	; (8007274 <xTaskPriorityDisinherit+0x104>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4013      	ands	r3, r2
 8007216:	4a17      	ldr	r2, [pc, #92]	; (8007274 <xTaskPriorityDisinherit+0x104>)
 8007218:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007226:	f1c3 0207 	rsb	r2, r3, #7
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007232:	2201      	movs	r2, #1
 8007234:	409a      	lsls	r2, r3
 8007236:	4b0f      	ldr	r3, [pc, #60]	; (8007274 <xTaskPriorityDisinherit+0x104>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4313      	orrs	r3, r2
 800723c:	4a0d      	ldr	r2, [pc, #52]	; (8007274 <xTaskPriorityDisinherit+0x104>)
 800723e:	6013      	str	r3, [r2, #0]
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007244:	4613      	mov	r3, r2
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	4413      	add	r3, r2
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	4a08      	ldr	r2, [pc, #32]	; (8007270 <xTaskPriorityDisinherit+0x100>)
 800724e:	441a      	add	r2, r3
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	3304      	adds	r3, #4
 8007254:	4619      	mov	r1, r3
 8007256:	4610      	mov	r0, r2
 8007258:	f7fe f8dc 	bl	8005414 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800725c:	2301      	movs	r3, #1
 800725e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007260:	697b      	ldr	r3, [r7, #20]
	}
 8007262:	4618      	mov	r0, r3
 8007264:	3718      	adds	r7, #24
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	2000066c 	.word	0x2000066c
 8007270:	20000670 	.word	0x20000670
 8007274:	20000774 	.word	0x20000774

08007278 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007278:	b580      	push	{r7, lr}
 800727a:	b088      	sub	sp, #32
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007286:	2301      	movs	r3, #1
 8007288:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2b00      	cmp	r3, #0
 800728e:	f000 8081 	beq.w	8007394 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007292:	69bb      	ldr	r3, [r7, #24]
 8007294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007296:	2b00      	cmp	r3, #0
 8007298:	d109      	bne.n	80072ae <vTaskPriorityDisinheritAfterTimeout+0x36>
 800729a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800729e:	f383 8811 	msr	BASEPRI, r3
 80072a2:	f3bf 8f6f 	isb	sy
 80072a6:	f3bf 8f4f 	dsb	sy
 80072aa:	60fb      	str	r3, [r7, #12]
 80072ac:	e7fe      	b.n	80072ac <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072b2:	683a      	ldr	r2, [r7, #0]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d902      	bls.n	80072be <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	61fb      	str	r3, [r7, #28]
 80072bc:	e002      	b.n	80072c4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80072be:	69bb      	ldr	r3, [r7, #24]
 80072c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072c2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80072c4:	69bb      	ldr	r3, [r7, #24]
 80072c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c8:	69fa      	ldr	r2, [r7, #28]
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d062      	beq.n	8007394 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80072ce:	69bb      	ldr	r3, [r7, #24]
 80072d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072d2:	697a      	ldr	r2, [r7, #20]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d15d      	bne.n	8007394 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80072d8:	4b30      	ldr	r3, [pc, #192]	; (800739c <vTaskPriorityDisinheritAfterTimeout+0x124>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	69ba      	ldr	r2, [r7, #24]
 80072de:	429a      	cmp	r2, r3
 80072e0:	d109      	bne.n	80072f6 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 80072e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e6:	f383 8811 	msr	BASEPRI, r3
 80072ea:	f3bf 8f6f 	isb	sy
 80072ee:	f3bf 8f4f 	dsb	sy
 80072f2:	60bb      	str	r3, [r7, #8]
 80072f4:	e7fe      	b.n	80072f4 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80072f6:	69bb      	ldr	r3, [r7, #24]
 80072f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072fa:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	69fa      	ldr	r2, [r7, #28]
 8007300:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	699b      	ldr	r3, [r3, #24]
 8007306:	2b00      	cmp	r3, #0
 8007308:	db04      	blt.n	8007314 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	f1c3 0207 	rsb	r2, r3, #7
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007314:	69bb      	ldr	r3, [r7, #24]
 8007316:	6959      	ldr	r1, [r3, #20]
 8007318:	693a      	ldr	r2, [r7, #16]
 800731a:	4613      	mov	r3, r2
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	4413      	add	r3, r2
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	4a1f      	ldr	r2, [pc, #124]	; (80073a0 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8007324:	4413      	add	r3, r2
 8007326:	4299      	cmp	r1, r3
 8007328:	d134      	bne.n	8007394 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800732a:	69bb      	ldr	r3, [r7, #24]
 800732c:	3304      	adds	r3, #4
 800732e:	4618      	mov	r0, r3
 8007330:	f7fe f8cd 	bl	80054ce <uxListRemove>
 8007334:	4603      	mov	r3, r0
 8007336:	2b00      	cmp	r3, #0
 8007338:	d115      	bne.n	8007366 <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800733e:	4918      	ldr	r1, [pc, #96]	; (80073a0 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8007340:	4613      	mov	r3, r2
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	4413      	add	r3, r2
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	440b      	add	r3, r1
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d10a      	bne.n	8007366 <vTaskPriorityDisinheritAfterTimeout+0xee>
 8007350:	69bb      	ldr	r3, [r7, #24]
 8007352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007354:	2201      	movs	r2, #1
 8007356:	fa02 f303 	lsl.w	r3, r2, r3
 800735a:	43da      	mvns	r2, r3
 800735c:	4b11      	ldr	r3, [pc, #68]	; (80073a4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4013      	ands	r3, r2
 8007362:	4a10      	ldr	r2, [pc, #64]	; (80073a4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8007364:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007366:	69bb      	ldr	r3, [r7, #24]
 8007368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800736a:	2201      	movs	r2, #1
 800736c:	409a      	lsls	r2, r3
 800736e:	4b0d      	ldr	r3, [pc, #52]	; (80073a4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4313      	orrs	r3, r2
 8007374:	4a0b      	ldr	r2, [pc, #44]	; (80073a4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8007376:	6013      	str	r3, [r2, #0]
 8007378:	69bb      	ldr	r3, [r7, #24]
 800737a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800737c:	4613      	mov	r3, r2
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	4413      	add	r3, r2
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	4a06      	ldr	r2, [pc, #24]	; (80073a0 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8007386:	441a      	add	r2, r3
 8007388:	69bb      	ldr	r3, [r7, #24]
 800738a:	3304      	adds	r3, #4
 800738c:	4619      	mov	r1, r3
 800738e:	4610      	mov	r0, r2
 8007390:	f7fe f840 	bl	8005414 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007394:	bf00      	nop
 8007396:	3720      	adds	r7, #32
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}
 800739c:	2000066c 	.word	0x2000066c
 80073a0:	20000670 	.word	0x20000670
 80073a4:	20000774 	.word	0x20000774

080073a8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80073a8:	b480      	push	{r7}
 80073aa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80073ac:	4b07      	ldr	r3, [pc, #28]	; (80073cc <pvTaskIncrementMutexHeldCount+0x24>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d004      	beq.n	80073be <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80073b4:	4b05      	ldr	r3, [pc, #20]	; (80073cc <pvTaskIncrementMutexHeldCount+0x24>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80073ba:	3201      	adds	r2, #1
 80073bc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80073be:	4b03      	ldr	r3, [pc, #12]	; (80073cc <pvTaskIncrementMutexHeldCount+0x24>)
 80073c0:	681b      	ldr	r3, [r3, #0]
	}
 80073c2:	4618      	mov	r0, r3
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr
 80073cc:	2000066c 	.word	0x2000066c

080073d0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80073da:	4b29      	ldr	r3, [pc, #164]	; (8007480 <prvAddCurrentTaskToDelayedList+0xb0>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073e0:	4b28      	ldr	r3, [pc, #160]	; (8007484 <prvAddCurrentTaskToDelayedList+0xb4>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	3304      	adds	r3, #4
 80073e6:	4618      	mov	r0, r3
 80073e8:	f7fe f871 	bl	80054ce <uxListRemove>
 80073ec:	4603      	mov	r3, r0
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d10b      	bne.n	800740a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80073f2:	4b24      	ldr	r3, [pc, #144]	; (8007484 <prvAddCurrentTaskToDelayedList+0xb4>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f8:	2201      	movs	r2, #1
 80073fa:	fa02 f303 	lsl.w	r3, r2, r3
 80073fe:	43da      	mvns	r2, r3
 8007400:	4b21      	ldr	r3, [pc, #132]	; (8007488 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4013      	ands	r3, r2
 8007406:	4a20      	ldr	r2, [pc, #128]	; (8007488 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007408:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007410:	d10a      	bne.n	8007428 <prvAddCurrentTaskToDelayedList+0x58>
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d007      	beq.n	8007428 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007418:	4b1a      	ldr	r3, [pc, #104]	; (8007484 <prvAddCurrentTaskToDelayedList+0xb4>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	3304      	adds	r3, #4
 800741e:	4619      	mov	r1, r3
 8007420:	481a      	ldr	r0, [pc, #104]	; (800748c <prvAddCurrentTaskToDelayedList+0xbc>)
 8007422:	f7fd fff7 	bl	8005414 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007426:	e026      	b.n	8007476 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4413      	add	r3, r2
 800742e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007430:	4b14      	ldr	r3, [pc, #80]	; (8007484 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	68ba      	ldr	r2, [r7, #8]
 8007436:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007438:	68ba      	ldr	r2, [r7, #8]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	429a      	cmp	r2, r3
 800743e:	d209      	bcs.n	8007454 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007440:	4b13      	ldr	r3, [pc, #76]	; (8007490 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	4b0f      	ldr	r3, [pc, #60]	; (8007484 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	3304      	adds	r3, #4
 800744a:	4619      	mov	r1, r3
 800744c:	4610      	mov	r0, r2
 800744e:	f7fe f805 	bl	800545c <vListInsert>
}
 8007452:	e010      	b.n	8007476 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007454:	4b0f      	ldr	r3, [pc, #60]	; (8007494 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	4b0a      	ldr	r3, [pc, #40]	; (8007484 <prvAddCurrentTaskToDelayedList+0xb4>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	3304      	adds	r3, #4
 800745e:	4619      	mov	r1, r3
 8007460:	4610      	mov	r0, r2
 8007462:	f7fd fffb 	bl	800545c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007466:	4b0c      	ldr	r3, [pc, #48]	; (8007498 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	68ba      	ldr	r2, [r7, #8]
 800746c:	429a      	cmp	r2, r3
 800746e:	d202      	bcs.n	8007476 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007470:	4a09      	ldr	r2, [pc, #36]	; (8007498 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	6013      	str	r3, [r2, #0]
}
 8007476:	bf00      	nop
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	20000770 	.word	0x20000770
 8007484:	2000066c 	.word	0x2000066c
 8007488:	20000774 	.word	0x20000774
 800748c:	20000758 	.word	0x20000758
 8007490:	20000728 	.word	0x20000728
 8007494:	20000724 	.word	0x20000724
 8007498:	2000078c 	.word	0x2000078c

0800749c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800749c:	b480      	push	{r7}
 800749e:	b085      	sub	sp, #20
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	3b04      	subs	r3, #4
 80074ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80074b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	3b04      	subs	r3, #4
 80074ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	f023 0201 	bic.w	r2, r3, #1
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	3b04      	subs	r3, #4
 80074ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80074cc:	4a0c      	ldr	r2, [pc, #48]	; (8007500 <pxPortInitialiseStack+0x64>)
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	3b14      	subs	r3, #20
 80074d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	3b04      	subs	r3, #4
 80074e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f06f 0202 	mvn.w	r2, #2
 80074ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	3b20      	subs	r3, #32
 80074f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80074f2:	68fb      	ldr	r3, [r7, #12]
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3714      	adds	r7, #20
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr
 8007500:	08007505 	.word	0x08007505

08007504 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007504:	b480      	push	{r7}
 8007506:	b085      	sub	sp, #20
 8007508:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800750a:	2300      	movs	r3, #0
 800750c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800750e:	4b11      	ldr	r3, [pc, #68]	; (8007554 <prvTaskExitError+0x50>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007516:	d009      	beq.n	800752c <prvTaskExitError+0x28>
 8007518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800751c:	f383 8811 	msr	BASEPRI, r3
 8007520:	f3bf 8f6f 	isb	sy
 8007524:	f3bf 8f4f 	dsb	sy
 8007528:	60fb      	str	r3, [r7, #12]
 800752a:	e7fe      	b.n	800752a <prvTaskExitError+0x26>
 800752c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007530:	f383 8811 	msr	BASEPRI, r3
 8007534:	f3bf 8f6f 	isb	sy
 8007538:	f3bf 8f4f 	dsb	sy
 800753c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800753e:	bf00      	nop
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d0fc      	beq.n	8007540 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007546:	bf00      	nop
 8007548:	3714      	adds	r7, #20
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr
 8007552:	bf00      	nop
 8007554:	2000000c 	.word	0x2000000c
	...

08007560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007560:	4b07      	ldr	r3, [pc, #28]	; (8007580 <pxCurrentTCBConst2>)
 8007562:	6819      	ldr	r1, [r3, #0]
 8007564:	6808      	ldr	r0, [r1, #0]
 8007566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800756a:	f380 8809 	msr	PSP, r0
 800756e:	f3bf 8f6f 	isb	sy
 8007572:	f04f 0000 	mov.w	r0, #0
 8007576:	f380 8811 	msr	BASEPRI, r0
 800757a:	4770      	bx	lr
 800757c:	f3af 8000 	nop.w

08007580 <pxCurrentTCBConst2>:
 8007580:	2000066c 	.word	0x2000066c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007584:	bf00      	nop
 8007586:	bf00      	nop

08007588 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007588:	4808      	ldr	r0, [pc, #32]	; (80075ac <prvPortStartFirstTask+0x24>)
 800758a:	6800      	ldr	r0, [r0, #0]
 800758c:	6800      	ldr	r0, [r0, #0]
 800758e:	f380 8808 	msr	MSP, r0
 8007592:	f04f 0000 	mov.w	r0, #0
 8007596:	f380 8814 	msr	CONTROL, r0
 800759a:	b662      	cpsie	i
 800759c:	b661      	cpsie	f
 800759e:	f3bf 8f4f 	dsb	sy
 80075a2:	f3bf 8f6f 	isb	sy
 80075a6:	df00      	svc	0
 80075a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80075aa:	bf00      	nop
 80075ac:	e000ed08 	.word	0xe000ed08

080075b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b086      	sub	sp, #24
 80075b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80075b6:	4b44      	ldr	r3, [pc, #272]	; (80076c8 <xPortStartScheduler+0x118>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a44      	ldr	r2, [pc, #272]	; (80076cc <xPortStartScheduler+0x11c>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d109      	bne.n	80075d4 <xPortStartScheduler+0x24>
 80075c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c4:	f383 8811 	msr	BASEPRI, r3
 80075c8:	f3bf 8f6f 	isb	sy
 80075cc:	f3bf 8f4f 	dsb	sy
 80075d0:	613b      	str	r3, [r7, #16]
 80075d2:	e7fe      	b.n	80075d2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80075d4:	4b3c      	ldr	r3, [pc, #240]	; (80076c8 <xPortStartScheduler+0x118>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a3d      	ldr	r2, [pc, #244]	; (80076d0 <xPortStartScheduler+0x120>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d109      	bne.n	80075f2 <xPortStartScheduler+0x42>
 80075de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e2:	f383 8811 	msr	BASEPRI, r3
 80075e6:	f3bf 8f6f 	isb	sy
 80075ea:	f3bf 8f4f 	dsb	sy
 80075ee:	60fb      	str	r3, [r7, #12]
 80075f0:	e7fe      	b.n	80075f0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80075f2:	4b38      	ldr	r3, [pc, #224]	; (80076d4 <xPortStartScheduler+0x124>)
 80075f4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	22ff      	movs	r2, #255	; 0xff
 8007602:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	b2db      	uxtb	r3, r3
 800760a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800760c:	78fb      	ldrb	r3, [r7, #3]
 800760e:	b2db      	uxtb	r3, r3
 8007610:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007614:	b2da      	uxtb	r2, r3
 8007616:	4b30      	ldr	r3, [pc, #192]	; (80076d8 <xPortStartScheduler+0x128>)
 8007618:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800761a:	4b30      	ldr	r3, [pc, #192]	; (80076dc <xPortStartScheduler+0x12c>)
 800761c:	2207      	movs	r2, #7
 800761e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007620:	e009      	b.n	8007636 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007622:	4b2e      	ldr	r3, [pc, #184]	; (80076dc <xPortStartScheduler+0x12c>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	3b01      	subs	r3, #1
 8007628:	4a2c      	ldr	r2, [pc, #176]	; (80076dc <xPortStartScheduler+0x12c>)
 800762a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800762c:	78fb      	ldrb	r3, [r7, #3]
 800762e:	b2db      	uxtb	r3, r3
 8007630:	005b      	lsls	r3, r3, #1
 8007632:	b2db      	uxtb	r3, r3
 8007634:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007636:	78fb      	ldrb	r3, [r7, #3]
 8007638:	b2db      	uxtb	r3, r3
 800763a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800763e:	2b80      	cmp	r3, #128	; 0x80
 8007640:	d0ef      	beq.n	8007622 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007642:	4b26      	ldr	r3, [pc, #152]	; (80076dc <xPortStartScheduler+0x12c>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f1c3 0307 	rsb	r3, r3, #7
 800764a:	2b04      	cmp	r3, #4
 800764c:	d009      	beq.n	8007662 <xPortStartScheduler+0xb2>
 800764e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007652:	f383 8811 	msr	BASEPRI, r3
 8007656:	f3bf 8f6f 	isb	sy
 800765a:	f3bf 8f4f 	dsb	sy
 800765e:	60bb      	str	r3, [r7, #8]
 8007660:	e7fe      	b.n	8007660 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007662:	4b1e      	ldr	r3, [pc, #120]	; (80076dc <xPortStartScheduler+0x12c>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	021b      	lsls	r3, r3, #8
 8007668:	4a1c      	ldr	r2, [pc, #112]	; (80076dc <xPortStartScheduler+0x12c>)
 800766a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800766c:	4b1b      	ldr	r3, [pc, #108]	; (80076dc <xPortStartScheduler+0x12c>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007674:	4a19      	ldr	r2, [pc, #100]	; (80076dc <xPortStartScheduler+0x12c>)
 8007676:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	b2da      	uxtb	r2, r3
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007680:	4b17      	ldr	r3, [pc, #92]	; (80076e0 <xPortStartScheduler+0x130>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a16      	ldr	r2, [pc, #88]	; (80076e0 <xPortStartScheduler+0x130>)
 8007686:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800768a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800768c:	4b14      	ldr	r3, [pc, #80]	; (80076e0 <xPortStartScheduler+0x130>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a13      	ldr	r2, [pc, #76]	; (80076e0 <xPortStartScheduler+0x130>)
 8007692:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007696:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007698:	f000 f8d6 	bl	8007848 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800769c:	4b11      	ldr	r3, [pc, #68]	; (80076e4 <xPortStartScheduler+0x134>)
 800769e:	2200      	movs	r2, #0
 80076a0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80076a2:	f000 f8f5 	bl	8007890 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80076a6:	4b10      	ldr	r3, [pc, #64]	; (80076e8 <xPortStartScheduler+0x138>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a0f      	ldr	r2, [pc, #60]	; (80076e8 <xPortStartScheduler+0x138>)
 80076ac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80076b0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80076b2:	f7ff ff69 	bl	8007588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80076b6:	f7ff fa89 	bl	8006bcc <vTaskSwitchContext>
	prvTaskExitError();
 80076ba:	f7ff ff23 	bl	8007504 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80076be:	2300      	movs	r3, #0
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3718      	adds	r7, #24
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	e000ed00 	.word	0xe000ed00
 80076cc:	410fc271 	.word	0x410fc271
 80076d0:	410fc270 	.word	0x410fc270
 80076d4:	e000e400 	.word	0xe000e400
 80076d8:	20000798 	.word	0x20000798
 80076dc:	2000079c 	.word	0x2000079c
 80076e0:	e000ed20 	.word	0xe000ed20
 80076e4:	2000000c 	.word	0x2000000c
 80076e8:	e000ef34 	.word	0xe000ef34

080076ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f6:	f383 8811 	msr	BASEPRI, r3
 80076fa:	f3bf 8f6f 	isb	sy
 80076fe:	f3bf 8f4f 	dsb	sy
 8007702:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007704:	4b0e      	ldr	r3, [pc, #56]	; (8007740 <vPortEnterCritical+0x54>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	3301      	adds	r3, #1
 800770a:	4a0d      	ldr	r2, [pc, #52]	; (8007740 <vPortEnterCritical+0x54>)
 800770c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800770e:	4b0c      	ldr	r3, [pc, #48]	; (8007740 <vPortEnterCritical+0x54>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	2b01      	cmp	r3, #1
 8007714:	d10e      	bne.n	8007734 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007716:	4b0b      	ldr	r3, [pc, #44]	; (8007744 <vPortEnterCritical+0x58>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	b2db      	uxtb	r3, r3
 800771c:	2b00      	cmp	r3, #0
 800771e:	d009      	beq.n	8007734 <vPortEnterCritical+0x48>
 8007720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007724:	f383 8811 	msr	BASEPRI, r3
 8007728:	f3bf 8f6f 	isb	sy
 800772c:	f3bf 8f4f 	dsb	sy
 8007730:	603b      	str	r3, [r7, #0]
 8007732:	e7fe      	b.n	8007732 <vPortEnterCritical+0x46>
	}
}
 8007734:	bf00      	nop
 8007736:	370c      	adds	r7, #12
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr
 8007740:	2000000c 	.word	0x2000000c
 8007744:	e000ed04 	.word	0xe000ed04

08007748 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800774e:	4b11      	ldr	r3, [pc, #68]	; (8007794 <vPortExitCritical+0x4c>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d109      	bne.n	800776a <vPortExitCritical+0x22>
 8007756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800775a:	f383 8811 	msr	BASEPRI, r3
 800775e:	f3bf 8f6f 	isb	sy
 8007762:	f3bf 8f4f 	dsb	sy
 8007766:	607b      	str	r3, [r7, #4]
 8007768:	e7fe      	b.n	8007768 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800776a:	4b0a      	ldr	r3, [pc, #40]	; (8007794 <vPortExitCritical+0x4c>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	3b01      	subs	r3, #1
 8007770:	4a08      	ldr	r2, [pc, #32]	; (8007794 <vPortExitCritical+0x4c>)
 8007772:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007774:	4b07      	ldr	r3, [pc, #28]	; (8007794 <vPortExitCritical+0x4c>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d104      	bne.n	8007786 <vPortExitCritical+0x3e>
 800777c:	2300      	movs	r3, #0
 800777e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007786:	bf00      	nop
 8007788:	370c      	adds	r7, #12
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr
 8007792:	bf00      	nop
 8007794:	2000000c 	.word	0x2000000c
	...

080077a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80077a0:	f3ef 8009 	mrs	r0, PSP
 80077a4:	f3bf 8f6f 	isb	sy
 80077a8:	4b15      	ldr	r3, [pc, #84]	; (8007800 <pxCurrentTCBConst>)
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	f01e 0f10 	tst.w	lr, #16
 80077b0:	bf08      	it	eq
 80077b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80077b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ba:	6010      	str	r0, [r2, #0]
 80077bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80077c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80077c4:	f380 8811 	msr	BASEPRI, r0
 80077c8:	f3bf 8f4f 	dsb	sy
 80077cc:	f3bf 8f6f 	isb	sy
 80077d0:	f7ff f9fc 	bl	8006bcc <vTaskSwitchContext>
 80077d4:	f04f 0000 	mov.w	r0, #0
 80077d8:	f380 8811 	msr	BASEPRI, r0
 80077dc:	bc09      	pop	{r0, r3}
 80077de:	6819      	ldr	r1, [r3, #0]
 80077e0:	6808      	ldr	r0, [r1, #0]
 80077e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077e6:	f01e 0f10 	tst.w	lr, #16
 80077ea:	bf08      	it	eq
 80077ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80077f0:	f380 8809 	msr	PSP, r0
 80077f4:	f3bf 8f6f 	isb	sy
 80077f8:	4770      	bx	lr
 80077fa:	bf00      	nop
 80077fc:	f3af 8000 	nop.w

08007800 <pxCurrentTCBConst>:
 8007800:	2000066c 	.word	0x2000066c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007804:	bf00      	nop
 8007806:	bf00      	nop

08007808 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
	__asm volatile
 800780e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007812:	f383 8811 	msr	BASEPRI, r3
 8007816:	f3bf 8f6f 	isb	sy
 800781a:	f3bf 8f4f 	dsb	sy
 800781e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007820:	f7ff f91c 	bl	8006a5c <xTaskIncrementTick>
 8007824:	4603      	mov	r3, r0
 8007826:	2b00      	cmp	r3, #0
 8007828:	d003      	beq.n	8007832 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800782a:	4b06      	ldr	r3, [pc, #24]	; (8007844 <SysTick_Handler+0x3c>)
 800782c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007830:	601a      	str	r2, [r3, #0]
 8007832:	2300      	movs	r3, #0
 8007834:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800783c:	bf00      	nop
 800783e:	3708      	adds	r7, #8
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}
 8007844:	e000ed04 	.word	0xe000ed04

08007848 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007848:	b480      	push	{r7}
 800784a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800784c:	4b0b      	ldr	r3, [pc, #44]	; (800787c <vPortSetupTimerInterrupt+0x34>)
 800784e:	2200      	movs	r2, #0
 8007850:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007852:	4b0b      	ldr	r3, [pc, #44]	; (8007880 <vPortSetupTimerInterrupt+0x38>)
 8007854:	2200      	movs	r2, #0
 8007856:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007858:	4b0a      	ldr	r3, [pc, #40]	; (8007884 <vPortSetupTimerInterrupt+0x3c>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a0a      	ldr	r2, [pc, #40]	; (8007888 <vPortSetupTimerInterrupt+0x40>)
 800785e:	fba2 2303 	umull	r2, r3, r2, r3
 8007862:	099b      	lsrs	r3, r3, #6
 8007864:	4a09      	ldr	r2, [pc, #36]	; (800788c <vPortSetupTimerInterrupt+0x44>)
 8007866:	3b01      	subs	r3, #1
 8007868:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800786a:	4b04      	ldr	r3, [pc, #16]	; (800787c <vPortSetupTimerInterrupt+0x34>)
 800786c:	2207      	movs	r2, #7
 800786e:	601a      	str	r2, [r3, #0]
}
 8007870:	bf00      	nop
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	e000e010 	.word	0xe000e010
 8007880:	e000e018 	.word	0xe000e018
 8007884:	20000000 	.word	0x20000000
 8007888:	10624dd3 	.word	0x10624dd3
 800788c:	e000e014 	.word	0xe000e014

08007890 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007890:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80078a0 <vPortEnableVFP+0x10>
 8007894:	6801      	ldr	r1, [r0, #0]
 8007896:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800789a:	6001      	str	r1, [r0, #0]
 800789c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800789e:	bf00      	nop
 80078a0:	e000ed88 	.word	0xe000ed88

080078a4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80078a4:	b480      	push	{r7}
 80078a6:	b085      	sub	sp, #20
 80078a8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80078aa:	f3ef 8305 	mrs	r3, IPSR
 80078ae:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2b0f      	cmp	r3, #15
 80078b4:	d913      	bls.n	80078de <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80078b6:	4a16      	ldr	r2, [pc, #88]	; (8007910 <vPortValidateInterruptPriority+0x6c>)
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	4413      	add	r3, r2
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80078c0:	4b14      	ldr	r3, [pc, #80]	; (8007914 <vPortValidateInterruptPriority+0x70>)
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	7afa      	ldrb	r2, [r7, #11]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d209      	bcs.n	80078de <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80078ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ce:	f383 8811 	msr	BASEPRI, r3
 80078d2:	f3bf 8f6f 	isb	sy
 80078d6:	f3bf 8f4f 	dsb	sy
 80078da:	607b      	str	r3, [r7, #4]
 80078dc:	e7fe      	b.n	80078dc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80078de:	4b0e      	ldr	r3, [pc, #56]	; (8007918 <vPortValidateInterruptPriority+0x74>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80078e6:	4b0d      	ldr	r3, [pc, #52]	; (800791c <vPortValidateInterruptPriority+0x78>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d909      	bls.n	8007902 <vPortValidateInterruptPriority+0x5e>
 80078ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f2:	f383 8811 	msr	BASEPRI, r3
 80078f6:	f3bf 8f6f 	isb	sy
 80078fa:	f3bf 8f4f 	dsb	sy
 80078fe:	603b      	str	r3, [r7, #0]
 8007900:	e7fe      	b.n	8007900 <vPortValidateInterruptPriority+0x5c>
	}
 8007902:	bf00      	nop
 8007904:	3714      	adds	r7, #20
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr
 800790e:	bf00      	nop
 8007910:	e000e3f0 	.word	0xe000e3f0
 8007914:	20000798 	.word	0x20000798
 8007918:	e000ed0c 	.word	0xe000ed0c
 800791c:	2000079c 	.word	0x2000079c

08007920 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b08a      	sub	sp, #40	; 0x28
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007928:	2300      	movs	r3, #0
 800792a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800792c:	f7fe ffca 	bl	80068c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007930:	4b57      	ldr	r3, [pc, #348]	; (8007a90 <pvPortMalloc+0x170>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d101      	bne.n	800793c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007938:	f000 f90c 	bl	8007b54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800793c:	4b55      	ldr	r3, [pc, #340]	; (8007a94 <pvPortMalloc+0x174>)
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	4013      	ands	r3, r2
 8007944:	2b00      	cmp	r3, #0
 8007946:	f040 808c 	bne.w	8007a62 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d01c      	beq.n	800798a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007950:	2208      	movs	r2, #8
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4413      	add	r3, r2
 8007956:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f003 0307 	and.w	r3, r3, #7
 800795e:	2b00      	cmp	r3, #0
 8007960:	d013      	beq.n	800798a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f023 0307 	bic.w	r3, r3, #7
 8007968:	3308      	adds	r3, #8
 800796a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f003 0307 	and.w	r3, r3, #7
 8007972:	2b00      	cmp	r3, #0
 8007974:	d009      	beq.n	800798a <pvPortMalloc+0x6a>
 8007976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800797a:	f383 8811 	msr	BASEPRI, r3
 800797e:	f3bf 8f6f 	isb	sy
 8007982:	f3bf 8f4f 	dsb	sy
 8007986:	617b      	str	r3, [r7, #20]
 8007988:	e7fe      	b.n	8007988 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d068      	beq.n	8007a62 <pvPortMalloc+0x142>
 8007990:	4b41      	ldr	r3, [pc, #260]	; (8007a98 <pvPortMalloc+0x178>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	429a      	cmp	r2, r3
 8007998:	d863      	bhi.n	8007a62 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800799a:	4b40      	ldr	r3, [pc, #256]	; (8007a9c <pvPortMalloc+0x17c>)
 800799c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800799e:	4b3f      	ldr	r3, [pc, #252]	; (8007a9c <pvPortMalloc+0x17c>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80079a4:	e004      	b.n	80079b0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80079a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80079aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80079b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d903      	bls.n	80079c2 <pvPortMalloc+0xa2>
 80079ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d1f1      	bne.n	80079a6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80079c2:	4b33      	ldr	r3, [pc, #204]	; (8007a90 <pvPortMalloc+0x170>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d04a      	beq.n	8007a62 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80079cc:	6a3b      	ldr	r3, [r7, #32]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	2208      	movs	r2, #8
 80079d2:	4413      	add	r3, r2
 80079d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80079d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	6a3b      	ldr	r3, [r7, #32]
 80079dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80079de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e0:	685a      	ldr	r2, [r3, #4]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	1ad2      	subs	r2, r2, r3
 80079e6:	2308      	movs	r3, #8
 80079e8:	005b      	lsls	r3, r3, #1
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d91e      	bls.n	8007a2c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80079ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	4413      	add	r3, r2
 80079f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80079f6:	69bb      	ldr	r3, [r7, #24]
 80079f8:	f003 0307 	and.w	r3, r3, #7
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d009      	beq.n	8007a14 <pvPortMalloc+0xf4>
 8007a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a04:	f383 8811 	msr	BASEPRI, r3
 8007a08:	f3bf 8f6f 	isb	sy
 8007a0c:	f3bf 8f4f 	dsb	sy
 8007a10:	613b      	str	r3, [r7, #16]
 8007a12:	e7fe      	b.n	8007a12 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a16:	685a      	ldr	r2, [r3, #4]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	1ad2      	subs	r2, r2, r3
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007a26:	69b8      	ldr	r0, [r7, #24]
 8007a28:	f000 f8f6 	bl	8007c18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007a2c:	4b1a      	ldr	r3, [pc, #104]	; (8007a98 <pvPortMalloc+0x178>)
 8007a2e:	681a      	ldr	r2, [r3, #0]
 8007a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	1ad3      	subs	r3, r2, r3
 8007a36:	4a18      	ldr	r2, [pc, #96]	; (8007a98 <pvPortMalloc+0x178>)
 8007a38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007a3a:	4b17      	ldr	r3, [pc, #92]	; (8007a98 <pvPortMalloc+0x178>)
 8007a3c:	681a      	ldr	r2, [r3, #0]
 8007a3e:	4b18      	ldr	r3, [pc, #96]	; (8007aa0 <pvPortMalloc+0x180>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d203      	bcs.n	8007a4e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007a46:	4b14      	ldr	r3, [pc, #80]	; (8007a98 <pvPortMalloc+0x178>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a15      	ldr	r2, [pc, #84]	; (8007aa0 <pvPortMalloc+0x180>)
 8007a4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a50:	685a      	ldr	r2, [r3, #4]
 8007a52:	4b10      	ldr	r3, [pc, #64]	; (8007a94 <pvPortMalloc+0x174>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	431a      	orrs	r2, r3
 8007a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5e:	2200      	movs	r2, #0
 8007a60:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007a62:	f7fe ff3d 	bl	80068e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a66:	69fb      	ldr	r3, [r7, #28]
 8007a68:	f003 0307 	and.w	r3, r3, #7
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d009      	beq.n	8007a84 <pvPortMalloc+0x164>
 8007a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a74:	f383 8811 	msr	BASEPRI, r3
 8007a78:	f3bf 8f6f 	isb	sy
 8007a7c:	f3bf 8f4f 	dsb	sy
 8007a80:	60fb      	str	r3, [r7, #12]
 8007a82:	e7fe      	b.n	8007a82 <pvPortMalloc+0x162>
	return pvReturn;
 8007a84:	69fb      	ldr	r3, [r7, #28]
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3728      	adds	r7, #40	; 0x28
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	200087a8 	.word	0x200087a8
 8007a94:	200087b4 	.word	0x200087b4
 8007a98:	200087ac 	.word	0x200087ac
 8007a9c:	200087a0 	.word	0x200087a0
 8007aa0:	200087b0 	.word	0x200087b0

08007aa4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b086      	sub	sp, #24
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d046      	beq.n	8007b44 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007ab6:	2308      	movs	r3, #8
 8007ab8:	425b      	negs	r3, r3
 8007aba:	697a      	ldr	r2, [r7, #20]
 8007abc:	4413      	add	r3, r2
 8007abe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	685a      	ldr	r2, [r3, #4]
 8007ac8:	4b20      	ldr	r3, [pc, #128]	; (8007b4c <vPortFree+0xa8>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4013      	ands	r3, r2
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d109      	bne.n	8007ae6 <vPortFree+0x42>
 8007ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad6:	f383 8811 	msr	BASEPRI, r3
 8007ada:	f3bf 8f6f 	isb	sy
 8007ade:	f3bf 8f4f 	dsb	sy
 8007ae2:	60fb      	str	r3, [r7, #12]
 8007ae4:	e7fe      	b.n	8007ae4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d009      	beq.n	8007b02 <vPortFree+0x5e>
 8007aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af2:	f383 8811 	msr	BASEPRI, r3
 8007af6:	f3bf 8f6f 	isb	sy
 8007afa:	f3bf 8f4f 	dsb	sy
 8007afe:	60bb      	str	r3, [r7, #8]
 8007b00:	e7fe      	b.n	8007b00 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	685a      	ldr	r2, [r3, #4]
 8007b06:	4b11      	ldr	r3, [pc, #68]	; (8007b4c <vPortFree+0xa8>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4013      	ands	r3, r2
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d019      	beq.n	8007b44 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d115      	bne.n	8007b44 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	685a      	ldr	r2, [r3, #4]
 8007b1c:	4b0b      	ldr	r3, [pc, #44]	; (8007b4c <vPortFree+0xa8>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	43db      	mvns	r3, r3
 8007b22:	401a      	ands	r2, r3
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007b28:	f7fe fecc 	bl	80068c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	685a      	ldr	r2, [r3, #4]
 8007b30:	4b07      	ldr	r3, [pc, #28]	; (8007b50 <vPortFree+0xac>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4413      	add	r3, r2
 8007b36:	4a06      	ldr	r2, [pc, #24]	; (8007b50 <vPortFree+0xac>)
 8007b38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007b3a:	6938      	ldr	r0, [r7, #16]
 8007b3c:	f000 f86c 	bl	8007c18 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007b40:	f7fe fece 	bl	80068e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007b44:	bf00      	nop
 8007b46:	3718      	adds	r7, #24
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}
 8007b4c:	200087b4 	.word	0x200087b4
 8007b50:	200087ac 	.word	0x200087ac

08007b54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007b54:	b480      	push	{r7}
 8007b56:	b085      	sub	sp, #20
 8007b58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007b5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007b60:	4b27      	ldr	r3, [pc, #156]	; (8007c00 <prvHeapInit+0xac>)
 8007b62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f003 0307 	and.w	r3, r3, #7
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00c      	beq.n	8007b88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	3307      	adds	r3, #7
 8007b72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f023 0307 	bic.w	r3, r3, #7
 8007b7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b7c:	68ba      	ldr	r2, [r7, #8]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	1ad3      	subs	r3, r2, r3
 8007b82:	4a1f      	ldr	r2, [pc, #124]	; (8007c00 <prvHeapInit+0xac>)
 8007b84:	4413      	add	r3, r2
 8007b86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b8c:	4a1d      	ldr	r2, [pc, #116]	; (8007c04 <prvHeapInit+0xb0>)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007b92:	4b1c      	ldr	r3, [pc, #112]	; (8007c04 <prvHeapInit+0xb0>)
 8007b94:	2200      	movs	r2, #0
 8007b96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	68ba      	ldr	r2, [r7, #8]
 8007b9c:	4413      	add	r3, r2
 8007b9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007ba0:	2208      	movs	r2, #8
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	1a9b      	subs	r3, r3, r2
 8007ba6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f023 0307 	bic.w	r3, r3, #7
 8007bae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	4a15      	ldr	r2, [pc, #84]	; (8007c08 <prvHeapInit+0xb4>)
 8007bb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007bb6:	4b14      	ldr	r3, [pc, #80]	; (8007c08 <prvHeapInit+0xb4>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007bbe:	4b12      	ldr	r3, [pc, #72]	; (8007c08 <prvHeapInit+0xb4>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	68fa      	ldr	r2, [r7, #12]
 8007bce:	1ad2      	subs	r2, r2, r3
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007bd4:	4b0c      	ldr	r3, [pc, #48]	; (8007c08 <prvHeapInit+0xb4>)
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	4a0a      	ldr	r2, [pc, #40]	; (8007c0c <prvHeapInit+0xb8>)
 8007be2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	4a09      	ldr	r2, [pc, #36]	; (8007c10 <prvHeapInit+0xbc>)
 8007bea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007bec:	4b09      	ldr	r3, [pc, #36]	; (8007c14 <prvHeapInit+0xc0>)
 8007bee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007bf2:	601a      	str	r2, [r3, #0]
}
 8007bf4:	bf00      	nop
 8007bf6:	3714      	adds	r7, #20
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr
 8007c00:	200007a0 	.word	0x200007a0
 8007c04:	200087a0 	.word	0x200087a0
 8007c08:	200087a8 	.word	0x200087a8
 8007c0c:	200087b0 	.word	0x200087b0
 8007c10:	200087ac 	.word	0x200087ac
 8007c14:	200087b4 	.word	0x200087b4

08007c18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b085      	sub	sp, #20
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007c20:	4b28      	ldr	r3, [pc, #160]	; (8007cc4 <prvInsertBlockIntoFreeList+0xac>)
 8007c22:	60fb      	str	r3, [r7, #12]
 8007c24:	e002      	b.n	8007c2c <prvInsertBlockIntoFreeList+0x14>
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	60fb      	str	r3, [r7, #12]
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d8f7      	bhi.n	8007c26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	68ba      	ldr	r2, [r7, #8]
 8007c40:	4413      	add	r3, r2
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d108      	bne.n	8007c5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	685a      	ldr	r2, [r3, #4]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	441a      	add	r2, r3
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	68ba      	ldr	r2, [r7, #8]
 8007c64:	441a      	add	r2, r3
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d118      	bne.n	8007ca0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	4b15      	ldr	r3, [pc, #84]	; (8007cc8 <prvInsertBlockIntoFreeList+0xb0>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d00d      	beq.n	8007c96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	685a      	ldr	r2, [r3, #4]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	441a      	add	r2, r3
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	601a      	str	r2, [r3, #0]
 8007c94:	e008      	b.n	8007ca8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007c96:	4b0c      	ldr	r3, [pc, #48]	; (8007cc8 <prvInsertBlockIntoFreeList+0xb0>)
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	601a      	str	r2, [r3, #0]
 8007c9e:	e003      	b.n	8007ca8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007ca8:	68fa      	ldr	r2, [r7, #12]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d002      	beq.n	8007cb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007cb6:	bf00      	nop
 8007cb8:	3714      	adds	r7, #20
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr
 8007cc2:	bf00      	nop
 8007cc4:	200087a0 	.word	0x200087a0
 8007cc8:	200087a8 	.word	0x200087a8

08007ccc <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	330c      	adds	r3, #12
 8007cdc:	461a      	mov	r2, r3
 8007cde:	6839      	ldr	r1, [r7, #0]
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f002 fa99 	bl	800a218 <tcpip_send_msg_wait_sem>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8007cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d103      	bne.n	8007cfa <netconn_apimsg+0x2e>
    return apimsg->err;
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8007cf8:	e001      	b.n	8007cfe <netconn_apimsg+0x32>
  }
  return err;
 8007cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3710      	adds	r7, #16
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
	...

08007d08 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b08c      	sub	sp, #48	; 0x30
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	4603      	mov	r3, r0
 8007d10:	603a      	str	r2, [r7, #0]
 8007d12:	71fb      	strb	r3, [r7, #7]
 8007d14:	460b      	mov	r3, r1
 8007d16:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8007d18:	79fb      	ldrb	r3, [r7, #7]
 8007d1a:	6839      	ldr	r1, [r7, #0]
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f001 f91f 	bl	8008f60 <netconn_alloc>
 8007d22:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8007d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d054      	beq.n	8007dd4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8007d2a:	79bb      	ldrb	r3, [r7, #6]
 8007d2c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8007d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d30:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8007d32:	f107 0308 	add.w	r3, r7, #8
 8007d36:	4619      	mov	r1, r3
 8007d38:	4829      	ldr	r0, [pc, #164]	; (8007de0 <netconn_new_with_proto_and_callback+0xd8>)
 8007d3a:	f7ff ffc7 	bl	8007ccc <netconn_apimsg>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8007d44:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d043      	beq.n	8007dd4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8007d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d005      	beq.n	8007d60 <netconn_new_with_proto_and_callback+0x58>
 8007d54:	4b23      	ldr	r3, [pc, #140]	; (8007de4 <netconn_new_with_proto_and_callback+0xdc>)
 8007d56:	22a3      	movs	r2, #163	; 0xa3
 8007d58:	4923      	ldr	r1, [pc, #140]	; (8007de8 <netconn_new_with_proto_and_callback+0xe0>)
 8007d5a:	4824      	ldr	r0, [pc, #144]	; (8007dec <netconn_new_with_proto_and_callback+0xe4>)
 8007d5c:	f010 fa18 	bl	8018190 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8007d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d62:	3310      	adds	r3, #16
 8007d64:	4618      	mov	r0, r3
 8007d66:	f010 f85a 	bl	8017e1e <sys_mbox_valid>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d105      	bne.n	8007d7c <netconn_new_with_proto_and_callback+0x74>
 8007d70:	4b1c      	ldr	r3, [pc, #112]	; (8007de4 <netconn_new_with_proto_and_callback+0xdc>)
 8007d72:	22a4      	movs	r2, #164	; 0xa4
 8007d74:	491e      	ldr	r1, [pc, #120]	; (8007df0 <netconn_new_with_proto_and_callback+0xe8>)
 8007d76:	481d      	ldr	r0, [pc, #116]	; (8007dec <netconn_new_with_proto_and_callback+0xe4>)
 8007d78:	f010 fa0a 	bl	8018190 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8007d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d7e:	3314      	adds	r3, #20
 8007d80:	4618      	mov	r0, r3
 8007d82:	f010 f84c 	bl	8017e1e <sys_mbox_valid>
 8007d86:	4603      	mov	r3, r0
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d005      	beq.n	8007d98 <netconn_new_with_proto_and_callback+0x90>
 8007d8c:	4b15      	ldr	r3, [pc, #84]	; (8007de4 <netconn_new_with_proto_and_callback+0xdc>)
 8007d8e:	22a6      	movs	r2, #166	; 0xa6
 8007d90:	4918      	ldr	r1, [pc, #96]	; (8007df4 <netconn_new_with_proto_and_callback+0xec>)
 8007d92:	4816      	ldr	r0, [pc, #88]	; (8007dec <netconn_new_with_proto_and_callback+0xe4>)
 8007d94:	f010 f9fc 	bl	8018190 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8007d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d9a:	330c      	adds	r3, #12
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f010 f8cf 	bl	8017f40 <sys_sem_valid>
 8007da2:	4603      	mov	r3, r0
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d105      	bne.n	8007db4 <netconn_new_with_proto_and_callback+0xac>
 8007da8:	4b0e      	ldr	r3, [pc, #56]	; (8007de4 <netconn_new_with_proto_and_callback+0xdc>)
 8007daa:	22a9      	movs	r2, #169	; 0xa9
 8007dac:	4912      	ldr	r1, [pc, #72]	; (8007df8 <netconn_new_with_proto_and_callback+0xf0>)
 8007dae:	480f      	ldr	r0, [pc, #60]	; (8007dec <netconn_new_with_proto_and_callback+0xe4>)
 8007db0:	f010 f9ee 	bl	8018190 <iprintf>
      sys_sem_free(&conn->op_completed);
 8007db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db6:	330c      	adds	r3, #12
 8007db8:	4618      	mov	r0, r3
 8007dba:	f010 f8b4 	bl	8017f26 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8007dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc0:	3310      	adds	r3, #16
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f00f ffa4 	bl	8017d10 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8007dc8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007dca:	2007      	movs	r0, #7
 8007dcc:	f003 fe82 	bl	800bad4 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	e000      	b.n	8007dd6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8007dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3730      	adds	r7, #48	; 0x30
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	08008f35 	.word	0x08008f35
 8007de4:	080195a8 	.word	0x080195a8
 8007de8:	080195dc 	.word	0x080195dc
 8007dec:	08019600 	.word	0x08019600
 8007df0:	08019628 	.word	0x08019628
 8007df4:	08019640 	.word	0x08019640
 8007df8:	08019664 	.word	0x08019664

08007dfc <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b08c      	sub	sp, #48	; 0x30
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d101      	bne.n	8007e0e <netconn_prepare_delete+0x12>
    return ERR_OK;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	e014      	b.n	8007e38 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8007e12:	2329      	movs	r3, #41	; 0x29
 8007e14:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8007e16:	f107 030c 	add.w	r3, r7, #12
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	4808      	ldr	r0, [pc, #32]	; (8007e40 <netconn_prepare_delete+0x44>)
 8007e1e:	f7ff ff55 	bl	8007ccc <netconn_apimsg>
 8007e22:	4603      	mov	r3, r0
 8007e24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8007e28:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d002      	beq.n	8007e36 <netconn_prepare_delete+0x3a>
    return err;
 8007e30:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007e34:	e000      	b.n	8007e38 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8007e36:	2300      	movs	r3, #0
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3730      	adds	r7, #48	; 0x30
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}
 8007e40:	08009499 	.word	0x08009499

08007e44 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d101      	bne.n	8007e56 <netconn_delete+0x12>
    return ERR_OK;
 8007e52:	2300      	movs	r3, #0
 8007e54:	e00d      	b.n	8007e72 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f7ff ffd0 	bl	8007dfc <netconn_prepare_delete>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8007e60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d102      	bne.n	8007e6e <netconn_delete+0x2a>
    netconn_free(conn);
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f001 f8e7 	bl	800903c <netconn_free>
  }
  return err;
 8007e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3710      	adds	r7, #16
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
	...

08007e7c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b08e      	sub	sp, #56	; 0x38
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	4613      	mov	r3, r2
 8007e88:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d109      	bne.n	8007ea4 <netconn_bind+0x28>
 8007e90:	4b11      	ldr	r3, [pc, #68]	; (8007ed8 <netconn_bind+0x5c>)
 8007e92:	f44f 729c 	mov.w	r2, #312	; 0x138
 8007e96:	4911      	ldr	r1, [pc, #68]	; (8007edc <netconn_bind+0x60>)
 8007e98:	4811      	ldr	r0, [pc, #68]	; (8007ee0 <netconn_bind+0x64>)
 8007e9a:	f010 f979 	bl	8018190 <iprintf>
 8007e9e:	f06f 030f 	mvn.w	r3, #15
 8007ea2:	e015      	b.n	8007ed0 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d101      	bne.n	8007eae <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8007eaa:	4b0e      	ldr	r3, [pc, #56]	; (8007ee4 <netconn_bind+0x68>)
 8007eac:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8007eb6:	88fb      	ldrh	r3, [r7, #6]
 8007eb8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8007eba:	f107 0314 	add.w	r3, r7, #20
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	4809      	ldr	r0, [pc, #36]	; (8007ee8 <netconn_bind+0x6c>)
 8007ec2:	f7ff ff03 	bl	8007ccc <netconn_apimsg>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8007ecc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3738      	adds	r7, #56	; 0x38
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	080195a8 	.word	0x080195a8
 8007edc:	080196e0 	.word	0x080196e0
 8007ee0:	08019600 	.word	0x08019600
 8007ee4:	08028574 	.word	0x08028574
 8007ee8:	08009661 	.word	0x08009661

08007eec <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b08c      	sub	sp, #48	; 0x30
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d109      	bne.n	8007f12 <netconn_listen_with_backlog+0x26>
 8007efe:	4b0d      	ldr	r3, [pc, #52]	; (8007f34 <netconn_listen_with_backlog+0x48>)
 8007f00:	f240 12bb 	movw	r2, #443	; 0x1bb
 8007f04:	490c      	ldr	r1, [pc, #48]	; (8007f38 <netconn_listen_with_backlog+0x4c>)
 8007f06:	480d      	ldr	r0, [pc, #52]	; (8007f3c <netconn_listen_with_backlog+0x50>)
 8007f08:	f010 f942 	bl	8018190 <iprintf>
 8007f0c:	f06f 030f 	mvn.w	r3, #15
 8007f10:	e00c      	b.n	8007f2c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8007f16:	f107 030c 	add.w	r3, r7, #12
 8007f1a:	4619      	mov	r1, r3
 8007f1c:	4808      	ldr	r0, [pc, #32]	; (8007f40 <netconn_listen_with_backlog+0x54>)
 8007f1e:	f7ff fed5 	bl	8007ccc <netconn_apimsg>
 8007f22:	4603      	mov	r3, r0
 8007f24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8007f28:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3730      	adds	r7, #48	; 0x30
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}
 8007f34:	080195a8 	.word	0x080195a8
 8007f38:	08019760 	.word	0x08019760
 8007f3c:	08019600 	.word	0x08019600
 8007f40:	080096d9 	.word	0x080096d9

08007f44 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b086      	sub	sp, #24
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d109      	bne.n	8007f68 <netconn_accept+0x24>
 8007f54:	4b3d      	ldr	r3, [pc, #244]	; (800804c <netconn_accept+0x108>)
 8007f56:	f240 12e1 	movw	r2, #481	; 0x1e1
 8007f5a:	493d      	ldr	r1, [pc, #244]	; (8008050 <netconn_accept+0x10c>)
 8007f5c:	483d      	ldr	r0, [pc, #244]	; (8008054 <netconn_accept+0x110>)
 8007f5e:	f010 f917 	bl	8018190 <iprintf>
 8007f62:	f06f 030f 	mvn.w	r3, #15
 8007f66:	e06c      	b.n	8008042 <netconn_accept+0xfe>
  *new_conn = NULL;
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d109      	bne.n	8007f88 <netconn_accept+0x44>
 8007f74:	4b35      	ldr	r3, [pc, #212]	; (800804c <netconn_accept+0x108>)
 8007f76:	f240 12e3 	movw	r2, #483	; 0x1e3
 8007f7a:	4937      	ldr	r1, [pc, #220]	; (8008058 <netconn_accept+0x114>)
 8007f7c:	4835      	ldr	r0, [pc, #212]	; (8008054 <netconn_accept+0x110>)
 8007f7e:	f010 f907 	bl	8018190 <iprintf>
 8007f82:	f06f 030f 	mvn.w	r3, #15
 8007f86:	e05c      	b.n	8008042 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 fb6c 	bl	8008666 <netconn_err>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8007f92:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d002      	beq.n	8007fa0 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 8007f9a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007f9e:	e050      	b.n	8008042 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	3314      	adds	r3, #20
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f00f ff3a 	bl	8017e1e <sys_mbox_valid>
 8007faa:	4603      	mov	r3, r0
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d005      	beq.n	8007fbc <netconn_accept+0x78>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	7f1b      	ldrb	r3, [r3, #28]
 8007fb4:	f003 0301 	and.w	r3, r3, #1
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d002      	beq.n	8007fc2 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 8007fbc:	f06f 030e 	mvn.w	r3, #14
 8007fc0:	e03f      	b.n	8008042 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	7f1b      	ldrb	r3, [r3, #28]
 8007fc6:	f003 0302 	and.w	r3, r3, #2
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00e      	beq.n	8007fec <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	3314      	adds	r3, #20
 8007fd2:	f107 020c 	add.w	r2, r7, #12
 8007fd6:	4611      	mov	r1, r2
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f00f ff04 	bl	8017de6 <sys_arch_mbox_tryfetch>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fe4:	d10a      	bne.n	8007ffc <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8007fe6:	f06f 0306 	mvn.w	r3, #6
 8007fea:	e02a      	b.n	8008042 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	3314      	adds	r3, #20
 8007ff0:	f107 010c 	add.w	r1, r7, #12
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f00f feb6 	bl	8017d68 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008000:	2b00      	cmp	r3, #0
 8008002:	d005      	beq.n	8008010 <netconn_accept+0xcc>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008008:	2200      	movs	r2, #0
 800800a:	2101      	movs	r1, #1
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f107 0213 	add.w	r2, r7, #19
 8008016:	4611      	mov	r1, r2
 8008018:	4618      	mov	r0, r3
 800801a:	f000 fb71 	bl	8008700 <lwip_netconn_is_err_msg>
 800801e:	4603      	mov	r3, r0
 8008020:	2b00      	cmp	r3, #0
 8008022:	d002      	beq.n	800802a <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8008024:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008028:	e00b      	b.n	8008042 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d102      	bne.n	8008036 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8008030:	f06f 030e 	mvn.w	r3, #14
 8008034:	e005      	b.n	8008042 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	697a      	ldr	r2, [r7, #20]
 800803e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8008040:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8008042:	4618      	mov	r0, r3
 8008044:	3718      	adds	r7, #24
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop
 800804c:	080195a8 	.word	0x080195a8
 8008050:	08019780 	.word	0x08019780
 8008054:	08019600 	.word	0x08019600
 8008058:	080197a0 	.word	0x080197a0

0800805c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b088      	sub	sp, #32
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	60b9      	str	r1, [r7, #8]
 8008066:	4613      	mov	r3, r2
 8008068:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800806a:	2300      	movs	r3, #0
 800806c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d109      	bne.n	8008088 <netconn_recv_data+0x2c>
 8008074:	4b58      	ldr	r3, [pc, #352]	; (80081d8 <netconn_recv_data+0x17c>)
 8008076:	f44f 7212 	mov.w	r2, #584	; 0x248
 800807a:	4958      	ldr	r1, [pc, #352]	; (80081dc <netconn_recv_data+0x180>)
 800807c:	4858      	ldr	r0, [pc, #352]	; (80081e0 <netconn_recv_data+0x184>)
 800807e:	f010 f887 	bl	8018190 <iprintf>
 8008082:	f06f 030f 	mvn.w	r3, #15
 8008086:	e0a2      	b.n	80081ce <netconn_recv_data+0x172>
  *new_buf = NULL;
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	2200      	movs	r2, #0
 800808c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d109      	bne.n	80080a8 <netconn_recv_data+0x4c>
 8008094:	4b50      	ldr	r3, [pc, #320]	; (80081d8 <netconn_recv_data+0x17c>)
 8008096:	f240 224a 	movw	r2, #586	; 0x24a
 800809a:	4952      	ldr	r1, [pc, #328]	; (80081e4 <netconn_recv_data+0x188>)
 800809c:	4850      	ldr	r0, [pc, #320]	; (80081e0 <netconn_recv_data+0x184>)
 800809e:	f010 f877 	bl	8018190 <iprintf>
 80080a2:	f06f 030f 	mvn.w	r3, #15
 80080a6:	e092      	b.n	80081ce <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	3310      	adds	r3, #16
 80080ac:	4618      	mov	r0, r3
 80080ae:	f00f feb6 	bl	8017e1e <sys_mbox_valid>
 80080b2:	4603      	mov	r3, r0
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d10e      	bne.n	80080d6 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	f000 fad4 	bl	8008666 <netconn_err>
 80080be:	4603      	mov	r3, r0
 80080c0:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 80080c2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d002      	beq.n	80080d0 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 80080ca:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80080ce:	e07e      	b.n	80081ce <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 80080d0:	f06f 030a 	mvn.w	r3, #10
 80080d4:	e07b      	b.n	80081ce <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	7f1b      	ldrb	r3, [r3, #28]
 80080da:	f003 0302 	and.w	r3, r3, #2
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d10f      	bne.n	8008102 <netconn_recv_data+0xa6>
 80080e2:	79fb      	ldrb	r3, [r7, #7]
 80080e4:	f003 0304 	and.w	r3, r3, #4
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d10a      	bne.n	8008102 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	7f1b      	ldrb	r3, [r3, #28]
 80080f0:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d104      	bne.n	8008102 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d023      	beq.n	800814a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	3310      	adds	r3, #16
 8008106:	f107 0218 	add.w	r2, r7, #24
 800810a:	4611      	mov	r1, r2
 800810c:	4618      	mov	r0, r3
 800810e:	f00f fe6a 	bl	8017de6 <sys_arch_mbox_tryfetch>
 8008112:	4603      	mov	r3, r0
 8008114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008118:	d11f      	bne.n	800815a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800811a:	68f8      	ldr	r0, [r7, #12]
 800811c:	f000 faa3 	bl	8008666 <netconn_err>
 8008120:	4603      	mov	r3, r0
 8008122:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8008124:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d002      	beq.n	8008132 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800812c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008130:	e04d      	b.n	80081ce <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	7f1b      	ldrb	r3, [r3, #28]
 8008136:	f003 0301 	and.w	r3, r3, #1
 800813a:	2b00      	cmp	r3, #0
 800813c:	d002      	beq.n	8008144 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800813e:	f06f 030a 	mvn.w	r3, #10
 8008142:	e044      	b.n	80081ce <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8008144:	f06f 0306 	mvn.w	r3, #6
 8008148:	e041      	b.n	80081ce <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	3310      	adds	r3, #16
 800814e:	f107 0118 	add.w	r1, r7, #24
 8008152:	2200      	movs	r2, #0
 8008154:	4618      	mov	r0, r3
 8008156:	f00f fe07 	bl	8017d68 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008162:	2b10      	cmp	r3, #16
 8008164:	d117      	bne.n	8008196 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8008166:	69bb      	ldr	r3, [r7, #24]
 8008168:	f107 0217 	add.w	r2, r7, #23
 800816c:	4611      	mov	r1, r2
 800816e:	4618      	mov	r0, r3
 8008170:	f000 fac6 	bl	8008700 <lwip_netconn_is_err_msg>
 8008174:	4603      	mov	r3, r0
 8008176:	2b00      	cmp	r3, #0
 8008178:	d009      	beq.n	800818e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800817a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800817e:	f113 0f0f 	cmn.w	r3, #15
 8008182:	d101      	bne.n	8008188 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8008184:	2300      	movs	r3, #0
 8008186:	e022      	b.n	80081ce <netconn_recv_data+0x172>
      }
      return err;
 8008188:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800818c:	e01f      	b.n	80081ce <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	891b      	ldrh	r3, [r3, #8]
 8008192:	83fb      	strh	r3, [r7, #30]
 8008194:	e00d      	b.n	80081b2 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8008196:	69bb      	ldr	r3, [r7, #24]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d106      	bne.n	80081aa <netconn_recv_data+0x14e>
 800819c:	4b0e      	ldr	r3, [pc, #56]	; (80081d8 <netconn_recv_data+0x17c>)
 800819e:	f240 2291 	movw	r2, #657	; 0x291
 80081a2:	4911      	ldr	r1, [pc, #68]	; (80081e8 <netconn_recv_data+0x18c>)
 80081a4:	480e      	ldr	r0, [pc, #56]	; (80081e0 <netconn_recv_data+0x184>)
 80081a6:	f00f fff3 	bl	8018190 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 80081aa:	69bb      	ldr	r3, [r7, #24]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	891b      	ldrh	r3, [r3, #8]
 80081b0:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d005      	beq.n	80081c6 <netconn_recv_data+0x16a>
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081be:	8bfa      	ldrh	r2, [r7, #30]
 80081c0:	2101      	movs	r1, #1
 80081c2:	68f8      	ldr	r0, [r7, #12]
 80081c4:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 80081c6:	69ba      	ldr	r2, [r7, #24]
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80081cc:	2300      	movs	r3, #0
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3720      	adds	r7, #32
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
 80081d6:	bf00      	nop
 80081d8:	080195a8 	.word	0x080195a8
 80081dc:	080197c0 	.word	0x080197c0
 80081e0:	08019600 	.word	0x08019600
 80081e4:	080197e0 	.word	0x080197e0
 80081e8:	080197fc 	.word	0x080197fc

080081ec <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	60b9      	str	r1, [r7, #8]
 80081f6:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d005      	beq.n	800820a <netconn_tcp_recvd_msg+0x1e>
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008206:	2b10      	cmp	r3, #16
 8008208:	d009      	beq.n	800821e <netconn_tcp_recvd_msg+0x32>
 800820a:	4b0c      	ldr	r3, [pc, #48]	; (800823c <netconn_tcp_recvd_msg+0x50>)
 800820c:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8008210:	490b      	ldr	r1, [pc, #44]	; (8008240 <netconn_tcp_recvd_msg+0x54>)
 8008212:	480c      	ldr	r0, [pc, #48]	; (8008244 <netconn_tcp_recvd_msg+0x58>)
 8008214:	f00f ffbc 	bl	8018190 <iprintf>
 8008218:	f06f 030f 	mvn.w	r3, #15
 800821c:	e00a      	b.n	8008234 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	68fa      	ldr	r2, [r7, #12]
 8008222:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	68ba      	ldr	r2, [r7, #8]
 8008228:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800822a:	6879      	ldr	r1, [r7, #4]
 800822c:	4806      	ldr	r0, [pc, #24]	; (8008248 <netconn_tcp_recvd_msg+0x5c>)
 800822e:	f7ff fd4d 	bl	8007ccc <netconn_apimsg>
 8008232:	4603      	mov	r3, r0
}
 8008234:	4618      	mov	r0, r3
 8008236:	3710      	adds	r7, #16
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}
 800823c:	080195a8 	.word	0x080195a8
 8008240:	08019808 	.word	0x08019808
 8008244:	08019600 	.word	0x08019600
 8008248:	08009809 	.word	0x08009809

0800824c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b090      	sub	sp, #64	; 0x40
 8008250:	af00      	add	r7, sp, #0
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	4613      	mov	r3, r2
 8008258:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	3310      	adds	r3, #16
 800825e:	4618      	mov	r0, r3
 8008260:	f00f fddd 	bl	8017e1e <sys_mbox_valid>
 8008264:	4603      	mov	r3, r0
 8008266:	2b00      	cmp	r3, #0
 8008268:	d102      	bne.n	8008270 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800826a:	f06f 030a 	mvn.w	r3, #10
 800826e:	e06d      	b.n	800834c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	7f1b      	ldrb	r3, [r3, #28]
 8008274:	b25b      	sxtb	r3, r3
 8008276:	2b00      	cmp	r3, #0
 8008278:	da07      	bge.n	800828a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	7f1b      	ldrb	r3, [r3, #28]
 800827e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008282:	b2da      	uxtb	r2, r3
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8008288:	e039      	b.n	80082fe <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800828a:	79fb      	ldrb	r3, [r7, #7]
 800828c:	461a      	mov	r2, r3
 800828e:	68b9      	ldr	r1, [r7, #8]
 8008290:	68f8      	ldr	r0, [r7, #12]
 8008292:	f7ff fee3 	bl	800805c <netconn_recv_data>
 8008296:	4603      	mov	r3, r0
 8008298:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800829c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d002      	beq.n	80082aa <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 80082a4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80082a8:	e050      	b.n	800834c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 80082b0:	79fb      	ldrb	r3, [r7, #7]
 80082b2:	f003 0308 	and.w	r3, r3, #8
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d10e      	bne.n	80082d8 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 80082ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d002      	beq.n	80082c6 <netconn_recv_data_tcp+0x7a>
 80082c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c2:	891b      	ldrh	r3, [r3, #8]
 80082c4:	e000      	b.n	80082c8 <netconn_recv_data_tcp+0x7c>
 80082c6:	2301      	movs	r3, #1
 80082c8:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 80082ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80082cc:	f107 0214 	add.w	r2, r7, #20
 80082d0:	4619      	mov	r1, r3
 80082d2:	68f8      	ldr	r0, [r7, #12]
 80082d4:	f7ff ff8a 	bl	80081ec <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 80082d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d134      	bne.n	8008348 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 80082de:	79fb      	ldrb	r3, [r7, #7]
 80082e0:	f003 0310 	and.w	r3, r3, #16
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d009      	beq.n	80082fc <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	7f1b      	ldrb	r3, [r3, #28]
 80082ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80082f0:	b2da      	uxtb	r2, r3
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 80082f6:	f06f 0306 	mvn.w	r3, #6
 80082fa:	e027      	b.n	800834c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 80082fc:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008302:	2b00      	cmp	r3, #0
 8008304:	d005      	beq.n	8008312 <netconn_recv_data_tcp+0xc6>
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800830a:	2200      	movs	r2, #0
 800830c:	2101      	movs	r1, #1
 800830e:	68f8      	ldr	r0, [r7, #12]
 8008310:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d10f      	bne.n	800833a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800831a:	68f8      	ldr	r0, [r7, #12]
 800831c:	f000 f9a3 	bl	8008666 <netconn_err>
 8008320:	4603      	mov	r3, r0
 8008322:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8008326:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800832a:	2b00      	cmp	r3, #0
 800832c:	d002      	beq.n	8008334 <netconn_recv_data_tcp+0xe8>
          return err;
 800832e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008332:	e00b      	b.n	800834c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8008334:	f06f 030d 	mvn.w	r3, #13
 8008338:	e008      	b.n	800834c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800833a:	2101      	movs	r1, #1
 800833c:	68f8      	ldr	r0, [r7, #12]
 800833e:	f000 f955 	bl	80085ec <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8008342:	f06f 030e 	mvn.w	r3, #14
 8008346:	e001      	b.n	800834c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8008348:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800834c:	4618      	mov	r0, r3
 800834e:	3740      	adds	r7, #64	; 0x40
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b086      	sub	sp, #24
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800835e:	2300      	movs	r3, #0
 8008360:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d109      	bne.n	800837c <netconn_recv+0x28>
 8008368:	4b32      	ldr	r3, [pc, #200]	; (8008434 <netconn_recv+0xe0>)
 800836a:	f240 3263 	movw	r2, #867	; 0x363
 800836e:	4932      	ldr	r1, [pc, #200]	; (8008438 <netconn_recv+0xe4>)
 8008370:	4832      	ldr	r0, [pc, #200]	; (800843c <netconn_recv+0xe8>)
 8008372:	f00f ff0d 	bl	8018190 <iprintf>
 8008376:	f06f 030f 	mvn.w	r3, #15
 800837a:	e056      	b.n	800842a <netconn_recv+0xd6>
  *new_buf = NULL;
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	2200      	movs	r2, #0
 8008380:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d109      	bne.n	800839c <netconn_recv+0x48>
 8008388:	4b2a      	ldr	r3, [pc, #168]	; (8008434 <netconn_recv+0xe0>)
 800838a:	f240 3265 	movw	r2, #869	; 0x365
 800838e:	492c      	ldr	r1, [pc, #176]	; (8008440 <netconn_recv+0xec>)
 8008390:	482a      	ldr	r0, [pc, #168]	; (800843c <netconn_recv+0xe8>)
 8008392:	f00f fefd 	bl	8018190 <iprintf>
 8008396:	f06f 030f 	mvn.w	r3, #15
 800839a:	e046      	b.n	800842a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80083a4:	2b10      	cmp	r3, #16
 80083a6:	d13a      	bne.n	800841e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 80083a8:	2300      	movs	r3, #0
 80083aa:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80083ac:	2006      	movs	r0, #6
 80083ae:	f003 fb3f 	bl	800ba30 <memp_malloc>
 80083b2:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d102      	bne.n	80083c0 <netconn_recv+0x6c>
      return ERR_MEM;
 80083ba:	f04f 33ff 	mov.w	r3, #4294967295
 80083be:	e034      	b.n	800842a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 80083c0:	f107 030c 	add.w	r3, r7, #12
 80083c4:	2200      	movs	r2, #0
 80083c6:	4619      	mov	r1, r3
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f7ff ff3f 	bl	800824c <netconn_recv_data_tcp>
 80083ce:	4603      	mov	r3, r0
 80083d0:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80083d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d006      	beq.n	80083e8 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 80083da:	6979      	ldr	r1, [r7, #20]
 80083dc:	2006      	movs	r0, #6
 80083de:	f003 fb79 	bl	800bad4 <memp_free>
      return err;
 80083e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80083e6:	e020      	b.n	800842a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d106      	bne.n	80083fc <netconn_recv+0xa8>
 80083ee:	4b11      	ldr	r3, [pc, #68]	; (8008434 <netconn_recv+0xe0>)
 80083f0:	f240 3279 	movw	r2, #889	; 0x379
 80083f4:	4913      	ldr	r1, [pc, #76]	; (8008444 <netconn_recv+0xf0>)
 80083f6:	4811      	ldr	r0, [pc, #68]	; (800843c <netconn_recv+0xe8>)
 80083f8:	f00f feca 	bl	8018190 <iprintf>

    buf->p = p;
 80083fc:	68fa      	ldr	r2, [r7, #12]
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008402:	68fa      	ldr	r2, [r7, #12]
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	2200      	movs	r2, #0
 800840c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	2200      	movs	r2, #0
 8008412:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	697a      	ldr	r2, [r7, #20]
 8008418:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800841a:	2300      	movs	r3, #0
 800841c:	e005      	b.n	800842a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800841e:	2200      	movs	r2, #0
 8008420:	6839      	ldr	r1, [r7, #0]
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f7ff fe1a 	bl	800805c <netconn_recv_data>
 8008428:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800842a:	4618      	mov	r0, r3
 800842c:	3718      	adds	r7, #24
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	080195a8 	.word	0x080195a8
 8008438:	080197c0 	.word	0x080197c0
 800843c:	08019600 	.word	0x08019600
 8008440:	080197e0 	.word	0x080197e0
 8008444:	08019858 	.word	0x08019858

08008448 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b088      	sub	sp, #32
 800844c:	af02      	add	r7, sp, #8
 800844e:	60f8      	str	r0, [r7, #12]
 8008450:	60b9      	str	r1, [r7, #8]
 8008452:	607a      	str	r2, [r7, #4]
 8008454:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800845e:	78fa      	ldrb	r2, [r7, #3]
 8008460:	f107 0110 	add.w	r1, r7, #16
 8008464:	6a3b      	ldr	r3, [r7, #32]
 8008466:	9300      	str	r3, [sp, #0]
 8008468:	4613      	mov	r3, r2
 800846a:	2201      	movs	r2, #1
 800846c:	68f8      	ldr	r0, [r7, #12]
 800846e:	f000 f805 	bl	800847c <netconn_write_vectors_partly>
 8008472:	4603      	mov	r3, r0
}
 8008474:	4618      	mov	r0, r3
 8008476:	3718      	adds	r7, #24
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b092      	sub	sp, #72	; 0x48
 8008480:	af00      	add	r7, sp, #0
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	60b9      	str	r1, [r7, #8]
 8008486:	4611      	mov	r1, r2
 8008488:	461a      	mov	r2, r3
 800848a:	460b      	mov	r3, r1
 800848c:	80fb      	strh	r3, [r7, #6]
 800848e:	4613      	mov	r3, r2
 8008490:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d109      	bne.n	80084ac <netconn_write_vectors_partly+0x30>
 8008498:	4b4e      	ldr	r3, [pc, #312]	; (80085d4 <netconn_write_vectors_partly+0x158>)
 800849a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800849e:	494e      	ldr	r1, [pc, #312]	; (80085d8 <netconn_write_vectors_partly+0x15c>)
 80084a0:	484e      	ldr	r0, [pc, #312]	; (80085dc <netconn_write_vectors_partly+0x160>)
 80084a2:	f00f fe75 	bl	8018190 <iprintf>
 80084a6:	f06f 030f 	mvn.w	r3, #15
 80084aa:	e08e      	b.n	80085ca <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80084b4:	2b10      	cmp	r3, #16
 80084b6:	d009      	beq.n	80084cc <netconn_write_vectors_partly+0x50>
 80084b8:	4b46      	ldr	r3, [pc, #280]	; (80085d4 <netconn_write_vectors_partly+0x158>)
 80084ba:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80084be:	4948      	ldr	r1, [pc, #288]	; (80085e0 <netconn_write_vectors_partly+0x164>)
 80084c0:	4846      	ldr	r0, [pc, #280]	; (80085dc <netconn_write_vectors_partly+0x160>)
 80084c2:	f00f fe65 	bl	8018190 <iprintf>
 80084c6:	f06f 0305 	mvn.w	r3, #5
 80084ca:	e07e      	b.n	80085ca <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	7f1b      	ldrb	r3, [r3, #28]
 80084d0:	f003 0302 	and.w	r3, r3, #2
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d104      	bne.n	80084e2 <netconn_write_vectors_partly+0x66>
 80084d8:	797b      	ldrb	r3, [r7, #5]
 80084da:	f003 0304 	and.w	r3, r3, #4
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d001      	beq.n	80084e6 <netconn_write_vectors_partly+0x6a>
 80084e2:	2301      	movs	r3, #1
 80084e4:	e000      	b.n	80084e8 <netconn_write_vectors_partly+0x6c>
 80084e6:	2300      	movs	r3, #0
 80084e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 80084ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d005      	beq.n	8008500 <netconn_write_vectors_partly+0x84>
 80084f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d102      	bne.n	8008500 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 80084fa:	f06f 0305 	mvn.w	r3, #5
 80084fe:	e064      	b.n	80085ca <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8008500:	2300      	movs	r3, #0
 8008502:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8008504:	2300      	movs	r3, #0
 8008506:	643b      	str	r3, [r7, #64]	; 0x40
 8008508:	e015      	b.n	8008536 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800850a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800850c:	00db      	lsls	r3, r3, #3
 800850e:	68ba      	ldr	r2, [r7, #8]
 8008510:	4413      	add	r3, r2
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008516:	4413      	add	r3, r2
 8008518:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800851a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800851c:	00db      	lsls	r3, r3, #3
 800851e:	68ba      	ldr	r2, [r7, #8]
 8008520:	4413      	add	r3, r2
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008526:	429a      	cmp	r2, r3
 8008528:	d202      	bcs.n	8008530 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800852a:	f06f 0305 	mvn.w	r3, #5
 800852e:	e04c      	b.n	80085ca <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8008530:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008532:	3301      	adds	r3, #1
 8008534:	643b      	str	r3, [r7, #64]	; 0x40
 8008536:	88fb      	ldrh	r3, [r7, #6]
 8008538:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800853a:	429a      	cmp	r2, r3
 800853c:	dbe5      	blt.n	800850a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800853e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008540:	2b00      	cmp	r3, #0
 8008542:	d101      	bne.n	8008548 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8008544:	2300      	movs	r3, #0
 8008546:	e040      	b.n	80085ca <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8008548:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800854a:	2b00      	cmp	r3, #0
 800854c:	da0a      	bge.n	8008564 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800854e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008550:	2b00      	cmp	r3, #0
 8008552:	d102      	bne.n	800855a <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8008554:	f06f 0305 	mvn.w	r3, #5
 8008558:	e037      	b.n	80085ca <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800855a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800855e:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8008560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008562:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800856c:	88fb      	ldrh	r3, [r7, #6]
 800856e:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8008570:	2300      	movs	r3, #0
 8008572:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8008574:	797b      	ldrb	r3, [r7, #5]
 8008576:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800857a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800857c:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800857e:	2300      	movs	r3, #0
 8008580:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8008582:	f107 0314 	add.w	r3, r7, #20
 8008586:	4619      	mov	r1, r3
 8008588:	4816      	ldr	r0, [pc, #88]	; (80085e4 <netconn_write_vectors_partly+0x168>)
 800858a:	f7ff fb9f 	bl	8007ccc <netconn_apimsg>
 800858e:	4603      	mov	r3, r0
 8008590:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8008594:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8008598:	2b00      	cmp	r3, #0
 800859a:	d114      	bne.n	80085c6 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800859c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d002      	beq.n	80085a8 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 80085a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085a6:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 80085a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d10a      	bne.n	80085c6 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 80085b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d006      	beq.n	80085c6 <netconn_write_vectors_partly+0x14a>
 80085b8:	4b06      	ldr	r3, [pc, #24]	; (80085d4 <netconn_write_vectors_partly+0x158>)
 80085ba:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80085be:	490a      	ldr	r1, [pc, #40]	; (80085e8 <netconn_write_vectors_partly+0x16c>)
 80085c0:	4806      	ldr	r0, [pc, #24]	; (80085dc <netconn_write_vectors_partly+0x160>)
 80085c2:	f00f fde5 	bl	8018190 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 80085c6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3748      	adds	r7, #72	; 0x48
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
 80085d2:	bf00      	nop
 80085d4:	080195a8 	.word	0x080195a8
 80085d8:	08019880 	.word	0x08019880
 80085dc:	08019600 	.word	0x08019600
 80085e0:	0801989c 	.word	0x0801989c
 80085e4:	08009c0d 	.word	0x08009c0d
 80085e8:	080198c0 	.word	0x080198c0

080085ec <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b08c      	sub	sp, #48	; 0x30
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	460b      	mov	r3, r1
 80085f6:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d109      	bne.n	8008612 <netconn_close_shutdown+0x26>
 80085fe:	4b0f      	ldr	r3, [pc, #60]	; (800863c <netconn_close_shutdown+0x50>)
 8008600:	f240 4247 	movw	r2, #1095	; 0x447
 8008604:	490e      	ldr	r1, [pc, #56]	; (8008640 <netconn_close_shutdown+0x54>)
 8008606:	480f      	ldr	r0, [pc, #60]	; (8008644 <netconn_close_shutdown+0x58>)
 8008608:	f00f fdc2 	bl	8018190 <iprintf>
 800860c:	f06f 030f 	mvn.w	r3, #15
 8008610:	e010      	b.n	8008634 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8008616:	78fb      	ldrb	r3, [r7, #3]
 8008618:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800861a:	2329      	movs	r3, #41	; 0x29
 800861c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800861e:	f107 030c 	add.w	r3, r7, #12
 8008622:	4619      	mov	r1, r3
 8008624:	4808      	ldr	r0, [pc, #32]	; (8008648 <netconn_close_shutdown+0x5c>)
 8008626:	f7ff fb51 	bl	8007ccc <netconn_apimsg>
 800862a:	4603      	mov	r3, r0
 800862c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008630:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008634:	4618      	mov	r0, r3
 8008636:	3730      	adds	r7, #48	; 0x30
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}
 800863c:	080195a8 	.word	0x080195a8
 8008640:	080198e4 	.word	0x080198e4
 8008644:	08019600 	.word	0x08019600
 8008648:	08009d25 	.word	0x08009d25

0800864c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b082      	sub	sp, #8
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8008654:	2103      	movs	r1, #3
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f7ff ffc8 	bl	80085ec <netconn_close_shutdown>
 800865c:	4603      	mov	r3, r0
}
 800865e:	4618      	mov	r0, r3
 8008660:	3708      	adds	r7, #8
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}

08008666 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8008666:	b580      	push	{r7, lr}
 8008668:	b084      	sub	sp, #16
 800866a:	af00      	add	r7, sp, #0
 800866c:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d101      	bne.n	8008678 <netconn_err+0x12>
    return ERR_OK;
 8008674:	2300      	movs	r3, #0
 8008676:	e00d      	b.n	8008694 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8008678:	f00f fcec 	bl	8018054 <sys_arch_protect>
 800867c:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	7a1b      	ldrb	r3, [r3, #8]
 8008682:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800868a:	68f8      	ldr	r0, [r7, #12]
 800868c:	f00f fcf0 	bl	8018070 <sys_arch_unprotect>
  return err;
 8008690:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8008694:	4618      	mov	r0, r3
 8008696:	3710      	adds	r7, #16
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b082      	sub	sp, #8
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	4603      	mov	r3, r0
 80086a4:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 80086a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086aa:	f113 0f0e 	cmn.w	r3, #14
 80086ae:	d008      	beq.n	80086c2 <lwip_netconn_err_to_msg+0x26>
 80086b0:	f113 0f0d 	cmn.w	r3, #13
 80086b4:	d003      	beq.n	80086be <lwip_netconn_err_to_msg+0x22>
 80086b6:	f113 0f0f 	cmn.w	r3, #15
 80086ba:	d004      	beq.n	80086c6 <lwip_netconn_err_to_msg+0x2a>
 80086bc:	e005      	b.n	80086ca <lwip_netconn_err_to_msg+0x2e>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 80086be:	4b0a      	ldr	r3, [pc, #40]	; (80086e8 <lwip_netconn_err_to_msg+0x4c>)
 80086c0:	e00e      	b.n	80086e0 <lwip_netconn_err_to_msg+0x44>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 80086c2:	4b0a      	ldr	r3, [pc, #40]	; (80086ec <lwip_netconn_err_to_msg+0x50>)
 80086c4:	e00c      	b.n	80086e0 <lwip_netconn_err_to_msg+0x44>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 80086c6:	4b0a      	ldr	r3, [pc, #40]	; (80086f0 <lwip_netconn_err_to_msg+0x54>)
 80086c8:	e00a      	b.n	80086e0 <lwip_netconn_err_to_msg+0x44>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 80086ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d005      	beq.n	80086de <lwip_netconn_err_to_msg+0x42>
 80086d2:	4b08      	ldr	r3, [pc, #32]	; (80086f4 <lwip_netconn_err_to_msg+0x58>)
 80086d4:	227d      	movs	r2, #125	; 0x7d
 80086d6:	4908      	ldr	r1, [pc, #32]	; (80086f8 <lwip_netconn_err_to_msg+0x5c>)
 80086d8:	4808      	ldr	r0, [pc, #32]	; (80086fc <lwip_netconn_err_to_msg+0x60>)
 80086da:	f00f fd59 	bl	8018190 <iprintf>
      return NULL;
 80086de:	2300      	movs	r3, #0
  }
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3708      	adds	r7, #8
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	0801d07c 	.word	0x0801d07c
 80086ec:	0801d07d 	.word	0x0801d07d
 80086f0:	0801d07e 	.word	0x0801d07e
 80086f4:	08019900 	.word	0x08019900
 80086f8:	08019934 	.word	0x08019934
 80086fc:	08019944 	.word	0x08019944

08008700 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b082      	sub	sp, #8
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d105      	bne.n	800871c <lwip_netconn_is_err_msg+0x1c>
 8008710:	4b12      	ldr	r3, [pc, #72]	; (800875c <lwip_netconn_is_err_msg+0x5c>)
 8008712:	2285      	movs	r2, #133	; 0x85
 8008714:	4912      	ldr	r1, [pc, #72]	; (8008760 <lwip_netconn_is_err_msg+0x60>)
 8008716:	4813      	ldr	r0, [pc, #76]	; (8008764 <lwip_netconn_is_err_msg+0x64>)
 8008718:	f00f fd3a 	bl	8018190 <iprintf>

  if (msg == &netconn_aborted) {
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	4a12      	ldr	r2, [pc, #72]	; (8008768 <lwip_netconn_is_err_msg+0x68>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d104      	bne.n	800872e <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	22f3      	movs	r2, #243	; 0xf3
 8008728:	701a      	strb	r2, [r3, #0]
    return 1;
 800872a:	2301      	movs	r3, #1
 800872c:	e012      	b.n	8008754 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	4a0e      	ldr	r2, [pc, #56]	; (800876c <lwip_netconn_is_err_msg+0x6c>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d104      	bne.n	8008740 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	22f2      	movs	r2, #242	; 0xf2
 800873a:	701a      	strb	r2, [r3, #0]
    return 1;
 800873c:	2301      	movs	r3, #1
 800873e:	e009      	b.n	8008754 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	4a0b      	ldr	r2, [pc, #44]	; (8008770 <lwip_netconn_is_err_msg+0x70>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d104      	bne.n	8008752 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	22f1      	movs	r2, #241	; 0xf1
 800874c:	701a      	strb	r2, [r3, #0]
    return 1;
 800874e:	2301      	movs	r3, #1
 8008750:	e000      	b.n	8008754 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8008752:	2300      	movs	r3, #0
}
 8008754:	4618      	mov	r0, r3
 8008756:	3708      	adds	r7, #8
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}
 800875c:	08019900 	.word	0x08019900
 8008760:	0801996c 	.word	0x0801996c
 8008764:	08019944 	.word	0x08019944
 8008768:	0801d07c 	.word	0x0801d07c
 800876c:	0801d07d 	.word	0x0801d07d
 8008770:	0801d07e 	.word	0x0801d07e

08008774 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b088      	sub	sp, #32
 8008778:	af00      	add	r7, sp, #0
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	607a      	str	r2, [r7, #4]
 8008780:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d105      	bne.n	8008794 <recv_udp+0x20>
 8008788:	4b34      	ldr	r3, [pc, #208]	; (800885c <recv_udp+0xe8>)
 800878a:	22e5      	movs	r2, #229	; 0xe5
 800878c:	4934      	ldr	r1, [pc, #208]	; (8008860 <recv_udp+0xec>)
 800878e:	4835      	ldr	r0, [pc, #212]	; (8008864 <recv_udp+0xf0>)
 8008790:	f00f fcfe 	bl	8018190 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d105      	bne.n	80087a6 <recv_udp+0x32>
 800879a:	4b30      	ldr	r3, [pc, #192]	; (800885c <recv_udp+0xe8>)
 800879c:	22e6      	movs	r2, #230	; 0xe6
 800879e:	4932      	ldr	r1, [pc, #200]	; (8008868 <recv_udp+0xf4>)
 80087a0:	4830      	ldr	r0, [pc, #192]	; (8008864 <recv_udp+0xf0>)
 80087a2:	f00f fcf5 	bl	8018190 <iprintf>
  conn = (struct netconn *)arg;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80087aa:	69fb      	ldr	r3, [r7, #28]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d103      	bne.n	80087b8 <recv_udp+0x44>
    pbuf_free(p);
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f003 ffbd 	bl	800c730 <pbuf_free>
    return;
 80087b6:	e04d      	b.n	8008854 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80087b8:	69fb      	ldr	r3, [r7, #28]
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	68ba      	ldr	r2, [r7, #8]
 80087be:	429a      	cmp	r2, r3
 80087c0:	d005      	beq.n	80087ce <recv_udp+0x5a>
 80087c2:	4b26      	ldr	r3, [pc, #152]	; (800885c <recv_udp+0xe8>)
 80087c4:	22ee      	movs	r2, #238	; 0xee
 80087c6:	4929      	ldr	r1, [pc, #164]	; (800886c <recv_udp+0xf8>)
 80087c8:	4826      	ldr	r0, [pc, #152]	; (8008864 <recv_udp+0xf0>)
 80087ca:	f00f fce1 	bl	8018190 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80087ce:	69fb      	ldr	r3, [r7, #28]
 80087d0:	3310      	adds	r3, #16
 80087d2:	4618      	mov	r0, r3
 80087d4:	f00f fb23 	bl	8017e1e <sys_mbox_valid>
 80087d8:	4603      	mov	r3, r0
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d103      	bne.n	80087e6 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f003 ffa6 	bl	800c730 <pbuf_free>
    return;
 80087e4:	e036      	b.n	8008854 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80087e6:	2006      	movs	r0, #6
 80087e8:	f003 f922 	bl	800ba30 <memp_malloc>
 80087ec:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 80087ee:	69bb      	ldr	r3, [r7, #24]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d103      	bne.n	80087fc <recv_udp+0x88>
    pbuf_free(p);
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f003 ff9b 	bl	800c730 <pbuf_free>
    return;
 80087fa:	e02b      	b.n	8008854 <recv_udp+0xe0>
  } else {
    buf->p = p;
 80087fc:	69bb      	ldr	r3, [r7, #24]
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008802:	69bb      	ldr	r3, [r7, #24]
 8008804:	687a      	ldr	r2, [r7, #4]
 8008806:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d002      	beq.n	8008814 <recv_udp+0xa0>
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	e000      	b.n	8008816 <recv_udp+0xa2>
 8008814:	2300      	movs	r3, #0
 8008816:	69ba      	ldr	r2, [r7, #24]
 8008818:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800881a:	69bb      	ldr	r3, [r7, #24]
 800881c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800881e:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	891b      	ldrh	r3, [r3, #8]
 8008824:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8008826:	69fb      	ldr	r3, [r7, #28]
 8008828:	3310      	adds	r3, #16
 800882a:	69b9      	ldr	r1, [r7, #24]
 800882c:	4618      	mov	r0, r3
 800882e:	f00f fa81 	bl	8017d34 <sys_mbox_trypost>
 8008832:	4603      	mov	r3, r0
 8008834:	2b00      	cmp	r3, #0
 8008836:	d003      	beq.n	8008840 <recv_udp+0xcc>
    netbuf_delete(buf);
 8008838:	69b8      	ldr	r0, [r7, #24]
 800883a:	f001 faff 	bl	8009e3c <netbuf_delete>
    return;
 800883e:	e009      	b.n	8008854 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008840:	69fb      	ldr	r3, [r7, #28]
 8008842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008844:	2b00      	cmp	r3, #0
 8008846:	d005      	beq.n	8008854 <recv_udp+0xe0>
 8008848:	69fb      	ldr	r3, [r7, #28]
 800884a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800884c:	8afa      	ldrh	r2, [r7, #22]
 800884e:	2100      	movs	r1, #0
 8008850:	69f8      	ldr	r0, [r7, #28]
 8008852:	4798      	blx	r3
  }
}
 8008854:	3720      	adds	r7, #32
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop
 800885c:	08019900 	.word	0x08019900
 8008860:	08019978 	.word	0x08019978
 8008864:	08019944 	.word	0x08019944
 8008868:	0801999c 	.word	0x0801999c
 800886c:	080199bc 	.word	0x080199bc

08008870 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b088      	sub	sp, #32
 8008874:	af00      	add	r7, sp, #0
 8008876:	60f8      	str	r0, [r7, #12]
 8008878:	60b9      	str	r1, [r7, #8]
 800887a:	607a      	str	r2, [r7, #4]
 800887c:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d106      	bne.n	8008892 <recv_tcp+0x22>
 8008884:	4b36      	ldr	r3, [pc, #216]	; (8008960 <recv_tcp+0xf0>)
 8008886:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800888a:	4936      	ldr	r1, [pc, #216]	; (8008964 <recv_tcp+0xf4>)
 800888c:	4836      	ldr	r0, [pc, #216]	; (8008968 <recv_tcp+0xf8>)
 800888e:	f00f fc7f 	bl	8018190 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d106      	bne.n	80088a6 <recv_tcp+0x36>
 8008898:	4b31      	ldr	r3, [pc, #196]	; (8008960 <recv_tcp+0xf0>)
 800889a:	f240 122d 	movw	r2, #301	; 0x12d
 800889e:	4933      	ldr	r1, [pc, #204]	; (800896c <recv_tcp+0xfc>)
 80088a0:	4831      	ldr	r0, [pc, #196]	; (8008968 <recv_tcp+0xf8>)
 80088a2:	f00f fc75 	bl	8018190 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 80088a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d006      	beq.n	80088bc <recv_tcp+0x4c>
 80088ae:	4b2c      	ldr	r3, [pc, #176]	; (8008960 <recv_tcp+0xf0>)
 80088b0:	f44f 7297 	mov.w	r2, #302	; 0x12e
 80088b4:	492e      	ldr	r1, [pc, #184]	; (8008970 <recv_tcp+0x100>)
 80088b6:	482c      	ldr	r0, [pc, #176]	; (8008968 <recv_tcp+0xf8>)
 80088b8:	f00f fc6a 	bl	8018190 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d102      	bne.n	80088cc <recv_tcp+0x5c>
    return ERR_VAL;
 80088c6:	f06f 0305 	mvn.w	r3, #5
 80088ca:	e045      	b.n	8008958 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	68ba      	ldr	r2, [r7, #8]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d006      	beq.n	80088e4 <recv_tcp+0x74>
 80088d6:	4b22      	ldr	r3, [pc, #136]	; (8008960 <recv_tcp+0xf0>)
 80088d8:	f240 1235 	movw	r2, #309	; 0x135
 80088dc:	4925      	ldr	r1, [pc, #148]	; (8008974 <recv_tcp+0x104>)
 80088de:	4822      	ldr	r0, [pc, #136]	; (8008968 <recv_tcp+0xf8>)
 80088e0:	f00f fc56 	bl	8018190 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	3310      	adds	r3, #16
 80088e8:	4618      	mov	r0, r3
 80088ea:	f00f fa98 	bl	8017e1e <sys_mbox_valid>
 80088ee:	4603      	mov	r3, r0
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d10d      	bne.n	8008910 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d008      	beq.n	800890c <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	891b      	ldrh	r3, [r3, #8]
 80088fe:	4619      	mov	r1, r3
 8008900:	68b8      	ldr	r0, [r7, #8]
 8008902:	f004 fee5 	bl	800d6d0 <tcp_recved>
      pbuf_free(p);
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f003 ff12 	bl	800c730 <pbuf_free>
    }
    return ERR_OK;
 800890c:	2300      	movs	r3, #0
 800890e:	e023      	b.n	8008958 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d005      	beq.n	8008922 <recv_tcp+0xb2>
    msg = p;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	891b      	ldrh	r3, [r3, #8]
 800891e:	83fb      	strh	r3, [r7, #30]
 8008920:	e003      	b.n	800892a <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8008922:	4b15      	ldr	r3, [pc, #84]	; (8008978 <recv_tcp+0x108>)
 8008924:	61bb      	str	r3, [r7, #24]
    len = 0;
 8008926:	2300      	movs	r3, #0
 8008928:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	3310      	adds	r3, #16
 800892e:	69b9      	ldr	r1, [r7, #24]
 8008930:	4618      	mov	r0, r3
 8008932:	f00f f9ff 	bl	8017d34 <sys_mbox_trypost>
 8008936:	4603      	mov	r3, r0
 8008938:	2b00      	cmp	r3, #0
 800893a:	d002      	beq.n	8008942 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800893c:	f04f 33ff 	mov.w	r3, #4294967295
 8008940:	e00a      	b.n	8008958 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008946:	2b00      	cmp	r3, #0
 8008948:	d005      	beq.n	8008956 <recv_tcp+0xe6>
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800894e:	8bfa      	ldrh	r2, [r7, #30]
 8008950:	2100      	movs	r1, #0
 8008952:	6978      	ldr	r0, [r7, #20]
 8008954:	4798      	blx	r3
  }

  return ERR_OK;
 8008956:	2300      	movs	r3, #0
}
 8008958:	4618      	mov	r0, r3
 800895a:	3720      	adds	r7, #32
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}
 8008960:	08019900 	.word	0x08019900
 8008964:	080199dc 	.word	0x080199dc
 8008968:	08019944 	.word	0x08019944
 800896c:	08019a00 	.word	0x08019a00
 8008970:	08019a20 	.word	0x08019a20
 8008974:	08019a38 	.word	0x08019a38
 8008978:	0801d07e 	.word	0x0801d07e

0800897c <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b084      	sub	sp, #16
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
 8008984:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d106      	bne.n	800899e <poll_tcp+0x22>
 8008990:	4b29      	ldr	r3, [pc, #164]	; (8008a38 <poll_tcp+0xbc>)
 8008992:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8008996:	4929      	ldr	r1, [pc, #164]	; (8008a3c <poll_tcp+0xc0>)
 8008998:	4829      	ldr	r0, [pc, #164]	; (8008a40 <poll_tcp+0xc4>)
 800899a:	f00f fbf9 	bl	8018190 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	785b      	ldrb	r3, [r3, #1]
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	d104      	bne.n	80089b0 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80089a6:	2101      	movs	r1, #1
 80089a8:	68f8      	ldr	r0, [r7, #12]
 80089aa:	f000 ff63 	bl	8009874 <lwip_netconn_do_writemore>
 80089ae:	e016      	b.n	80089de <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	785b      	ldrb	r3, [r3, #1]
 80089b4:	2b04      	cmp	r3, #4
 80089b6:	d112      	bne.n	80089de <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	6a1b      	ldr	r3, [r3, #32]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d00a      	beq.n	80089d6 <poll_tcp+0x5a>
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	6a1b      	ldr	r3, [r3, #32]
 80089c4:	7a5b      	ldrb	r3, [r3, #9]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d005      	beq.n	80089d6 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	6a1b      	ldr	r3, [r3, #32]
 80089ce:	7a5a      	ldrb	r2, [r3, #9]
 80089d0:	3a01      	subs	r2, #1
 80089d2:	b2d2      	uxtb	r2, r2
 80089d4:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80089d6:	2101      	movs	r1, #1
 80089d8:	68f8      	ldr	r0, [r7, #12]
 80089da:	f000 fbf7 	bl	80091cc <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	7f1b      	ldrb	r3, [r3, #28]
 80089e2:	f003 0310 	and.w	r3, r3, #16
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d021      	beq.n	8008a2e <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d01d      	beq.n	8008a2e <poll_tcp+0xb2>
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80089fa:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80089fe:	d316      	bcc.n	8008a2e <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008a08:	2b04      	cmp	r3, #4
 8008a0a:	d810      	bhi.n	8008a2e <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	7f1b      	ldrb	r3, [r3, #28]
 8008a10:	f023 0310 	bic.w	r3, r3, #16
 8008a14:	b2da      	uxtb	r2, r3
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d005      	beq.n	8008a2e <poll_tcp+0xb2>
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a26:	2200      	movs	r2, #0
 8008a28:	2102      	movs	r1, #2
 8008a2a:	68f8      	ldr	r0, [r7, #12]
 8008a2c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8008a2e:	2300      	movs	r3, #0
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3710      	adds	r7, #16
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}
 8008a38:	08019900 	.word	0x08019900
 8008a3c:	08019a58 	.word	0x08019a58
 8008a40:	08019944 	.word	0x08019944

08008a44 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b086      	sub	sp, #24
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	60f8      	str	r0, [r7, #12]
 8008a4c:	60b9      	str	r1, [r7, #8]
 8008a4e:	4613      	mov	r3, r2
 8008a50:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d106      	bne.n	8008a6a <sent_tcp+0x26>
 8008a5c:	4b20      	ldr	r3, [pc, #128]	; (8008ae0 <sent_tcp+0x9c>)
 8008a5e:	f240 1293 	movw	r2, #403	; 0x193
 8008a62:	4920      	ldr	r1, [pc, #128]	; (8008ae4 <sent_tcp+0xa0>)
 8008a64:	4820      	ldr	r0, [pc, #128]	; (8008ae8 <sent_tcp+0xa4>)
 8008a66:	f00f fb93 	bl	8018190 <iprintf>

  if (conn) {
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d032      	beq.n	8008ad6 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	785b      	ldrb	r3, [r3, #1]
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d104      	bne.n	8008a82 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008a78:	2101      	movs	r1, #1
 8008a7a:	6978      	ldr	r0, [r7, #20]
 8008a7c:	f000 fefa 	bl	8009874 <lwip_netconn_do_writemore>
 8008a80:	e007      	b.n	8008a92 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	785b      	ldrb	r3, [r3, #1]
 8008a86:	2b04      	cmp	r3, #4
 8008a88:	d103      	bne.n	8008a92 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8008a8a:	2101      	movs	r1, #1
 8008a8c:	6978      	ldr	r0, [r7, #20]
 8008a8e:	f000 fb9d 	bl	80091cc <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d01d      	beq.n	8008ad6 <sent_tcp+0x92>
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008aa2:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8008aa6:	d316      	bcc.n	8008ad6 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008ab0:	2b04      	cmp	r3, #4
 8008ab2:	d810      	bhi.n	8008ad6 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	7f1b      	ldrb	r3, [r3, #28]
 8008ab8:	f023 0310 	bic.w	r3, r3, #16
 8008abc:	b2da      	uxtb	r2, r3
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d005      	beq.n	8008ad6 <sent_tcp+0x92>
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ace:	88fa      	ldrh	r2, [r7, #6]
 8008ad0:	2102      	movs	r1, #2
 8008ad2:	6978      	ldr	r0, [r7, #20]
 8008ad4:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8008ad6:	2300      	movs	r3, #0
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3718      	adds	r7, #24
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}
 8008ae0:	08019900 	.word	0x08019900
 8008ae4:	08019a58 	.word	0x08019a58
 8008ae8:	08019944 	.word	0x08019944

08008aec <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b088      	sub	sp, #32
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	460b      	mov	r3, r1
 8008af6:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008afc:	69fb      	ldr	r3, [r7, #28]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d106      	bne.n	8008b10 <err_tcp+0x24>
 8008b02:	4b5f      	ldr	r3, [pc, #380]	; (8008c80 <err_tcp+0x194>)
 8008b04:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8008b08:	495e      	ldr	r1, [pc, #376]	; (8008c84 <err_tcp+0x198>)
 8008b0a:	485f      	ldr	r0, [pc, #380]	; (8008c88 <err_tcp+0x19c>)
 8008b0c:	f00f fb40 	bl	8018190 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8008b10:	f00f faa0 	bl	8018054 <sys_arch_protect>
 8008b14:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8008b16:	69fb      	ldr	r3, [r7, #28]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8008b1c:	69fb      	ldr	r3, [r7, #28]
 8008b1e:	78fa      	ldrb	r2, [r7, #3]
 8008b20:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8008b22:	69fb      	ldr	r3, [r7, #28]
 8008b24:	7f1b      	ldrb	r3, [r3, #28]
 8008b26:	f043 0301 	orr.w	r3, r3, #1
 8008b2a:	b2da      	uxtb	r2, r3
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8008b30:	69fb      	ldr	r3, [r7, #28]
 8008b32:	785b      	ldrb	r3, [r3, #1]
 8008b34:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8008b36:	69fb      	ldr	r3, [r7, #28]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8008b3c:	69b8      	ldr	r0, [r7, #24]
 8008b3e:	f00f fa97 	bl	8018070 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8008b42:	69fb      	ldr	r3, [r7, #28]
 8008b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d005      	beq.n	8008b56 <err_tcp+0x6a>
 8008b4a:	69fb      	ldr	r3, [r7, #28]
 8008b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b4e:	2200      	movs	r2, #0
 8008b50:	2104      	movs	r1, #4
 8008b52:	69f8      	ldr	r0, [r7, #28]
 8008b54:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008b56:	69fb      	ldr	r3, [r7, #28]
 8008b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d005      	beq.n	8008b6a <err_tcp+0x7e>
 8008b5e:	69fb      	ldr	r3, [r7, #28]
 8008b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b62:	2200      	movs	r2, #0
 8008b64:	2100      	movs	r1, #0
 8008b66:	69f8      	ldr	r0, [r7, #28]
 8008b68:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008b6a:	69fb      	ldr	r3, [r7, #28]
 8008b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d005      	beq.n	8008b7e <err_tcp+0x92>
 8008b72:	69fb      	ldr	r3, [r7, #28]
 8008b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b76:	2200      	movs	r2, #0
 8008b78:	2102      	movs	r1, #2
 8008b7a:	69f8      	ldr	r0, [r7, #28]
 8008b7c:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8008b7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7ff fd8a 	bl	800869c <lwip_netconn_err_to_msg>
 8008b88:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008b8a:	69fb      	ldr	r3, [r7, #28]
 8008b8c:	3310      	adds	r3, #16
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f00f f945 	bl	8017e1e <sys_mbox_valid>
 8008b94:	4603      	mov	r3, r0
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d005      	beq.n	8008ba6 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8008b9a:	69fb      	ldr	r3, [r7, #28]
 8008b9c:	3310      	adds	r3, #16
 8008b9e:	6939      	ldr	r1, [r7, #16]
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f00f f8c7 	bl	8017d34 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8008ba6:	69fb      	ldr	r3, [r7, #28]
 8008ba8:	3314      	adds	r3, #20
 8008baa:	4618      	mov	r0, r3
 8008bac:	f00f f937 	bl	8017e1e <sys_mbox_valid>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d005      	beq.n	8008bc2 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8008bb6:	69fb      	ldr	r3, [r7, #28]
 8008bb8:	3314      	adds	r3, #20
 8008bba:	6939      	ldr	r1, [r7, #16]
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f00f f8b9 	bl	8017d34 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8008bc2:	7dfb      	ldrb	r3, [r7, #23]
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	d005      	beq.n	8008bd4 <err_tcp+0xe8>
 8008bc8:	7dfb      	ldrb	r3, [r7, #23]
 8008bca:	2b04      	cmp	r3, #4
 8008bcc:	d002      	beq.n	8008bd4 <err_tcp+0xe8>
 8008bce:	7dfb      	ldrb	r3, [r7, #23]
 8008bd0:	2b03      	cmp	r3, #3
 8008bd2:	d143      	bne.n	8008c5c <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	7f1b      	ldrb	r3, [r3, #28]
 8008bd8:	f003 0304 	and.w	r3, r3, #4
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	bf14      	ite	ne
 8008be0:	2301      	movne	r3, #1
 8008be2:	2300      	moveq	r3, #0
 8008be4:	b2db      	uxtb	r3, r3
 8008be6:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8008be8:	69fb      	ldr	r3, [r7, #28]
 8008bea:	7f1b      	ldrb	r3, [r3, #28]
 8008bec:	f023 0304 	bic.w	r3, r3, #4
 8008bf0:	b2da      	uxtb	r2, r3
 8008bf2:	69fb      	ldr	r3, [r7, #28]
 8008bf4:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d13b      	bne.n	8008c74 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8008bfc:	69fb      	ldr	r3, [r7, #28]
 8008bfe:	6a1b      	ldr	r3, [r3, #32]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d106      	bne.n	8008c12 <err_tcp+0x126>
 8008c04:	4b1e      	ldr	r3, [pc, #120]	; (8008c80 <err_tcp+0x194>)
 8008c06:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008c0a:	4920      	ldr	r1, [pc, #128]	; (8008c8c <err_tcp+0x1a0>)
 8008c0c:	481e      	ldr	r0, [pc, #120]	; (8008c88 <err_tcp+0x19c>)
 8008c0e:	f00f fabf 	bl	8018190 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8008c12:	7dfb      	ldrb	r3, [r7, #23]
 8008c14:	2b04      	cmp	r3, #4
 8008c16:	d104      	bne.n	8008c22 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8008c18:	69fb      	ldr	r3, [r7, #28]
 8008c1a:	6a1b      	ldr	r3, [r3, #32]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	711a      	strb	r2, [r3, #4]
 8008c20:	e003      	b.n	8008c2a <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8008c22:	69fb      	ldr	r3, [r7, #28]
 8008c24:	6a1b      	ldr	r3, [r3, #32]
 8008c26:	78fa      	ldrb	r2, [r7, #3]
 8008c28:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008c2a:	69fb      	ldr	r3, [r7, #28]
 8008c2c:	6a1b      	ldr	r3, [r3, #32]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	330c      	adds	r3, #12
 8008c32:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8008c34:	68b8      	ldr	r0, [r7, #8]
 8008c36:	f00f f983 	bl	8017f40 <sys_sem_valid>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d106      	bne.n	8008c4e <err_tcp+0x162>
 8008c40:	4b0f      	ldr	r3, [pc, #60]	; (8008c80 <err_tcp+0x194>)
 8008c42:	f240 12ef 	movw	r2, #495	; 0x1ef
 8008c46:	4912      	ldr	r1, [pc, #72]	; (8008c90 <err_tcp+0x1a4>)
 8008c48:	480f      	ldr	r0, [pc, #60]	; (8008c88 <err_tcp+0x19c>)
 8008c4a:	f00f faa1 	bl	8018190 <iprintf>
      conn->current_msg = NULL;
 8008c4e:	69fb      	ldr	r3, [r7, #28]
 8008c50:	2200      	movs	r2, #0
 8008c52:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8008c54:	68b8      	ldr	r0, [r7, #8]
 8008c56:	f00f f959 	bl	8017f0c <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8008c5a:	e00b      	b.n	8008c74 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8008c5c:	69fb      	ldr	r3, [r7, #28]
 8008c5e:	6a1b      	ldr	r3, [r3, #32]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d008      	beq.n	8008c76 <err_tcp+0x18a>
 8008c64:	4b06      	ldr	r3, [pc, #24]	; (8008c80 <err_tcp+0x194>)
 8008c66:	f240 12f7 	movw	r2, #503	; 0x1f7
 8008c6a:	490a      	ldr	r1, [pc, #40]	; (8008c94 <err_tcp+0x1a8>)
 8008c6c:	4806      	ldr	r0, [pc, #24]	; (8008c88 <err_tcp+0x19c>)
 8008c6e:	f00f fa8f 	bl	8018190 <iprintf>
  }
}
 8008c72:	e000      	b.n	8008c76 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8008c74:	bf00      	nop
}
 8008c76:	bf00      	nop
 8008c78:	3720      	adds	r7, #32
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	bf00      	nop
 8008c80:	08019900 	.word	0x08019900
 8008c84:	08019a58 	.word	0x08019a58
 8008c88:	08019944 	.word	0x08019944
 8008c8c:	08019a68 	.word	0x08019a68
 8008c90:	08019a84 	.word	0x08019a84
 8008c94:	08019aa0 	.word	0x08019aa0

08008c98 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b084      	sub	sp, #16
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8008ca6:	6879      	ldr	r1, [r7, #4]
 8008ca8:	68f8      	ldr	r0, [r7, #12]
 8008caa:	f005 fbf1 	bl	800e490 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8008cae:	490a      	ldr	r1, [pc, #40]	; (8008cd8 <setup_tcp+0x40>)
 8008cb0:	68f8      	ldr	r0, [r7, #12]
 8008cb2:	f005 fbff 	bl	800e4b4 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8008cb6:	4909      	ldr	r1, [pc, #36]	; (8008cdc <setup_tcp+0x44>)
 8008cb8:	68f8      	ldr	r0, [r7, #12]
 8008cba:	f005 fc1d 	bl	800e4f8 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8008cbe:	2202      	movs	r2, #2
 8008cc0:	4907      	ldr	r1, [pc, #28]	; (8008ce0 <setup_tcp+0x48>)
 8008cc2:	68f8      	ldr	r0, [r7, #12]
 8008cc4:	f005 fc74 	bl	800e5b0 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8008cc8:	4906      	ldr	r1, [pc, #24]	; (8008ce4 <setup_tcp+0x4c>)
 8008cca:	68f8      	ldr	r0, [r7, #12]
 8008ccc:	f005 fc36 	bl	800e53c <tcp_err>
}
 8008cd0:	bf00      	nop
 8008cd2:	3710      	adds	r7, #16
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}
 8008cd8:	08008871 	.word	0x08008871
 8008cdc:	08008a45 	.word	0x08008a45
 8008ce0:	0800897d 	.word	0x0800897d
 8008ce4:	08008aed 	.word	0x08008aed

08008ce8 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8008ce8:	b590      	push	{r4, r7, lr}
 8008cea:	b089      	sub	sp, #36	; 0x24
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	4613      	mov	r3, r2
 8008cf4:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8008cfa:	69fb      	ldr	r3, [r7, #28]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d102      	bne.n	8008d06 <accept_function+0x1e>
    return ERR_VAL;
 8008d00:	f06f 0305 	mvn.w	r3, #5
 8008d04:	e0a1      	b.n	8008e4a <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8008d06:	69fb      	ldr	r3, [r7, #28]
 8008d08:	3314      	adds	r3, #20
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f00f f887 	bl	8017e1e <sys_mbox_valid>
 8008d10:	4603      	mov	r3, r0
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d102      	bne.n	8008d1c <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8008d16:	f06f 0305 	mvn.w	r3, #5
 8008d1a:	e096      	b.n	8008e4a <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d11b      	bne.n	8008d5a <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8008d22:	69fb      	ldr	r3, [r7, #28]
 8008d24:	f103 0414 	add.w	r4, r3, #20
 8008d28:	f06f 000c 	mvn.w	r0, #12
 8008d2c:	f7ff fcb6 	bl	800869c <lwip_netconn_err_to_msg>
 8008d30:	4603      	mov	r3, r0
 8008d32:	4619      	mov	r1, r3
 8008d34:	4620      	mov	r0, r4
 8008d36:	f00e fffd 	bl	8017d34 <sys_mbox_trypost>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d109      	bne.n	8008d54 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008d40:	69fb      	ldr	r3, [r7, #28]
 8008d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d005      	beq.n	8008d54 <accept_function+0x6c>
 8008d48:	69fb      	ldr	r3, [r7, #28]
 8008d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	2100      	movs	r1, #0
 8008d50:	69f8      	ldr	r0, [r7, #28]
 8008d52:	4798      	blx	r3
    }
    return ERR_VAL;
 8008d54:	f06f 0305 	mvn.w	r3, #5
 8008d58:	e077      	b.n	8008e4a <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8008d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d006      	beq.n	8008d70 <accept_function+0x88>
 8008d62:	4b3c      	ldr	r3, [pc, #240]	; (8008e54 <accept_function+0x16c>)
 8008d64:	f240 222a 	movw	r2, #554	; 0x22a
 8008d68:	493b      	ldr	r1, [pc, #236]	; (8008e58 <accept_function+0x170>)
 8008d6a:	483c      	ldr	r0, [pc, #240]	; (8008e5c <accept_function+0x174>)
 8008d6c:	f00f fa10 	bl	8018190 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8008d70:	69fb      	ldr	r3, [r7, #28]
 8008d72:	781a      	ldrb	r2, [r3, #0]
 8008d74:	69fb      	ldr	r3, [r7, #28]
 8008d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d78:	4619      	mov	r1, r3
 8008d7a:	4610      	mov	r0, r2
 8008d7c:	f000 f8f0 	bl	8008f60 <netconn_alloc>
 8008d80:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 8008d82:	69bb      	ldr	r3, [r7, #24]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d11b      	bne.n	8008dc0 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8008d88:	69fb      	ldr	r3, [r7, #28]
 8008d8a:	f103 0414 	add.w	r4, r3, #20
 8008d8e:	f06f 000c 	mvn.w	r0, #12
 8008d92:	f7ff fc83 	bl	800869c <lwip_netconn_err_to_msg>
 8008d96:	4603      	mov	r3, r0
 8008d98:	4619      	mov	r1, r3
 8008d9a:	4620      	mov	r0, r4
 8008d9c:	f00e ffca 	bl	8017d34 <sys_mbox_trypost>
 8008da0:	4603      	mov	r3, r0
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d109      	bne.n	8008dba <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008da6:	69fb      	ldr	r3, [r7, #28]
 8008da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d005      	beq.n	8008dba <accept_function+0xd2>
 8008dae:	69fb      	ldr	r3, [r7, #28]
 8008db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db2:	2200      	movs	r2, #0
 8008db4:	2100      	movs	r1, #0
 8008db6:	69f8      	ldr	r0, [r7, #28]
 8008db8:	4798      	blx	r3
    }
    return ERR_MEM;
 8008dba:	f04f 33ff 	mov.w	r3, #4294967295
 8008dbe:	e044      	b.n	8008e4a <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8008dc0:	69bb      	ldr	r3, [r7, #24]
 8008dc2:	68ba      	ldr	r2, [r7, #8]
 8008dc4:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 8008dc6:	69b8      	ldr	r0, [r7, #24]
 8008dc8:	f7ff ff66 	bl	8008c98 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8008dcc:	69fb      	ldr	r3, [r7, #28]
 8008dce:	3314      	adds	r3, #20
 8008dd0:	69b9      	ldr	r1, [r7, #24]
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f00e ffae 	bl	8017d34 <sys_mbox_trypost>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d02a      	beq.n	8008e34 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8008dde:	69bb      	ldr	r3, [r7, #24]
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8008de4:	2100      	movs	r1, #0
 8008de6:	6978      	ldr	r0, [r7, #20]
 8008de8:	f005 fb52 	bl	800e490 <tcp_arg>
    tcp_recv(pcb, NULL);
 8008dec:	2100      	movs	r1, #0
 8008dee:	6978      	ldr	r0, [r7, #20]
 8008df0:	f005 fb60 	bl	800e4b4 <tcp_recv>
    tcp_sent(pcb, NULL);
 8008df4:	2100      	movs	r1, #0
 8008df6:	6978      	ldr	r0, [r7, #20]
 8008df8:	f005 fb7e 	bl	800e4f8 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	2100      	movs	r1, #0
 8008e00:	6978      	ldr	r0, [r7, #20]
 8008e02:	f005 fbd5 	bl	800e5b0 <tcp_poll>
    tcp_err(pcb, NULL);
 8008e06:	2100      	movs	r1, #0
 8008e08:	6978      	ldr	r0, [r7, #20]
 8008e0a:	f005 fb97 	bl	800e53c <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8008e0e:	69bb      	ldr	r3, [r7, #24]
 8008e10:	2200      	movs	r2, #0
 8008e12:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8008e14:	69bb      	ldr	r3, [r7, #24]
 8008e16:	3310      	adds	r3, #16
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f00e ff79 	bl	8017d10 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8008e1e:	69bb      	ldr	r3, [r7, #24]
 8008e20:	3310      	adds	r3, #16
 8008e22:	4618      	mov	r0, r3
 8008e24:	f00f f80c 	bl	8017e40 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8008e28:	69b8      	ldr	r0, [r7, #24]
 8008e2a:	f000 f907 	bl	800903c <netconn_free>
    return ERR_MEM;
 8008e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8008e32:	e00a      	b.n	8008e4a <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008e34:	69fb      	ldr	r3, [r7, #28]
 8008e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d005      	beq.n	8008e48 <accept_function+0x160>
 8008e3c:	69fb      	ldr	r3, [r7, #28]
 8008e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e40:	2200      	movs	r2, #0
 8008e42:	2100      	movs	r1, #0
 8008e44:	69f8      	ldr	r0, [r7, #28]
 8008e46:	4798      	blx	r3
  }

  return ERR_OK;
 8008e48:	2300      	movs	r3, #0
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3724      	adds	r7, #36	; 0x24
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd90      	pop	{r4, r7, pc}
 8008e52:	bf00      	nop
 8008e54:	08019900 	.word	0x08019900
 8008e58:	08019abc 	.word	0x08019abc
 8008e5c:	08019944 	.word	0x08019944

08008e60 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8008e60:	b590      	push	{r4, r7, lr}
 8008e62:	b085      	sub	sp, #20
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d006      	beq.n	8008e84 <pcb_new+0x24>
 8008e76:	4b2b      	ldr	r3, [pc, #172]	; (8008f24 <pcb_new+0xc4>)
 8008e78:	f240 2265 	movw	r2, #613	; 0x265
 8008e7c:	492a      	ldr	r1, [pc, #168]	; (8008f28 <pcb_new+0xc8>)
 8008e7e:	482b      	ldr	r0, [pc, #172]	; (8008f2c <pcb_new+0xcc>)
 8008e80:	f00f f986 	bl	8018190 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e8e:	2b10      	cmp	r3, #16
 8008e90:	d022      	beq.n	8008ed8 <pcb_new+0x78>
 8008e92:	2b20      	cmp	r3, #32
 8008e94:	d133      	bne.n	8008efe <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681c      	ldr	r4, [r3, #0]
 8008e9a:	7bfb      	ldrb	r3, [r7, #15]
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f00a fda8 	bl	80139f2 <udp_new_ip_type>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d02a      	beq.n	8008f06 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	781b      	ldrb	r3, [r3, #0]
 8008eb6:	2b22      	cmp	r3, #34	; 0x22
 8008eb8:	d104      	bne.n	8008ec4 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	6858      	ldr	r0, [r3, #4]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	461a      	mov	r2, r3
 8008ed0:	4917      	ldr	r1, [pc, #92]	; (8008f30 <pcb_new+0xd0>)
 8008ed2:	f00a fd15 	bl	8013900 <udp_recv>
      }
      break;
 8008ed6:	e016      	b.n	8008f06 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681c      	ldr	r4, [r3, #0]
 8008edc:	7bfb      	ldrb	r3, [r7, #15]
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f005 fac8 	bl	800e474 <tcp_new_ip_type>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d00b      	beq.n	8008f0a <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f7ff fece 	bl	8008c98 <setup_tcp>
      }
      break;
 8008efc:	e005      	b.n	8008f0a <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	22fa      	movs	r2, #250	; 0xfa
 8008f02:	711a      	strb	r2, [r3, #4]
      return;
 8008f04:	e00a      	b.n	8008f1c <pcb_new+0xbc>
      break;
 8008f06:	bf00      	nop
 8008f08:	e000      	b.n	8008f0c <pcb_new+0xac>
      break;
 8008f0a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d102      	bne.n	8008f1c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	22ff      	movs	r2, #255	; 0xff
 8008f1a:	711a      	strb	r2, [r3, #4]
  }
}
 8008f1c:	3714      	adds	r7, #20
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd90      	pop	{r4, r7, pc}
 8008f22:	bf00      	nop
 8008f24:	08019900 	.word	0x08019900
 8008f28:	08019ae4 	.word	0x08019ae4
 8008f2c:	08019944 	.word	0x08019944
 8008f30:	08008775 	.word	0x08008775

08008f34 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2200      	movs	r2, #0
 8008f44:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d102      	bne.n	8008f56 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8008f50:	68f8      	ldr	r0, [r7, #12]
 8008f52:	f7ff ff85 	bl	8008e60 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8008f56:	bf00      	nop
 8008f58:	3710      	adds	r7, #16
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}
	...

08008f60 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b086      	sub	sp, #24
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	4603      	mov	r3, r0
 8008f68:	6039      	str	r1, [r7, #0]
 8008f6a:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8008f70:	2007      	movs	r0, #7
 8008f72:	f002 fd5d 	bl	800ba30 <memp_malloc>
 8008f76:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d101      	bne.n	8008f82 <netconn_alloc+0x22>
    return NULL;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	e052      	b.n	8009028 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2200      	movs	r2, #0
 8008f86:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	79fa      	ldrb	r2, [r7, #7]
 8008f8c:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2200      	movs	r2, #0
 8008f92:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8008f94:	79fb      	ldrb	r3, [r7, #7]
 8008f96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f9a:	2b10      	cmp	r3, #16
 8008f9c:	d004      	beq.n	8008fa8 <netconn_alloc+0x48>
 8008f9e:	2b20      	cmp	r3, #32
 8008fa0:	d105      	bne.n	8008fae <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8008fa2:	2306      	movs	r3, #6
 8008fa4:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8008fa6:	e00a      	b.n	8008fbe <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8008fa8:	2306      	movs	r3, #6
 8008faa:	617b      	str	r3, [r7, #20]
      break;
 8008fac:	e007      	b.n	8008fbe <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8008fae:	4b20      	ldr	r3, [pc, #128]	; (8009030 <netconn_alloc+0xd0>)
 8008fb0:	f240 22e5 	movw	r2, #741	; 0x2e5
 8008fb4:	491f      	ldr	r1, [pc, #124]	; (8009034 <netconn_alloc+0xd4>)
 8008fb6:	4820      	ldr	r0, [pc, #128]	; (8009038 <netconn_alloc+0xd8>)
 8008fb8:	f00f f8ea 	bl	8018190 <iprintf>
      goto free_and_return;
 8008fbc:	e02f      	b.n	800901e <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	3310      	adds	r3, #16
 8008fc2:	6979      	ldr	r1, [r7, #20]
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f00e fe81 	bl	8017ccc <sys_mbox_new>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d125      	bne.n	800901c <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	330c      	adds	r3, #12
 8008fd4:	2100      	movs	r1, #0
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f00e ff3f 	bl	8017e5a <sys_sem_new>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d005      	beq.n	8008fee <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	3310      	adds	r3, #16
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f00e fe92 	bl	8017d10 <sys_mbox_free>
    goto free_and_return;
 8008fec:	e017      	b.n	800901e <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	3314      	adds	r3, #20
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f00e ff24 	bl	8017e40 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	f04f 32ff 	mov.w	r2, #4294967295
 8009004:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	683a      	ldr	r2, [r7, #0]
 800900a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2200      	movs	r2, #0
 8009010:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	7cfa      	ldrb	r2, [r7, #19]
 8009016:	771a      	strb	r2, [r3, #28]
  return conn;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	e005      	b.n	8009028 <netconn_alloc+0xc8>
    goto free_and_return;
 800901c:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800901e:	68f9      	ldr	r1, [r7, #12]
 8009020:	2007      	movs	r0, #7
 8009022:	f002 fd57 	bl	800bad4 <memp_free>
  return NULL;
 8009026:	2300      	movs	r3, #0
}
 8009028:	4618      	mov	r0, r3
 800902a:	3718      	adds	r7, #24
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}
 8009030:	08019900 	.word	0x08019900
 8009034:	08019b04 	.word	0x08019b04
 8009038:	08019944 	.word	0x08019944

0800903c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b082      	sub	sp, #8
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d006      	beq.n	800905a <netconn_free+0x1e>
 800904c:	4b1b      	ldr	r3, [pc, #108]	; (80090bc <netconn_free+0x80>)
 800904e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8009052:	491b      	ldr	r1, [pc, #108]	; (80090c0 <netconn_free+0x84>)
 8009054:	481b      	ldr	r0, [pc, #108]	; (80090c4 <netconn_free+0x88>)
 8009056:	f00f f89b 	bl	8018190 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	3310      	adds	r3, #16
 800905e:	4618      	mov	r0, r3
 8009060:	f00e fedd 	bl	8017e1e <sys_mbox_valid>
 8009064:	4603      	mov	r3, r0
 8009066:	2b00      	cmp	r3, #0
 8009068:	d006      	beq.n	8009078 <netconn_free+0x3c>
 800906a:	4b14      	ldr	r3, [pc, #80]	; (80090bc <netconn_free+0x80>)
 800906c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8009070:	4915      	ldr	r1, [pc, #84]	; (80090c8 <netconn_free+0x8c>)
 8009072:	4814      	ldr	r0, [pc, #80]	; (80090c4 <netconn_free+0x88>)
 8009074:	f00f f88c 	bl	8018190 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	3314      	adds	r3, #20
 800907c:	4618      	mov	r0, r3
 800907e:	f00e fece 	bl	8017e1e <sys_mbox_valid>
 8009082:	4603      	mov	r3, r0
 8009084:	2b00      	cmp	r3, #0
 8009086:	d006      	beq.n	8009096 <netconn_free+0x5a>
 8009088:	4b0c      	ldr	r3, [pc, #48]	; (80090bc <netconn_free+0x80>)
 800908a:	f240 3227 	movw	r2, #807	; 0x327
 800908e:	490f      	ldr	r1, [pc, #60]	; (80090cc <netconn_free+0x90>)
 8009090:	480c      	ldr	r0, [pc, #48]	; (80090c4 <netconn_free+0x88>)
 8009092:	f00f f87d 	bl	8018190 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	330c      	adds	r3, #12
 800909a:	4618      	mov	r0, r3
 800909c:	f00e ff43 	bl	8017f26 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	330c      	adds	r3, #12
 80090a4:	4618      	mov	r0, r3
 80090a6:	f00e ff5c 	bl	8017f62 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 80090aa:	6879      	ldr	r1, [r7, #4]
 80090ac:	2007      	movs	r0, #7
 80090ae:	f002 fd11 	bl	800bad4 <memp_free>
}
 80090b2:	bf00      	nop
 80090b4:	3708      	adds	r7, #8
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	08019900 	.word	0x08019900
 80090c0:	08019b2c 	.word	0x08019b2c
 80090c4:	08019944 	.word	0x08019944
 80090c8:	08019b5c 	.word	0x08019b5c
 80090cc:	08019b98 	.word	0x08019b98

080090d0 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b086      	sub	sp, #24
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	3310      	adds	r3, #16
 80090dc:	4618      	mov	r0, r3
 80090de:	f00e fe9e 	bl	8017e1e <sys_mbox_valid>
 80090e2:	4603      	mov	r3, r0
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d02f      	beq.n	8009148 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80090e8:	e018      	b.n	800911c <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	781b      	ldrb	r3, [r3, #0]
 80090ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80090f2:	2b10      	cmp	r3, #16
 80090f4:	d10e      	bne.n	8009114 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	f107 020f 	add.w	r2, r7, #15
 80090fc:	4611      	mov	r1, r2
 80090fe:	4618      	mov	r0, r3
 8009100:	f7ff fafe 	bl	8008700 <lwip_netconn_is_err_msg>
 8009104:	4603      	mov	r3, r0
 8009106:	2b00      	cmp	r3, #0
 8009108:	d108      	bne.n	800911c <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	4618      	mov	r0, r3
 800910e:	f003 fb0f 	bl	800c730 <pbuf_free>
 8009112:	e003      	b.n	800911c <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	4618      	mov	r0, r3
 8009118:	f000 fe90 	bl	8009e3c <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	3310      	adds	r3, #16
 8009120:	f107 0210 	add.w	r2, r7, #16
 8009124:	4611      	mov	r1, r2
 8009126:	4618      	mov	r0, r3
 8009128:	f00e fe5d 	bl	8017de6 <sys_arch_mbox_tryfetch>
 800912c:	4603      	mov	r3, r0
 800912e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009132:	d1da      	bne.n	80090ea <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	3310      	adds	r3, #16
 8009138:	4618      	mov	r0, r3
 800913a:	f00e fde9 	bl	8017d10 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	3310      	adds	r3, #16
 8009142:	4618      	mov	r0, r3
 8009144:	f00e fe7c 	bl	8017e40 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	3314      	adds	r3, #20
 800914c:	4618      	mov	r0, r3
 800914e:	f00e fe66 	bl	8017e1e <sys_mbox_valid>
 8009152:	4603      	mov	r3, r0
 8009154:	2b00      	cmp	r3, #0
 8009156:	d034      	beq.n	80091c2 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8009158:	e01d      	b.n	8009196 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	f107 020e 	add.w	r2, r7, #14
 8009160:	4611      	mov	r1, r2
 8009162:	4618      	mov	r0, r3
 8009164:	f7ff facc 	bl	8008700 <lwip_netconn_is_err_msg>
 8009168:	4603      	mov	r3, r0
 800916a:	2b00      	cmp	r3, #0
 800916c:	d113      	bne.n	8009196 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8009172:	6978      	ldr	r0, [r7, #20]
 8009174:	f7ff ffac 	bl	80090d0 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d007      	beq.n	8009190 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	4618      	mov	r0, r3
 8009186:	f004 f8c9 	bl	800d31c <tcp_abort>
            newconn->pcb.tcp = NULL;
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	2200      	movs	r2, #0
 800918e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8009190:	6978      	ldr	r0, [r7, #20]
 8009192:	f7ff ff53 	bl	800903c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	3314      	adds	r3, #20
 800919a:	f107 0210 	add.w	r2, r7, #16
 800919e:	4611      	mov	r1, r2
 80091a0:	4618      	mov	r0, r3
 80091a2:	f00e fe20 	bl	8017de6 <sys_arch_mbox_tryfetch>
 80091a6:	4603      	mov	r3, r0
 80091a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091ac:	d1d5      	bne.n	800915a <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	3314      	adds	r3, #20
 80091b2:	4618      	mov	r0, r3
 80091b4:	f00e fdac 	bl	8017d10 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	3314      	adds	r3, #20
 80091bc:	4618      	mov	r0, r3
 80091be:	f00e fe3f 	bl	8017e40 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 80091c2:	bf00      	nop
 80091c4:	3718      	adds	r7, #24
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}
	...

080091cc <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b086      	sub	sp, #24
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	460b      	mov	r3, r1
 80091d6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 80091d8:	2300      	movs	r3, #0
 80091da:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d106      	bne.n	80091f0 <lwip_netconn_do_close_internal+0x24>
 80091e2:	4ba1      	ldr	r3, [pc, #644]	; (8009468 <lwip_netconn_do_close_internal+0x29c>)
 80091e4:	f240 32a2 	movw	r2, #930	; 0x3a2
 80091e8:	49a0      	ldr	r1, [pc, #640]	; (800946c <lwip_netconn_do_close_internal+0x2a0>)
 80091ea:	48a1      	ldr	r0, [pc, #644]	; (8009470 <lwip_netconn_do_close_internal+0x2a4>)
 80091ec:	f00e ffd0 	bl	8018190 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80091f8:	2b10      	cmp	r3, #16
 80091fa:	d006      	beq.n	800920a <lwip_netconn_do_close_internal+0x3e>
 80091fc:	4b9a      	ldr	r3, [pc, #616]	; (8009468 <lwip_netconn_do_close_internal+0x29c>)
 80091fe:	f240 32a3 	movw	r2, #931	; 0x3a3
 8009202:	499c      	ldr	r1, [pc, #624]	; (8009474 <lwip_netconn_do_close_internal+0x2a8>)
 8009204:	489a      	ldr	r0, [pc, #616]	; (8009470 <lwip_netconn_do_close_internal+0x2a4>)
 8009206:	f00e ffc3 	bl	8018190 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	785b      	ldrb	r3, [r3, #1]
 800920e:	2b04      	cmp	r3, #4
 8009210:	d006      	beq.n	8009220 <lwip_netconn_do_close_internal+0x54>
 8009212:	4b95      	ldr	r3, [pc, #596]	; (8009468 <lwip_netconn_do_close_internal+0x29c>)
 8009214:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8009218:	4997      	ldr	r1, [pc, #604]	; (8009478 <lwip_netconn_do_close_internal+0x2ac>)
 800921a:	4895      	ldr	r0, [pc, #596]	; (8009470 <lwip_netconn_do_close_internal+0x2a4>)
 800921c:	f00e ffb8 	bl	8018190 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	685b      	ldr	r3, [r3, #4]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d106      	bne.n	8009236 <lwip_netconn_do_close_internal+0x6a>
 8009228:	4b8f      	ldr	r3, [pc, #572]	; (8009468 <lwip_netconn_do_close_internal+0x29c>)
 800922a:	f240 32a5 	movw	r2, #933	; 0x3a5
 800922e:	4993      	ldr	r1, [pc, #588]	; (800947c <lwip_netconn_do_close_internal+0x2b0>)
 8009230:	488f      	ldr	r0, [pc, #572]	; (8009470 <lwip_netconn_do_close_internal+0x2a4>)
 8009232:	f00e ffad 	bl	8018190 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6a1b      	ldr	r3, [r3, #32]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d106      	bne.n	800924c <lwip_netconn_do_close_internal+0x80>
 800923e:	4b8a      	ldr	r3, [pc, #552]	; (8009468 <lwip_netconn_do_close_internal+0x29c>)
 8009240:	f240 32a6 	movw	r2, #934	; 0x3a6
 8009244:	498e      	ldr	r1, [pc, #568]	; (8009480 <lwip_netconn_do_close_internal+0x2b4>)
 8009246:	488a      	ldr	r0, [pc, #552]	; (8009470 <lwip_netconn_do_close_internal+0x2a4>)
 8009248:	f00e ffa2 	bl	8018190 <iprintf>

  tpcb = conn->pcb.tcp;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6a1b      	ldr	r3, [r3, #32]
 8009256:	7a1b      	ldrb	r3, [r3, #8]
 8009258:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800925a:	7bfb      	ldrb	r3, [r7, #15]
 800925c:	f003 0301 	and.w	r3, r3, #1
 8009260:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8009262:	7bfb      	ldrb	r3, [r7, #15]
 8009264:	f003 0302 	and.w	r3, r3, #2
 8009268:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800926a:	7bfb      	ldrb	r3, [r7, #15]
 800926c:	2b03      	cmp	r3, #3
 800926e:	d102      	bne.n	8009276 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8009270:	2301      	movs	r3, #1
 8009272:	75bb      	strb	r3, [r7, #22]
 8009274:	e01f      	b.n	80092b6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8009276:	7bbb      	ldrb	r3, [r7, #14]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d00e      	beq.n	800929a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8009280:	2b05      	cmp	r3, #5
 8009282:	d007      	beq.n	8009294 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8009288:	2b06      	cmp	r3, #6
 800928a:	d003      	beq.n	8009294 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8009290:	2b08      	cmp	r3, #8
 8009292:	d102      	bne.n	800929a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8009294:	2301      	movs	r3, #1
 8009296:	75bb      	strb	r3, [r7, #22]
 8009298:	e00d      	b.n	80092b6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800929a:	7b7b      	ldrb	r3, [r7, #13]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d008      	beq.n	80092b2 <lwip_netconn_do_close_internal+0xe6>
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	8b5b      	ldrh	r3, [r3, #26]
 80092a4:	f003 0310 	and.w	r3, r3, #16
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d002      	beq.n	80092b2 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 80092ac:	2301      	movs	r3, #1
 80092ae:	75bb      	strb	r3, [r7, #22]
 80092b0:	e001      	b.n	80092b6 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 80092b2:	2300      	movs	r3, #0
 80092b4:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 80092b6:	7dbb      	ldrb	r3, [r7, #22]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d003      	beq.n	80092c4 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 80092bc:	2100      	movs	r1, #0
 80092be:	6938      	ldr	r0, [r7, #16]
 80092c0:	f005 f8e6 	bl	800e490 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	7d1b      	ldrb	r3, [r3, #20]
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d104      	bne.n	80092d6 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 80092cc:	2100      	movs	r1, #0
 80092ce:	6938      	ldr	r0, [r7, #16]
 80092d0:	f005 f956 	bl	800e580 <tcp_accept>
 80092d4:	e01d      	b.n	8009312 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 80092d6:	7bbb      	ldrb	r3, [r7, #14]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d007      	beq.n	80092ec <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 80092dc:	2100      	movs	r1, #0
 80092de:	6938      	ldr	r0, [r7, #16]
 80092e0:	f005 f8e8 	bl	800e4b4 <tcp_recv>
      tcp_accept(tpcb, NULL);
 80092e4:	2100      	movs	r1, #0
 80092e6:	6938      	ldr	r0, [r7, #16]
 80092e8:	f005 f94a 	bl	800e580 <tcp_accept>
    }
    if (shut_tx) {
 80092ec:	7b7b      	ldrb	r3, [r7, #13]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d003      	beq.n	80092fa <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 80092f2:	2100      	movs	r1, #0
 80092f4:	6938      	ldr	r0, [r7, #16]
 80092f6:	f005 f8ff 	bl	800e4f8 <tcp_sent>
    }
    if (shut_close) {
 80092fa:	7dbb      	ldrb	r3, [r7, #22]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d008      	beq.n	8009312 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8009300:	2200      	movs	r2, #0
 8009302:	2100      	movs	r1, #0
 8009304:	6938      	ldr	r0, [r7, #16]
 8009306:	f005 f953 	bl	800e5b0 <tcp_poll>
      tcp_err(tpcb, NULL);
 800930a:	2100      	movs	r1, #0
 800930c:	6938      	ldr	r0, [r7, #16]
 800930e:	f005 f915 	bl	800e53c <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8009312:	7dbb      	ldrb	r3, [r7, #22]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d005      	beq.n	8009324 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8009318:	6938      	ldr	r0, [r7, #16]
 800931a:	f003 febb 	bl	800d094 <tcp_close>
 800931e:	4603      	mov	r3, r0
 8009320:	75fb      	strb	r3, [r7, #23]
 8009322:	e007      	b.n	8009334 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8009324:	7bbb      	ldrb	r3, [r7, #14]
 8009326:	7b7a      	ldrb	r2, [r7, #13]
 8009328:	4619      	mov	r1, r3
 800932a:	6938      	ldr	r0, [r7, #16]
 800932c:	f003 fede 	bl	800d0ec <tcp_shutdown>
 8009330:	4603      	mov	r3, r0
 8009332:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8009334:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d102      	bne.n	8009342 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800933c:	2301      	movs	r3, #1
 800933e:	757b      	strb	r3, [r7, #21]
 8009340:	e016      	b.n	8009370 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8009342:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800934a:	d10f      	bne.n	800936c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6a1b      	ldr	r3, [r3, #32]
 8009350:	7a5b      	ldrb	r3, [r3, #9]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d10c      	bne.n	8009370 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8009356:	2301      	movs	r3, #1
 8009358:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800935a:	7dbb      	ldrb	r3, [r7, #22]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d007      	beq.n	8009370 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8009360:	6938      	ldr	r0, [r7, #16]
 8009362:	f003 ffdb 	bl	800d31c <tcp_abort>
          err = ERR_OK;
 8009366:	2300      	movs	r3, #0
 8009368:	75fb      	strb	r3, [r7, #23]
 800936a:	e001      	b.n	8009370 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800936c:	2301      	movs	r3, #1
 800936e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8009370:	7d7b      	ldrb	r3, [r7, #21]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d044      	beq.n	8009400 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6a1b      	ldr	r3, [r3, #32]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	330c      	adds	r3, #12
 800937e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6a1b      	ldr	r3, [r3, #32]
 8009384:	7dfa      	ldrb	r2, [r7, #23]
 8009386:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2200      	movs	r2, #0
 800938c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2200      	movs	r2, #0
 8009392:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8009394:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d129      	bne.n	80093f0 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800939c:	7dbb      	ldrb	r3, [r7, #22]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d00c      	beq.n	80093bc <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2200      	movs	r2, #0
 80093a6:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d005      	beq.n	80093bc <lwip_netconn_do_close_internal+0x1f0>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b4:	2200      	movs	r2, #0
 80093b6:	2104      	movs	r1, #4
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	4798      	blx	r3
      }
      if (shut_rx) {
 80093bc:	7bbb      	ldrb	r3, [r7, #14]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d009      	beq.n	80093d6 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d005      	beq.n	80093d6 <lwip_netconn_do_close_internal+0x20a>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ce:	2200      	movs	r2, #0
 80093d0:	2100      	movs	r1, #0
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	4798      	blx	r3
      }
      if (shut_tx) {
 80093d6:	7b7b      	ldrb	r3, [r7, #13]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d009      	beq.n	80093f0 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d005      	beq.n	80093f0 <lwip_netconn_do_close_internal+0x224>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e8:	2200      	movs	r2, #0
 80093ea:	2102      	movs	r1, #2
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80093f0:	78fb      	ldrb	r3, [r7, #3]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d002      	beq.n	80093fc <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 80093f6:	68b8      	ldr	r0, [r7, #8]
 80093f8:	f00e fd88 	bl	8017f0c <sys_sem_signal>
    }
    return ERR_OK;
 80093fc:	2300      	movs	r3, #0
 80093fe:	e02e      	b.n	800945e <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 8009400:	7d7b      	ldrb	r3, [r7, #21]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d11e      	bne.n	8009444 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	7d1b      	ldrb	r3, [r3, #20]
 800940a:	2b01      	cmp	r3, #1
 800940c:	d106      	bne.n	800941c <lwip_netconn_do_close_internal+0x250>
 800940e:	4b16      	ldr	r3, [pc, #88]	; (8009468 <lwip_netconn_do_close_internal+0x29c>)
 8009410:	f240 4241 	movw	r2, #1089	; 0x441
 8009414:	491b      	ldr	r1, [pc, #108]	; (8009484 <lwip_netconn_do_close_internal+0x2b8>)
 8009416:	4816      	ldr	r0, [pc, #88]	; (8009470 <lwip_netconn_do_close_internal+0x2a4>)
 8009418:	f00e feba 	bl	8018190 <iprintf>
    if (shut_tx) {
 800941c:	7b7b      	ldrb	r3, [r7, #13]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d003      	beq.n	800942a <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 8009422:	4919      	ldr	r1, [pc, #100]	; (8009488 <lwip_netconn_do_close_internal+0x2bc>)
 8009424:	6938      	ldr	r0, [r7, #16]
 8009426:	f005 f867 	bl	800e4f8 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800942a:	2201      	movs	r2, #1
 800942c:	4917      	ldr	r1, [pc, #92]	; (800948c <lwip_netconn_do_close_internal+0x2c0>)
 800942e:	6938      	ldr	r0, [r7, #16]
 8009430:	f005 f8be 	bl	800e5b0 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8009434:	4916      	ldr	r1, [pc, #88]	; (8009490 <lwip_netconn_do_close_internal+0x2c4>)
 8009436:	6938      	ldr	r0, [r7, #16]
 8009438:	f005 f880 	bl	800e53c <tcp_err>
    tcp_arg(tpcb, conn);
 800943c:	6879      	ldr	r1, [r7, #4]
 800943e:	6938      	ldr	r0, [r7, #16]
 8009440:	f005 f826 	bl	800e490 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8009444:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d106      	bne.n	800945a <lwip_netconn_do_close_internal+0x28e>
 800944c:	4b06      	ldr	r3, [pc, #24]	; (8009468 <lwip_netconn_do_close_internal+0x29c>)
 800944e:	f240 424d 	movw	r2, #1101	; 0x44d
 8009452:	4910      	ldr	r1, [pc, #64]	; (8009494 <lwip_netconn_do_close_internal+0x2c8>)
 8009454:	4806      	ldr	r0, [pc, #24]	; (8009470 <lwip_netconn_do_close_internal+0x2a4>)
 8009456:	f00e fe9b 	bl	8018190 <iprintf>
  return err;
 800945a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800945e:	4618      	mov	r0, r3
 8009460:	3718      	adds	r7, #24
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
 8009466:	bf00      	nop
 8009468:	08019900 	.word	0x08019900
 800946c:	08019bd4 	.word	0x08019bd4
 8009470:	08019944 	.word	0x08019944
 8009474:	08019be4 	.word	0x08019be4
 8009478:	08019c04 	.word	0x08019c04
 800947c:	08019c28 	.word	0x08019c28
 8009480:	08019a68 	.word	0x08019a68
 8009484:	08019c3c 	.word	0x08019c3c
 8009488:	08008a45 	.word	0x08008a45
 800948c:	0800897d 	.word	0x0800897d
 8009490:	08008aed 	.word	0x08008aed
 8009494:	08019c60 	.word	0x08019c60

08009498 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b084      	sub	sp, #16
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	785b      	ldrb	r3, [r3, #1]
 80094aa:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 80094ac:	7afb      	ldrb	r3, [r7, #11]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d00d      	beq.n	80094ce <lwip_netconn_do_delconn+0x36>
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	781b      	ldrb	r3, [r3, #0]
 80094b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80094bc:	2b10      	cmp	r3, #16
 80094be:	d006      	beq.n	80094ce <lwip_netconn_do_delconn+0x36>
 80094c0:	4b60      	ldr	r3, [pc, #384]	; (8009644 <lwip_netconn_do_delconn+0x1ac>)
 80094c2:	f240 425f 	movw	r2, #1119	; 0x45f
 80094c6:	4960      	ldr	r1, [pc, #384]	; (8009648 <lwip_netconn_do_delconn+0x1b0>)
 80094c8:	4860      	ldr	r0, [pc, #384]	; (800964c <lwip_netconn_do_delconn+0x1b4>)
 80094ca:	f00e fe61 	bl	8018190 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 80094ce:	7afb      	ldrb	r3, [r7, #11]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d005      	beq.n	80094e0 <lwip_netconn_do_delconn+0x48>
 80094d4:	7afb      	ldrb	r3, [r7, #11]
 80094d6:	2b02      	cmp	r3, #2
 80094d8:	d002      	beq.n	80094e0 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 80094da:	7afb      	ldrb	r3, [r7, #11]
 80094dc:	2b03      	cmp	r3, #3
 80094de:	d109      	bne.n	80094f4 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 80094e0:	7afb      	ldrb	r3, [r7, #11]
 80094e2:	2b03      	cmp	r3, #3
 80094e4:	d10a      	bne.n	80094fc <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	7f1b      	ldrb	r3, [r3, #28]
 80094ec:	f003 0304 	and.w	r3, r3, #4
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d103      	bne.n	80094fc <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	22fb      	movs	r2, #251	; 0xfb
 80094f8:	711a      	strb	r2, [r3, #4]
 80094fa:	e097      	b.n	800962c <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 80094fc:	7afb      	ldrb	r3, [r7, #11]
 80094fe:	2b03      	cmp	r3, #3
 8009500:	d10d      	bne.n	800951e <lwip_netconn_do_delconn+0x86>
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	7f1b      	ldrb	r3, [r3, #28]
 8009508:	f003 0304 	and.w	r3, r3, #4
 800950c:	2b00      	cmp	r3, #0
 800950e:	d106      	bne.n	800951e <lwip_netconn_do_delconn+0x86>
 8009510:	4b4c      	ldr	r3, [pc, #304]	; (8009644 <lwip_netconn_do_delconn+0x1ac>)
 8009512:	f240 427b 	movw	r2, #1147	; 0x47b
 8009516:	494e      	ldr	r1, [pc, #312]	; (8009650 <lwip_netconn_do_delconn+0x1b8>)
 8009518:	484c      	ldr	r0, [pc, #304]	; (800964c <lwip_netconn_do_delconn+0x1b4>)
 800951a:	f00e fe39 	bl	8018190 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2200      	movs	r2, #0
 8009522:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4618      	mov	r0, r3
 800952a:	f7ff fdd1 	bl	80090d0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d05f      	beq.n	80095f8 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	781b      	ldrb	r3, [r3, #0]
 800953e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009542:	2b10      	cmp	r3, #16
 8009544:	d00e      	beq.n	8009564 <lwip_netconn_do_delconn+0xcc>
 8009546:	2b20      	cmp	r3, #32
 8009548:	d000      	beq.n	800954c <lwip_netconn_do_delconn+0xb4>
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
#endif /* LWIP_TCP */
        default:
          break;
 800954a:	e051      	b.n	80095f0 <lwip_netconn_do_delconn+0x158>
          msg->conn->pcb.udp->recv_arg = NULL;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	685b      	ldr	r3, [r3, #4]
 8009552:	2200      	movs	r2, #0
 8009554:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	4618      	mov	r0, r3
 800955e:	f00a f9ef 	bl	8013940 <udp_remove>
          break;
 8009562:	e045      	b.n	80095f0 <lwip_netconn_do_delconn+0x158>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	6a1b      	ldr	r3, [r3, #32]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d006      	beq.n	800957c <lwip_netconn_do_delconn+0xe4>
 800956e:	4b35      	ldr	r3, [pc, #212]	; (8009644 <lwip_netconn_do_delconn+0x1ac>)
 8009570:	f240 4294 	movw	r2, #1172	; 0x494
 8009574:	4937      	ldr	r1, [pc, #220]	; (8009654 <lwip_netconn_do_delconn+0x1bc>)
 8009576:	4835      	ldr	r0, [pc, #212]	; (800964c <lwip_netconn_do_delconn+0x1b4>)
 8009578:	f00e fe0a 	bl	8018190 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	2204      	movs	r2, #4
 8009582:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2203      	movs	r2, #3
 8009588:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	68fa      	ldr	r2, [r7, #12]
 8009590:	621a      	str	r2, [r3, #32]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	2100      	movs	r1, #0
 8009598:	4618      	mov	r0, r3
 800959a:	f7ff fe17 	bl	80091cc <lwip_netconn_do_close_internal>
 800959e:	4603      	mov	r3, r0
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d04a      	beq.n	800963a <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	785b      	ldrb	r3, [r3, #1]
 80095aa:	2b04      	cmp	r3, #4
 80095ac:	d006      	beq.n	80095bc <lwip_netconn_do_delconn+0x124>
 80095ae:	4b25      	ldr	r3, [pc, #148]	; (8009644 <lwip_netconn_do_delconn+0x1ac>)
 80095b0:	f240 429a 	movw	r2, #1178	; 0x49a
 80095b4:	4928      	ldr	r1, [pc, #160]	; (8009658 <lwip_netconn_do_delconn+0x1c0>)
 80095b6:	4825      	ldr	r0, [pc, #148]	; (800964c <lwip_netconn_do_delconn+0x1b4>)
 80095b8:	f00e fdea 	bl	8018190 <iprintf>
            UNLOCK_TCPIP_CORE();
 80095bc:	4827      	ldr	r0, [pc, #156]	; (800965c <lwip_netconn_do_delconn+0x1c4>)
 80095be:	f00e fd16 	bl	8017fee <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	330c      	adds	r3, #12
 80095c8:	2100      	movs	r1, #0
 80095ca:	4618      	mov	r0, r3
 80095cc:	f00e fc6d 	bl	8017eaa <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 80095d0:	4822      	ldr	r0, [pc, #136]	; (800965c <lwip_netconn_do_delconn+0x1c4>)
 80095d2:	f00e fcfd 	bl	8017fd0 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	785b      	ldrb	r3, [r3, #1]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d02c      	beq.n	800963a <lwip_netconn_do_delconn+0x1a2>
 80095e0:	4b18      	ldr	r3, [pc, #96]	; (8009644 <lwip_netconn_do_delconn+0x1ac>)
 80095e2:	f240 429e 	movw	r2, #1182	; 0x49e
 80095e6:	491c      	ldr	r1, [pc, #112]	; (8009658 <lwip_netconn_do_delconn+0x1c0>)
 80095e8:	4818      	ldr	r0, [pc, #96]	; (800964c <lwip_netconn_do_delconn+0x1b4>)
 80095ea:	f00e fdd1 	bl	8018190 <iprintf>
          return;
 80095ee:	e024      	b.n	800963a <lwip_netconn_do_delconn+0x1a2>
      }
      msg->conn->pcb.tcp = NULL;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	2200      	movs	r2, #0
 80095f6:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d007      	beq.n	8009612 <lwip_netconn_do_delconn+0x17a>
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009608:	68fa      	ldr	r2, [r7, #12]
 800960a:	6810      	ldr	r0, [r2, #0]
 800960c:	2200      	movs	r2, #0
 800960e:	2100      	movs	r1, #0
 8009610:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009618:	2b00      	cmp	r3, #0
 800961a:	d007      	beq.n	800962c <lwip_netconn_do_delconn+0x194>
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009622:	68fa      	ldr	r2, [r7, #12]
 8009624:	6810      	ldr	r0, [r2, #0]
 8009626:	2200      	movs	r2, #0
 8009628:	2102      	movs	r1, #2
 800962a:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	330c      	adds	r3, #12
 8009632:	4618      	mov	r0, r3
 8009634:	f00e fc84 	bl	8017f40 <sys_sem_valid>
 8009638:	e000      	b.n	800963c <lwip_netconn_do_delconn+0x1a4>
          return;
 800963a:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800963c:	3710      	adds	r7, #16
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
 8009642:	bf00      	nop
 8009644:	08019900 	.word	0x08019900
 8009648:	08019c70 	.word	0x08019c70
 800964c:	08019944 	.word	0x08019944
 8009650:	08019c84 	.word	0x08019c84
 8009654:	08019ca4 	.word	0x08019ca4
 8009658:	08019cc0 	.word	0x08019cc0
 800965c:	2000c3a0 	.word	0x2000c3a0

08009660 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b084      	sub	sp, #16
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	685b      	ldr	r3, [r3, #4]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d026      	beq.n	80096c4 <lwip_netconn_do_bind+0x64>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	781b      	ldrb	r3, [r3, #0]
 800967c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009680:	2b10      	cmp	r3, #16
 8009682:	d00e      	beq.n	80096a2 <lwip_netconn_do_bind+0x42>
 8009684:	2b20      	cmp	r3, #32
 8009686:	d119      	bne.n	80096bc <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	6858      	ldr	r0, [r3, #4]
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	6899      	ldr	r1, [r3, #8]
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	899b      	ldrh	r3, [r3, #12]
 8009696:	461a      	mov	r2, r3
 8009698:	f00a f83c 	bl	8013714 <udp_bind>
 800969c:	4603      	mov	r3, r0
 800969e:	73fb      	strb	r3, [r7, #15]
        break;
 80096a0:	e012      	b.n	80096c8 <lwip_netconn_do_bind+0x68>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	6858      	ldr	r0, [r3, #4]
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	6899      	ldr	r1, [r3, #8]
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	899b      	ldrh	r3, [r3, #12]
 80096b0:	461a      	mov	r2, r3
 80096b2:	f003 fe3f 	bl	800d334 <tcp_bind>
 80096b6:	4603      	mov	r3, r0
 80096b8:	73fb      	strb	r3, [r7, #15]
        break;
 80096ba:	e005      	b.n	80096c8 <lwip_netconn_do_bind+0x68>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 80096bc:	23fa      	movs	r3, #250	; 0xfa
 80096be:	73fb      	strb	r3, [r7, #15]
        break;
 80096c0:	bf00      	nop
 80096c2:	e001      	b.n	80096c8 <lwip_netconn_do_bind+0x68>
    }
  } else {
    err = ERR_VAL;
 80096c4:	23fa      	movs	r3, #250	; 0xfa
 80096c6:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	7bfa      	ldrb	r2, [r7, #15]
 80096cc:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80096ce:	bf00      	nop
 80096d0:	3710      	adds	r7, #16
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
	...

080096d8 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b086      	sub	sp, #24
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	685b      	ldr	r3, [r3, #4]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d07f      	beq.n	80097ee <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80096f8:	2b10      	cmp	r3, #16
 80096fa:	d175      	bne.n	80097e8 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	785b      	ldrb	r3, [r3, #1]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d165      	bne.n	80097d2 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	7d1b      	ldrb	r3, [r3, #20]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d002      	beq.n	8009718 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 8009712:	23fa      	movs	r3, #250	; 0xfa
 8009714:	72fb      	strb	r3, [r7, #11]
 8009716:	e06c      	b.n	80097f2 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8009718:	23ff      	movs	r3, #255	; 0xff
 800971a:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	f107 020b 	add.w	r2, r7, #11
 8009726:	7cf9      	ldrb	r1, [r7, #19]
 8009728:	4618      	mov	r0, r3
 800972a:	f003 fecd 	bl	800d4c8 <tcp_listen_with_backlog_and_err>
 800972e:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d05d      	beq.n	80097f2 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	3310      	adds	r3, #16
 800973c:	4618      	mov	r0, r3
 800973e:	f00e fb6e 	bl	8017e1e <sys_mbox_valid>
 8009742:	4603      	mov	r3, r0
 8009744:	2b00      	cmp	r3, #0
 8009746:	d00b      	beq.n	8009760 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	3310      	adds	r3, #16
 800974e:	4618      	mov	r0, r3
 8009750:	f00e fade 	bl	8017d10 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	3310      	adds	r3, #16
 800975a:	4618      	mov	r0, r3
 800975c:	f00e fb70 	bl	8017e40 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 8009760:	2300      	movs	r3, #0
 8009762:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	3314      	adds	r3, #20
 800976a:	4618      	mov	r0, r3
 800976c:	f00e fb57 	bl	8017e1e <sys_mbox_valid>
 8009770:	4603      	mov	r3, r0
 8009772:	2b00      	cmp	r3, #0
 8009774:	d108      	bne.n	8009788 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	3314      	adds	r3, #20
 800977c:	2106      	movs	r1, #6
 800977e:	4618      	mov	r0, r3
 8009780:	f00e faa4 	bl	8017ccc <sys_mbox_new>
 8009784:	4603      	mov	r3, r0
 8009786:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8009788:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d118      	bne.n	80097c2 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	2202      	movs	r2, #2
 8009796:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	68fa      	ldr	r2, [r7, #12]
 800979e:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	685a      	ldr	r2, [r3, #4]
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	4619      	mov	r1, r3
 80097ac:	4610      	mov	r0, r2
 80097ae:	f004 fe6f 	bl	800e490 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	4912      	ldr	r1, [pc, #72]	; (8009804 <lwip_netconn_do_listen+0x12c>)
 80097ba:	4618      	mov	r0, r3
 80097bc:	f004 fee0 	bl	800e580 <tcp_accept>
 80097c0:	e017      	b.n	80097f2 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 80097c2:	68f8      	ldr	r0, [r7, #12]
 80097c4:	f003 fc66 	bl	800d094 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	2200      	movs	r2, #0
 80097ce:	605a      	str	r2, [r3, #4]
 80097d0:	e00f      	b.n	80097f2 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	785b      	ldrb	r3, [r3, #1]
 80097d8:	2b02      	cmp	r3, #2
 80097da:	d102      	bne.n	80097e2 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 80097dc:	2300      	movs	r3, #0
 80097de:	72fb      	strb	r3, [r7, #11]
 80097e0:	e007      	b.n	80097f2 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 80097e2:	23f5      	movs	r3, #245	; 0xf5
 80097e4:	72fb      	strb	r3, [r7, #11]
 80097e6:	e004      	b.n	80097f2 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 80097e8:	23f0      	movs	r3, #240	; 0xf0
 80097ea:	72fb      	strb	r3, [r7, #11]
 80097ec:	e001      	b.n	80097f2 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 80097ee:	23f5      	movs	r3, #245	; 0xf5
 80097f0:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 80097f2:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80097fa:	bf00      	nop
 80097fc:	3718      	adds	r7, #24
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}
 8009802:	bf00      	nop
 8009804:	08008ce9 	.word	0x08008ce9

08009808 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b086      	sub	sp, #24
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	2200      	movs	r2, #0
 8009818:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	685b      	ldr	r3, [r3, #4]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d022      	beq.n	800986a <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009824:	693b      	ldr	r3, [r7, #16]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	781b      	ldrb	r3, [r3, #0]
 800982a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800982e:	2b10      	cmp	r3, #16
 8009830:	d11b      	bne.n	800986a <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	689b      	ldr	r3, [r3, #8]
 8009836:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800983e:	d202      	bcs.n	8009846 <lwip_netconn_do_recv+0x3e>
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	b29b      	uxth	r3, r3
 8009844:	e001      	b.n	800984a <lwip_netconn_do_recv+0x42>
 8009846:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800984a:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	89fa      	ldrh	r2, [r7, #14]
 8009854:	4611      	mov	r1, r2
 8009856:	4618      	mov	r0, r3
 8009858:	f003 ff3a 	bl	800d6d0 <tcp_recved>
        remaining -= recved;
 800985c:	89fb      	ldrh	r3, [r7, #14]
 800985e:	697a      	ldr	r2, [r7, #20]
 8009860:	1ad3      	subs	r3, r2, r3
 8009862:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d1e6      	bne.n	8009838 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800986a:	bf00      	nop
 800986c:	3718      	adds	r7, #24
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
	...

08009874 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b088      	sub	sp, #32
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	460b      	mov	r3, r1
 800987e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8009880:	2300      	movs	r3, #0
 8009882:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d106      	bne.n	8009898 <lwip_netconn_do_writemore+0x24>
 800988a:	4b96      	ldr	r3, [pc, #600]	; (8009ae4 <lwip_netconn_do_writemore+0x270>)
 800988c:	f240 6273 	movw	r2, #1651	; 0x673
 8009890:	4995      	ldr	r1, [pc, #596]	; (8009ae8 <lwip_netconn_do_writemore+0x274>)
 8009892:	4896      	ldr	r0, [pc, #600]	; (8009aec <lwip_netconn_do_writemore+0x278>)
 8009894:	f00e fc7c 	bl	8018190 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	785b      	ldrb	r3, [r3, #1]
 800989c:	2b01      	cmp	r3, #1
 800989e:	d006      	beq.n	80098ae <lwip_netconn_do_writemore+0x3a>
 80098a0:	4b90      	ldr	r3, [pc, #576]	; (8009ae4 <lwip_netconn_do_writemore+0x270>)
 80098a2:	f240 6274 	movw	r2, #1652	; 0x674
 80098a6:	4992      	ldr	r1, [pc, #584]	; (8009af0 <lwip_netconn_do_writemore+0x27c>)
 80098a8:	4890      	ldr	r0, [pc, #576]	; (8009aec <lwip_netconn_do_writemore+0x278>)
 80098aa:	f00e fc71 	bl	8018190 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6a1b      	ldr	r3, [r3, #32]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d106      	bne.n	80098c4 <lwip_netconn_do_writemore+0x50>
 80098b6:	4b8b      	ldr	r3, [pc, #556]	; (8009ae4 <lwip_netconn_do_writemore+0x270>)
 80098b8:	f240 6275 	movw	r2, #1653	; 0x675
 80098bc:	498d      	ldr	r1, [pc, #564]	; (8009af4 <lwip_netconn_do_writemore+0x280>)
 80098be:	488b      	ldr	r0, [pc, #556]	; (8009aec <lwip_netconn_do_writemore+0x278>)
 80098c0:	f00e fc66 	bl	8018190 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d106      	bne.n	80098da <lwip_netconn_do_writemore+0x66>
 80098cc:	4b85      	ldr	r3, [pc, #532]	; (8009ae4 <lwip_netconn_do_writemore+0x270>)
 80098ce:	f240 6276 	movw	r2, #1654	; 0x676
 80098d2:	4989      	ldr	r1, [pc, #548]	; (8009af8 <lwip_netconn_do_writemore+0x284>)
 80098d4:	4885      	ldr	r0, [pc, #532]	; (8009aec <lwip_netconn_do_writemore+0x278>)
 80098d6:	f00e fc5b 	bl	8018190 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6a1b      	ldr	r3, [r3, #32]
 80098de:	699a      	ldr	r2, [r3, #24]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6a1b      	ldr	r3, [r3, #32]
 80098e4:	695b      	ldr	r3, [r3, #20]
 80098e6:	429a      	cmp	r2, r3
 80098e8:	d306      	bcc.n	80098f8 <lwip_netconn_do_writemore+0x84>
 80098ea:	4b7e      	ldr	r3, [pc, #504]	; (8009ae4 <lwip_netconn_do_writemore+0x270>)
 80098ec:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 80098f0:	4982      	ldr	r1, [pc, #520]	; (8009afc <lwip_netconn_do_writemore+0x288>)
 80098f2:	487e      	ldr	r0, [pc, #504]	; (8009aec <lwip_netconn_do_writemore+0x278>)
 80098f4:	f00e fc4c 	bl	8018190 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6a1b      	ldr	r3, [r3, #32]
 80098fc:	899b      	ldrh	r3, [r3, #12]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d106      	bne.n	8009910 <lwip_netconn_do_writemore+0x9c>
 8009902:	4b78      	ldr	r3, [pc, #480]	; (8009ae4 <lwip_netconn_do_writemore+0x270>)
 8009904:	f240 6279 	movw	r2, #1657	; 0x679
 8009908:	497d      	ldr	r1, [pc, #500]	; (8009b00 <lwip_netconn_do_writemore+0x28c>)
 800990a:	4878      	ldr	r0, [pc, #480]	; (8009aec <lwip_netconn_do_writemore+0x278>)
 800990c:	f00e fc40 	bl	8018190 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6a1b      	ldr	r3, [r3, #32]
 8009914:	7f1b      	ldrb	r3, [r3, #28]
 8009916:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	7f1b      	ldrb	r3, [r3, #28]
 800991c:	f003 0302 	and.w	r3, r3, #2
 8009920:	2b00      	cmp	r3, #0
 8009922:	d104      	bne.n	800992e <lwip_netconn_do_writemore+0xba>
 8009924:	7ebb      	ldrb	r3, [r7, #26]
 8009926:	f003 0304 	and.w	r3, r3, #4
 800992a:	2b00      	cmp	r3, #0
 800992c:	d001      	beq.n	8009932 <lwip_netconn_do_writemore+0xbe>
 800992e:	2301      	movs	r3, #1
 8009930:	e000      	b.n	8009934 <lwip_netconn_do_writemore+0xc0>
 8009932:	2300      	movs	r3, #0
 8009934:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6a1b      	ldr	r3, [r3, #32]
 800993a:	689b      	ldr	r3, [r3, #8]
 800993c:	681a      	ldr	r2, [r3, #0]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6a1b      	ldr	r3, [r3, #32]
 8009942:	691b      	ldr	r3, [r3, #16]
 8009944:	4413      	add	r3, r2
 8009946:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6a1b      	ldr	r3, [r3, #32]
 800994c:	689b      	ldr	r3, [r3, #8]
 800994e:	685a      	ldr	r2, [r3, #4]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6a1b      	ldr	r3, [r3, #32]
 8009954:	691b      	ldr	r3, [r3, #16]
 8009956:	1ad3      	subs	r3, r2, r3
 8009958:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009960:	d307      	bcc.n	8009972 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8009962:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009966:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009968:	7ebb      	ldrb	r3, [r7, #26]
 800996a:	f043 0302 	orr.w	r3, r3, #2
 800996e:	76bb      	strb	r3, [r7, #26]
 8009970:	e001      	b.n	8009976 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	685b      	ldr	r3, [r3, #4]
 800997a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800997e:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8009980:	89fa      	ldrh	r2, [r7, #14]
 8009982:	8bbb      	ldrh	r3, [r7, #28]
 8009984:	429a      	cmp	r2, r3
 8009986:	d216      	bcs.n	80099b6 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8009988:	89fb      	ldrh	r3, [r7, #14]
 800998a:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800998c:	7e3b      	ldrb	r3, [r7, #24]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d00d      	beq.n	80099ae <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8009992:	8bbb      	ldrh	r3, [r7, #28]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d10e      	bne.n	80099b6 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6a1b      	ldr	r3, [r3, #32]
 800999c:	699b      	ldr	r3, [r3, #24]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d102      	bne.n	80099a8 <lwip_netconn_do_writemore+0x134>
 80099a2:	f06f 0306 	mvn.w	r3, #6
 80099a6:	e000      	b.n	80099aa <lwip_netconn_do_writemore+0x136>
 80099a8:	2300      	movs	r3, #0
 80099aa:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 80099ac:	e07d      	b.n	8009aaa <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 80099ae:	7ebb      	ldrb	r3, [r7, #26]
 80099b0:	f043 0302 	orr.w	r3, r3, #2
 80099b4:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6a1b      	ldr	r3, [r3, #32]
 80099ba:	691a      	ldr	r2, [r3, #16]
 80099bc:	8bbb      	ldrh	r3, [r7, #28]
 80099be:	441a      	add	r2, r3
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6a1b      	ldr	r3, [r3, #32]
 80099c4:	689b      	ldr	r3, [r3, #8]
 80099c6:	685b      	ldr	r3, [r3, #4]
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d906      	bls.n	80099da <lwip_netconn_do_writemore+0x166>
 80099cc:	4b45      	ldr	r3, [pc, #276]	; (8009ae4 <lwip_netconn_do_writemore+0x270>)
 80099ce:	f240 62a4 	movw	r2, #1700	; 0x6a4
 80099d2:	494c      	ldr	r1, [pc, #304]	; (8009b04 <lwip_netconn_do_writemore+0x290>)
 80099d4:	4845      	ldr	r0, [pc, #276]	; (8009aec <lwip_netconn_do_writemore+0x278>)
 80099d6:	f00e fbdb 	bl	8018190 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 80099da:	8bbb      	ldrh	r3, [r7, #28]
 80099dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d103      	bne.n	80099ec <lwip_netconn_do_writemore+0x178>
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099ea:	d209      	bcs.n	8009a00 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 80099f0:	8bba      	ldrh	r2, [r7, #28]
 80099f2:	429a      	cmp	r2, r3
 80099f4:	d10b      	bne.n	8009a0e <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6a1b      	ldr	r3, [r3, #32]
 80099fa:	899b      	ldrh	r3, [r3, #12]
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d906      	bls.n	8009a0e <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8009a00:	2301      	movs	r3, #1
 8009a02:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009a04:	7ebb      	ldrb	r3, [r7, #26]
 8009a06:	f043 0302 	orr.w	r3, r3, #2
 8009a0a:	76bb      	strb	r3, [r7, #26]
 8009a0c:	e001      	b.n	8009a12 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6858      	ldr	r0, [r3, #4]
 8009a16:	7ebb      	ldrb	r3, [r7, #26]
 8009a18:	8bba      	ldrh	r2, [r7, #28]
 8009a1a:	6979      	ldr	r1, [r7, #20]
 8009a1c:	f007 fc74 	bl	8011308 <tcp_write>
 8009a20:	4603      	mov	r3, r0
 8009a22:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8009a24:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d12c      	bne.n	8009a86 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6a1b      	ldr	r3, [r3, #32]
 8009a30:	6999      	ldr	r1, [r3, #24]
 8009a32:	8bba      	ldrh	r2, [r7, #28]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6a1b      	ldr	r3, [r3, #32]
 8009a38:	440a      	add	r2, r1
 8009a3a:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6a1b      	ldr	r3, [r3, #32]
 8009a40:	6919      	ldr	r1, [r3, #16]
 8009a42:	8bba      	ldrh	r2, [r7, #28]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6a1b      	ldr	r3, [r3, #32]
 8009a48:	440a      	add	r2, r1
 8009a4a:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6a1b      	ldr	r3, [r3, #32]
 8009a50:	691a      	ldr	r2, [r3, #16]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6a1b      	ldr	r3, [r3, #32]
 8009a56:	689b      	ldr	r3, [r3, #8]
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	d113      	bne.n	8009a86 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6a1b      	ldr	r3, [r3, #32]
 8009a62:	899a      	ldrh	r2, [r3, #12]
 8009a64:	3a01      	subs	r2, #1
 8009a66:	b292      	uxth	r2, r2
 8009a68:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6a1b      	ldr	r3, [r3, #32]
 8009a6e:	899b      	ldrh	r3, [r3, #12]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d008      	beq.n	8009a86 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6a1b      	ldr	r3, [r3, #32]
 8009a78:	689a      	ldr	r2, [r3, #8]
 8009a7a:	3208      	adds	r2, #8
 8009a7c:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6a1b      	ldr	r3, [r3, #32]
 8009a82:	2200      	movs	r2, #0
 8009a84:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8009a86:	7e7b      	ldrb	r3, [r7, #25]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d004      	beq.n	8009a96 <lwip_netconn_do_writemore+0x222>
 8009a8c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	f43f af50 	beq.w	8009936 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8009a96:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d004      	beq.n	8009aa8 <lwip_netconn_do_writemore+0x234>
 8009a9e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aa6:	d146      	bne.n	8009b36 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8009aa8:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8009aaa:	7e3b      	ldrb	r3, [r7, #24]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d02b      	beq.n	8009b08 <lwip_netconn_do_writemore+0x294>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6a1b      	ldr	r3, [r3, #32]
 8009ab4:	699a      	ldr	r2, [r3, #24]
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6a1b      	ldr	r3, [r3, #32]
 8009aba:	695b      	ldr	r3, [r3, #20]
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d223      	bcs.n	8009b08 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d005      	beq.n	8009ad4 <lwip_netconn_do_writemore+0x260>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009acc:	2200      	movs	r2, #0
 8009ace:	2103      	movs	r1, #3
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	7f1b      	ldrb	r3, [r3, #28]
 8009ad8:	f043 0310 	orr.w	r3, r3, #16
 8009adc:	b2da      	uxtb	r2, r3
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	771a      	strb	r2, [r3, #28]
 8009ae2:	e028      	b.n	8009b36 <lwip_netconn_do_writemore+0x2c2>
 8009ae4:	08019900 	.word	0x08019900
 8009ae8:	08019a58 	.word	0x08019a58
 8009aec:	08019944 	.word	0x08019944
 8009af0:	08019d60 	.word	0x08019d60
 8009af4:	08019a68 	.word	0x08019a68
 8009af8:	08019d80 	.word	0x08019d80
 8009afc:	08019d98 	.word	0x08019d98
 8009b00:	08019dd8 	.word	0x08019dd8
 8009b04:	08019e00 	.word	0x08019e00
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009b10:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8009b14:	d305      	bcc.n	8009b22 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	685b      	ldr	r3, [r3, #4]
 8009b1a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8009b1e:	2b04      	cmp	r3, #4
 8009b20:	d909      	bls.n	8009b36 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d005      	beq.n	8009b36 <lwip_netconn_do_writemore+0x2c2>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b2e:	2200      	movs	r2, #0
 8009b30:	2103      	movs	r1, #3
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8009b36:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d11d      	bne.n	8009b7a <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6a1b      	ldr	r3, [r3, #32]
 8009b42:	699a      	ldr	r2, [r3, #24]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6a1b      	ldr	r3, [r3, #32]
 8009b48:	695b      	ldr	r3, [r3, #20]
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d002      	beq.n	8009b54 <lwip_netconn_do_writemore+0x2e0>
 8009b4e:	7e3b      	ldrb	r3, [r7, #24]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d001      	beq.n	8009b58 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8009b54:	2301      	movs	r3, #1
 8009b56:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	685b      	ldr	r3, [r3, #4]
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f008 f9bf 	bl	8011ee0 <tcp_output>
 8009b62:	4603      	mov	r3, r0
 8009b64:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8009b66:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8009b6a:	f113 0f04 	cmn.w	r3, #4
 8009b6e:	d12c      	bne.n	8009bca <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8009b70:	7b3b      	ldrb	r3, [r7, #12]
 8009b72:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009b74:	2301      	movs	r3, #1
 8009b76:	76fb      	strb	r3, [r7, #27]
 8009b78:	e027      	b.n	8009bca <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8009b7a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b82:	d120      	bne.n	8009bc6 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f008 f9a9 	bl	8011ee0 <tcp_output>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8009b92:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009b96:	f113 0f04 	cmn.w	r3, #4
 8009b9a:	d104      	bne.n	8009ba6 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8009b9c:	7b7b      	ldrb	r3, [r7, #13]
 8009b9e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	76fb      	strb	r3, [r7, #27]
 8009ba4:	e011      	b.n	8009bca <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8009ba6:	7e3b      	ldrb	r3, [r7, #24]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d00e      	beq.n	8009bca <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6a1b      	ldr	r3, [r3, #32]
 8009bb0:	699b      	ldr	r3, [r3, #24]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d102      	bne.n	8009bbc <lwip_netconn_do_writemore+0x348>
 8009bb6:	f06f 0306 	mvn.w	r3, #6
 8009bba:	e000      	b.n	8009bbe <lwip_netconn_do_writemore+0x34a>
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	76fb      	strb	r3, [r7, #27]
 8009bc4:	e001      	b.n	8009bca <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8009bca:	7efb      	ldrb	r3, [r7, #27]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d015      	beq.n	8009bfc <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6a1b      	ldr	r3, [r3, #32]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	330c      	adds	r3, #12
 8009bd8:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6a1b      	ldr	r3, [r3, #32]
 8009bde:	7ffa      	ldrb	r2, [r7, #31]
 8009be0:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2200      	movs	r2, #0
 8009be6:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2200      	movs	r2, #0
 8009bec:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8009bee:	78fb      	ldrb	r3, [r7, #3]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d006      	beq.n	8009c02 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8009bf4:	68b8      	ldr	r0, [r7, #8]
 8009bf6:	f00e f989 	bl	8017f0c <sys_sem_signal>
 8009bfa:	e002      	b.n	8009c02 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8009bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8009c00:	e000      	b.n	8009c04 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 8009c02:	2300      	movs	r3, #0
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3720      	adds	r7, #32
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}

08009c0c <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b084      	sub	sp, #16
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f7fe fd22 	bl	8008666 <netconn_err>
 8009c22:	4603      	mov	r3, r0
 8009c24:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8009c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d166      	bne.n	8009cfc <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	781b      	ldrb	r3, [r3, #0]
 8009c34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c38:	2b10      	cmp	r3, #16
 8009c3a:	d15d      	bne.n	8009cf8 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	785b      	ldrb	r3, [r3, #1]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d002      	beq.n	8009c4c <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8009c46:	23fb      	movs	r3, #251	; 0xfb
 8009c48:	73fb      	strb	r3, [r7, #15]
 8009c4a:	e057      	b.n	8009cfc <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d04d      	beq.n	8009cf2 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2201      	movs	r2, #1
 8009c5c:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	6a1b      	ldr	r3, [r3, #32]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d006      	beq.n	8009c76 <lwip_netconn_do_write+0x6a>
 8009c68:	4b28      	ldr	r3, [pc, #160]	; (8009d0c <lwip_netconn_do_write+0x100>)
 8009c6a:	f240 7223 	movw	r2, #1827	; 0x723
 8009c6e:	4928      	ldr	r1, [pc, #160]	; (8009d10 <lwip_netconn_do_write+0x104>)
 8009c70:	4828      	ldr	r0, [pc, #160]	; (8009d14 <lwip_netconn_do_write+0x108>)
 8009c72:	f00e fa8d 	bl	8018190 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	695b      	ldr	r3, [r3, #20]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d106      	bne.n	8009c8c <lwip_netconn_do_write+0x80>
 8009c7e:	4b23      	ldr	r3, [pc, #140]	; (8009d0c <lwip_netconn_do_write+0x100>)
 8009c80:	f240 7224 	movw	r2, #1828	; 0x724
 8009c84:	4924      	ldr	r1, [pc, #144]	; (8009d18 <lwip_netconn_do_write+0x10c>)
 8009c86:	4823      	ldr	r0, [pc, #140]	; (8009d14 <lwip_netconn_do_write+0x108>)
 8009c88:	f00e fa82 	bl	8018190 <iprintf>
        msg->conn->current_msg = msg;
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	68ba      	ldr	r2, [r7, #8]
 8009c92:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	2100      	movs	r1, #0
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f7ff fdea 	bl	8009874 <lwip_netconn_do_writemore>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d02e      	beq.n	8009d04 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	785b      	ldrb	r3, [r3, #1]
 8009cac:	2b01      	cmp	r3, #1
 8009cae:	d006      	beq.n	8009cbe <lwip_netconn_do_write+0xb2>
 8009cb0:	4b16      	ldr	r3, [pc, #88]	; (8009d0c <lwip_netconn_do_write+0x100>)
 8009cb2:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8009cb6:	4919      	ldr	r1, [pc, #100]	; (8009d1c <lwip_netconn_do_write+0x110>)
 8009cb8:	4816      	ldr	r0, [pc, #88]	; (8009d14 <lwip_netconn_do_write+0x108>)
 8009cba:	f00e fa69 	bl	8018190 <iprintf>
          UNLOCK_TCPIP_CORE();
 8009cbe:	4818      	ldr	r0, [pc, #96]	; (8009d20 <lwip_netconn_do_write+0x114>)
 8009cc0:	f00e f995 	bl	8017fee <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	330c      	adds	r3, #12
 8009cca:	2100      	movs	r1, #0
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f00e f8ec 	bl	8017eaa <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8009cd2:	4813      	ldr	r0, [pc, #76]	; (8009d20 <lwip_netconn_do_write+0x114>)
 8009cd4:	f00e f97c 	bl	8017fd0 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	785b      	ldrb	r3, [r3, #1]
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d110      	bne.n	8009d04 <lwip_netconn_do_write+0xf8>
 8009ce2:	4b0a      	ldr	r3, [pc, #40]	; (8009d0c <lwip_netconn_do_write+0x100>)
 8009ce4:	f240 722c 	movw	r2, #1836	; 0x72c
 8009ce8:	490c      	ldr	r1, [pc, #48]	; (8009d1c <lwip_netconn_do_write+0x110>)
 8009cea:	480a      	ldr	r0, [pc, #40]	; (8009d14 <lwip_netconn_do_write+0x108>)
 8009cec:	f00e fa50 	bl	8018190 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8009cf0:	e008      	b.n	8009d04 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 8009cf2:	23f5      	movs	r3, #245	; 0xf5
 8009cf4:	73fb      	strb	r3, [r7, #15]
 8009cf6:	e001      	b.n	8009cfc <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8009cf8:	23fa      	movs	r3, #250	; 0xfa
 8009cfa:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	7bfa      	ldrb	r2, [r7, #15]
 8009d00:	711a      	strb	r2, [r3, #4]
 8009d02:	e000      	b.n	8009d06 <lwip_netconn_do_write+0xfa>
        return;
 8009d04:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 8009d06:	3710      	adds	r7, #16
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}
 8009d0c:	08019900 	.word	0x08019900
 8009d10:	08019ca4 	.word	0x08019ca4
 8009d14:	08019944 	.word	0x08019944
 8009d18:	08019e2c 	.word	0x08019e2c
 8009d1c:	08019cc0 	.word	0x08019cc0
 8009d20:	2000c3a0 	.word	0x2000c3a0

08009d24 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b084      	sub	sp, #16
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	785b      	ldrb	r3, [r3, #1]
 8009d36:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d069      	beq.n	8009e16 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	781b      	ldrb	r3, [r3, #0]
 8009d48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8009d4c:	2b10      	cmp	r3, #16
 8009d4e:	d162      	bne.n	8009e16 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8009d54:	2b03      	cmp	r3, #3
 8009d56:	d002      	beq.n	8009d5e <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8009d58:	7afb      	ldrb	r3, [r7, #11]
 8009d5a:	2b02      	cmp	r3, #2
 8009d5c:	d05b      	beq.n	8009e16 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8009d5e:	7afb      	ldrb	r3, [r7, #11]
 8009d60:	2b03      	cmp	r3, #3
 8009d62:	d103      	bne.n	8009d6c <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	22f5      	movs	r2, #245	; 0xf5
 8009d68:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8009d6a:	e059      	b.n	8009e20 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8009d6c:	7afb      	ldrb	r3, [r7, #11]
 8009d6e:	2b01      	cmp	r3, #1
 8009d70:	d103      	bne.n	8009d7a <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	22fb      	movs	r2, #251	; 0xfb
 8009d76:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8009d78:	e052      	b.n	8009e20 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	7a1b      	ldrb	r3, [r3, #8]
 8009d7e:	f003 0301 	and.w	r3, r3, #1
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d004      	beq.n	8009d90 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f7ff f9a0 	bl	80090d0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	6a1b      	ldr	r3, [r3, #32]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d006      	beq.n	8009da8 <lwip_netconn_do_close+0x84>
 8009d9a:	4b23      	ldr	r3, [pc, #140]	; (8009e28 <lwip_netconn_do_close+0x104>)
 8009d9c:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8009da0:	4922      	ldr	r1, [pc, #136]	; (8009e2c <lwip_netconn_do_close+0x108>)
 8009da2:	4823      	ldr	r0, [pc, #140]	; (8009e30 <lwip_netconn_do_close+0x10c>)
 8009da4:	f00e f9f4 	bl	8018190 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	2204      	movs	r2, #4
 8009dae:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	68fa      	ldr	r2, [r7, #12]
 8009db6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	2100      	movs	r1, #0
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f7ff fa04 	bl	80091cc <lwip_netconn_do_close_internal>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d029      	beq.n	8009e1e <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	785b      	ldrb	r3, [r3, #1]
 8009dd0:	2b04      	cmp	r3, #4
 8009dd2:	d006      	beq.n	8009de2 <lwip_netconn_do_close+0xbe>
 8009dd4:	4b14      	ldr	r3, [pc, #80]	; (8009e28 <lwip_netconn_do_close+0x104>)
 8009dd6:	f240 72c2 	movw	r2, #1986	; 0x7c2
 8009dda:	4916      	ldr	r1, [pc, #88]	; (8009e34 <lwip_netconn_do_close+0x110>)
 8009ddc:	4814      	ldr	r0, [pc, #80]	; (8009e30 <lwip_netconn_do_close+0x10c>)
 8009dde:	f00e f9d7 	bl	8018190 <iprintf>
        UNLOCK_TCPIP_CORE();
 8009de2:	4815      	ldr	r0, [pc, #84]	; (8009e38 <lwip_netconn_do_close+0x114>)
 8009de4:	f00e f903 	bl	8017fee <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	330c      	adds	r3, #12
 8009dee:	2100      	movs	r1, #0
 8009df0:	4618      	mov	r0, r3
 8009df2:	f00e f85a 	bl	8017eaa <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8009df6:	4810      	ldr	r0, [pc, #64]	; (8009e38 <lwip_netconn_do_close+0x114>)
 8009df8:	f00e f8ea 	bl	8017fd0 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	785b      	ldrb	r3, [r3, #1]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d00b      	beq.n	8009e1e <lwip_netconn_do_close+0xfa>
 8009e06:	4b08      	ldr	r3, [pc, #32]	; (8009e28 <lwip_netconn_do_close+0x104>)
 8009e08:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8009e0c:	4909      	ldr	r1, [pc, #36]	; (8009e34 <lwip_netconn_do_close+0x110>)
 8009e0e:	4808      	ldr	r0, [pc, #32]	; (8009e30 <lwip_netconn_do_close+0x10c>)
 8009e10:	f00e f9be 	bl	8018190 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8009e14:	e003      	b.n	8009e1e <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	22f5      	movs	r2, #245	; 0xf5
 8009e1a:	711a      	strb	r2, [r3, #4]
 8009e1c:	e000      	b.n	8009e20 <lwip_netconn_do_close+0xfc>
      return;
 8009e1e:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8009e20:	3710      	adds	r7, #16
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}
 8009e26:	bf00      	nop
 8009e28:	08019900 	.word	0x08019900
 8009e2c:	08019ca4 	.word	0x08019ca4
 8009e30:	08019944 	.word	0x08019944
 8009e34:	08019cc0 	.word	0x08019cc0
 8009e38:	2000c3a0 	.word	0x2000c3a0

08009e3c <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b082      	sub	sp, #8
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d013      	beq.n	8009e72 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d00b      	beq.n	8009e6a <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	4618      	mov	r0, r3
 8009e58:	f002 fc6a 	bl	800c730 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	605a      	str	r2, [r3, #4]
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	685a      	ldr	r2, [r3, #4]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8009e6a:	6879      	ldr	r1, [r7, #4]
 8009e6c:	2006      	movs	r0, #6
 8009e6e:	f001 fe31 	bl	800bad4 <memp_free>
  }
}
 8009e72:	bf00      	nop
 8009e74:	3708      	adds	r7, #8
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}
	...

08009e7c <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b084      	sub	sp, #16
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	60f8      	str	r0, [r7, #12]
 8009e84:	60b9      	str	r1, [r7, #8]
 8009e86:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d108      	bne.n	8009ea0 <netbuf_data+0x24>
 8009e8e:	4b1b      	ldr	r3, [pc, #108]	; (8009efc <netbuf_data+0x80>)
 8009e90:	22c6      	movs	r2, #198	; 0xc6
 8009e92:	491b      	ldr	r1, [pc, #108]	; (8009f00 <netbuf_data+0x84>)
 8009e94:	481b      	ldr	r0, [pc, #108]	; (8009f04 <netbuf_data+0x88>)
 8009e96:	f00e f97b 	bl	8018190 <iprintf>
 8009e9a:	f06f 030f 	mvn.w	r3, #15
 8009e9e:	e029      	b.n	8009ef4 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d108      	bne.n	8009eb8 <netbuf_data+0x3c>
 8009ea6:	4b15      	ldr	r3, [pc, #84]	; (8009efc <netbuf_data+0x80>)
 8009ea8:	22c7      	movs	r2, #199	; 0xc7
 8009eaa:	4917      	ldr	r1, [pc, #92]	; (8009f08 <netbuf_data+0x8c>)
 8009eac:	4815      	ldr	r0, [pc, #84]	; (8009f04 <netbuf_data+0x88>)
 8009eae:	f00e f96f 	bl	8018190 <iprintf>
 8009eb2:	f06f 030f 	mvn.w	r3, #15
 8009eb6:	e01d      	b.n	8009ef4 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d108      	bne.n	8009ed0 <netbuf_data+0x54>
 8009ebe:	4b0f      	ldr	r3, [pc, #60]	; (8009efc <netbuf_data+0x80>)
 8009ec0:	22c8      	movs	r2, #200	; 0xc8
 8009ec2:	4912      	ldr	r1, [pc, #72]	; (8009f0c <netbuf_data+0x90>)
 8009ec4:	480f      	ldr	r0, [pc, #60]	; (8009f04 <netbuf_data+0x88>)
 8009ec6:	f00e f963 	bl	8018190 <iprintf>
 8009eca:	f06f 030f 	mvn.w	r3, #15
 8009ece:	e011      	b.n	8009ef4 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d102      	bne.n	8009ede <netbuf_data+0x62>
    return ERR_BUF;
 8009ed8:	f06f 0301 	mvn.w	r3, #1
 8009edc:	e00a      	b.n	8009ef4 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	685b      	ldr	r3, [r3, #4]
 8009ee2:	685a      	ldr	r2, [r3, #4]
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	685b      	ldr	r3, [r3, #4]
 8009eec:	895a      	ldrh	r2, [r3, #10]
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 8009ef2:	2300      	movs	r3, #0
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3710      	adds	r7, #16
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}
 8009efc:	08019e58 	.word	0x08019e58
 8009f00:	08019f60 	.word	0x08019f60
 8009f04:	08019ea8 	.word	0x08019ea8
 8009f08:	08019f7c 	.word	0x08019f7c
 8009f0c:	08019f9c 	.word	0x08019f9c

08009f10 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b082      	sub	sp, #8
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d108      	bne.n	8009f30 <netbuf_next+0x20>
 8009f1e:	4b11      	ldr	r3, [pc, #68]	; (8009f64 <netbuf_next+0x54>)
 8009f20:	22e0      	movs	r2, #224	; 0xe0
 8009f22:	4911      	ldr	r1, [pc, #68]	; (8009f68 <netbuf_next+0x58>)
 8009f24:	4811      	ldr	r0, [pc, #68]	; (8009f6c <netbuf_next+0x5c>)
 8009f26:	f00e f933 	bl	8018190 <iprintf>
 8009f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8009f2e:	e014      	b.n	8009f5a <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d102      	bne.n	8009f40 <netbuf_next+0x30>
    return -1;
 8009f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8009f3e:	e00c      	b.n	8009f5a <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	685b      	ldr	r3, [r3, #4]
 8009f44:	681a      	ldr	r2, [r3, #0]
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	685b      	ldr	r3, [r3, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d101      	bne.n	8009f58 <netbuf_next+0x48>
    return 1;
 8009f54:	2301      	movs	r3, #1
 8009f56:	e000      	b.n	8009f5a <netbuf_next+0x4a>
  }
  return 0;
 8009f58:	2300      	movs	r3, #0
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	3708      	adds	r7, #8
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}
 8009f62:	bf00      	nop
 8009f64:	08019e58 	.word	0x08019e58
 8009f68:	08019fb8 	.word	0x08019fb8
 8009f6c:	08019ea8 	.word	0x08019ea8

08009f70 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b084      	sub	sp, #16
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8009f7a:	f009 f877 	bl	801306c <sys_timeouts_sleeptime>
 8009f7e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f86:	d10b      	bne.n	8009fa0 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8009f88:	4813      	ldr	r0, [pc, #76]	; (8009fd8 <tcpip_timeouts_mbox_fetch+0x68>)
 8009f8a:	f00e f830 	bl	8017fee <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8009f8e:	2200      	movs	r2, #0
 8009f90:	6839      	ldr	r1, [r7, #0]
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f00d fee8 	bl	8017d68 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8009f98:	480f      	ldr	r0, [pc, #60]	; (8009fd8 <tcpip_timeouts_mbox_fetch+0x68>)
 8009f9a:	f00e f819 	bl	8017fd0 <sys_mutex_lock>
    return;
 8009f9e:	e018      	b.n	8009fd2 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d102      	bne.n	8009fac <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8009fa6:	f009 f827 	bl	8012ff8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009faa:	e7e6      	b.n	8009f7a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8009fac:	480a      	ldr	r0, [pc, #40]	; (8009fd8 <tcpip_timeouts_mbox_fetch+0x68>)
 8009fae:	f00e f81e 	bl	8017fee <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8009fb2:	68fa      	ldr	r2, [r7, #12]
 8009fb4:	6839      	ldr	r1, [r7, #0]
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f00d fed6 	bl	8017d68 <sys_arch_mbox_fetch>
 8009fbc:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8009fbe:	4806      	ldr	r0, [pc, #24]	; (8009fd8 <tcpip_timeouts_mbox_fetch+0x68>)
 8009fc0:	f00e f806 	bl	8017fd0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fca:	d102      	bne.n	8009fd2 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8009fcc:	f009 f814 	bl	8012ff8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009fd0:	e7d3      	b.n	8009f7a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8009fd2:	3710      	adds	r7, #16
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}
 8009fd8:	2000c3a0 	.word	0x2000c3a0

08009fdc <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b084      	sub	sp, #16
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8009fe4:	4810      	ldr	r0, [pc, #64]	; (800a028 <tcpip_thread+0x4c>)
 8009fe6:	f00d fff3 	bl	8017fd0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8009fea:	4b10      	ldr	r3, [pc, #64]	; (800a02c <tcpip_thread+0x50>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d005      	beq.n	8009ffe <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8009ff2:	4b0e      	ldr	r3, [pc, #56]	; (800a02c <tcpip_thread+0x50>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	4a0e      	ldr	r2, [pc, #56]	; (800a030 <tcpip_thread+0x54>)
 8009ff8:	6812      	ldr	r2, [r2, #0]
 8009ffa:	4610      	mov	r0, r2
 8009ffc:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009ffe:	f107 030c 	add.w	r3, r7, #12
 800a002:	4619      	mov	r1, r3
 800a004:	480b      	ldr	r0, [pc, #44]	; (800a034 <tcpip_thread+0x58>)
 800a006:	f7ff ffb3 	bl	8009f70 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d106      	bne.n	800a01e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a010:	4b09      	ldr	r3, [pc, #36]	; (800a038 <tcpip_thread+0x5c>)
 800a012:	2291      	movs	r2, #145	; 0x91
 800a014:	4909      	ldr	r1, [pc, #36]	; (800a03c <tcpip_thread+0x60>)
 800a016:	480a      	ldr	r0, [pc, #40]	; (800a040 <tcpip_thread+0x64>)
 800a018:	f00e f8ba 	bl	8018190 <iprintf>
      continue;
 800a01c:	e003      	b.n	800a026 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	4618      	mov	r0, r3
 800a022:	f000 f80f 	bl	800a044 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a026:	e7ea      	b.n	8009ffe <tcpip_thread+0x22>
 800a028:	2000c3a0 	.word	0x2000c3a0
 800a02c:	200087b8 	.word	0x200087b8
 800a030:	200087bc 	.word	0x200087bc
 800a034:	200087c0 	.word	0x200087c0
 800a038:	08019ff0 	.word	0x08019ff0
 800a03c:	0801a020 	.word	0x0801a020
 800a040:	0801a040 	.word	0x0801a040

0800a044 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b082      	sub	sp, #8
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	781b      	ldrb	r3, [r3, #0]
 800a050:	2b01      	cmp	r3, #1
 800a052:	d018      	beq.n	800a086 <tcpip_thread_handle_msg+0x42>
 800a054:	2b02      	cmp	r3, #2
 800a056:	d021      	beq.n	800a09c <tcpip_thread_handle_msg+0x58>
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d126      	bne.n	800a0aa <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	68db      	ldr	r3, [r3, #12]
 800a060:	687a      	ldr	r2, [r7, #4]
 800a062:	6850      	ldr	r0, [r2, #4]
 800a064:	687a      	ldr	r2, [r7, #4]
 800a066:	6892      	ldr	r2, [r2, #8]
 800a068:	4611      	mov	r1, r2
 800a06a:	4798      	blx	r3
 800a06c:	4603      	mov	r3, r0
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d004      	beq.n	800a07c <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	685b      	ldr	r3, [r3, #4]
 800a076:	4618      	mov	r0, r3
 800a078:	f002 fb5a 	bl	800c730 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a07c:	6879      	ldr	r1, [r7, #4]
 800a07e:	2009      	movs	r0, #9
 800a080:	f001 fd28 	bl	800bad4 <memp_free>
      break;
 800a084:	e018      	b.n	800a0b8 <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	685b      	ldr	r3, [r3, #4]
 800a08a:	687a      	ldr	r2, [r7, #4]
 800a08c:	6892      	ldr	r2, [r2, #8]
 800a08e:	4610      	mov	r0, r2
 800a090:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800a092:	6879      	ldr	r1, [r7, #4]
 800a094:	2008      	movs	r0, #8
 800a096:	f001 fd1d 	bl	800bad4 <memp_free>
      break;
 800a09a:	e00d      	b.n	800a0b8 <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	685b      	ldr	r3, [r3, #4]
 800a0a0:	687a      	ldr	r2, [r7, #4]
 800a0a2:	6892      	ldr	r2, [r2, #8]
 800a0a4:	4610      	mov	r0, r2
 800a0a6:	4798      	blx	r3
      break;
 800a0a8:	e006      	b.n	800a0b8 <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a0aa:	4b05      	ldr	r3, [pc, #20]	; (800a0c0 <tcpip_thread_handle_msg+0x7c>)
 800a0ac:	22cf      	movs	r2, #207	; 0xcf
 800a0ae:	4905      	ldr	r1, [pc, #20]	; (800a0c4 <tcpip_thread_handle_msg+0x80>)
 800a0b0:	4805      	ldr	r0, [pc, #20]	; (800a0c8 <tcpip_thread_handle_msg+0x84>)
 800a0b2:	f00e f86d 	bl	8018190 <iprintf>
      break;
 800a0b6:	bf00      	nop
  }
}
 800a0b8:	bf00      	nop
 800a0ba:	3708      	adds	r7, #8
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}
 800a0c0:	08019ff0 	.word	0x08019ff0
 800a0c4:	0801a020 	.word	0x0801a020
 800a0c8:	0801a040 	.word	0x0801a040

0800a0cc <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b086      	sub	sp, #24
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	60f8      	str	r0, [r7, #12]
 800a0d4:	60b9      	str	r1, [r7, #8]
 800a0d6:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a0d8:	481a      	ldr	r0, [pc, #104]	; (800a144 <tcpip_inpkt+0x78>)
 800a0da:	f00d fea0 	bl	8017e1e <sys_mbox_valid>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d105      	bne.n	800a0f0 <tcpip_inpkt+0x24>
 800a0e4:	4b18      	ldr	r3, [pc, #96]	; (800a148 <tcpip_inpkt+0x7c>)
 800a0e6:	22fc      	movs	r2, #252	; 0xfc
 800a0e8:	4918      	ldr	r1, [pc, #96]	; (800a14c <tcpip_inpkt+0x80>)
 800a0ea:	4819      	ldr	r0, [pc, #100]	; (800a150 <tcpip_inpkt+0x84>)
 800a0ec:	f00e f850 	bl	8018190 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800a0f0:	2009      	movs	r0, #9
 800a0f2:	f001 fc9d 	bl	800ba30 <memp_malloc>
 800a0f6:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d102      	bne.n	800a104 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800a0fe:	f04f 33ff 	mov.w	r3, #4294967295
 800a102:	e01a      	b.n	800a13a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	2200      	movs	r2, #0
 800a108:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	68fa      	ldr	r2, [r7, #12]
 800a10e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	68ba      	ldr	r2, [r7, #8]
 800a114:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	687a      	ldr	r2, [r7, #4]
 800a11a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a11c:	6979      	ldr	r1, [r7, #20]
 800a11e:	4809      	ldr	r0, [pc, #36]	; (800a144 <tcpip_inpkt+0x78>)
 800a120:	f00d fe08 	bl	8017d34 <sys_mbox_trypost>
 800a124:	4603      	mov	r3, r0
 800a126:	2b00      	cmp	r3, #0
 800a128:	d006      	beq.n	800a138 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a12a:	6979      	ldr	r1, [r7, #20]
 800a12c:	2009      	movs	r0, #9
 800a12e:	f001 fcd1 	bl	800bad4 <memp_free>
    return ERR_MEM;
 800a132:	f04f 33ff 	mov.w	r3, #4294967295
 800a136:	e000      	b.n	800a13a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800a138:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3718      	adds	r7, #24
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}
 800a142:	bf00      	nop
 800a144:	200087c0 	.word	0x200087c0
 800a148:	08019ff0 	.word	0x08019ff0
 800a14c:	0801a068 	.word	0x0801a068
 800a150:	0801a040 	.word	0x0801a040

0800a154 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b082      	sub	sp, #8
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
 800a15c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a164:	f003 0318 	and.w	r3, r3, #24
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d006      	beq.n	800a17a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800a16c:	4a08      	ldr	r2, [pc, #32]	; (800a190 <tcpip_input+0x3c>)
 800a16e:	6839      	ldr	r1, [r7, #0]
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f7ff ffab 	bl	800a0cc <tcpip_inpkt>
 800a176:	4603      	mov	r3, r0
 800a178:	e005      	b.n	800a186 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800a17a:	4a06      	ldr	r2, [pc, #24]	; (800a194 <tcpip_input+0x40>)
 800a17c:	6839      	ldr	r1, [r7, #0]
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f7ff ffa4 	bl	800a0cc <tcpip_inpkt>
 800a184:	4603      	mov	r3, r0
}
 800a186:	4618      	mov	r0, r3
 800a188:	3708      	adds	r7, #8
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}
 800a18e:	bf00      	nop
 800a190:	08017b21 	.word	0x08017b21
 800a194:	08016a05 	.word	0x08016a05

0800a198 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b084      	sub	sp, #16
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
 800a1a0:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a1a2:	4819      	ldr	r0, [pc, #100]	; (800a208 <tcpip_try_callback+0x70>)
 800a1a4:	f00d fe3b 	bl	8017e1e <sys_mbox_valid>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d106      	bne.n	800a1bc <tcpip_try_callback+0x24>
 800a1ae:	4b17      	ldr	r3, [pc, #92]	; (800a20c <tcpip_try_callback+0x74>)
 800a1b0:	f240 125d 	movw	r2, #349	; 0x15d
 800a1b4:	4916      	ldr	r1, [pc, #88]	; (800a210 <tcpip_try_callback+0x78>)
 800a1b6:	4817      	ldr	r0, [pc, #92]	; (800a214 <tcpip_try_callback+0x7c>)
 800a1b8:	f00d ffea 	bl	8018190 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800a1bc:	2008      	movs	r0, #8
 800a1be:	f001 fc37 	bl	800ba30 <memp_malloc>
 800a1c2:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d102      	bne.n	800a1d0 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800a1ca:	f04f 33ff 	mov.w	r3, #4294967295
 800a1ce:	e017      	b.n	800a200 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	687a      	ldr	r2, [r7, #4]
 800a1da:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	683a      	ldr	r2, [r7, #0]
 800a1e0:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a1e2:	68f9      	ldr	r1, [r7, #12]
 800a1e4:	4808      	ldr	r0, [pc, #32]	; (800a208 <tcpip_try_callback+0x70>)
 800a1e6:	f00d fda5 	bl	8017d34 <sys_mbox_trypost>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d006      	beq.n	800a1fe <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800a1f0:	68f9      	ldr	r1, [r7, #12]
 800a1f2:	2008      	movs	r0, #8
 800a1f4:	f001 fc6e 	bl	800bad4 <memp_free>
    return ERR_MEM;
 800a1f8:	f04f 33ff 	mov.w	r3, #4294967295
 800a1fc:	e000      	b.n	800a200 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800a1fe:	2300      	movs	r3, #0
}
 800a200:	4618      	mov	r0, r3
 800a202:	3710      	adds	r7, #16
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}
 800a208:	200087c0 	.word	0x200087c0
 800a20c:	08019ff0 	.word	0x08019ff0
 800a210:	0801a068 	.word	0x0801a068
 800a214:	0801a040 	.word	0x0801a040

0800a218 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b084      	sub	sp, #16
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	60f8      	str	r0, [r7, #12]
 800a220:	60b9      	str	r1, [r7, #8]
 800a222:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800a224:	4806      	ldr	r0, [pc, #24]	; (800a240 <tcpip_send_msg_wait_sem+0x28>)
 800a226:	f00d fed3 	bl	8017fd0 <sys_mutex_lock>
  fn(apimsg);
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	68b8      	ldr	r0, [r7, #8]
 800a22e:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800a230:	4803      	ldr	r0, [pc, #12]	; (800a240 <tcpip_send_msg_wait_sem+0x28>)
 800a232:	f00d fedc 	bl	8017fee <sys_mutex_unlock>
  return ERR_OK;
 800a236:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3710      	adds	r7, #16
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}
 800a240:	2000c3a0 	.word	0x2000c3a0

0800a244 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b084      	sub	sp, #16
 800a248:	af02      	add	r7, sp, #8
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	6039      	str	r1, [r7, #0]
  lwip_init();
 800a24e:	f000 ff67 	bl	800b120 <lwip_init>

  tcpip_init_done = initfunc;
 800a252:	4a17      	ldr	r2, [pc, #92]	; (800a2b0 <tcpip_init+0x6c>)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800a258:	4a16      	ldr	r2, [pc, #88]	; (800a2b4 <tcpip_init+0x70>)
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800a25e:	2106      	movs	r1, #6
 800a260:	4815      	ldr	r0, [pc, #84]	; (800a2b8 <tcpip_init+0x74>)
 800a262:	f00d fd33 	bl	8017ccc <sys_mbox_new>
 800a266:	4603      	mov	r3, r0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d006      	beq.n	800a27a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800a26c:	4b13      	ldr	r3, [pc, #76]	; (800a2bc <tcpip_init+0x78>)
 800a26e:	f240 2261 	movw	r2, #609	; 0x261
 800a272:	4913      	ldr	r1, [pc, #76]	; (800a2c0 <tcpip_init+0x7c>)
 800a274:	4813      	ldr	r0, [pc, #76]	; (800a2c4 <tcpip_init+0x80>)
 800a276:	f00d ff8b 	bl	8018190 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800a27a:	4813      	ldr	r0, [pc, #76]	; (800a2c8 <tcpip_init+0x84>)
 800a27c:	f00d fe8c 	bl	8017f98 <sys_mutex_new>
 800a280:	4603      	mov	r3, r0
 800a282:	2b00      	cmp	r3, #0
 800a284:	d006      	beq.n	800a294 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800a286:	4b0d      	ldr	r3, [pc, #52]	; (800a2bc <tcpip_init+0x78>)
 800a288:	f240 2265 	movw	r2, #613	; 0x265
 800a28c:	490f      	ldr	r1, [pc, #60]	; (800a2cc <tcpip_init+0x88>)
 800a28e:	480d      	ldr	r0, [pc, #52]	; (800a2c4 <tcpip_init+0x80>)
 800a290:	f00d ff7e 	bl	8018190 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800a294:	2300      	movs	r3, #0
 800a296:	9300      	str	r3, [sp, #0]
 800a298:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a29c:	2200      	movs	r2, #0
 800a29e:	490c      	ldr	r1, [pc, #48]	; (800a2d0 <tcpip_init+0x8c>)
 800a2a0:	480c      	ldr	r0, [pc, #48]	; (800a2d4 <tcpip_init+0x90>)
 800a2a2:	f00d feb1 	bl	8018008 <sys_thread_new>
}
 800a2a6:	bf00      	nop
 800a2a8:	3708      	adds	r7, #8
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}
 800a2ae:	bf00      	nop
 800a2b0:	200087b8 	.word	0x200087b8
 800a2b4:	200087bc 	.word	0x200087bc
 800a2b8:	200087c0 	.word	0x200087c0
 800a2bc:	08019ff0 	.word	0x08019ff0
 800a2c0:	0801a078 	.word	0x0801a078
 800a2c4:	0801a040 	.word	0x0801a040
 800a2c8:	2000c3a0 	.word	0x2000c3a0
 800a2cc:	0801a09c 	.word	0x0801a09c
 800a2d0:	08009fdd 	.word	0x08009fdd
 800a2d4:	0801a0c0 	.word	0x0801a0c0

0800a2d8 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b084      	sub	sp, #16
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
 800a2e0:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d002      	beq.n	800a2ee <fs_open+0x16>
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d102      	bne.n	800a2f4 <fs_open+0x1c>
    return ERR_ARG;
 800a2ee:	f06f 030f 	mvn.w	r3, #15
 800a2f2:	e028      	b.n	800a346 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800a2f4:	4b16      	ldr	r3, [pc, #88]	; (800a350 <fs_open+0x78>)
 800a2f6:	60fb      	str	r3, [r7, #12]
 800a2f8:	e020      	b.n	800a33c <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	4619      	mov	r1, r3
 800a300:	6838      	ldr	r0, [r7, #0]
 800a302:	f7f5 ff75 	bl	80001f0 <strcmp>
 800a306:	4603      	mov	r3, r0
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d114      	bne.n	800a336 <fs_open+0x5e>
      file->data = (const char *)f->data;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	689a      	ldr	r2, [r3, #8]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	68da      	ldr	r2, [r3, #12]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	68da      	ldr	r2, [r3, #12]
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2200      	movs	r2, #0
 800a328:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	7c1a      	ldrb	r2, [r3, #16]
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800a332:	2300      	movs	r3, #0
 800a334:	e007      	b.n	800a346 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	60fb      	str	r3, [r7, #12]
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d1db      	bne.n	800a2fa <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800a342:	f06f 0305 	mvn.w	r3, #5
}
 800a346:	4618      	mov	r0, r3
 800a348:	3710      	adds	r7, #16
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}
 800a34e:	bf00      	nop
 800a350:	08028418 	.word	0x08028418

0800a354 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800a354:	b480      	push	{r7}
 800a356:	b083      	sub	sp, #12
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800a35c:	bf00      	nop
 800a35e:	370c      	adds	r7, #12
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr

0800a368 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 800a368:	b480      	push	{r7}
 800a36a:	b083      	sub	sp, #12
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	685a      	ldr	r2, [r3, #4]
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	689b      	ldr	r3, [r3, #8]
 800a378:	1ad3      	subs	r3, r2, r3
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	370c      	adds	r7, #12
 800a37e:	46bd      	mov	sp, r7
 800a380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a384:	4770      	bx	lr

0800a386 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 800a386:	b580      	push	{r7, lr}
 800a388:	b082      	sub	sp, #8
 800a38a:	af00      	add	r7, sp, #0
 800a38c:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800a38e:	22ac      	movs	r2, #172	; 0xac
 800a390:	2100      	movs	r1, #0
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f00d fef3 	bl	801817e <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 800a398:	bf00      	nop
 800a39a:	3708      	adds	r7, #8
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}

0800a3a0 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b082      	sub	sp, #8
 800a3a4:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800a3a6:	20ac      	movs	r0, #172	; 0xac
 800a3a8:	f001 f9c0 	bl	800b72c <mem_malloc>
 800a3ac:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d002      	beq.n	800a3ba <http_state_alloc+0x1a>
    http_state_init(ret);
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f7ff ffe6 	bl	800a386 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800a3ba:	687b      	ldr	r3, [r7, #4]
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3708      	adds	r7, #8
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}

0800a3c4 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b082      	sub	sp, #8
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	695b      	ldr	r3, [r3, #20]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d007      	beq.n	800a3e4 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	695b      	ldr	r3, [r3, #20]
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f7ff ffbb 	bl	800a354 <fs_close>
    hs->handle = NULL;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6a1b      	ldr	r3, [r3, #32]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d007      	beq.n	800a3fc <http_state_eof+0x38>
    pbuf_free(hs->req);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6a1b      	ldr	r3, [r3, #32]
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f002 f99d 	bl	800c730 <pbuf_free>
    hs->req = NULL;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800a3fc:	bf00      	nop
 800a3fe:	3708      	adds	r7, #8
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}

0800a404 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b082      	sub	sp, #8
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d005      	beq.n	800a41e <http_state_free+0x1a>
    http_state_eof(hs);
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f7ff ffd6 	bl	800a3c4 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f000 ffed 	bl	800b3f8 <mem_free>
  }
}
 800a41e:	bf00      	nop
 800a420:	3708      	adds	r7, #8
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}
	...

0800a428 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b086      	sub	sp, #24
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	60f8      	str	r0, [r7, #12]
 800a430:	60b9      	str	r1, [r7, #8]
 800a432:	607a      	str	r2, [r7, #4]
 800a434:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d106      	bne.n	800a44a <http_write+0x22>
 800a43c:	4b2c      	ldr	r3, [pc, #176]	; (800a4f0 <http_write+0xc8>)
 800a43e:	f240 2219 	movw	r2, #537	; 0x219
 800a442:	492c      	ldr	r1, [pc, #176]	; (800a4f4 <http_write+0xcc>)
 800a444:	482c      	ldr	r0, [pc, #176]	; (800a4f8 <http_write+0xd0>)
 800a446:	f00d fea3 	bl	8018190 <iprintf>
  len = *length;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	881b      	ldrh	r3, [r3, #0]
 800a44e:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 800a450:	8afb      	ldrh	r3, [r7, #22]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d101      	bne.n	800a45a <http_write+0x32>
    return ERR_OK;
 800a456:	2300      	movs	r3, #0
 800a458:	e045      	b.n	800a4e6 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a460:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800a462:	8aba      	ldrh	r2, [r7, #20]
 800a464:	8afb      	ldrh	r3, [r7, #22]
 800a466:	429a      	cmp	r2, r3
 800a468:	d201      	bcs.n	800a46e <http_write+0x46>
    len = max_len;
 800a46a:	8abb      	ldrh	r3, [r7, #20]
 800a46c:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a472:	005b      	lsls	r3, r3, #1
 800a474:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 800a476:	8afa      	ldrh	r2, [r7, #22]
 800a478:	8abb      	ldrh	r3, [r7, #20]
 800a47a:	429a      	cmp	r2, r3
 800a47c:	d901      	bls.n	800a482 <http_write+0x5a>
    len = max_len;
 800a47e:	8abb      	ldrh	r3, [r7, #20]
 800a480:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 800a482:	78fb      	ldrb	r3, [r7, #3]
 800a484:	8afa      	ldrh	r2, [r7, #22]
 800a486:	68b9      	ldr	r1, [r7, #8]
 800a488:	68f8      	ldr	r0, [r7, #12]
 800a48a:	f006 ff3d 	bl	8011308 <tcp_write>
 800a48e:	4603      	mov	r3, r0
 800a490:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800a492:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a49a:	d10f      	bne.n	800a4bc <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d004      	beq.n	800a4b0 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 800a4ac:	2b08      	cmp	r3, #8
 800a4ae:	d902      	bls.n	800a4b6 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	82fb      	strh	r3, [r7, #22]
 800a4b4:	e002      	b.n	800a4bc <http_write+0x94>
      } else {
        len /= 2;
 800a4b6:	8afb      	ldrh	r3, [r7, #22]
 800a4b8:	085b      	lsrs	r3, r3, #1
 800a4ba:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800a4bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a4c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4c4:	d102      	bne.n	800a4cc <http_write+0xa4>
 800a4c6:	8afb      	ldrh	r3, [r7, #22]
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	d8da      	bhi.n	800a482 <http_write+0x5a>

  if (err == ERR_OK) {
 800a4cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d103      	bne.n	800a4dc <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	8afa      	ldrh	r2, [r7, #22]
 800a4d8:	801a      	strh	r2, [r3, #0]
 800a4da:	e002      	b.n	800a4e2 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 800a4e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	3718      	adds	r7, #24
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}
 800a4ee:	bf00      	nop
 800a4f0:	0801a110 	.word	0x0801a110
 800a4f4:	0801a148 	.word	0x0801a148
 800a4f8:	0801a158 	.word	0x0801a158

0800a4fc <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b086      	sub	sp, #24
 800a500:	af00      	add	r7, sp, #0
 800a502:	60f8      	str	r0, [r7, #12]
 800a504:	60b9      	str	r1, [r7, #8]
 800a506:	4613      	mov	r3, r2
 800a508:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 800a50a:	2100      	movs	r1, #0
 800a50c:	68f8      	ldr	r0, [r7, #12]
 800a50e:	f003 ffbf 	bl	800e490 <tcp_arg>
  altcp_recv(pcb, NULL);
 800a512:	2100      	movs	r1, #0
 800a514:	68f8      	ldr	r0, [r7, #12]
 800a516:	f003 ffcd 	bl	800e4b4 <tcp_recv>
  altcp_err(pcb, NULL);
 800a51a:	2100      	movs	r1, #0
 800a51c:	68f8      	ldr	r0, [r7, #12]
 800a51e:	f004 f80d 	bl	800e53c <tcp_err>
  altcp_poll(pcb, NULL, 0);
 800a522:	2200      	movs	r2, #0
 800a524:	2100      	movs	r1, #0
 800a526:	68f8      	ldr	r0, [r7, #12]
 800a528:	f004 f842 	bl	800e5b0 <tcp_poll>
  altcp_sent(pcb, NULL);
 800a52c:	2100      	movs	r1, #0
 800a52e:	68f8      	ldr	r0, [r7, #12]
 800a530:	f003 ffe2 	bl	800e4f8 <tcp_sent>
  if (hs != NULL) {
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d002      	beq.n	800a540 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 800a53a:	68b8      	ldr	r0, [r7, #8]
 800a53c:	f7ff ff62 	bl	800a404 <http_state_free>
  }

  if (abort_conn) {
 800a540:	79fb      	ldrb	r3, [r7, #7]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d004      	beq.n	800a550 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 800a546:	68f8      	ldr	r0, [r7, #12]
 800a548:	f002 fee8 	bl	800d31c <tcp_abort>
    return ERR_OK;
 800a54c:	2300      	movs	r3, #0
 800a54e:	e00f      	b.n	800a570 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 800a550:	68f8      	ldr	r0, [r7, #12]
 800a552:	f002 fd9f 	bl	800d094 <tcp_close>
 800a556:	4603      	mov	r3, r0
 800a558:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800a55a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d004      	beq.n	800a56c <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800a562:	2204      	movs	r2, #4
 800a564:	4904      	ldr	r1, [pc, #16]	; (800a578 <http_close_or_abort_conn+0x7c>)
 800a566:	68f8      	ldr	r0, [r7, #12]
 800a568:	f004 f822 	bl	800e5b0 <tcp_poll>
  }
  return err;
 800a56c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a570:	4618      	mov	r0, r3
 800a572:	3718      	adds	r7, #24
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}
 800a578:	0800ad8b 	.word	0x0800ad8b

0800a57c <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b082      	sub	sp, #8
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 800a586:	2200      	movs	r2, #0
 800a588:	6839      	ldr	r1, [r7, #0]
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f7ff ffb6 	bl	800a4fc <http_close_or_abort_conn>
 800a590:	4603      	mov	r3, r0
}
 800a592:	4618      	mov	r0, r3
 800a594:	3708      	adds	r7, #8
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}

0800a59a <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a59a:	b580      	push	{r7, lr}
 800a59c:	b082      	sub	sp, #8
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	6078      	str	r0, [r7, #4]
 800a5a2:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800a5a4:	6839      	ldr	r1, [r7, #0]
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f7ff ffe8 	bl	800a57c <http_close_conn>
  }
}
 800a5ac:	bf00      	nop
 800a5ae:	3708      	adds	r7, #8
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}

0800a5b4 <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b086      	sub	sp, #24
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if (!params || (params[0] == '\0')) {
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d003      	beq.n	800a5cc <extract_uri_parameters+0x18>
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	781b      	ldrb	r3, [r3, #0]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d101      	bne.n	800a5d0 <extract_uri_parameters+0x1c>
    return (0);
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	e04e      	b.n	800a66e <extract_uri_parameters+0xba>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	613b      	str	r3, [r7, #16]
 800a5d8:	e042      	b.n	800a660 <extract_uri_parameters+0xac>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 800a5da:	687a      	ldr	r2, [r7, #4]
 800a5dc:	693b      	ldr	r3, [r7, #16]
 800a5de:	330a      	adds	r3, #10
 800a5e0:	009b      	lsls	r3, r3, #2
 800a5e2:	4413      	add	r3, r2
 800a5e4:	697a      	ldr	r2, [r7, #20]
 800a5e6:	605a      	str	r2, [r3, #4]

    /* Remember the start of this name=value pair */
    equals = pair;
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 800a5ec:	2126      	movs	r1, #38	; 0x26
 800a5ee:	6978      	ldr	r0, [r7, #20]
 800a5f0:	f00d fe58 	bl	80182a4 <strchr>
 800a5f4:	6178      	str	r0, [r7, #20]
    if (pair) {
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d006      	beq.n	800a60a <extract_uri_parameters+0x56>
      *pair = '\0';
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	2200      	movs	r2, #0
 800a600:	701a      	strb	r2, [r3, #0]
      pair++;
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	3301      	adds	r3, #1
 800a606:	617b      	str	r3, [r7, #20]
 800a608:	e00c      	b.n	800a624 <extract_uri_parameters+0x70>
    } else {
      /* We didn't find a new parameter so find the end of the URI and
       * replace the space with a '\0' */
      pair = strchr(equals, ' ');
 800a60a:	2120      	movs	r1, #32
 800a60c:	68f8      	ldr	r0, [r7, #12]
 800a60e:	f00d fe49 	bl	80182a4 <strchr>
 800a612:	6178      	str	r0, [r7, #20]
      if (pair) {
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d002      	beq.n	800a620 <extract_uri_parameters+0x6c>
        *pair = '\0';
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	2200      	movs	r2, #0
 800a61e:	701a      	strb	r2, [r3, #0]
      }

      /* Revert to NULL so that we exit the loop as expected. */
      pair = NULL;
 800a620:	2300      	movs	r3, #0
 800a622:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 800a624:	213d      	movs	r1, #61	; 0x3d
 800a626:	68f8      	ldr	r0, [r7, #12]
 800a628:	f00d fe3c 	bl	80182a4 <strchr>
 800a62c:	60f8      	str	r0, [r7, #12]
    if (equals) {
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d00b      	beq.n	800a64c <extract_uri_parameters+0x98>
      *equals = '\0';
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2200      	movs	r2, #0
 800a638:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	1c5a      	adds	r2, r3, #1
 800a63e:	6879      	ldr	r1, [r7, #4]
 800a640:	693b      	ldr	r3, [r7, #16]
 800a642:	331a      	adds	r3, #26
 800a644:	009b      	lsls	r3, r3, #2
 800a646:	440b      	add	r3, r1
 800a648:	605a      	str	r2, [r3, #4]
 800a64a:	e006      	b.n	800a65a <extract_uri_parameters+0xa6>
    } else {
      http_cgi_param_vals[loop] = NULL;
 800a64c:	687a      	ldr	r2, [r7, #4]
 800a64e:	693b      	ldr	r3, [r7, #16]
 800a650:	331a      	adds	r3, #26
 800a652:	009b      	lsls	r3, r3, #2
 800a654:	4413      	add	r3, r2
 800a656:	2200      	movs	r2, #0
 800a658:	605a      	str	r2, [r3, #4]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	3301      	adds	r3, #1
 800a65e:	613b      	str	r3, [r7, #16]
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	2b0f      	cmp	r3, #15
 800a664:	dc02      	bgt.n	800a66c <extract_uri_parameters+0xb8>
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d1b6      	bne.n	800a5da <extract_uri_parameters+0x26>
    }
  }

  return loop;
 800a66c:	693b      	ldr	r3, [r7, #16]
}
 800a66e:	4618      	mov	r0, r3
 800a670:	3718      	adds	r7, #24
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}
	...

0800a678 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b084      	sub	sp, #16
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	695b      	ldr	r3, [r3, #20]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d105      	bne.n	800a696 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800a68a:	6839      	ldr	r1, [r7, #0]
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f7ff ff84 	bl	800a59a <http_eof>
    return 0;
 800a692:	2300      	movs	r3, #0
 800a694:	e016      	b.n	800a6c4 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	695b      	ldr	r3, [r3, #20]
 800a69a:	4618      	mov	r0, r3
 800a69c:	f7ff fe64 	bl	800a368 <fs_bytes_left>
 800a6a0:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	dc05      	bgt.n	800a6b4 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800a6a8:	6839      	ldr	r1, [r7, #0]
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f7ff ff75 	bl	800a59a <http_eof>
    return 0;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	e007      	b.n	800a6c4 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800a6b4:	4b05      	ldr	r3, [pc, #20]	; (800a6cc <http_check_eof+0x54>)
 800a6b6:	f240 429d 	movw	r2, #1181	; 0x49d
 800a6ba:	4905      	ldr	r1, [pc, #20]	; (800a6d0 <http_check_eof+0x58>)
 800a6bc:	4805      	ldr	r0, [pc, #20]	; (800a6d4 <http_check_eof+0x5c>)
 800a6be:	f00d fd67 	bl	8018190 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800a6c2:	2301      	movs	r3, #1
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3710      	adds	r7, #16
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}
 800a6cc:	0801a110 	.word	0x0801a110
 800a6d0:	0801a180 	.word	0x0801a180
 800a6d4:	0801a158 	.word	0x0801a158

0800a6d8 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b084      	sub	sp, #16
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	d803      	bhi.n	800a6fa <http_send_data_nonssi+0x22>
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6f6:	b29b      	uxth	r3, r3
 800a6f8:	e001      	b.n	800a6fe <http_send_data_nonssi+0x26>
 800a6fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a6fe:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	6999      	ldr	r1, [r3, #24]
 800a704:	f107 020c 	add.w	r2, r7, #12
 800a708:	2300      	movs	r3, #0
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f7ff fe8c 	bl	800a428 <http_write>
 800a710:	4603      	mov	r3, r0
 800a712:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800a714:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d10d      	bne.n	800a738 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 800a71c:	2301      	movs	r3, #1
 800a71e:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	699b      	ldr	r3, [r3, #24]
 800a724:	89ba      	ldrh	r2, [r7, #12]
 800a726:	441a      	add	r2, r3
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a730:	89ba      	ldrh	r2, [r7, #12]
 800a732:	1a9a      	subs	r2, r3, r2
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 800a738:	7bfb      	ldrb	r3, [r7, #15]
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	3710      	adds	r7, #16
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}

0800a742 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a742:	b580      	push	{r7, lr}
 800a744:	b084      	sub	sp, #16
 800a746:	af00      	add	r7, sp, #0
 800a748:	6078      	str	r0, [r7, #4]
 800a74a:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800a74c:	2300      	movs	r3, #0
 800a74e:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d101      	bne.n	800a75a <http_send+0x18>
    return 0;
 800a756:	2300      	movs	r3, #0
 800a758:	e025      	b.n	800a7a6 <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d108      	bne.n	800a774 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 800a762:	6839      	ldr	r1, [r7, #0]
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f7ff ff87 	bl	800a678 <http_check_eof>
 800a76a:	4603      	mov	r3, r0
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d101      	bne.n	800a774 <http_send+0x32>
      return 0;
 800a770:	2300      	movs	r3, #0
 800a772:	e018      	b.n	800a7a6 <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800a774:	6839      	ldr	r1, [r7, #0]
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f7ff ffae 	bl	800a6d8 <http_send_data_nonssi>
 800a77c:	4603      	mov	r3, r0
 800a77e:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a784:	2b00      	cmp	r3, #0
 800a786:	d10d      	bne.n	800a7a4 <http_send+0x62>
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	695b      	ldr	r3, [r3, #20]
 800a78c:	4618      	mov	r0, r3
 800a78e:	f7ff fdeb 	bl	800a368 <fs_bytes_left>
 800a792:	4603      	mov	r3, r0
 800a794:	2b00      	cmp	r3, #0
 800a796:	dc05      	bgt.n	800a7a4 <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800a798:	6839      	ldr	r1, [r7, #0]
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f7ff fefd 	bl	800a59a <http_eof>
    return 0;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	e000      	b.n	800a7a6 <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800a7a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3710      	adds	r7, #16
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}
	...

0800a7b0 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b084      	sub	sp, #16
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
 800a7b8:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	4a1c      	ldr	r2, [pc, #112]	; (800a830 <http_get_404_file+0x80>)
 800a7be:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800a7c0:	687a      	ldr	r2, [r7, #4]
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	4619      	mov	r1, r3
 800a7c8:	4610      	mov	r0, r2
 800a7ca:	f7ff fd85 	bl	800a2d8 <fs_open>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800a7d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d024      	beq.n	800a824 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	4a15      	ldr	r2, [pc, #84]	; (800a834 <http_get_404_file+0x84>)
 800a7de:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800a7e0:	687a      	ldr	r2, [r7, #4]
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	4619      	mov	r1, r3
 800a7e8:	4610      	mov	r0, r2
 800a7ea:	f7ff fd75 	bl	800a2d8 <fs_open>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800a7f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d014      	beq.n	800a824 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	4a0e      	ldr	r2, [pc, #56]	; (800a838 <http_get_404_file+0x88>)
 800a7fe:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800a800:	687a      	ldr	r2, [r7, #4]
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	4619      	mov	r1, r3
 800a808:	4610      	mov	r0, r2
 800a80a:	f7ff fd65 	bl	800a2d8 <fs_open>
 800a80e:	4603      	mov	r3, r0
 800a810:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800a812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d004      	beq.n	800a824 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	2200      	movs	r2, #0
 800a81e:	601a      	str	r2, [r3, #0]
        return NULL;
 800a820:	2300      	movs	r3, #0
 800a822:	e000      	b.n	800a826 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800a824:	687b      	ldr	r3, [r7, #4]
}
 800a826:	4618      	mov	r0, r3
 800a828:	3710      	adds	r7, #16
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}
 800a82e:	bf00      	nop
 800a830:	0801a1b8 	.word	0x0801a1b8
 800a834:	0801a1c4 	.word	0x0801a1c4
 800a838:	0801a1d0 	.word	0x0801a1d0

0800a83c <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b08e      	sub	sp, #56	; 0x38
 800a840:	af00      	add	r7, sp, #0
 800a842:	60f8      	str	r0, [r7, #12]
 800a844:	60b9      	str	r1, [r7, #8]
 800a846:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800a84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d106      	bne.n	800a860 <http_parse_request+0x24>
 800a852:	4b65      	ldr	r3, [pc, #404]	; (800a9e8 <http_parse_request+0x1ac>)
 800a854:	f240 72ae 	movw	r2, #1966	; 0x7ae
 800a858:	4964      	ldr	r1, [pc, #400]	; (800a9ec <http_parse_request+0x1b0>)
 800a85a:	4865      	ldr	r0, [pc, #404]	; (800a9f0 <http_parse_request+0x1b4>)
 800a85c:	f00d fc98 	bl	8018190 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d106      	bne.n	800a874 <http_parse_request+0x38>
 800a866:	4b60      	ldr	r3, [pc, #384]	; (800a9e8 <http_parse_request+0x1ac>)
 800a868:	f240 72af 	movw	r2, #1967	; 0x7af
 800a86c:	4961      	ldr	r1, [pc, #388]	; (800a9f4 <http_parse_request+0x1b8>)
 800a86e:	4860      	ldr	r0, [pc, #384]	; (800a9f0 <http_parse_request+0x1b4>)
 800a870:	f00d fc8e 	bl	8018190 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	695b      	ldr	r3, [r3, #20]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d103      	bne.n	800a884 <http_parse_request+0x48>
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	699b      	ldr	r3, [r3, #24]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d002      	beq.n	800a88a <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800a884:	f06f 0307 	mvn.w	r3, #7
 800a888:	e0aa      	b.n	800a9e0 <http_parse_request+0x1a4>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	6a1b      	ldr	r3, [r3, #32]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d103      	bne.n	800a89a <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a896:	621a      	str	r2, [r3, #32]
 800a898:	e005      	b.n	800a8a6 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	6a1b      	ldr	r3, [r3, #32]
 800a89e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f002 f813 	bl	800c8cc <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800a8a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a8a8:	f001 ffe8 	bl	800c87c <pbuf_ref>

  if (hs->req->next != NULL) {
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	6a1b      	ldr	r3, [r3, #32]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d012      	beq.n	800a8dc <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	6a1b      	ldr	r3, [r3, #32]
 800a8ba:	891b      	ldrh	r3, [r3, #8]
 800a8bc:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	bf28      	it	cs
 800a8c4:	4613      	movcs	r3, r2
 800a8c6:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	6a18      	ldr	r0, [r3, #32]
 800a8cc:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	4949      	ldr	r1, [pc, #292]	; (800a9f8 <http_parse_request+0x1bc>)
 800a8d2:	f002 f933 	bl	800cb3c <pbuf_copy_partial>
    data = httpd_req_buf;
 800a8d6:	4b48      	ldr	r3, [pc, #288]	; (800a9f8 <http_parse_request+0x1bc>)
 800a8d8:	637b      	str	r3, [r7, #52]	; 0x34
 800a8da:	e005      	b.n	800a8e8 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800a8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8de:	685b      	ldr	r3, [r3, #4]
 800a8e0:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 800a8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8e4:	895b      	ldrh	r3, [r3, #10]
 800a8e6:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800a8e8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a8ea:	2b06      	cmp	r3, #6
 800a8ec:	d963      	bls.n	800a9b6 <http_parse_request+0x17a>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800a8ee:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a8f0:	461a      	mov	r2, r3
 800a8f2:	4942      	ldr	r1, [pc, #264]	; (800a9fc <http_parse_request+0x1c0>)
 800a8f4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a8f6:	f000 fbdd 	bl	800b0b4 <lwip_strnstr>
 800a8fa:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800a8fc:	6a3b      	ldr	r3, [r7, #32]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d059      	beq.n	800a9b6 <http_parse_request+0x17a>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800a902:	2300      	movs	r3, #0
 800a904:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800a906:	2204      	movs	r2, #4
 800a908:	493d      	ldr	r1, [pc, #244]	; (800aa00 <http_parse_request+0x1c4>)
 800a90a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a90c:	f00d fcd7 	bl	80182be <strncmp>
 800a910:	4603      	mov	r3, r0
 800a912:	2b00      	cmp	r3, #0
 800a914:	d117      	bne.n	800a946 <http_parse_request+0x10a>
        sp1 = data + 3;
 800a916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a918:	3303      	adds	r3, #3
 800a91a:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 800a91c:	69fb      	ldr	r3, [r7, #28]
 800a91e:	3301      	adds	r3, #1
 800a920:	461a      	mov	r2, r3
 800a922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a924:	1ad3      	subs	r3, r2, r3
 800a926:	b29b      	uxth	r3, r3
 800a928:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800a92a:	1ad3      	subs	r3, r2, r3
 800a92c:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800a92e:	69fb      	ldr	r3, [r7, #28]
 800a930:	3301      	adds	r3, #1
 800a932:	8b7a      	ldrh	r2, [r7, #26]
 800a934:	4933      	ldr	r1, [pc, #204]	; (800aa04 <http_parse_request+0x1c8>)
 800a936:	4618      	mov	r0, r3
 800a938:	f000 fbbc 	bl	800b0b4 <lwip_strnstr>
 800a93c:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800a93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a940:	2b00      	cmp	r3, #0
 800a942:	d111      	bne.n	800a968 <http_parse_request+0x12c>
 800a944:	e006      	b.n	800a954 <http_parse_request+0x118>
        data[4] = 0;
 800a946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a948:	3304      	adds	r3, #4
 800a94a:	2200      	movs	r2, #0
 800a94c:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 800a94e:	f06f 030f 	mvn.w	r3, #15
 800a952:	e045      	b.n	800a9e0 <http_parse_request+0x1a4>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800a954:	69fb      	ldr	r3, [r7, #28]
 800a956:	3301      	adds	r3, #1
 800a958:	8b7a      	ldrh	r2, [r7, #26]
 800a95a:	4928      	ldr	r1, [pc, #160]	; (800a9fc <http_parse_request+0x1c0>)
 800a95c:	4618      	mov	r0, r3
 800a95e:	f000 fba9 	bl	800b0b4 <lwip_strnstr>
 800a962:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 800a964:	2301      	movs	r3, #1
 800a966:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800a968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a96a:	69fa      	ldr	r2, [r7, #28]
 800a96c:	3201      	adds	r2, #1
 800a96e:	1a9b      	subs	r3, r3, r2
 800a970:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800a972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a974:	2b00      	cmp	r3, #0
 800a976:	d01e      	beq.n	800a9b6 <http_parse_request+0x17a>
 800a978:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a97a:	69fb      	ldr	r3, [r7, #28]
 800a97c:	429a      	cmp	r2, r3
 800a97e:	d91a      	bls.n	800a9b6 <http_parse_request+0x17a>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800a980:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a982:	461a      	mov	r2, r3
 800a984:	4920      	ldr	r1, [pc, #128]	; (800aa08 <http_parse_request+0x1cc>)
 800a986:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a988:	f000 fb94 	bl	800b0b4 <lwip_strnstr>
 800a98c:	4603      	mov	r3, r0
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d011      	beq.n	800a9b6 <http_parse_request+0x17a>
          char *uri = sp1 + 1;
 800a992:	69fb      	ldr	r3, [r7, #28]
 800a994:	3301      	adds	r3, #1
 800a996:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800a998:	69fb      	ldr	r3, [r7, #28]
 800a99a:	2200      	movs	r2, #0
 800a99c:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800a99e:	8b3b      	ldrh	r3, [r7, #24]
 800a9a0:	697a      	ldr	r2, [r7, #20]
 800a9a2:	4413      	add	r3, r2
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800a9a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9aa:	6979      	ldr	r1, [r7, #20]
 800a9ac:	68b8      	ldr	r0, [r7, #8]
 800a9ae:	f000 f82d 	bl	800aa0c <http_find_file>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	e014      	b.n	800a9e0 <http_parse_request+0x1a4>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	6a1b      	ldr	r3, [r3, #32]
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f001 ff46 	bl	800c84c <pbuf_clen>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	6a1b      	ldr	r3, [r3, #32]
 800a9c8:	891b      	ldrh	r3, [r3, #8]
 800a9ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9ce:	d205      	bcs.n	800a9dc <http_parse_request+0x1a0>
 800a9d0:	8a7b      	ldrh	r3, [r7, #18]
 800a9d2:	2b05      	cmp	r3, #5
 800a9d4:	d802      	bhi.n	800a9dc <http_parse_request+0x1a0>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800a9d6:	f06f 0304 	mvn.w	r3, #4
 800a9da:	e001      	b.n	800a9e0 <http_parse_request+0x1a4>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800a9dc:	f06f 030f 	mvn.w	r3, #15
  }
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3738      	adds	r7, #56	; 0x38
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}
 800a9e8:	0801a110 	.word	0x0801a110
 800a9ec:	0801a1dc 	.word	0x0801a1dc
 800a9f0:	0801a158 	.word	0x0801a158
 800a9f4:	0801a1e8 	.word	0x0801a1e8
 800a9f8:	200087c4 	.word	0x200087c4
 800a9fc:	0801a1f4 	.word	0x0801a1f4
 800aa00:	0801a1f8 	.word	0x0801a1f8
 800aa04:	0801a200 	.word	0x0801a200
 800aa08:	0801a204 	.word	0x0801a204

0800aa0c <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800aa0c:	b590      	push	{r4, r7, lr}
 800aa0e:	b093      	sub	sp, #76	; 0x4c
 800aa10:	af02      	add	r7, sp, #8
 800aa12:	60f8      	str	r0, [r7, #12]
 800aa14:	60b9      	str	r1, [r7, #8]
 800aa16:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800aa18:	2300      	movs	r3, #0
 800aa1a:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800aa20:	2300      	movs	r3, #0
 800aa22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	4618      	mov	r0, r3
 800aa2a:	f7f5 fbeb 	bl	8000204 <strlen>
 800aa2e:	6278      	str	r0, [r7, #36]	; 0x24
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800aa30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d06b      	beq.n	800ab0e <http_find_file+0x102>
 800aa36:	68ba      	ldr	r2, [r7, #8]
 800aa38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa3a:	3b01      	subs	r3, #1
 800aa3c:	4413      	add	r3, r2
 800aa3e:	781b      	ldrb	r3, [r3, #0]
 800aa40:	2b2f      	cmp	r3, #47	; 0x2f
 800aa42:	d164      	bne.n	800ab0e <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800aa44:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800aa46:	4a72      	ldr	r2, [pc, #456]	; (800ac10 <http_find_file+0x204>)
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d102      	bne.n	800aa52 <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800aa4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4e:	2b01      	cmp	r3, #1
 800aa50:	d15d      	bne.n	800ab0e <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800aa52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa54:	3b01      	subs	r3, #1
 800aa56:	2b3f      	cmp	r3, #63	; 0x3f
 800aa58:	bf28      	it	cs
 800aa5a:	233f      	movcs	r3, #63	; 0x3f
 800aa5c:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
 800aa5e:	6a3b      	ldr	r3, [r7, #32]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d00a      	beq.n	800aa7a <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	6a3a      	ldr	r2, [r7, #32]
 800aa68:	4619      	mov	r1, r3
 800aa6a:	4869      	ldr	r0, [pc, #420]	; (800ac10 <http_find_file+0x204>)
 800aa6c:	f00d fb63 	bl	8018136 <memcpy>
      http_uri_buf[copy_len] = 0;
 800aa70:	4a67      	ldr	r2, [pc, #412]	; (800ac10 <http_find_file+0x204>)
 800aa72:	6a3b      	ldr	r3, [r7, #32]
 800aa74:	4413      	add	r3, r2
 800aa76:	2200      	movs	r2, #0
 800aa78:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa7e:	e043      	b.n	800ab08 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800aa80:	6a3b      	ldr	r3, [r7, #32]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d028      	beq.n	800aad8 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800aa86:	6a3b      	ldr	r3, [r7, #32]
 800aa88:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800aa8c:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
 800aa8e:	69fb      	ldr	r3, [r7, #28]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d01e      	beq.n	800aad2 <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 800aa94:	4a5f      	ldr	r2, [pc, #380]	; (800ac14 <http_find_file+0x208>)
 800aa96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f7f5 fbb1 	bl	8000204 <strlen>
 800aaa2:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800aaa4:	69ba      	ldr	r2, [r7, #24]
 800aaa6:	69fb      	ldr	r3, [r7, #28]
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	bf28      	it	cs
 800aaac:	4613      	movcs	r3, r2
 800aaae:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800aab0:	6a3b      	ldr	r3, [r7, #32]
 800aab2:	4a57      	ldr	r2, [pc, #348]	; (800ac10 <http_find_file+0x204>)
 800aab4:	1898      	adds	r0, r3, r2
 800aab6:	4a57      	ldr	r2, [pc, #348]	; (800ac14 <http_find_file+0x208>)
 800aab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaba:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800aabe:	697a      	ldr	r2, [r7, #20]
 800aac0:	4619      	mov	r1, r3
 800aac2:	f00d fb38 	bl	8018136 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800aac6:	6a3a      	ldr	r2, [r7, #32]
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	4413      	add	r3, r2
 800aacc:	4a50      	ldr	r2, [pc, #320]	; (800ac10 <http_find_file+0x204>)
 800aace:	2100      	movs	r1, #0
 800aad0:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800aad2:	4b4f      	ldr	r3, [pc, #316]	; (800ac10 <http_find_file+0x204>)
 800aad4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aad6:	e004      	b.n	800aae2 <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 800aad8:	4a4e      	ldr	r2, [pc, #312]	; (800ac14 <http_find_file+0x208>)
 800aada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aadc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800aae0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aae6:	4618      	mov	r0, r3
 800aae8:	f7ff fbf6 	bl	800a2d8 <fs_open>
 800aaec:	4603      	mov	r3, r0
 800aaee:	74fb      	strb	r3, [r7, #19]
      if (err == ERR_OK) {
 800aaf0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d104      	bne.n	800ab02 <http_find_file+0xf6>
        uri = file_name;
 800aaf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aafa:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 800ab00:	e005      	b.n	800ab0e <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800ab02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab04:	3301      	adds	r3, #1
 800ab06:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab0a:	2b04      	cmp	r3, #4
 800ab0c:	d9b8      	bls.n	800aa80 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800ab0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d161      	bne.n	800abd8 <http_find_file+0x1cc>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	213f      	movs	r1, #63	; 0x3f
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f00d fbc3 	bl	80182a4 <strchr>
 800ab1e:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 800ab20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d005      	beq.n	800ab32 <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800ab26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab28:	2200      	movs	r2, #0
 800ab2a:	701a      	strb	r2, [r3, #0]
      params++;
 800ab2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab2e:	3301      	adds	r3, #1
 800ab30:	637b      	str	r3, [r7, #52]	; 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 800ab32:	4b39      	ldr	r3, [pc, #228]	; (800ac18 <http_find_file+0x20c>)
 800ab34:	f04f 32ff 	mov.w	r2, #4294967295
 800ab38:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (httpd_num_cgis && httpd_cgis) {
 800ab3a:	4b38      	ldr	r3, [pc, #224]	; (800ac1c <http_find_file+0x210>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d034      	beq.n	800abac <http_find_file+0x1a0>
 800ab42:	4b37      	ldr	r3, [pc, #220]	; (800ac20 <http_find_file+0x214>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d030      	beq.n	800abac <http_find_file+0x1a0>
      for (i = 0; i < httpd_num_cgis; i++) {
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	633b      	str	r3, [r7, #48]	; 0x30
 800ab4e:	e028      	b.n	800aba2 <http_find_file+0x196>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 800ab50:	68b8      	ldr	r0, [r7, #8]
 800ab52:	4b33      	ldr	r3, [pc, #204]	; (800ac20 <http_find_file+0x214>)
 800ab54:	681a      	ldr	r2, [r3, #0]
 800ab56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab58:	00db      	lsls	r3, r3, #3
 800ab5a:	4413      	add	r3, r2
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	4619      	mov	r1, r3
 800ab60:	f7f5 fb46 	bl	80001f0 <strcmp>
 800ab64:	4603      	mov	r3, r0
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d118      	bne.n	800ab9c <http_find_file+0x190>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
          http_cgi_paramcount = extract_uri_parameters(hs, params);
 800ab6a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ab6c:	68f8      	ldr	r0, [r7, #12]
 800ab6e:	f7ff fd21 	bl	800a5b4 <extract_uri_parameters>
 800ab72:	4602      	mov	r2, r0
 800ab74:	4b28      	ldr	r3, [pc, #160]	; (800ac18 <http_find_file+0x20c>)
 800ab76:	601a      	str	r2, [r3, #0]
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800ab78:	4b29      	ldr	r3, [pc, #164]	; (800ac20 <http_find_file+0x214>)
 800ab7a:	681a      	ldr	r2, [r3, #0]
 800ab7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab7e:	00db      	lsls	r3, r3, #3
 800ab80:	4413      	add	r3, r2
 800ab82:	685c      	ldr	r4, [r3, #4]
 800ab84:	4b24      	ldr	r3, [pc, #144]	; (800ac18 <http_find_file+0x20c>)
 800ab86:	6819      	ldr	r1, [r3, #0]
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
                                         hs->param_vals);
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	336c      	adds	r3, #108	; 0x6c
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800ab92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab94:	47a0      	blx	r4
 800ab96:	4603      	mov	r3, r0
 800ab98:	60bb      	str	r3, [r7, #8]
          break;
 800ab9a:	e007      	b.n	800abac <http_find_file+0x1a0>
      for (i = 0; i < httpd_num_cgis; i++) {
 800ab9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab9e:	3301      	adds	r3, #1
 800aba0:	633b      	str	r3, [r7, #48]	; 0x30
 800aba2:	4b1e      	ldr	r3, [pc, #120]	; (800ac1c <http_find_file+0x210>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aba8:	429a      	cmp	r2, r3
 800abaa:	dbd1      	blt.n	800ab50 <http_find_file+0x144>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	68ba      	ldr	r2, [r7, #8]
 800abb0:	4611      	mov	r1, r2
 800abb2:	4618      	mov	r0, r3
 800abb4:	f7ff fb90 	bl	800a2d8 <fs_open>
 800abb8:	4603      	mov	r3, r0
 800abba:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
 800abbc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d102      	bne.n	800abca <http_find_file+0x1be>
      file = &hs->file_handle;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	63bb      	str	r3, [r7, #56]	; 0x38
 800abc8:	e006      	b.n	800abd8 <http_find_file+0x1cc>
    } else {
      file = http_get_404_file(hs, &uri);
 800abca:	f107 0308 	add.w	r3, r7, #8
 800abce:	4619      	mov	r1, r3
 800abd0:	68f8      	ldr	r0, [r7, #12]
 800abd2:	f7ff fded 	bl	800a7b0 <http_get_404_file>
 800abd6:	63b8      	str	r0, [r7, #56]	; 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800abd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d106      	bne.n	800abec <http_find_file+0x1e0>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800abde:	f107 0308 	add.w	r3, r7, #8
 800abe2:	4619      	mov	r1, r3
 800abe4:	68f8      	ldr	r0, [r7, #12]
 800abe6:	f7ff fde3 	bl	800a7b0 <http_get_404_file>
 800abea:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800abec:	68ba      	ldr	r2, [r7, #8]
 800abee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abf0:	9301      	str	r3, [sp, #4]
 800abf2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800abf6:	9300      	str	r3, [sp, #0]
 800abf8:	4613      	mov	r3, r2
 800abfa:	687a      	ldr	r2, [r7, #4]
 800abfc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800abfe:	68f8      	ldr	r0, [r7, #12]
 800ac00:	f000 f810 	bl	800ac24 <http_init_file>
 800ac04:	4603      	mov	r3, r0
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3744      	adds	r7, #68	; 0x44
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd90      	pop	{r4, r7, pc}
 800ac0e:	bf00      	nop
 800ac10:	20008bc4 	.word	0x20008bc4
 800ac14:	0802842c 	.word	0x0802842c
 800ac18:	20008c0c 	.word	0x20008c0c
 800ac1c:	20008c08 	.word	0x20008c08
 800ac20:	20008c04 	.word	0x20008c04

0800ac24 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b086      	sub	sp, #24
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	60f8      	str	r0, [r7, #12]
 800ac2c:	60b9      	str	r1, [r7, #8]
 800ac2e:	607a      	str	r2, [r7, #4]
 800ac30:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d05d      	beq.n	800acf4 <http_init_file+0xd0>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d106      	bne.n	800ac4e <http_init_file+0x2a>
 800ac40:	4b35      	ldr	r3, [pc, #212]	; (800ad18 <http_init_file+0xf4>)
 800ac42:	f640 120b 	movw	r2, #2315	; 0x90b
 800ac46:	4935      	ldr	r1, [pc, #212]	; (800ad1c <http_init_file+0xf8>)
 800ac48:	4835      	ldr	r0, [pc, #212]	; (800ad20 <http_init_file+0xfc>)
 800ac4a:	f00d faa1 	bl	8018190 <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	68ba      	ldr	r2, [r7, #8]
 800ac52:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	681a      	ldr	r2, [r3, #0]
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	da06      	bge.n	800ac72 <http_init_file+0x4e>
 800ac64:	4b2c      	ldr	r3, [pc, #176]	; (800ad18 <http_init_file+0xf4>)
 800ac66:	f640 1234 	movw	r2, #2356	; 0x934
 800ac6a:	492e      	ldr	r1, [pc, #184]	; (800ad24 <http_init_file+0x100>)
 800ac6c:	482c      	ldr	r0, [pc, #176]	; (800ad20 <http_init_file+0xfc>)
 800ac6e:	f00d fa8f 	bl	8018190 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	685b      	ldr	r3, [r3, #4]
 800ac76:	461a      	mov	r2, r3
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	2200      	movs	r2, #0
 800ac80:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	695b      	ldr	r3, [r3, #20]
 800ac88:	7c1b      	ldrb	r3, [r3, #16]
 800ac8a:	f003 0301 	and.w	r3, r3, #1
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d106      	bne.n	800aca0 <http_init_file+0x7c>
 800ac92:	4b21      	ldr	r3, [pc, #132]	; (800ad18 <http_init_file+0xf4>)
 800ac94:	f640 1244 	movw	r2, #2372	; 0x944
 800ac98:	4923      	ldr	r1, [pc, #140]	; (800ad28 <http_init_file+0x104>)
 800ac9a:	4821      	ldr	r0, [pc, #132]	; (800ad20 <http_init_file+0xfc>)
 800ac9c:	f00d fa78 	bl	8018190 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d033      	beq.n	800ad0e <http_init_file+0xea>
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	695b      	ldr	r3, [r3, #20]
 800acaa:	7c1b      	ldrb	r3, [r3, #16]
 800acac:	f003 0301 	and.w	r3, r3, #1
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d02c      	beq.n	800ad0e <http_init_file+0xea>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	6998      	ldr	r0, [r3, #24]
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acbc:	461a      	mov	r2, r3
 800acbe:	491b      	ldr	r1, [pc, #108]	; (800ad2c <http_init_file+0x108>)
 800acc0:	f000 f9f8 	bl	800b0b4 <lwip_strnstr>
 800acc4:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 800acc6:	697b      	ldr	r3, [r7, #20]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d020      	beq.n	800ad0e <http_init_file+0xea>
        int diff = file_start + 4 - hs->file;
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	3304      	adds	r3, #4
 800acd0:	461a      	mov	r2, r3
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	699b      	ldr	r3, [r3, #24]
 800acd6:	1ad3      	subs	r3, r2, r3
 800acd8:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	699a      	ldr	r2, [r3, #24]
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	441a      	add	r2, r3
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	1ad2      	subs	r2, r2, r3
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	625a      	str	r2, [r3, #36]	; 0x24
 800acf2:	e00c      	b.n	800ad0e <http_init_file+0xea>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	2200      	movs	r2, #0
 800acf8:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	2200      	movs	r2, #0
 800acfe:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	2200      	movs	r2, #0
 800ad04:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800ad0e:	2300      	movs	r3, #0
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	3718      	adds	r7, #24
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}
 800ad18:	0801a110 	.word	0x0801a110
 800ad1c:	0801a20c 	.word	0x0801a20c
 800ad20:	0801a158 	.word	0x0801a158
 800ad24:	0801a220 	.word	0x0801a220
 800ad28:	0801a240 	.word	0x0801a240
 800ad2c:	0801a204 	.word	0x0801a204

0800ad30 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b084      	sub	sp, #16
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
 800ad38:	460b      	mov	r3, r1
 800ad3a:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d002      	beq.n	800ad4c <http_err+0x1c>
    http_state_free(hs);
 800ad46:	68f8      	ldr	r0, [r7, #12]
 800ad48:	f7ff fb5c 	bl	800a404 <http_state_free>
  }
}
 800ad4c:	bf00      	nop
 800ad4e:	3710      	adds	r7, #16
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}

0800ad54 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b086      	sub	sp, #24
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	60f8      	str	r0, [r7, #12]
 800ad5c:	60b9      	str	r1, [r7, #8]
 800ad5e:	4613      	mov	r3, r2
 800ad60:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800ad66:	697b      	ldr	r3, [r7, #20]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d101      	bne.n	800ad70 <http_sent+0x1c>
    return ERR_OK;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	e008      	b.n	800ad82 <http_sent+0x2e>
  }

  hs->retries = 0;
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	2200      	movs	r2, #0
 800ad74:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 800ad78:	6979      	ldr	r1, [r7, #20]
 800ad7a:	68b8      	ldr	r0, [r7, #8]
 800ad7c:	f7ff fce1 	bl	800a742 <http_send>

  return ERR_OK;
 800ad80:	2300      	movs	r3, #0
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	3718      	adds	r7, #24
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}

0800ad8a <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800ad8a:	b580      	push	{r7, lr}
 800ad8c:	b084      	sub	sp, #16
 800ad8e:	af00      	add	r7, sp, #0
 800ad90:	6078      	str	r0, [r7, #4]
 800ad92:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d107      	bne.n	800adae <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800ad9e:	2100      	movs	r1, #0
 800ada0:	6838      	ldr	r0, [r7, #0]
 800ada2:	f7ff fbeb 	bl	800a57c <http_close_conn>
 800ada6:	4603      	mov	r3, r0
 800ada8:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800adaa:	2300      	movs	r3, #0
 800adac:	e021      	b.n	800adf2 <http_poll+0x68>
  } else {
    hs->retries++;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800adb4:	3301      	adds	r3, #1
 800adb6:	b2da      	uxtb	r2, r3
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800adc4:	2b04      	cmp	r3, #4
 800adc6:	d105      	bne.n	800add4 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800adc8:	68f9      	ldr	r1, [r7, #12]
 800adca:	6838      	ldr	r0, [r7, #0]
 800adcc:	f7ff fbd6 	bl	800a57c <http_close_conn>
      return ERR_OK;
 800add0:	2300      	movs	r3, #0
 800add2:	e00e      	b.n	800adf2 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	695b      	ldr	r3, [r3, #20]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d009      	beq.n	800adf0 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 800addc:	68f9      	ldr	r1, [r7, #12]
 800adde:	6838      	ldr	r0, [r7, #0]
 800ade0:	f7ff fcaf 	bl	800a742 <http_send>
 800ade4:	4603      	mov	r3, r0
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d002      	beq.n	800adf0 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 800adea:	6838      	ldr	r0, [r7, #0]
 800adec:	f007 f878 	bl	8011ee0 <tcp_output>
      }
    }
  }

  return ERR_OK;
 800adf0:	2300      	movs	r3, #0
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	3710      	adds	r7, #16
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}
	...

0800adfc <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b086      	sub	sp, #24
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	60f8      	str	r0, [r7, #12]
 800ae04:	60b9      	str	r1, [r7, #8]
 800ae06:	607a      	str	r2, [r7, #4]
 800ae08:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800ae0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d105      	bne.n	800ae22 <http_recv+0x26>
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d002      	beq.n	800ae22 <http_recv+0x26>
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d111      	bne.n	800ae46 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d008      	beq.n	800ae3a <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	891b      	ldrh	r3, [r3, #8]
 800ae2c:	4619      	mov	r1, r3
 800ae2e:	68b8      	ldr	r0, [r7, #8]
 800ae30:	f002 fc4e 	bl	800d6d0 <tcp_recved>
      pbuf_free(p);
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f001 fc7b 	bl	800c730 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800ae3a:	6979      	ldr	r1, [r7, #20]
 800ae3c:	68b8      	ldr	r0, [r7, #8]
 800ae3e:	f7ff fb9d 	bl	800a57c <http_close_conn>
    return ERR_OK;
 800ae42:	2300      	movs	r3, #0
 800ae44:	e055      	b.n	800aef2 <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	891b      	ldrh	r3, [r3, #8]
 800ae4a:	4619      	mov	r1, r3
 800ae4c:	68b8      	ldr	r0, [r7, #8]
 800ae4e:	f002 fc3f 	bl	800d6d0 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	695b      	ldr	r3, [r3, #20]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d147      	bne.n	800aeea <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 800ae5a:	68ba      	ldr	r2, [r7, #8]
 800ae5c:	6979      	ldr	r1, [r7, #20]
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f7ff fcec 	bl	800a83c <http_parse_request>
 800ae64:	4603      	mov	r3, r0
 800ae66:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800ae68:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d015      	beq.n	800ae9c <http_recv+0xa0>
 800ae70:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ae74:	f113 0f05 	cmn.w	r3, #5
 800ae78:	d010      	beq.n	800ae9c <http_recv+0xa0>
 800ae7a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ae7e:	f113 0f10 	cmn.w	r3, #16
 800ae82:	d00b      	beq.n	800ae9c <http_recv+0xa0>
 800ae84:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ae88:	f113 0f08 	cmn.w	r3, #8
 800ae8c:	d006      	beq.n	800ae9c <http_recv+0xa0>
 800ae8e:	4b1b      	ldr	r3, [pc, #108]	; (800aefc <http_recv+0x100>)
 800ae90:	f640 2205 	movw	r2, #2565	; 0xa05
 800ae94:	491a      	ldr	r1, [pc, #104]	; (800af00 <http_recv+0x104>)
 800ae96:	481b      	ldr	r0, [pc, #108]	; (800af04 <http_recv+0x108>)
 800ae98:	f00d f97a 	bl	8018190 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800ae9c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aea0:	f113 0f05 	cmn.w	r3, #5
 800aea4:	d00b      	beq.n	800aebe <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	6a1b      	ldr	r3, [r3, #32]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d007      	beq.n	800aebe <http_recv+0xc2>
          pbuf_free(hs->req);
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	6a1b      	ldr	r3, [r3, #32]
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f001 fc3c 	bl	800c730 <pbuf_free>
          hs->req = NULL;
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	2200      	movs	r2, #0
 800aebc:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f001 fc36 	bl	800c730 <pbuf_free>
      if (parsed == ERR_OK) {
 800aec4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d104      	bne.n	800aed6 <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800aecc:	6979      	ldr	r1, [r7, #20]
 800aece:	68b8      	ldr	r0, [r7, #8]
 800aed0:	f7ff fc37 	bl	800a742 <http_send>
 800aed4:	e00c      	b.n	800aef0 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 800aed6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aeda:	f113 0f10 	cmn.w	r3, #16
 800aede:	d107      	bne.n	800aef0 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800aee0:	6979      	ldr	r1, [r7, #20]
 800aee2:	68b8      	ldr	r0, [r7, #8]
 800aee4:	f7ff fb4a 	bl	800a57c <http_close_conn>
 800aee8:	e002      	b.n	800aef0 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f001 fc20 	bl	800c730 <pbuf_free>
    }
  }
  return ERR_OK;
 800aef0:	2300      	movs	r3, #0
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3718      	adds	r7, #24
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}
 800aefa:	bf00      	nop
 800aefc:	0801a110 	.word	0x0801a110
 800af00:	0801a26c 	.word	0x0801a26c
 800af04:	0801a158 	.word	0x0801a158

0800af08 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b086      	sub	sp, #24
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	60f8      	str	r0, [r7, #12]
 800af10:	60b9      	str	r1, [r7, #8]
 800af12:	4613      	mov	r3, r2
 800af14:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800af16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d102      	bne.n	800af24 <http_accept+0x1c>
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d102      	bne.n	800af2a <http_accept+0x22>
    return ERR_VAL;
 800af24:	f06f 0305 	mvn.w	r3, #5
 800af28:	e025      	b.n	800af76 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800af2a:	2101      	movs	r1, #1
 800af2c:	68b8      	ldr	r0, [r7, #8]
 800af2e:	f003 f8af 	bl	800e090 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800af32:	f7ff fa35 	bl	800a3a0 <http_state_alloc>
 800af36:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d102      	bne.n	800af44 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800af3e:	f04f 33ff 	mov.w	r3, #4294967295
 800af42:	e018      	b.n	800af76 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	68ba      	ldr	r2, [r7, #8]
 800af48:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800af4a:	6979      	ldr	r1, [r7, #20]
 800af4c:	68b8      	ldr	r0, [r7, #8]
 800af4e:	f003 fa9f 	bl	800e490 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800af52:	490b      	ldr	r1, [pc, #44]	; (800af80 <http_accept+0x78>)
 800af54:	68b8      	ldr	r0, [r7, #8]
 800af56:	f003 faad 	bl	800e4b4 <tcp_recv>
  altcp_err(pcb, http_err);
 800af5a:	490a      	ldr	r1, [pc, #40]	; (800af84 <http_accept+0x7c>)
 800af5c:	68b8      	ldr	r0, [r7, #8]
 800af5e:	f003 faed 	bl	800e53c <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800af62:	2204      	movs	r2, #4
 800af64:	4908      	ldr	r1, [pc, #32]	; (800af88 <http_accept+0x80>)
 800af66:	68b8      	ldr	r0, [r7, #8]
 800af68:	f003 fb22 	bl	800e5b0 <tcp_poll>
  altcp_sent(pcb, http_sent);
 800af6c:	4907      	ldr	r1, [pc, #28]	; (800af8c <http_accept+0x84>)
 800af6e:	68b8      	ldr	r0, [r7, #8]
 800af70:	f003 fac2 	bl	800e4f8 <tcp_sent>

  return ERR_OK;
 800af74:	2300      	movs	r3, #0
}
 800af76:	4618      	mov	r0, r3
 800af78:	3718      	adds	r7, #24
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}
 800af7e:	bf00      	nop
 800af80:	0800adfd 	.word	0x0800adfd
 800af84:	0800ad31 	.word	0x0800ad31
 800af88:	0800ad8b 	.word	0x0800ad8b
 800af8c:	0800ad55 	.word	0x0800ad55

0800af90 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b084      	sub	sp, #16
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
 800af98:	460b      	mov	r3, r1
 800af9a:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d029      	beq.n	800aff6 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800afa2:	2101      	movs	r1, #1
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f003 f873 	bl	800e090 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800afaa:	887b      	ldrh	r3, [r7, #2]
 800afac:	461a      	mov	r2, r3
 800afae:	4914      	ldr	r1, [pc, #80]	; (800b000 <httpd_init_pcb+0x70>)
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f002 f9bf 	bl	800d334 <tcp_bind>
 800afb6:	4603      	mov	r3, r0
 800afb8:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800afba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d006      	beq.n	800afd0 <httpd_init_pcb+0x40>
 800afc2:	4b10      	ldr	r3, [pc, #64]	; (800b004 <httpd_init_pcb+0x74>)
 800afc4:	f640 2257 	movw	r2, #2647	; 0xa57
 800afc8:	490f      	ldr	r1, [pc, #60]	; (800b008 <httpd_init_pcb+0x78>)
 800afca:	4810      	ldr	r0, [pc, #64]	; (800b00c <httpd_init_pcb+0x7c>)
 800afcc:	f00d f8e0 	bl	8018190 <iprintf>
    pcb = altcp_listen(pcb);
 800afd0:	21ff      	movs	r1, #255	; 0xff
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	f002 fa66 	bl	800d4a4 <tcp_listen_with_backlog>
 800afd8:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d106      	bne.n	800afee <httpd_init_pcb+0x5e>
 800afe0:	4b08      	ldr	r3, [pc, #32]	; (800b004 <httpd_init_pcb+0x74>)
 800afe2:	f640 2259 	movw	r2, #2649	; 0xa59
 800afe6:	490a      	ldr	r1, [pc, #40]	; (800b010 <httpd_init_pcb+0x80>)
 800afe8:	4808      	ldr	r0, [pc, #32]	; (800b00c <httpd_init_pcb+0x7c>)
 800afea:	f00d f8d1 	bl	8018190 <iprintf>
    altcp_accept(pcb, http_accept);
 800afee:	4909      	ldr	r1, [pc, #36]	; (800b014 <httpd_init_pcb+0x84>)
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	f003 fac5 	bl	800e580 <tcp_accept>
  }
}
 800aff6:	bf00      	nop
 800aff8:	3710      	adds	r7, #16
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}
 800affe:	bf00      	nop
 800b000:	08028574 	.word	0x08028574
 800b004:	0801a110 	.word	0x0801a110
 800b008:	0801a298 	.word	0x0801a298
 800b00c:	0801a158 	.word	0x0801a158
 800b010:	0801a2b4 	.word	0x0801a2b4
 800b014:	0800af09 	.word	0x0800af09

0800b018 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b082      	sub	sp, #8
 800b01c:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800b01e:	202e      	movs	r0, #46	; 0x2e
 800b020:	f003 fa28 	bl	800e474 <tcp_new_ip_type>
 800b024:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d106      	bne.n	800b03a <httpd_init+0x22>
 800b02c:	4b07      	ldr	r3, [pc, #28]	; (800b04c <httpd_init+0x34>)
 800b02e:	f640 2272 	movw	r2, #2674	; 0xa72
 800b032:	4907      	ldr	r1, [pc, #28]	; (800b050 <httpd_init+0x38>)
 800b034:	4807      	ldr	r0, [pc, #28]	; (800b054 <httpd_init+0x3c>)
 800b036:	f00d f8ab 	bl	8018190 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800b03a:	2150      	movs	r1, #80	; 0x50
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f7ff ffa7 	bl	800af90 <httpd_init_pcb>
}
 800b042:	bf00      	nop
 800b044:	3708      	adds	r7, #8
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}
 800b04a:	bf00      	nop
 800b04c:	0801a110 	.word	0x0801a110
 800b050:	0801a2d4 	.word	0x0801a2d4
 800b054:	0801a158 	.word	0x0801a158

0800b058 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800b058:	b480      	push	{r7}
 800b05a:	b083      	sub	sp, #12
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	4603      	mov	r3, r0
 800b060:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800b062:	88fb      	ldrh	r3, [r7, #6]
 800b064:	021b      	lsls	r3, r3, #8
 800b066:	b21a      	sxth	r2, r3
 800b068:	88fb      	ldrh	r3, [r7, #6]
 800b06a:	0a1b      	lsrs	r3, r3, #8
 800b06c:	b29b      	uxth	r3, r3
 800b06e:	b21b      	sxth	r3, r3
 800b070:	4313      	orrs	r3, r2
 800b072:	b21b      	sxth	r3, r3
 800b074:	b29b      	uxth	r3, r3
}
 800b076:	4618      	mov	r0, r3
 800b078:	370c      	adds	r7, #12
 800b07a:	46bd      	mov	sp, r7
 800b07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b080:	4770      	bx	lr

0800b082 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800b082:	b480      	push	{r7}
 800b084:	b083      	sub	sp, #12
 800b086:	af00      	add	r7, sp, #0
 800b088:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	061a      	lsls	r2, r3, #24
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	021b      	lsls	r3, r3, #8
 800b092:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b096:	431a      	orrs	r2, r3
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	0a1b      	lsrs	r3, r3, #8
 800b09c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b0a0:	431a      	orrs	r2, r3
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	0e1b      	lsrs	r3, r3, #24
 800b0a6:	4313      	orrs	r3, r2
}
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	370c      	adds	r7, #12
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b2:	4770      	bx	lr

0800b0b4 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b086      	sub	sp, #24
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	60f8      	str	r0, [r7, #12]
 800b0bc:	60b9      	str	r1, [r7, #8]
 800b0be:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800b0c0:	68b8      	ldr	r0, [r7, #8]
 800b0c2:	f7f5 f89f 	bl	8000204 <strlen>
 800b0c6:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d101      	bne.n	800b0d2 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	e022      	b.n	800b118 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	617b      	str	r3, [r7, #20]
 800b0d6:	e012      	b.n	800b0fe <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800b0d8:	697b      	ldr	r3, [r7, #20]
 800b0da:	781a      	ldrb	r2, [r3, #0]
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	781b      	ldrb	r3, [r3, #0]
 800b0e0:	429a      	cmp	r2, r3
 800b0e2:	d109      	bne.n	800b0f8 <lwip_strnstr+0x44>
 800b0e4:	693a      	ldr	r2, [r7, #16]
 800b0e6:	68b9      	ldr	r1, [r7, #8]
 800b0e8:	6978      	ldr	r0, [r7, #20]
 800b0ea:	f00d f8e8 	bl	80182be <strncmp>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d101      	bne.n	800b0f8 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	e00f      	b.n	800b118 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	3301      	adds	r3, #1
 800b0fc:	617b      	str	r3, [r7, #20]
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	781b      	ldrb	r3, [r3, #0]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d007      	beq.n	800b116 <lwip_strnstr+0x62>
 800b106:	697a      	ldr	r2, [r7, #20]
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	441a      	add	r2, r3
 800b10c:	68f9      	ldr	r1, [r7, #12]
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	440b      	add	r3, r1
 800b112:	429a      	cmp	r2, r3
 800b114:	d9e0      	bls.n	800b0d8 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800b116:	2300      	movs	r3, #0
}
 800b118:	4618      	mov	r0, r3
 800b11a:	3718      	adds	r7, #24
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}

0800b120 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b082      	sub	sp, #8
 800b124:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800b126:	2300      	movs	r3, #0
 800b128:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800b12a:	f00c ff27 	bl	8017f7c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800b12e:	f000 f8d5 	bl	800b2dc <mem_init>
  memp_init();
 800b132:	f000 fc31 	bl	800b998 <memp_init>
  pbuf_init();
  netif_init();
 800b136:	f000 fcf7 	bl	800bb28 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800b13a:	f007 ffcf 	bl	80130dc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800b13e:	f001 fda1 	bl	800cc84 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800b142:	f007 ff13 	bl	8012f6c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800b146:	bf00      	nop
 800b148:	3708      	adds	r7, #8
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}
	...

0800b150 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800b150:	b480      	push	{r7}
 800b152:	b083      	sub	sp, #12
 800b154:	af00      	add	r7, sp, #0
 800b156:	4603      	mov	r3, r0
 800b158:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800b15a:	4b05      	ldr	r3, [pc, #20]	; (800b170 <ptr_to_mem+0x20>)
 800b15c:	681a      	ldr	r2, [r3, #0]
 800b15e:	88fb      	ldrh	r3, [r7, #6]
 800b160:	4413      	add	r3, r2
}
 800b162:	4618      	mov	r0, r3
 800b164:	370c      	adds	r7, #12
 800b166:	46bd      	mov	sp, r7
 800b168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16c:	4770      	bx	lr
 800b16e:	bf00      	nop
 800b170:	20008c10 	.word	0x20008c10

0800b174 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800b174:	b480      	push	{r7}
 800b176:	b083      	sub	sp, #12
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	4a05      	ldr	r2, [pc, #20]	; (800b194 <mem_to_ptr+0x20>)
 800b180:	6812      	ldr	r2, [r2, #0]
 800b182:	1a9b      	subs	r3, r3, r2
 800b184:	b29b      	uxth	r3, r3
}
 800b186:	4618      	mov	r0, r3
 800b188:	370c      	adds	r7, #12
 800b18a:	46bd      	mov	sp, r7
 800b18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b190:	4770      	bx	lr
 800b192:	bf00      	nop
 800b194:	20008c10 	.word	0x20008c10

0800b198 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b198:	b590      	push	{r4, r7, lr}
 800b19a:	b085      	sub	sp, #20
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b1a0:	4b45      	ldr	r3, [pc, #276]	; (800b2b8 <plug_holes+0x120>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	687a      	ldr	r2, [r7, #4]
 800b1a6:	429a      	cmp	r2, r3
 800b1a8:	d206      	bcs.n	800b1b8 <plug_holes+0x20>
 800b1aa:	4b44      	ldr	r3, [pc, #272]	; (800b2bc <plug_holes+0x124>)
 800b1ac:	f240 12df 	movw	r2, #479	; 0x1df
 800b1b0:	4943      	ldr	r1, [pc, #268]	; (800b2c0 <plug_holes+0x128>)
 800b1b2:	4844      	ldr	r0, [pc, #272]	; (800b2c4 <plug_holes+0x12c>)
 800b1b4:	f00c ffec 	bl	8018190 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b1b8:	4b43      	ldr	r3, [pc, #268]	; (800b2c8 <plug_holes+0x130>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	687a      	ldr	r2, [r7, #4]
 800b1be:	429a      	cmp	r2, r3
 800b1c0:	d306      	bcc.n	800b1d0 <plug_holes+0x38>
 800b1c2:	4b3e      	ldr	r3, [pc, #248]	; (800b2bc <plug_holes+0x124>)
 800b1c4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800b1c8:	4940      	ldr	r1, [pc, #256]	; (800b2cc <plug_holes+0x134>)
 800b1ca:	483e      	ldr	r0, [pc, #248]	; (800b2c4 <plug_holes+0x12c>)
 800b1cc:	f00c ffe0 	bl	8018190 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	791b      	ldrb	r3, [r3, #4]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d006      	beq.n	800b1e6 <plug_holes+0x4e>
 800b1d8:	4b38      	ldr	r3, [pc, #224]	; (800b2bc <plug_holes+0x124>)
 800b1da:	f240 12e1 	movw	r2, #481	; 0x1e1
 800b1de:	493c      	ldr	r1, [pc, #240]	; (800b2d0 <plug_holes+0x138>)
 800b1e0:	4838      	ldr	r0, [pc, #224]	; (800b2c4 <plug_holes+0x12c>)
 800b1e2:	f00c ffd5 	bl	8018190 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	881b      	ldrh	r3, [r3, #0]
 800b1ea:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b1ee:	d906      	bls.n	800b1fe <plug_holes+0x66>
 800b1f0:	4b32      	ldr	r3, [pc, #200]	; (800b2bc <plug_holes+0x124>)
 800b1f2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800b1f6:	4937      	ldr	r1, [pc, #220]	; (800b2d4 <plug_holes+0x13c>)
 800b1f8:	4832      	ldr	r0, [pc, #200]	; (800b2c4 <plug_holes+0x12c>)
 800b1fa:	f00c ffc9 	bl	8018190 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	881b      	ldrh	r3, [r3, #0]
 800b202:	4618      	mov	r0, r3
 800b204:	f7ff ffa4 	bl	800b150 <ptr_to_mem>
 800b208:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b20a:	687a      	ldr	r2, [r7, #4]
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	429a      	cmp	r2, r3
 800b210:	d024      	beq.n	800b25c <plug_holes+0xc4>
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	791b      	ldrb	r3, [r3, #4]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d120      	bne.n	800b25c <plug_holes+0xc4>
 800b21a:	4b2b      	ldr	r3, [pc, #172]	; (800b2c8 <plug_holes+0x130>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	68fa      	ldr	r2, [r7, #12]
 800b220:	429a      	cmp	r2, r3
 800b222:	d01b      	beq.n	800b25c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800b224:	4b2c      	ldr	r3, [pc, #176]	; (800b2d8 <plug_holes+0x140>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	68fa      	ldr	r2, [r7, #12]
 800b22a:	429a      	cmp	r2, r3
 800b22c:	d102      	bne.n	800b234 <plug_holes+0x9c>
      lfree = mem;
 800b22e:	4a2a      	ldr	r2, [pc, #168]	; (800b2d8 <plug_holes+0x140>)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	881a      	ldrh	r2, [r3, #0]
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	881b      	ldrh	r3, [r3, #0]
 800b240:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b244:	d00a      	beq.n	800b25c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	881b      	ldrh	r3, [r3, #0]
 800b24a:	4618      	mov	r0, r3
 800b24c:	f7ff ff80 	bl	800b150 <ptr_to_mem>
 800b250:	4604      	mov	r4, r0
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f7ff ff8e 	bl	800b174 <mem_to_ptr>
 800b258:	4603      	mov	r3, r0
 800b25a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	885b      	ldrh	r3, [r3, #2]
 800b260:	4618      	mov	r0, r3
 800b262:	f7ff ff75 	bl	800b150 <ptr_to_mem>
 800b266:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800b268:	68ba      	ldr	r2, [r7, #8]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	429a      	cmp	r2, r3
 800b26e:	d01f      	beq.n	800b2b0 <plug_holes+0x118>
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	791b      	ldrb	r3, [r3, #4]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d11b      	bne.n	800b2b0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800b278:	4b17      	ldr	r3, [pc, #92]	; (800b2d8 <plug_holes+0x140>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	687a      	ldr	r2, [r7, #4]
 800b27e:	429a      	cmp	r2, r3
 800b280:	d102      	bne.n	800b288 <plug_holes+0xf0>
      lfree = pmem;
 800b282:	4a15      	ldr	r2, [pc, #84]	; (800b2d8 <plug_holes+0x140>)
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	881a      	ldrh	r2, [r3, #0]
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	881b      	ldrh	r3, [r3, #0]
 800b294:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b298:	d00a      	beq.n	800b2b0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	881b      	ldrh	r3, [r3, #0]
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f7ff ff56 	bl	800b150 <ptr_to_mem>
 800b2a4:	4604      	mov	r4, r0
 800b2a6:	68b8      	ldr	r0, [r7, #8]
 800b2a8:	f7ff ff64 	bl	800b174 <mem_to_ptr>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800b2b0:	bf00      	nop
 800b2b2:	3714      	adds	r7, #20
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd90      	pop	{r4, r7, pc}
 800b2b8:	20008c10 	.word	0x20008c10
 800b2bc:	0801a31c 	.word	0x0801a31c
 800b2c0:	0801a34c 	.word	0x0801a34c
 800b2c4:	0801a364 	.word	0x0801a364
 800b2c8:	20008c14 	.word	0x20008c14
 800b2cc:	0801a38c 	.word	0x0801a38c
 800b2d0:	0801a3a8 	.word	0x0801a3a8
 800b2d4:	0801a3c4 	.word	0x0801a3c4
 800b2d8:	20008c1c 	.word	0x20008c1c

0800b2dc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b082      	sub	sp, #8
 800b2e0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b2e2:	4b1f      	ldr	r3, [pc, #124]	; (800b360 <mem_init+0x84>)
 800b2e4:	3303      	adds	r3, #3
 800b2e6:	f023 0303 	bic.w	r3, r3, #3
 800b2ea:	461a      	mov	r2, r3
 800b2ec:	4b1d      	ldr	r3, [pc, #116]	; (800b364 <mem_init+0x88>)
 800b2ee:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800b2f0:	4b1c      	ldr	r3, [pc, #112]	; (800b364 <mem_init+0x88>)
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b2fc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2200      	movs	r2, #0
 800b302:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2200      	movs	r2, #0
 800b308:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800b30a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800b30e:	f7ff ff1f 	bl	800b150 <ptr_to_mem>
 800b312:	4602      	mov	r2, r0
 800b314:	4b14      	ldr	r3, [pc, #80]	; (800b368 <mem_init+0x8c>)
 800b316:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 800b318:	4b13      	ldr	r3, [pc, #76]	; (800b368 <mem_init+0x8c>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	2201      	movs	r2, #1
 800b31e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800b320:	4b11      	ldr	r3, [pc, #68]	; (800b368 <mem_init+0x8c>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b328:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800b32a:	4b0f      	ldr	r3, [pc, #60]	; (800b368 <mem_init+0x8c>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b332:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800b334:	4b0b      	ldr	r3, [pc, #44]	; (800b364 <mem_init+0x88>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	4a0c      	ldr	r2, [pc, #48]	; (800b36c <mem_init+0x90>)
 800b33a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800b33c:	480c      	ldr	r0, [pc, #48]	; (800b370 <mem_init+0x94>)
 800b33e:	f00c fe2b 	bl	8017f98 <sys_mutex_new>
 800b342:	4603      	mov	r3, r0
 800b344:	2b00      	cmp	r3, #0
 800b346:	d006      	beq.n	800b356 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800b348:	4b0a      	ldr	r3, [pc, #40]	; (800b374 <mem_init+0x98>)
 800b34a:	f240 221f 	movw	r2, #543	; 0x21f
 800b34e:	490a      	ldr	r1, [pc, #40]	; (800b378 <mem_init+0x9c>)
 800b350:	480a      	ldr	r0, [pc, #40]	; (800b37c <mem_init+0xa0>)
 800b352:	f00c ff1d 	bl	8018190 <iprintf>
  }
}
 800b356:	bf00      	nop
 800b358:	3708      	adds	r7, #8
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}
 800b35e:	bf00      	nop
 800b360:	2000c3bc 	.word	0x2000c3bc
 800b364:	20008c10 	.word	0x20008c10
 800b368:	20008c14 	.word	0x20008c14
 800b36c:	20008c1c 	.word	0x20008c1c
 800b370:	20008c18 	.word	0x20008c18
 800b374:	0801a31c 	.word	0x0801a31c
 800b378:	0801a3f0 	.word	0x0801a3f0
 800b37c:	0801a364 	.word	0x0801a364

0800b380 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b086      	sub	sp, #24
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800b388:	6878      	ldr	r0, [r7, #4]
 800b38a:	f7ff fef3 	bl	800b174 <mem_to_ptr>
 800b38e:	4603      	mov	r3, r0
 800b390:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	881b      	ldrh	r3, [r3, #0]
 800b396:	4618      	mov	r0, r3
 800b398:	f7ff feda 	bl	800b150 <ptr_to_mem>
 800b39c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	885b      	ldrh	r3, [r3, #2]
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f7ff fed4 	bl	800b150 <ptr_to_mem>
 800b3a8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	881b      	ldrh	r3, [r3, #0]
 800b3ae:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b3b2:	d818      	bhi.n	800b3e6 <mem_link_valid+0x66>
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	885b      	ldrh	r3, [r3, #2]
 800b3b8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b3bc:	d813      	bhi.n	800b3e6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b3c2:	8afa      	ldrh	r2, [r7, #22]
 800b3c4:	429a      	cmp	r2, r3
 800b3c6:	d004      	beq.n	800b3d2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	881b      	ldrh	r3, [r3, #0]
 800b3cc:	8afa      	ldrh	r2, [r7, #22]
 800b3ce:	429a      	cmp	r2, r3
 800b3d0:	d109      	bne.n	800b3e6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b3d2:	4b08      	ldr	r3, [pc, #32]	; (800b3f4 <mem_link_valid+0x74>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b3d6:	693a      	ldr	r2, [r7, #16]
 800b3d8:	429a      	cmp	r2, r3
 800b3da:	d006      	beq.n	800b3ea <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b3dc:	693b      	ldr	r3, [r7, #16]
 800b3de:	885b      	ldrh	r3, [r3, #2]
 800b3e0:	8afa      	ldrh	r2, [r7, #22]
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	d001      	beq.n	800b3ea <mem_link_valid+0x6a>
    return 0;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	e000      	b.n	800b3ec <mem_link_valid+0x6c>
  }
  return 1;
 800b3ea:	2301      	movs	r3, #1
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3718      	adds	r7, #24
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}
 800b3f4:	20008c14 	.word	0x20008c14

0800b3f8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b088      	sub	sp, #32
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d070      	beq.n	800b4e8 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f003 0303 	and.w	r3, r3, #3
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d00d      	beq.n	800b42c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800b410:	4b37      	ldr	r3, [pc, #220]	; (800b4f0 <mem_free+0xf8>)
 800b412:	f240 2273 	movw	r2, #627	; 0x273
 800b416:	4937      	ldr	r1, [pc, #220]	; (800b4f4 <mem_free+0xfc>)
 800b418:	4837      	ldr	r0, [pc, #220]	; (800b4f8 <mem_free+0x100>)
 800b41a:	f00c feb9 	bl	8018190 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b41e:	f00c fe19 	bl	8018054 <sys_arch_protect>
 800b422:	60f8      	str	r0, [r7, #12]
 800b424:	68f8      	ldr	r0, [r7, #12]
 800b426:	f00c fe23 	bl	8018070 <sys_arch_unprotect>
    return;
 800b42a:	e05e      	b.n	800b4ea <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	3b08      	subs	r3, #8
 800b430:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800b432:	4b32      	ldr	r3, [pc, #200]	; (800b4fc <mem_free+0x104>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	69fa      	ldr	r2, [r7, #28]
 800b438:	429a      	cmp	r2, r3
 800b43a:	d306      	bcc.n	800b44a <mem_free+0x52>
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f103 020c 	add.w	r2, r3, #12
 800b442:	4b2f      	ldr	r3, [pc, #188]	; (800b500 <mem_free+0x108>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	429a      	cmp	r2, r3
 800b448:	d90d      	bls.n	800b466 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800b44a:	4b29      	ldr	r3, [pc, #164]	; (800b4f0 <mem_free+0xf8>)
 800b44c:	f240 227f 	movw	r2, #639	; 0x27f
 800b450:	492c      	ldr	r1, [pc, #176]	; (800b504 <mem_free+0x10c>)
 800b452:	4829      	ldr	r0, [pc, #164]	; (800b4f8 <mem_free+0x100>)
 800b454:	f00c fe9c 	bl	8018190 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b458:	f00c fdfc 	bl	8018054 <sys_arch_protect>
 800b45c:	6138      	str	r0, [r7, #16]
 800b45e:	6938      	ldr	r0, [r7, #16]
 800b460:	f00c fe06 	bl	8018070 <sys_arch_unprotect>
    return;
 800b464:	e041      	b.n	800b4ea <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b466:	4828      	ldr	r0, [pc, #160]	; (800b508 <mem_free+0x110>)
 800b468:	f00c fdb2 	bl	8017fd0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800b46c:	69fb      	ldr	r3, [r7, #28]
 800b46e:	791b      	ldrb	r3, [r3, #4]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d110      	bne.n	800b496 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800b474:	4b1e      	ldr	r3, [pc, #120]	; (800b4f0 <mem_free+0xf8>)
 800b476:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800b47a:	4924      	ldr	r1, [pc, #144]	; (800b50c <mem_free+0x114>)
 800b47c:	481e      	ldr	r0, [pc, #120]	; (800b4f8 <mem_free+0x100>)
 800b47e:	f00c fe87 	bl	8018190 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b482:	4821      	ldr	r0, [pc, #132]	; (800b508 <mem_free+0x110>)
 800b484:	f00c fdb3 	bl	8017fee <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b488:	f00c fde4 	bl	8018054 <sys_arch_protect>
 800b48c:	6178      	str	r0, [r7, #20]
 800b48e:	6978      	ldr	r0, [r7, #20]
 800b490:	f00c fdee 	bl	8018070 <sys_arch_unprotect>
    return;
 800b494:	e029      	b.n	800b4ea <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800b496:	69f8      	ldr	r0, [r7, #28]
 800b498:	f7ff ff72 	bl	800b380 <mem_link_valid>
 800b49c:	4603      	mov	r3, r0
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d110      	bne.n	800b4c4 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800b4a2:	4b13      	ldr	r3, [pc, #76]	; (800b4f0 <mem_free+0xf8>)
 800b4a4:	f240 2295 	movw	r2, #661	; 0x295
 800b4a8:	4919      	ldr	r1, [pc, #100]	; (800b510 <mem_free+0x118>)
 800b4aa:	4813      	ldr	r0, [pc, #76]	; (800b4f8 <mem_free+0x100>)
 800b4ac:	f00c fe70 	bl	8018190 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b4b0:	4815      	ldr	r0, [pc, #84]	; (800b508 <mem_free+0x110>)
 800b4b2:	f00c fd9c 	bl	8017fee <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b4b6:	f00c fdcd 	bl	8018054 <sys_arch_protect>
 800b4ba:	61b8      	str	r0, [r7, #24]
 800b4bc:	69b8      	ldr	r0, [r7, #24]
 800b4be:	f00c fdd7 	bl	8018070 <sys_arch_unprotect>
    return;
 800b4c2:	e012      	b.n	800b4ea <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800b4c4:	69fb      	ldr	r3, [r7, #28]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800b4ca:	4b12      	ldr	r3, [pc, #72]	; (800b514 <mem_free+0x11c>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	69fa      	ldr	r2, [r7, #28]
 800b4d0:	429a      	cmp	r2, r3
 800b4d2:	d202      	bcs.n	800b4da <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800b4d4:	4a0f      	ldr	r2, [pc, #60]	; (800b514 <mem_free+0x11c>)
 800b4d6:	69fb      	ldr	r3, [r7, #28]
 800b4d8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800b4da:	69f8      	ldr	r0, [r7, #28]
 800b4dc:	f7ff fe5c 	bl	800b198 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b4e0:	4809      	ldr	r0, [pc, #36]	; (800b508 <mem_free+0x110>)
 800b4e2:	f00c fd84 	bl	8017fee <sys_mutex_unlock>
 800b4e6:	e000      	b.n	800b4ea <mem_free+0xf2>
    return;
 800b4e8:	bf00      	nop
}
 800b4ea:	3720      	adds	r7, #32
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}
 800b4f0:	0801a31c 	.word	0x0801a31c
 800b4f4:	0801a40c 	.word	0x0801a40c
 800b4f8:	0801a364 	.word	0x0801a364
 800b4fc:	20008c10 	.word	0x20008c10
 800b500:	20008c14 	.word	0x20008c14
 800b504:	0801a430 	.word	0x0801a430
 800b508:	20008c18 	.word	0x20008c18
 800b50c:	0801a44c 	.word	0x0801a44c
 800b510:	0801a474 	.word	0x0801a474
 800b514:	20008c1c 	.word	0x20008c1c

0800b518 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b088      	sub	sp, #32
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
 800b520:	460b      	mov	r3, r1
 800b522:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800b524:	887b      	ldrh	r3, [r7, #2]
 800b526:	3303      	adds	r3, #3
 800b528:	b29b      	uxth	r3, r3
 800b52a:	f023 0303 	bic.w	r3, r3, #3
 800b52e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800b530:	8bfb      	ldrh	r3, [r7, #30]
 800b532:	2b0b      	cmp	r3, #11
 800b534:	d801      	bhi.n	800b53a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800b536:	230c      	movs	r3, #12
 800b538:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800b53a:	8bfb      	ldrh	r3, [r7, #30]
 800b53c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b540:	d803      	bhi.n	800b54a <mem_trim+0x32>
 800b542:	8bfa      	ldrh	r2, [r7, #30]
 800b544:	887b      	ldrh	r3, [r7, #2]
 800b546:	429a      	cmp	r2, r3
 800b548:	d201      	bcs.n	800b54e <mem_trim+0x36>
    return NULL;
 800b54a:	2300      	movs	r3, #0
 800b54c:	e0d8      	b.n	800b700 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b54e:	4b6e      	ldr	r3, [pc, #440]	; (800b708 <mem_trim+0x1f0>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	687a      	ldr	r2, [r7, #4]
 800b554:	429a      	cmp	r2, r3
 800b556:	d304      	bcc.n	800b562 <mem_trim+0x4a>
 800b558:	4b6c      	ldr	r3, [pc, #432]	; (800b70c <mem_trim+0x1f4>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	687a      	ldr	r2, [r7, #4]
 800b55e:	429a      	cmp	r2, r3
 800b560:	d306      	bcc.n	800b570 <mem_trim+0x58>
 800b562:	4b6b      	ldr	r3, [pc, #428]	; (800b710 <mem_trim+0x1f8>)
 800b564:	f240 22d2 	movw	r2, #722	; 0x2d2
 800b568:	496a      	ldr	r1, [pc, #424]	; (800b714 <mem_trim+0x1fc>)
 800b56a:	486b      	ldr	r0, [pc, #428]	; (800b718 <mem_trim+0x200>)
 800b56c:	f00c fe10 	bl	8018190 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b570:	4b65      	ldr	r3, [pc, #404]	; (800b708 <mem_trim+0x1f0>)
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	687a      	ldr	r2, [r7, #4]
 800b576:	429a      	cmp	r2, r3
 800b578:	d304      	bcc.n	800b584 <mem_trim+0x6c>
 800b57a:	4b64      	ldr	r3, [pc, #400]	; (800b70c <mem_trim+0x1f4>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	687a      	ldr	r2, [r7, #4]
 800b580:	429a      	cmp	r2, r3
 800b582:	d307      	bcc.n	800b594 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b584:	f00c fd66 	bl	8018054 <sys_arch_protect>
 800b588:	60b8      	str	r0, [r7, #8]
 800b58a:	68b8      	ldr	r0, [r7, #8]
 800b58c:	f00c fd70 	bl	8018070 <sys_arch_unprotect>
    return rmem;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	e0b5      	b.n	800b700 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	3b08      	subs	r3, #8
 800b598:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800b59a:	69b8      	ldr	r0, [r7, #24]
 800b59c:	f7ff fdea 	bl	800b174 <mem_to_ptr>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800b5a4:	69bb      	ldr	r3, [r7, #24]
 800b5a6:	881a      	ldrh	r2, [r3, #0]
 800b5a8:	8afb      	ldrh	r3, [r7, #22]
 800b5aa:	1ad3      	subs	r3, r2, r3
 800b5ac:	b29b      	uxth	r3, r3
 800b5ae:	3b08      	subs	r3, #8
 800b5b0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800b5b2:	8bfa      	ldrh	r2, [r7, #30]
 800b5b4:	8abb      	ldrh	r3, [r7, #20]
 800b5b6:	429a      	cmp	r2, r3
 800b5b8:	d906      	bls.n	800b5c8 <mem_trim+0xb0>
 800b5ba:	4b55      	ldr	r3, [pc, #340]	; (800b710 <mem_trim+0x1f8>)
 800b5bc:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800b5c0:	4956      	ldr	r1, [pc, #344]	; (800b71c <mem_trim+0x204>)
 800b5c2:	4855      	ldr	r0, [pc, #340]	; (800b718 <mem_trim+0x200>)
 800b5c4:	f00c fde4 	bl	8018190 <iprintf>
  if (newsize > size) {
 800b5c8:	8bfa      	ldrh	r2, [r7, #30]
 800b5ca:	8abb      	ldrh	r3, [r7, #20]
 800b5cc:	429a      	cmp	r2, r3
 800b5ce:	d901      	bls.n	800b5d4 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	e095      	b.n	800b700 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800b5d4:	8bfa      	ldrh	r2, [r7, #30]
 800b5d6:	8abb      	ldrh	r3, [r7, #20]
 800b5d8:	429a      	cmp	r2, r3
 800b5da:	d101      	bne.n	800b5e0 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	e08f      	b.n	800b700 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b5e0:	484f      	ldr	r0, [pc, #316]	; (800b720 <mem_trim+0x208>)
 800b5e2:	f00c fcf5 	bl	8017fd0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800b5e6:	69bb      	ldr	r3, [r7, #24]
 800b5e8:	881b      	ldrh	r3, [r3, #0]
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f7ff fdb0 	bl	800b150 <ptr_to_mem>
 800b5f0:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	791b      	ldrb	r3, [r3, #4]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d13f      	bne.n	800b67a <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b5fa:	69bb      	ldr	r3, [r7, #24]
 800b5fc:	881b      	ldrh	r3, [r3, #0]
 800b5fe:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b602:	d106      	bne.n	800b612 <mem_trim+0xfa>
 800b604:	4b42      	ldr	r3, [pc, #264]	; (800b710 <mem_trim+0x1f8>)
 800b606:	f240 22f5 	movw	r2, #757	; 0x2f5
 800b60a:	4946      	ldr	r1, [pc, #280]	; (800b724 <mem_trim+0x20c>)
 800b60c:	4842      	ldr	r0, [pc, #264]	; (800b718 <mem_trim+0x200>)
 800b60e:	f00c fdbf 	bl	8018190 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800b612:	693b      	ldr	r3, [r7, #16]
 800b614:	881b      	ldrh	r3, [r3, #0]
 800b616:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b618:	8afa      	ldrh	r2, [r7, #22]
 800b61a:	8bfb      	ldrh	r3, [r7, #30]
 800b61c:	4413      	add	r3, r2
 800b61e:	b29b      	uxth	r3, r3
 800b620:	3308      	adds	r3, #8
 800b622:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800b624:	4b40      	ldr	r3, [pc, #256]	; (800b728 <mem_trim+0x210>)
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	693a      	ldr	r2, [r7, #16]
 800b62a:	429a      	cmp	r2, r3
 800b62c:	d106      	bne.n	800b63c <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800b62e:	89fb      	ldrh	r3, [r7, #14]
 800b630:	4618      	mov	r0, r3
 800b632:	f7ff fd8d 	bl	800b150 <ptr_to_mem>
 800b636:	4602      	mov	r2, r0
 800b638:	4b3b      	ldr	r3, [pc, #236]	; (800b728 <mem_trim+0x210>)
 800b63a:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800b63c:	89fb      	ldrh	r3, [r7, #14]
 800b63e:	4618      	mov	r0, r3
 800b640:	f7ff fd86 	bl	800b150 <ptr_to_mem>
 800b644:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800b646:	693b      	ldr	r3, [r7, #16]
 800b648:	2200      	movs	r2, #0
 800b64a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	89ba      	ldrh	r2, [r7, #12]
 800b650:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800b652:	693b      	ldr	r3, [r7, #16]
 800b654:	8afa      	ldrh	r2, [r7, #22]
 800b656:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800b658:	69bb      	ldr	r3, [r7, #24]
 800b65a:	89fa      	ldrh	r2, [r7, #14]
 800b65c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b65e:	693b      	ldr	r3, [r7, #16]
 800b660:	881b      	ldrh	r3, [r3, #0]
 800b662:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b666:	d047      	beq.n	800b6f8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	881b      	ldrh	r3, [r3, #0]
 800b66c:	4618      	mov	r0, r3
 800b66e:	f7ff fd6f 	bl	800b150 <ptr_to_mem>
 800b672:	4602      	mov	r2, r0
 800b674:	89fb      	ldrh	r3, [r7, #14]
 800b676:	8053      	strh	r3, [r2, #2]
 800b678:	e03e      	b.n	800b6f8 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800b67a:	8bfb      	ldrh	r3, [r7, #30]
 800b67c:	f103 0214 	add.w	r2, r3, #20
 800b680:	8abb      	ldrh	r3, [r7, #20]
 800b682:	429a      	cmp	r2, r3
 800b684:	d838      	bhi.n	800b6f8 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b686:	8afa      	ldrh	r2, [r7, #22]
 800b688:	8bfb      	ldrh	r3, [r7, #30]
 800b68a:	4413      	add	r3, r2
 800b68c:	b29b      	uxth	r3, r3
 800b68e:	3308      	adds	r3, #8
 800b690:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b692:	69bb      	ldr	r3, [r7, #24]
 800b694:	881b      	ldrh	r3, [r3, #0]
 800b696:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b69a:	d106      	bne.n	800b6aa <mem_trim+0x192>
 800b69c:	4b1c      	ldr	r3, [pc, #112]	; (800b710 <mem_trim+0x1f8>)
 800b69e:	f240 3216 	movw	r2, #790	; 0x316
 800b6a2:	4920      	ldr	r1, [pc, #128]	; (800b724 <mem_trim+0x20c>)
 800b6a4:	481c      	ldr	r0, [pc, #112]	; (800b718 <mem_trim+0x200>)
 800b6a6:	f00c fd73 	bl	8018190 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800b6aa:	89fb      	ldrh	r3, [r7, #14]
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	f7ff fd4f 	bl	800b150 <ptr_to_mem>
 800b6b2:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800b6b4:	4b1c      	ldr	r3, [pc, #112]	; (800b728 <mem_trim+0x210>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	693a      	ldr	r2, [r7, #16]
 800b6ba:	429a      	cmp	r2, r3
 800b6bc:	d202      	bcs.n	800b6c4 <mem_trim+0x1ac>
      lfree = mem2;
 800b6be:	4a1a      	ldr	r2, [pc, #104]	; (800b728 <mem_trim+0x210>)
 800b6c0:	693b      	ldr	r3, [r7, #16]
 800b6c2:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800b6ca:	69bb      	ldr	r3, [r7, #24]
 800b6cc:	881a      	ldrh	r2, [r3, #0]
 800b6ce:	693b      	ldr	r3, [r7, #16]
 800b6d0:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800b6d2:	693b      	ldr	r3, [r7, #16]
 800b6d4:	8afa      	ldrh	r2, [r7, #22]
 800b6d6:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b6d8:	69bb      	ldr	r3, [r7, #24]
 800b6da:	89fa      	ldrh	r2, [r7, #14]
 800b6dc:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b6de:	693b      	ldr	r3, [r7, #16]
 800b6e0:	881b      	ldrh	r3, [r3, #0]
 800b6e2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b6e6:	d007      	beq.n	800b6f8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	881b      	ldrh	r3, [r3, #0]
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f7ff fd2f 	bl	800b150 <ptr_to_mem>
 800b6f2:	4602      	mov	r2, r0
 800b6f4:	89fb      	ldrh	r3, [r7, #14]
 800b6f6:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b6f8:	4809      	ldr	r0, [pc, #36]	; (800b720 <mem_trim+0x208>)
 800b6fa:	f00c fc78 	bl	8017fee <sys_mutex_unlock>
  return rmem;
 800b6fe:	687b      	ldr	r3, [r7, #4]
}
 800b700:	4618      	mov	r0, r3
 800b702:	3720      	adds	r7, #32
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}
 800b708:	20008c10 	.word	0x20008c10
 800b70c:	20008c14 	.word	0x20008c14
 800b710:	0801a31c 	.word	0x0801a31c
 800b714:	0801a4a8 	.word	0x0801a4a8
 800b718:	0801a364 	.word	0x0801a364
 800b71c:	0801a4c0 	.word	0x0801a4c0
 800b720:	20008c18 	.word	0x20008c18
 800b724:	0801a4e0 	.word	0x0801a4e0
 800b728:	20008c1c 	.word	0x20008c1c

0800b72c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b088      	sub	sp, #32
 800b730:	af00      	add	r7, sp, #0
 800b732:	4603      	mov	r3, r0
 800b734:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800b736:	88fb      	ldrh	r3, [r7, #6]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d101      	bne.n	800b740 <mem_malloc+0x14>
    return NULL;
 800b73c:	2300      	movs	r3, #0
 800b73e:	e0e2      	b.n	800b906 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800b740:	88fb      	ldrh	r3, [r7, #6]
 800b742:	3303      	adds	r3, #3
 800b744:	b29b      	uxth	r3, r3
 800b746:	f023 0303 	bic.w	r3, r3, #3
 800b74a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800b74c:	8bbb      	ldrh	r3, [r7, #28]
 800b74e:	2b0b      	cmp	r3, #11
 800b750:	d801      	bhi.n	800b756 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b752:	230c      	movs	r3, #12
 800b754:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800b756:	8bbb      	ldrh	r3, [r7, #28]
 800b758:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b75c:	d803      	bhi.n	800b766 <mem_malloc+0x3a>
 800b75e:	8bba      	ldrh	r2, [r7, #28]
 800b760:	88fb      	ldrh	r3, [r7, #6]
 800b762:	429a      	cmp	r2, r3
 800b764:	d201      	bcs.n	800b76a <mem_malloc+0x3e>
    return NULL;
 800b766:	2300      	movs	r3, #0
 800b768:	e0cd      	b.n	800b906 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800b76a:	4869      	ldr	r0, [pc, #420]	; (800b910 <mem_malloc+0x1e4>)
 800b76c:	f00c fc30 	bl	8017fd0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b770:	4b68      	ldr	r3, [pc, #416]	; (800b914 <mem_malloc+0x1e8>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	4618      	mov	r0, r3
 800b776:	f7ff fcfd 	bl	800b174 <mem_to_ptr>
 800b77a:	4603      	mov	r3, r0
 800b77c:	83fb      	strh	r3, [r7, #30]
 800b77e:	e0b7      	b.n	800b8f0 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800b780:	8bfb      	ldrh	r3, [r7, #30]
 800b782:	4618      	mov	r0, r3
 800b784:	f7ff fce4 	bl	800b150 <ptr_to_mem>
 800b788:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b78a:	697b      	ldr	r3, [r7, #20]
 800b78c:	791b      	ldrb	r3, [r3, #4]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	f040 80a7 	bne.w	800b8e2 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	881b      	ldrh	r3, [r3, #0]
 800b798:	461a      	mov	r2, r3
 800b79a:	8bfb      	ldrh	r3, [r7, #30]
 800b79c:	1ad3      	subs	r3, r2, r3
 800b79e:	f1a3 0208 	sub.w	r2, r3, #8
 800b7a2:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800b7a4:	429a      	cmp	r2, r3
 800b7a6:	f0c0 809c 	bcc.w	800b8e2 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	881b      	ldrh	r3, [r3, #0]
 800b7ae:	461a      	mov	r2, r3
 800b7b0:	8bfb      	ldrh	r3, [r7, #30]
 800b7b2:	1ad3      	subs	r3, r2, r3
 800b7b4:	f1a3 0208 	sub.w	r2, r3, #8
 800b7b8:	8bbb      	ldrh	r3, [r7, #28]
 800b7ba:	3314      	adds	r3, #20
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	d333      	bcc.n	800b828 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800b7c0:	8bfa      	ldrh	r2, [r7, #30]
 800b7c2:	8bbb      	ldrh	r3, [r7, #28]
 800b7c4:	4413      	add	r3, r2
 800b7c6:	b29b      	uxth	r3, r3
 800b7c8:	3308      	adds	r3, #8
 800b7ca:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800b7cc:	8a7b      	ldrh	r3, [r7, #18]
 800b7ce:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b7d2:	d106      	bne.n	800b7e2 <mem_malloc+0xb6>
 800b7d4:	4b50      	ldr	r3, [pc, #320]	; (800b918 <mem_malloc+0x1ec>)
 800b7d6:	f240 3287 	movw	r2, #903	; 0x387
 800b7da:	4950      	ldr	r1, [pc, #320]	; (800b91c <mem_malloc+0x1f0>)
 800b7dc:	4850      	ldr	r0, [pc, #320]	; (800b920 <mem_malloc+0x1f4>)
 800b7de:	f00c fcd7 	bl	8018190 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800b7e2:	8a7b      	ldrh	r3, [r7, #18]
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f7ff fcb3 	bl	800b150 <ptr_to_mem>
 800b7ea:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b7f2:	697b      	ldr	r3, [r7, #20]
 800b7f4:	881a      	ldrh	r2, [r3, #0]
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	8bfa      	ldrh	r2, [r7, #30]
 800b7fe:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b800:	697b      	ldr	r3, [r7, #20]
 800b802:	8a7a      	ldrh	r2, [r7, #18]
 800b804:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b806:	697b      	ldr	r3, [r7, #20]
 800b808:	2201      	movs	r2, #1
 800b80a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	881b      	ldrh	r3, [r3, #0]
 800b810:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b814:	d00b      	beq.n	800b82e <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	881b      	ldrh	r3, [r3, #0]
 800b81a:	4618      	mov	r0, r3
 800b81c:	f7ff fc98 	bl	800b150 <ptr_to_mem>
 800b820:	4602      	mov	r2, r0
 800b822:	8a7b      	ldrh	r3, [r7, #18]
 800b824:	8053      	strh	r3, [r2, #2]
 800b826:	e002      	b.n	800b82e <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800b828:	697b      	ldr	r3, [r7, #20]
 800b82a:	2201      	movs	r2, #1
 800b82c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800b82e:	4b39      	ldr	r3, [pc, #228]	; (800b914 <mem_malloc+0x1e8>)
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	697a      	ldr	r2, [r7, #20]
 800b834:	429a      	cmp	r2, r3
 800b836:	d127      	bne.n	800b888 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800b838:	4b36      	ldr	r3, [pc, #216]	; (800b914 <mem_malloc+0x1e8>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800b83e:	e005      	b.n	800b84c <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800b840:	69bb      	ldr	r3, [r7, #24]
 800b842:	881b      	ldrh	r3, [r3, #0]
 800b844:	4618      	mov	r0, r3
 800b846:	f7ff fc83 	bl	800b150 <ptr_to_mem>
 800b84a:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800b84c:	69bb      	ldr	r3, [r7, #24]
 800b84e:	791b      	ldrb	r3, [r3, #4]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d004      	beq.n	800b85e <mem_malloc+0x132>
 800b854:	4b33      	ldr	r3, [pc, #204]	; (800b924 <mem_malloc+0x1f8>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	69ba      	ldr	r2, [r7, #24]
 800b85a:	429a      	cmp	r2, r3
 800b85c:	d1f0      	bne.n	800b840 <mem_malloc+0x114>
          }
          lfree = cur;
 800b85e:	4a2d      	ldr	r2, [pc, #180]	; (800b914 <mem_malloc+0x1e8>)
 800b860:	69bb      	ldr	r3, [r7, #24]
 800b862:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b864:	4b2b      	ldr	r3, [pc, #172]	; (800b914 <mem_malloc+0x1e8>)
 800b866:	681a      	ldr	r2, [r3, #0]
 800b868:	4b2e      	ldr	r3, [pc, #184]	; (800b924 <mem_malloc+0x1f8>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	429a      	cmp	r2, r3
 800b86e:	d00b      	beq.n	800b888 <mem_malloc+0x15c>
 800b870:	4b28      	ldr	r3, [pc, #160]	; (800b914 <mem_malloc+0x1e8>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	791b      	ldrb	r3, [r3, #4]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d006      	beq.n	800b888 <mem_malloc+0x15c>
 800b87a:	4b27      	ldr	r3, [pc, #156]	; (800b918 <mem_malloc+0x1ec>)
 800b87c:	f240 32b5 	movw	r2, #949	; 0x3b5
 800b880:	4929      	ldr	r1, [pc, #164]	; (800b928 <mem_malloc+0x1fc>)
 800b882:	4827      	ldr	r0, [pc, #156]	; (800b920 <mem_malloc+0x1f4>)
 800b884:	f00c fc84 	bl	8018190 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800b888:	4821      	ldr	r0, [pc, #132]	; (800b910 <mem_malloc+0x1e4>)
 800b88a:	f00c fbb0 	bl	8017fee <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b88e:	8bba      	ldrh	r2, [r7, #28]
 800b890:	697b      	ldr	r3, [r7, #20]
 800b892:	4413      	add	r3, r2
 800b894:	3308      	adds	r3, #8
 800b896:	4a23      	ldr	r2, [pc, #140]	; (800b924 <mem_malloc+0x1f8>)
 800b898:	6812      	ldr	r2, [r2, #0]
 800b89a:	4293      	cmp	r3, r2
 800b89c:	d906      	bls.n	800b8ac <mem_malloc+0x180>
 800b89e:	4b1e      	ldr	r3, [pc, #120]	; (800b918 <mem_malloc+0x1ec>)
 800b8a0:	f240 32ba 	movw	r2, #954	; 0x3ba
 800b8a4:	4921      	ldr	r1, [pc, #132]	; (800b92c <mem_malloc+0x200>)
 800b8a6:	481e      	ldr	r0, [pc, #120]	; (800b920 <mem_malloc+0x1f4>)
 800b8a8:	f00c fc72 	bl	8018190 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b8ac:	697b      	ldr	r3, [r7, #20]
 800b8ae:	f003 0303 	and.w	r3, r3, #3
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d006      	beq.n	800b8c4 <mem_malloc+0x198>
 800b8b6:	4b18      	ldr	r3, [pc, #96]	; (800b918 <mem_malloc+0x1ec>)
 800b8b8:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800b8bc:	491c      	ldr	r1, [pc, #112]	; (800b930 <mem_malloc+0x204>)
 800b8be:	4818      	ldr	r0, [pc, #96]	; (800b920 <mem_malloc+0x1f4>)
 800b8c0:	f00c fc66 	bl	8018190 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	f003 0303 	and.w	r3, r3, #3
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d006      	beq.n	800b8dc <mem_malloc+0x1b0>
 800b8ce:	4b12      	ldr	r3, [pc, #72]	; (800b918 <mem_malloc+0x1ec>)
 800b8d0:	f240 32be 	movw	r2, #958	; 0x3be
 800b8d4:	4917      	ldr	r1, [pc, #92]	; (800b934 <mem_malloc+0x208>)
 800b8d6:	4812      	ldr	r0, [pc, #72]	; (800b920 <mem_malloc+0x1f4>)
 800b8d8:	f00c fc5a 	bl	8018190 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800b8dc:	697b      	ldr	r3, [r7, #20]
 800b8de:	3308      	adds	r3, #8
 800b8e0:	e011      	b.n	800b906 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800b8e2:	8bfb      	ldrh	r3, [r7, #30]
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f7ff fc33 	bl	800b150 <ptr_to_mem>
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	881b      	ldrh	r3, [r3, #0]
 800b8ee:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b8f0:	8bfa      	ldrh	r2, [r7, #30]
 800b8f2:	8bbb      	ldrh	r3, [r7, #28]
 800b8f4:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800b8f8:	429a      	cmp	r2, r3
 800b8fa:	f4ff af41 	bcc.w	800b780 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800b8fe:	4804      	ldr	r0, [pc, #16]	; (800b910 <mem_malloc+0x1e4>)
 800b900:	f00c fb75 	bl	8017fee <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800b904:	2300      	movs	r3, #0
}
 800b906:	4618      	mov	r0, r3
 800b908:	3720      	adds	r7, #32
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bd80      	pop	{r7, pc}
 800b90e:	bf00      	nop
 800b910:	20008c18 	.word	0x20008c18
 800b914:	20008c1c 	.word	0x20008c1c
 800b918:	0801a31c 	.word	0x0801a31c
 800b91c:	0801a4e0 	.word	0x0801a4e0
 800b920:	0801a364 	.word	0x0801a364
 800b924:	20008c14 	.word	0x20008c14
 800b928:	0801a4f4 	.word	0x0801a4f4
 800b92c:	0801a510 	.word	0x0801a510
 800b930:	0801a540 	.word	0x0801a540
 800b934:	0801a570 	.word	0x0801a570

0800b938 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800b938:	b480      	push	{r7}
 800b93a:	b085      	sub	sp, #20
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	689b      	ldr	r3, [r3, #8]
 800b944:	2200      	movs	r2, #0
 800b946:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	685b      	ldr	r3, [r3, #4]
 800b94c:	3303      	adds	r3, #3
 800b94e:	f023 0303 	bic.w	r3, r3, #3
 800b952:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800b954:	2300      	movs	r3, #0
 800b956:	60fb      	str	r3, [r7, #12]
 800b958:	e011      	b.n	800b97e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	689b      	ldr	r3, [r3, #8]
 800b95e:	681a      	ldr	r2, [r3, #0]
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	689b      	ldr	r3, [r3, #8]
 800b968:	68ba      	ldr	r2, [r7, #8]
 800b96a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	881b      	ldrh	r3, [r3, #0]
 800b970:	461a      	mov	r2, r3
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	4413      	add	r3, r2
 800b976:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	3301      	adds	r3, #1
 800b97c:	60fb      	str	r3, [r7, #12]
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	885b      	ldrh	r3, [r3, #2]
 800b982:	461a      	mov	r2, r3
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	4293      	cmp	r3, r2
 800b988:	dbe7      	blt.n	800b95a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800b98a:	bf00      	nop
 800b98c:	3714      	adds	r7, #20
 800b98e:	46bd      	mov	sp, r7
 800b990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b994:	4770      	bx	lr
	...

0800b998 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b082      	sub	sp, #8
 800b99c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b99e:	2300      	movs	r3, #0
 800b9a0:	80fb      	strh	r3, [r7, #6]
 800b9a2:	e009      	b.n	800b9b8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800b9a4:	88fb      	ldrh	r3, [r7, #6]
 800b9a6:	4a08      	ldr	r2, [pc, #32]	; (800b9c8 <memp_init+0x30>)
 800b9a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f7ff ffc3 	bl	800b938 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b9b2:	88fb      	ldrh	r3, [r7, #6]
 800b9b4:	3301      	adds	r3, #1
 800b9b6:	80fb      	strh	r3, [r7, #6]
 800b9b8:	88fb      	ldrh	r3, [r7, #6]
 800b9ba:	2b0c      	cmp	r3, #12
 800b9bc:	d9f2      	bls.n	800b9a4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800b9be:	bf00      	nop
 800b9c0:	3708      	adds	r7, #8
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd80      	pop	{r7, pc}
 800b9c6:	bf00      	nop
 800b9c8:	080284f0 	.word	0x080284f0

0800b9cc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b084      	sub	sp, #16
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800b9d4:	f00c fb3e 	bl	8018054 <sys_arch_protect>
 800b9d8:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	689b      	ldr	r3, [r3, #8]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d015      	beq.n	800ba14 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	689b      	ldr	r3, [r3, #8]
 800b9ec:	68ba      	ldr	r2, [r7, #8]
 800b9ee:	6812      	ldr	r2, [r2, #0]
 800b9f0:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	f003 0303 	and.w	r3, r3, #3
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d006      	beq.n	800ba0a <do_memp_malloc_pool+0x3e>
 800b9fc:	4b09      	ldr	r3, [pc, #36]	; (800ba24 <do_memp_malloc_pool+0x58>)
 800b9fe:	f240 1219 	movw	r2, #281	; 0x119
 800ba02:	4909      	ldr	r1, [pc, #36]	; (800ba28 <do_memp_malloc_pool+0x5c>)
 800ba04:	4809      	ldr	r0, [pc, #36]	; (800ba2c <do_memp_malloc_pool+0x60>)
 800ba06:	f00c fbc3 	bl	8018190 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ba0a:	68f8      	ldr	r0, [r7, #12]
 800ba0c:	f00c fb30 	bl	8018070 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	e003      	b.n	800ba1c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ba14:	68f8      	ldr	r0, [r7, #12]
 800ba16:	f00c fb2b 	bl	8018070 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800ba1a:	2300      	movs	r3, #0
}
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	3710      	adds	r7, #16
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd80      	pop	{r7, pc}
 800ba24:	0801a594 	.word	0x0801a594
 800ba28:	0801a5c4 	.word	0x0801a5c4
 800ba2c:	0801a5e8 	.word	0x0801a5e8

0800ba30 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b084      	sub	sp, #16
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	4603      	mov	r3, r0
 800ba38:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800ba3a:	79fb      	ldrb	r3, [r7, #7]
 800ba3c:	2b0c      	cmp	r3, #12
 800ba3e:	d908      	bls.n	800ba52 <memp_malloc+0x22>
 800ba40:	4b0a      	ldr	r3, [pc, #40]	; (800ba6c <memp_malloc+0x3c>)
 800ba42:	f240 1257 	movw	r2, #343	; 0x157
 800ba46:	490a      	ldr	r1, [pc, #40]	; (800ba70 <memp_malloc+0x40>)
 800ba48:	480a      	ldr	r0, [pc, #40]	; (800ba74 <memp_malloc+0x44>)
 800ba4a:	f00c fba1 	bl	8018190 <iprintf>
 800ba4e:	2300      	movs	r3, #0
 800ba50:	e008      	b.n	800ba64 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800ba52:	79fb      	ldrb	r3, [r7, #7]
 800ba54:	4a08      	ldr	r2, [pc, #32]	; (800ba78 <memp_malloc+0x48>)
 800ba56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f7ff ffb6 	bl	800b9cc <do_memp_malloc_pool>
 800ba60:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800ba62:	68fb      	ldr	r3, [r7, #12]
}
 800ba64:	4618      	mov	r0, r3
 800ba66:	3710      	adds	r7, #16
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}
 800ba6c:	0801a594 	.word	0x0801a594
 800ba70:	0801a624 	.word	0x0801a624
 800ba74:	0801a5e8 	.word	0x0801a5e8
 800ba78:	080284f0 	.word	0x080284f0

0800ba7c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b084      	sub	sp, #16
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
 800ba84:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	f003 0303 	and.w	r3, r3, #3
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d006      	beq.n	800ba9e <do_memp_free_pool+0x22>
 800ba90:	4b0d      	ldr	r3, [pc, #52]	; (800bac8 <do_memp_free_pool+0x4c>)
 800ba92:	f240 126d 	movw	r2, #365	; 0x16d
 800ba96:	490d      	ldr	r1, [pc, #52]	; (800bacc <do_memp_free_pool+0x50>)
 800ba98:	480d      	ldr	r0, [pc, #52]	; (800bad0 <do_memp_free_pool+0x54>)
 800ba9a:	f00c fb79 	bl	8018190 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800baa2:	f00c fad7 	bl	8018054 <sys_arch_protect>
 800baa6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	689b      	ldr	r3, [r3, #8]
 800baac:	681a      	ldr	r2, [r3, #0]
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	689b      	ldr	r3, [r3, #8]
 800bab6:	68fa      	ldr	r2, [r7, #12]
 800bab8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800baba:	68b8      	ldr	r0, [r7, #8]
 800babc:	f00c fad8 	bl	8018070 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800bac0:	bf00      	nop
 800bac2:	3710      	adds	r7, #16
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}
 800bac8:	0801a594 	.word	0x0801a594
 800bacc:	0801a644 	.word	0x0801a644
 800bad0:	0801a5e8 	.word	0x0801a5e8

0800bad4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b082      	sub	sp, #8
 800bad8:	af00      	add	r7, sp, #0
 800bada:	4603      	mov	r3, r0
 800badc:	6039      	str	r1, [r7, #0]
 800bade:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800bae0:	79fb      	ldrb	r3, [r7, #7]
 800bae2:	2b0c      	cmp	r3, #12
 800bae4:	d907      	bls.n	800baf6 <memp_free+0x22>
 800bae6:	4b0c      	ldr	r3, [pc, #48]	; (800bb18 <memp_free+0x44>)
 800bae8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800baec:	490b      	ldr	r1, [pc, #44]	; (800bb1c <memp_free+0x48>)
 800baee:	480c      	ldr	r0, [pc, #48]	; (800bb20 <memp_free+0x4c>)
 800baf0:	f00c fb4e 	bl	8018190 <iprintf>
 800baf4:	e00c      	b.n	800bb10 <memp_free+0x3c>

  if (mem == NULL) {
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d008      	beq.n	800bb0e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800bafc:	79fb      	ldrb	r3, [r7, #7]
 800bafe:	4a09      	ldr	r2, [pc, #36]	; (800bb24 <memp_free+0x50>)
 800bb00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb04:	6839      	ldr	r1, [r7, #0]
 800bb06:	4618      	mov	r0, r3
 800bb08:	f7ff ffb8 	bl	800ba7c <do_memp_free_pool>
 800bb0c:	e000      	b.n	800bb10 <memp_free+0x3c>
    return;
 800bb0e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800bb10:	3708      	adds	r7, #8
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}
 800bb16:	bf00      	nop
 800bb18:	0801a594 	.word	0x0801a594
 800bb1c:	0801a664 	.word	0x0801a664
 800bb20:	0801a5e8 	.word	0x0801a5e8
 800bb24:	080284f0 	.word	0x080284f0

0800bb28 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800bb28:	b480      	push	{r7}
 800bb2a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800bb2c:	bf00      	nop
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb34:	4770      	bx	lr
	...

0800bb38 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b086      	sub	sp, #24
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	60f8      	str	r0, [r7, #12]
 800bb40:	60b9      	str	r1, [r7, #8]
 800bb42:	607a      	str	r2, [r7, #4]
 800bb44:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d108      	bne.n	800bb5e <netif_add+0x26>
 800bb4c:	4b59      	ldr	r3, [pc, #356]	; (800bcb4 <netif_add+0x17c>)
 800bb4e:	f240 1227 	movw	r2, #295	; 0x127
 800bb52:	4959      	ldr	r1, [pc, #356]	; (800bcb8 <netif_add+0x180>)
 800bb54:	4859      	ldr	r0, [pc, #356]	; (800bcbc <netif_add+0x184>)
 800bb56:	f00c fb1b 	bl	8018190 <iprintf>
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	e0a6      	b.n	800bcac <netif_add+0x174>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800bb5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d108      	bne.n	800bb76 <netif_add+0x3e>
 800bb64:	4b53      	ldr	r3, [pc, #332]	; (800bcb4 <netif_add+0x17c>)
 800bb66:	f44f 7294 	mov.w	r2, #296	; 0x128
 800bb6a:	4955      	ldr	r1, [pc, #340]	; (800bcc0 <netif_add+0x188>)
 800bb6c:	4853      	ldr	r0, [pc, #332]	; (800bcbc <netif_add+0x184>)
 800bb6e:	f00c fb0f 	bl	8018190 <iprintf>
 800bb72:	2300      	movs	r3, #0
 800bb74:	e09a      	b.n	800bcac <netif_add+0x174>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800bb76:	68bb      	ldr	r3, [r7, #8]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d101      	bne.n	800bb80 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800bb7c:	4b51      	ldr	r3, [pc, #324]	; (800bcc4 <netif_add+0x18c>)
 800bb7e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d101      	bne.n	800bb8a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800bb86:	4b4f      	ldr	r3, [pc, #316]	; (800bcc4 <netif_add+0x18c>)
 800bb88:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d101      	bne.n	800bb94 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800bb90:	4b4c      	ldr	r3, [pc, #304]	; (800bcc4 <netif_add+0x18c>)
 800bb92:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	2200      	movs	r2, #0
 800bb98:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	2200      	movs	r2, #0
 800bba4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	4a47      	ldr	r2, [pc, #284]	; (800bcc8 <netif_add+0x190>)
 800bbaa:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	2200      	movs	r2, #0
 800bbb0:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	3320      	adds	r3, #32
 800bbbe:	2204      	movs	r2, #4
 800bbc0:	2100      	movs	r1, #0
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f00c fadb 	bl	801817e <memset>
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	6a3a      	ldr	r2, [r7, #32]
 800bbcc:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 800bbce:	4b3f      	ldr	r3, [pc, #252]	; (800bccc <netif_add+0x194>)
 800bbd0:	781a      	ldrb	r2, [r3, #0]
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bbdc:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	687a      	ldr	r2, [r7, #4]
 800bbe2:	68b9      	ldr	r1, [r7, #8]
 800bbe4:	68f8      	ldr	r0, [r7, #12]
 800bbe6:	f000 f913 	bl	800be10 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800bbea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbec:	68f8      	ldr	r0, [r7, #12]
 800bbee:	4798      	blx	r3
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d001      	beq.n	800bbfa <netif_add+0xc2>
    return NULL;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	e058      	b.n	800bcac <netif_add+0x174>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bc00:	2bff      	cmp	r3, #255	; 0xff
 800bc02:	d103      	bne.n	800bc0c <netif_add+0xd4>
        netif->num = 0;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	2200      	movs	r2, #0
 800bc08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800bc10:	4b2f      	ldr	r3, [pc, #188]	; (800bcd0 <netif_add+0x198>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	617b      	str	r3, [r7, #20]
 800bc16:	e02b      	b.n	800bc70 <netif_add+0x138>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800bc18:	697a      	ldr	r2, [r7, #20]
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	429a      	cmp	r2, r3
 800bc1e:	d106      	bne.n	800bc2e <netif_add+0xf6>
 800bc20:	4b24      	ldr	r3, [pc, #144]	; (800bcb4 <netif_add+0x17c>)
 800bc22:	f240 128b 	movw	r2, #395	; 0x18b
 800bc26:	492b      	ldr	r1, [pc, #172]	; (800bcd4 <netif_add+0x19c>)
 800bc28:	4824      	ldr	r0, [pc, #144]	; (800bcbc <netif_add+0x184>)
 800bc2a:	f00c fab1 	bl	8018190 <iprintf>
        num_netifs++;
 800bc2e:	693b      	ldr	r3, [r7, #16]
 800bc30:	3301      	adds	r3, #1
 800bc32:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800bc34:	693b      	ldr	r3, [r7, #16]
 800bc36:	2bff      	cmp	r3, #255	; 0xff
 800bc38:	dd06      	ble.n	800bc48 <netif_add+0x110>
 800bc3a:	4b1e      	ldr	r3, [pc, #120]	; (800bcb4 <netif_add+0x17c>)
 800bc3c:	f240 128d 	movw	r2, #397	; 0x18d
 800bc40:	4925      	ldr	r1, [pc, #148]	; (800bcd8 <netif_add+0x1a0>)
 800bc42:	481e      	ldr	r0, [pc, #120]	; (800bcbc <netif_add+0x184>)
 800bc44:	f00c faa4 	bl	8018190 <iprintf>
        if (netif2->num == netif->num) {
 800bc48:	697b      	ldr	r3, [r7, #20]
 800bc4a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bc54:	429a      	cmp	r2, r3
 800bc56:	d108      	bne.n	800bc6a <netif_add+0x132>
          netif->num++;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bc5e:	3301      	adds	r3, #1
 800bc60:	b2da      	uxtb	r2, r3
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800bc68:	e005      	b.n	800bc76 <netif_add+0x13e>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800bc6a:	697b      	ldr	r3, [r7, #20]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	617b      	str	r3, [r7, #20]
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d1d0      	bne.n	800bc18 <netif_add+0xe0>
        }
      }
    } while (netif2 != NULL);
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d1be      	bne.n	800bbfa <netif_add+0xc2>
  }
  if (netif->num == 254) {
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bc82:	2bfe      	cmp	r3, #254	; 0xfe
 800bc84:	d103      	bne.n	800bc8e <netif_add+0x156>
    netif_num = 0;
 800bc86:	4b11      	ldr	r3, [pc, #68]	; (800bccc <netif_add+0x194>)
 800bc88:	2200      	movs	r2, #0
 800bc8a:	701a      	strb	r2, [r3, #0]
 800bc8c:	e006      	b.n	800bc9c <netif_add+0x164>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bc94:	3301      	adds	r3, #1
 800bc96:	b2da      	uxtb	r2, r3
 800bc98:	4b0c      	ldr	r3, [pc, #48]	; (800bccc <netif_add+0x194>)
 800bc9a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800bc9c:	4b0c      	ldr	r3, [pc, #48]	; (800bcd0 <netif_add+0x198>)
 800bc9e:	681a      	ldr	r2, [r3, #0]
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800bca4:	4a0a      	ldr	r2, [pc, #40]	; (800bcd0 <netif_add+0x198>)
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	3718      	adds	r7, #24
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}
 800bcb4:	0801a680 	.word	0x0801a680
 800bcb8:	0801a714 	.word	0x0801a714
 800bcbc:	0801a6d0 	.word	0x0801a6d0
 800bcc0:	0801a730 	.word	0x0801a730
 800bcc4:	08028574 	.word	0x08028574
 800bcc8:	0800c001 	.word	0x0800c001
 800bccc:	20008c54 	.word	0x20008c54
 800bcd0:	2000fac8 	.word	0x2000fac8
 800bcd4:	0801a754 	.word	0x0801a754
 800bcd8:	0801a768 	.word	0x0801a768

0800bcdc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b082      	sub	sp, #8
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
 800bce4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800bce6:	6839      	ldr	r1, [r7, #0]
 800bce8:	6878      	ldr	r0, [r7, #4]
 800bcea:	f002 fe07 	bl	800e8fc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800bcee:	6839      	ldr	r1, [r7, #0]
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f007 fe8b 	bl	8013a0c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800bcf6:	bf00      	nop
 800bcf8:	3708      	adds	r7, #8
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}
	...

0800bd00 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b086      	sub	sp, #24
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	60f8      	str	r0, [r7, #12]
 800bd08:	60b9      	str	r1, [r7, #8]
 800bd0a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d106      	bne.n	800bd20 <netif_do_set_ipaddr+0x20>
 800bd12:	4b1d      	ldr	r3, [pc, #116]	; (800bd88 <netif_do_set_ipaddr+0x88>)
 800bd14:	f240 12cb 	movw	r2, #459	; 0x1cb
 800bd18:	491c      	ldr	r1, [pc, #112]	; (800bd8c <netif_do_set_ipaddr+0x8c>)
 800bd1a:	481d      	ldr	r0, [pc, #116]	; (800bd90 <netif_do_set_ipaddr+0x90>)
 800bd1c:	f00c fa38 	bl	8018190 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d106      	bne.n	800bd34 <netif_do_set_ipaddr+0x34>
 800bd26:	4b18      	ldr	r3, [pc, #96]	; (800bd88 <netif_do_set_ipaddr+0x88>)
 800bd28:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800bd2c:	4917      	ldr	r1, [pc, #92]	; (800bd8c <netif_do_set_ipaddr+0x8c>)
 800bd2e:	4818      	ldr	r0, [pc, #96]	; (800bd90 <netif_do_set_ipaddr+0x90>)
 800bd30:	f00c fa2e 	bl	8018190 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	681a      	ldr	r2, [r3, #0]
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	3304      	adds	r3, #4
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	429a      	cmp	r2, r3
 800bd40:	d01c      	beq.n	800bd7c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800bd42:	68bb      	ldr	r3, [r7, #8]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	3304      	adds	r3, #4
 800bd4c:	681a      	ldr	r2, [r3, #0]
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800bd52:	f107 0314 	add.w	r3, r7, #20
 800bd56:	4619      	mov	r1, r3
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f7ff ffbf 	bl	800bcdc <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d002      	beq.n	800bd6a <netif_do_set_ipaddr+0x6a>
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	e000      	b.n	800bd6c <netif_do_set_ipaddr+0x6c>
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	68fa      	ldr	r2, [r7, #12]
 800bd6e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800bd70:	2101      	movs	r1, #1
 800bd72:	68f8      	ldr	r0, [r7, #12]
 800bd74:	f000 f8d2 	bl	800bf1c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800bd78:	2301      	movs	r3, #1
 800bd7a:	e000      	b.n	800bd7e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800bd7c:	2300      	movs	r3, #0
}
 800bd7e:	4618      	mov	r0, r3
 800bd80:	3718      	adds	r7, #24
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}
 800bd86:	bf00      	nop
 800bd88:	0801a680 	.word	0x0801a680
 800bd8c:	0801a798 	.word	0x0801a798
 800bd90:	0801a6d0 	.word	0x0801a6d0

0800bd94 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800bd94:	b480      	push	{r7}
 800bd96:	b085      	sub	sp, #20
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	60f8      	str	r0, [r7, #12]
 800bd9c:	60b9      	str	r1, [r7, #8]
 800bd9e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800bda0:	68bb      	ldr	r3, [r7, #8]
 800bda2:	681a      	ldr	r2, [r3, #0]
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	3308      	adds	r3, #8
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	429a      	cmp	r2, r3
 800bdac:	d00a      	beq.n	800bdc4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800bdae:	68bb      	ldr	r3, [r7, #8]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d002      	beq.n	800bdba <netif_do_set_netmask+0x26>
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	e000      	b.n	800bdbc <netif_do_set_netmask+0x28>
 800bdba:	2300      	movs	r3, #0
 800bdbc:	68fa      	ldr	r2, [r7, #12]
 800bdbe:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	e000      	b.n	800bdc6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800bdc4:	2300      	movs	r3, #0
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3714      	adds	r7, #20
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd0:	4770      	bx	lr

0800bdd2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800bdd2:	b480      	push	{r7}
 800bdd4:	b085      	sub	sp, #20
 800bdd6:	af00      	add	r7, sp, #0
 800bdd8:	60f8      	str	r0, [r7, #12]
 800bdda:	60b9      	str	r1, [r7, #8]
 800bddc:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	681a      	ldr	r2, [r3, #0]
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	330c      	adds	r3, #12
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	429a      	cmp	r2, r3
 800bdea:	d00a      	beq.n	800be02 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d002      	beq.n	800bdf8 <netif_do_set_gw+0x26>
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	e000      	b.n	800bdfa <netif_do_set_gw+0x28>
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	68fa      	ldr	r2, [r7, #12]
 800bdfc:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800bdfe:	2301      	movs	r3, #1
 800be00:	e000      	b.n	800be04 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800be02:	2300      	movs	r3, #0
}
 800be04:	4618      	mov	r0, r3
 800be06:	3714      	adds	r7, #20
 800be08:	46bd      	mov	sp, r7
 800be0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0e:	4770      	bx	lr

0800be10 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b088      	sub	sp, #32
 800be14:	af00      	add	r7, sp, #0
 800be16:	60f8      	str	r0, [r7, #12]
 800be18:	60b9      	str	r1, [r7, #8]
 800be1a:	607a      	str	r2, [r7, #4]
 800be1c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800be1e:	2300      	movs	r3, #0
 800be20:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800be22:	2300      	movs	r3, #0
 800be24:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d101      	bne.n	800be30 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800be2c:	4b1c      	ldr	r3, [pc, #112]	; (800bea0 <netif_set_addr+0x90>)
 800be2e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d101      	bne.n	800be3a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800be36:	4b1a      	ldr	r3, [pc, #104]	; (800bea0 <netif_set_addr+0x90>)
 800be38:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d101      	bne.n	800be44 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800be40:	4b17      	ldr	r3, [pc, #92]	; (800bea0 <netif_set_addr+0x90>)
 800be42:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d003      	beq.n	800be52 <netif_set_addr+0x42>
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d101      	bne.n	800be56 <netif_set_addr+0x46>
 800be52:	2301      	movs	r3, #1
 800be54:	e000      	b.n	800be58 <netif_set_addr+0x48>
 800be56:	2300      	movs	r3, #0
 800be58:	617b      	str	r3, [r7, #20]
  if (remove) {
 800be5a:	697b      	ldr	r3, [r7, #20]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d006      	beq.n	800be6e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800be60:	f107 0310 	add.w	r3, r7, #16
 800be64:	461a      	mov	r2, r3
 800be66:	68b9      	ldr	r1, [r7, #8]
 800be68:	68f8      	ldr	r0, [r7, #12]
 800be6a:	f7ff ff49 	bl	800bd00 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800be6e:	69fa      	ldr	r2, [r7, #28]
 800be70:	6879      	ldr	r1, [r7, #4]
 800be72:	68f8      	ldr	r0, [r7, #12]
 800be74:	f7ff ff8e 	bl	800bd94 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800be78:	69ba      	ldr	r2, [r7, #24]
 800be7a:	6839      	ldr	r1, [r7, #0]
 800be7c:	68f8      	ldr	r0, [r7, #12]
 800be7e:	f7ff ffa8 	bl	800bdd2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800be82:	697b      	ldr	r3, [r7, #20]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d106      	bne.n	800be96 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800be88:	f107 0310 	add.w	r3, r7, #16
 800be8c:	461a      	mov	r2, r3
 800be8e:	68b9      	ldr	r1, [r7, #8]
 800be90:	68f8      	ldr	r0, [r7, #12]
 800be92:	f7ff ff35 	bl	800bd00 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800be96:	bf00      	nop
 800be98:	3720      	adds	r7, #32
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd80      	pop	{r7, pc}
 800be9e:	bf00      	nop
 800bea0:	08028574 	.word	0x08028574

0800bea4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800bea4:	b480      	push	{r7}
 800bea6:	b083      	sub	sp, #12
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800beac:	4a04      	ldr	r2, [pc, #16]	; (800bec0 <netif_set_default+0x1c>)
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800beb2:	bf00      	nop
 800beb4:	370c      	adds	r7, #12
 800beb6:	46bd      	mov	sp, r7
 800beb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebc:	4770      	bx	lr
 800bebe:	bf00      	nop
 800bec0:	2000facc 	.word	0x2000facc

0800bec4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b082      	sub	sp, #8
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d107      	bne.n	800bee2 <netif_set_up+0x1e>
 800bed2:	4b0f      	ldr	r3, [pc, #60]	; (800bf10 <netif_set_up+0x4c>)
 800bed4:	f44f 7254 	mov.w	r2, #848	; 0x350
 800bed8:	490e      	ldr	r1, [pc, #56]	; (800bf14 <netif_set_up+0x50>)
 800beda:	480f      	ldr	r0, [pc, #60]	; (800bf18 <netif_set_up+0x54>)
 800bedc:	f00c f958 	bl	8018190 <iprintf>
 800bee0:	e013      	b.n	800bf0a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bee8:	f003 0301 	and.w	r3, r3, #1
 800beec:	2b00      	cmp	r3, #0
 800beee:	d10c      	bne.n	800bf0a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bef6:	f043 0301 	orr.w	r3, r3, #1
 800befa:	b2da      	uxtb	r2, r3
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800bf02:	2103      	movs	r1, #3
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	f000 f809 	bl	800bf1c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800bf0a:	3708      	adds	r7, #8
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	bd80      	pop	{r7, pc}
 800bf10:	0801a680 	.word	0x0801a680
 800bf14:	0801a808 	.word	0x0801a808
 800bf18:	0801a6d0 	.word	0x0801a6d0

0800bf1c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b082      	sub	sp, #8
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
 800bf24:	460b      	mov	r3, r1
 800bf26:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d106      	bne.n	800bf3c <netif_issue_reports+0x20>
 800bf2e:	4b18      	ldr	r3, [pc, #96]	; (800bf90 <netif_issue_reports+0x74>)
 800bf30:	f240 326d 	movw	r2, #877	; 0x36d
 800bf34:	4917      	ldr	r1, [pc, #92]	; (800bf94 <netif_issue_reports+0x78>)
 800bf36:	4818      	ldr	r0, [pc, #96]	; (800bf98 <netif_issue_reports+0x7c>)
 800bf38:	f00c f92a 	bl	8018190 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bf42:	f003 0304 	and.w	r3, r3, #4
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d01e      	beq.n	800bf88 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bf50:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d017      	beq.n	800bf88 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800bf58:	78fb      	ldrb	r3, [r7, #3]
 800bf5a:	f003 0301 	and.w	r3, r3, #1
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d013      	beq.n	800bf8a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	3304      	adds	r3, #4
 800bf66:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d00e      	beq.n	800bf8a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bf72:	f003 0308 	and.w	r3, r3, #8
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d007      	beq.n	800bf8a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	3304      	adds	r3, #4
 800bf7e:	4619      	mov	r1, r3
 800bf80:	6878      	ldr	r0, [r7, #4]
 800bf82:	f00a fb05 	bl	8016590 <etharp_request>
 800bf86:	e000      	b.n	800bf8a <netif_issue_reports+0x6e>
    return;
 800bf88:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800bf8a:	3708      	adds	r7, #8
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bd80      	pop	{r7, pc}
 800bf90:	0801a680 	.word	0x0801a680
 800bf94:	0801a824 	.word	0x0801a824
 800bf98:	0801a6d0 	.word	0x0801a6d0

0800bf9c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b082      	sub	sp, #8
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d107      	bne.n	800bfba <netif_set_down+0x1e>
 800bfaa:	4b12      	ldr	r3, [pc, #72]	; (800bff4 <netif_set_down+0x58>)
 800bfac:	f240 329b 	movw	r2, #923	; 0x39b
 800bfb0:	4911      	ldr	r1, [pc, #68]	; (800bff8 <netif_set_down+0x5c>)
 800bfb2:	4812      	ldr	r0, [pc, #72]	; (800bffc <netif_set_down+0x60>)
 800bfb4:	f00c f8ec 	bl	8018190 <iprintf>
 800bfb8:	e019      	b.n	800bfee <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bfc0:	f003 0301 	and.w	r3, r3, #1
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d012      	beq.n	800bfee <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bfce:	f023 0301 	bic.w	r3, r3, #1
 800bfd2:	b2da      	uxtb	r2, r3
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bfe0:	f003 0308 	and.w	r3, r3, #8
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d002      	beq.n	800bfee <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800bfe8:	6878      	ldr	r0, [r7, #4]
 800bfea:	f009 fe8b 	bl	8015d04 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800bfee:	3708      	adds	r7, #8
 800bff0:	46bd      	mov	sp, r7
 800bff2:	bd80      	pop	{r7, pc}
 800bff4:	0801a680 	.word	0x0801a680
 800bff8:	0801a848 	.word	0x0801a848
 800bffc:	0801a6d0 	.word	0x0801a6d0

0800c000 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800c000:	b480      	push	{r7}
 800c002:	b085      	sub	sp, #20
 800c004:	af00      	add	r7, sp, #0
 800c006:	60f8      	str	r0, [r7, #12]
 800c008:	60b9      	str	r1, [r7, #8]
 800c00a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800c00c:	f06f 030b 	mvn.w	r3, #11
}
 800c010:	4618      	mov	r0, r3
 800c012:	3714      	adds	r7, #20
 800c014:	46bd      	mov	sp, r7
 800c016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01a:	4770      	bx	lr

0800c01c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800c01c:	b480      	push	{r7}
 800c01e:	b085      	sub	sp, #20
 800c020:	af00      	add	r7, sp, #0
 800c022:	4603      	mov	r3, r0
 800c024:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800c026:	79fb      	ldrb	r3, [r7, #7]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d013      	beq.n	800c054 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800c02c:	4b0d      	ldr	r3, [pc, #52]	; (800c064 <netif_get_by_index+0x48>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	60fb      	str	r3, [r7, #12]
 800c032:	e00c      	b.n	800c04e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c03a:	3301      	adds	r3, #1
 800c03c:	b2db      	uxtb	r3, r3
 800c03e:	79fa      	ldrb	r2, [r7, #7]
 800c040:	429a      	cmp	r2, r3
 800c042:	d101      	bne.n	800c048 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	e006      	b.n	800c056 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	60fb      	str	r3, [r7, #12]
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d1ef      	bne.n	800c034 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800c054:	2300      	movs	r3, #0
}
 800c056:	4618      	mov	r0, r3
 800c058:	3714      	adds	r7, #20
 800c05a:	46bd      	mov	sp, r7
 800c05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c060:	4770      	bx	lr
 800c062:	bf00      	nop
 800c064:	2000fac8 	.word	0x2000fac8

0800c068 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b082      	sub	sp, #8
 800c06c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c06e:	f00b fff1 	bl	8018054 <sys_arch_protect>
 800c072:	6038      	str	r0, [r7, #0]
 800c074:	4b0d      	ldr	r3, [pc, #52]	; (800c0ac <pbuf_free_ooseq+0x44>)
 800c076:	2200      	movs	r2, #0
 800c078:	701a      	strb	r2, [r3, #0]
 800c07a:	6838      	ldr	r0, [r7, #0]
 800c07c:	f00b fff8 	bl	8018070 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c080:	4b0b      	ldr	r3, [pc, #44]	; (800c0b0 <pbuf_free_ooseq+0x48>)
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	607b      	str	r3, [r7, #4]
 800c086:	e00a      	b.n	800c09e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d003      	beq.n	800c098 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f002 fc71 	bl	800e978 <tcp_free_ooseq>
      return;
 800c096:	e005      	b.n	800c0a4 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	68db      	ldr	r3, [r3, #12]
 800c09c:	607b      	str	r3, [r7, #4]
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d1f1      	bne.n	800c088 <pbuf_free_ooseq+0x20>
    }
  }
}
 800c0a4:	3708      	adds	r7, #8
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bd80      	pop	{r7, pc}
 800c0aa:	bf00      	nop
 800c0ac:	2000fad0 	.word	0x2000fad0
 800c0b0:	2000fad8 	.word	0x2000fad8

0800c0b4 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b082      	sub	sp, #8
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800c0bc:	f7ff ffd4 	bl	800c068 <pbuf_free_ooseq>
}
 800c0c0:	bf00      	nop
 800c0c2:	3708      	adds	r7, #8
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}

0800c0c8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b082      	sub	sp, #8
 800c0cc:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800c0ce:	f00b ffc1 	bl	8018054 <sys_arch_protect>
 800c0d2:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800c0d4:	4b0f      	ldr	r3, [pc, #60]	; (800c114 <pbuf_pool_is_empty+0x4c>)
 800c0d6:	781b      	ldrb	r3, [r3, #0]
 800c0d8:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800c0da:	4b0e      	ldr	r3, [pc, #56]	; (800c114 <pbuf_pool_is_empty+0x4c>)
 800c0dc:	2201      	movs	r2, #1
 800c0de:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800c0e0:	6878      	ldr	r0, [r7, #4]
 800c0e2:	f00b ffc5 	bl	8018070 <sys_arch_unprotect>

  if (!queued) {
 800c0e6:	78fb      	ldrb	r3, [r7, #3]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d10f      	bne.n	800c10c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800c0ec:	2100      	movs	r1, #0
 800c0ee:	480a      	ldr	r0, [pc, #40]	; (800c118 <pbuf_pool_is_empty+0x50>)
 800c0f0:	f7fe f852 	bl	800a198 <tcpip_try_callback>
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d008      	beq.n	800c10c <pbuf_pool_is_empty+0x44>
 800c0fa:	f00b ffab 	bl	8018054 <sys_arch_protect>
 800c0fe:	6078      	str	r0, [r7, #4]
 800c100:	4b04      	ldr	r3, [pc, #16]	; (800c114 <pbuf_pool_is_empty+0x4c>)
 800c102:	2200      	movs	r2, #0
 800c104:	701a      	strb	r2, [r3, #0]
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f00b ffb2 	bl	8018070 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800c10c:	bf00      	nop
 800c10e:	3708      	adds	r7, #8
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}
 800c114:	2000fad0 	.word	0x2000fad0
 800c118:	0800c0b5 	.word	0x0800c0b5

0800c11c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800c11c:	b480      	push	{r7}
 800c11e:	b085      	sub	sp, #20
 800c120:	af00      	add	r7, sp, #0
 800c122:	60f8      	str	r0, [r7, #12]
 800c124:	60b9      	str	r1, [r7, #8]
 800c126:	4611      	mov	r1, r2
 800c128:	461a      	mov	r2, r3
 800c12a:	460b      	mov	r3, r1
 800c12c:	80fb      	strh	r3, [r7, #6]
 800c12e:	4613      	mov	r3, r2
 800c130:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	2200      	movs	r2, #0
 800c136:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	68ba      	ldr	r2, [r7, #8]
 800c13c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	88fa      	ldrh	r2, [r7, #6]
 800c142:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	88ba      	ldrh	r2, [r7, #4]
 800c148:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800c14a:	8b3b      	ldrh	r3, [r7, #24]
 800c14c:	b2da      	uxtb	r2, r3
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	7f3a      	ldrb	r2, [r7, #28]
 800c156:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	2201      	movs	r2, #1
 800c15c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	2200      	movs	r2, #0
 800c162:	73da      	strb	r2, [r3, #15]
}
 800c164:	bf00      	nop
 800c166:	3714      	adds	r7, #20
 800c168:	46bd      	mov	sp, r7
 800c16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16e:	4770      	bx	lr

0800c170 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b08c      	sub	sp, #48	; 0x30
 800c174:	af02      	add	r7, sp, #8
 800c176:	4603      	mov	r3, r0
 800c178:	71fb      	strb	r3, [r7, #7]
 800c17a:	460b      	mov	r3, r1
 800c17c:	80bb      	strh	r3, [r7, #4]
 800c17e:	4613      	mov	r3, r2
 800c180:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800c182:	79fb      	ldrb	r3, [r7, #7]
 800c184:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800c186:	887b      	ldrh	r3, [r7, #2]
 800c188:	2b41      	cmp	r3, #65	; 0x41
 800c18a:	d00b      	beq.n	800c1a4 <pbuf_alloc+0x34>
 800c18c:	2b41      	cmp	r3, #65	; 0x41
 800c18e:	dc02      	bgt.n	800c196 <pbuf_alloc+0x26>
 800c190:	2b01      	cmp	r3, #1
 800c192:	d007      	beq.n	800c1a4 <pbuf_alloc+0x34>
 800c194:	e0c2      	b.n	800c31c <pbuf_alloc+0x1ac>
 800c196:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800c19a:	d00b      	beq.n	800c1b4 <pbuf_alloc+0x44>
 800c19c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c1a0:	d070      	beq.n	800c284 <pbuf_alloc+0x114>
 800c1a2:	e0bb      	b.n	800c31c <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800c1a4:	887a      	ldrh	r2, [r7, #2]
 800c1a6:	88bb      	ldrh	r3, [r7, #4]
 800c1a8:	4619      	mov	r1, r3
 800c1aa:	2000      	movs	r0, #0
 800c1ac:	f000 f8d2 	bl	800c354 <pbuf_alloc_reference>
 800c1b0:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800c1b2:	e0bd      	b.n	800c330 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800c1bc:	88bb      	ldrh	r3, [r7, #4]
 800c1be:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c1c0:	200c      	movs	r0, #12
 800c1c2:	f7ff fc35 	bl	800ba30 <memp_malloc>
 800c1c6:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800c1c8:	693b      	ldr	r3, [r7, #16]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d109      	bne.n	800c1e2 <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 800c1ce:	f7ff ff7b 	bl	800c0c8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800c1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d002      	beq.n	800c1de <pbuf_alloc+0x6e>
            pbuf_free(p);
 800c1d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c1da:	f000 faa9 	bl	800c730 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800c1de:	2300      	movs	r3, #0
 800c1e0:	e0a7      	b.n	800c332 <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c1e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c1e4:	3303      	adds	r3, #3
 800c1e6:	b29b      	uxth	r3, r3
 800c1e8:	f023 0303 	bic.w	r3, r3, #3
 800c1ec:	b29b      	uxth	r3, r3
 800c1ee:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800c1f2:	b29b      	uxth	r3, r3
 800c1f4:	8b7a      	ldrh	r2, [r7, #26]
 800c1f6:	4293      	cmp	r3, r2
 800c1f8:	bf28      	it	cs
 800c1fa:	4613      	movcs	r3, r2
 800c1fc:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800c1fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c200:	3310      	adds	r3, #16
 800c202:	693a      	ldr	r2, [r7, #16]
 800c204:	4413      	add	r3, r2
 800c206:	3303      	adds	r3, #3
 800c208:	f023 0303 	bic.w	r3, r3, #3
 800c20c:	4618      	mov	r0, r3
 800c20e:	89f9      	ldrh	r1, [r7, #14]
 800c210:	8b7a      	ldrh	r2, [r7, #26]
 800c212:	2300      	movs	r3, #0
 800c214:	9301      	str	r3, [sp, #4]
 800c216:	887b      	ldrh	r3, [r7, #2]
 800c218:	9300      	str	r3, [sp, #0]
 800c21a:	460b      	mov	r3, r1
 800c21c:	4601      	mov	r1, r0
 800c21e:	6938      	ldr	r0, [r7, #16]
 800c220:	f7ff ff7c 	bl	800c11c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800c224:	693b      	ldr	r3, [r7, #16]
 800c226:	685b      	ldr	r3, [r3, #4]
 800c228:	f003 0303 	and.w	r3, r3, #3
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d006      	beq.n	800c23e <pbuf_alloc+0xce>
 800c230:	4b42      	ldr	r3, [pc, #264]	; (800c33c <pbuf_alloc+0x1cc>)
 800c232:	f240 1201 	movw	r2, #257	; 0x101
 800c236:	4942      	ldr	r1, [pc, #264]	; (800c340 <pbuf_alloc+0x1d0>)
 800c238:	4842      	ldr	r0, [pc, #264]	; (800c344 <pbuf_alloc+0x1d4>)
 800c23a:	f00b ffa9 	bl	8018190 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800c23e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c240:	3303      	adds	r3, #3
 800c242:	f023 0303 	bic.w	r3, r3, #3
 800c246:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800c24a:	d106      	bne.n	800c25a <pbuf_alloc+0xea>
 800c24c:	4b3b      	ldr	r3, [pc, #236]	; (800c33c <pbuf_alloc+0x1cc>)
 800c24e:	f240 1203 	movw	r2, #259	; 0x103
 800c252:	493d      	ldr	r1, [pc, #244]	; (800c348 <pbuf_alloc+0x1d8>)
 800c254:	483b      	ldr	r0, [pc, #236]	; (800c344 <pbuf_alloc+0x1d4>)
 800c256:	f00b ff9b 	bl	8018190 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800c25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d102      	bne.n	800c266 <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800c260:	693b      	ldr	r3, [r7, #16]
 800c262:	627b      	str	r3, [r7, #36]	; 0x24
 800c264:	e002      	b.n	800c26c <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800c266:	69fb      	ldr	r3, [r7, #28]
 800c268:	693a      	ldr	r2, [r7, #16]
 800c26a:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800c26c:	693b      	ldr	r3, [r7, #16]
 800c26e:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800c270:	8b7a      	ldrh	r2, [r7, #26]
 800c272:	89fb      	ldrh	r3, [r7, #14]
 800c274:	1ad3      	subs	r3, r2, r3
 800c276:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800c278:	2300      	movs	r3, #0
 800c27a:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800c27c:	8b7b      	ldrh	r3, [r7, #26]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d19e      	bne.n	800c1c0 <pbuf_alloc+0x50>
      break;
 800c282:	e055      	b.n	800c330 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800c284:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c286:	3303      	adds	r3, #3
 800c288:	b29b      	uxth	r3, r3
 800c28a:	f023 0303 	bic.w	r3, r3, #3
 800c28e:	b29a      	uxth	r2, r3
 800c290:	88bb      	ldrh	r3, [r7, #4]
 800c292:	3303      	adds	r3, #3
 800c294:	b29b      	uxth	r3, r3
 800c296:	f023 0303 	bic.w	r3, r3, #3
 800c29a:	b29b      	uxth	r3, r3
 800c29c:	4413      	add	r3, r2
 800c29e:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800c2a0:	8b3b      	ldrh	r3, [r7, #24]
 800c2a2:	3310      	adds	r3, #16
 800c2a4:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c2a6:	8b3a      	ldrh	r2, [r7, #24]
 800c2a8:	88bb      	ldrh	r3, [r7, #4]
 800c2aa:	3303      	adds	r3, #3
 800c2ac:	f023 0303 	bic.w	r3, r3, #3
 800c2b0:	429a      	cmp	r2, r3
 800c2b2:	d306      	bcc.n	800c2c2 <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800c2b4:	8afa      	ldrh	r2, [r7, #22]
 800c2b6:	88bb      	ldrh	r3, [r7, #4]
 800c2b8:	3303      	adds	r3, #3
 800c2ba:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c2be:	429a      	cmp	r2, r3
 800c2c0:	d201      	bcs.n	800c2c6 <pbuf_alloc+0x156>
        return NULL;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	e035      	b.n	800c332 <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800c2c6:	8afb      	ldrh	r3, [r7, #22]
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f7ff fa2f 	bl	800b72c <mem_malloc>
 800c2ce:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800c2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d101      	bne.n	800c2da <pbuf_alloc+0x16a>
        return NULL;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	e02b      	b.n	800c332 <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800c2da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c2dc:	3310      	adds	r3, #16
 800c2de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2e0:	4413      	add	r3, r2
 800c2e2:	3303      	adds	r3, #3
 800c2e4:	f023 0303 	bic.w	r3, r3, #3
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	88b9      	ldrh	r1, [r7, #4]
 800c2ec:	88ba      	ldrh	r2, [r7, #4]
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	9301      	str	r3, [sp, #4]
 800c2f2:	887b      	ldrh	r3, [r7, #2]
 800c2f4:	9300      	str	r3, [sp, #0]
 800c2f6:	460b      	mov	r3, r1
 800c2f8:	4601      	mov	r1, r0
 800c2fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c2fc:	f7ff ff0e 	bl	800c11c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800c300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c302:	685b      	ldr	r3, [r3, #4]
 800c304:	f003 0303 	and.w	r3, r3, #3
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d010      	beq.n	800c32e <pbuf_alloc+0x1be>
 800c30c:	4b0b      	ldr	r3, [pc, #44]	; (800c33c <pbuf_alloc+0x1cc>)
 800c30e:	f240 1223 	movw	r2, #291	; 0x123
 800c312:	490e      	ldr	r1, [pc, #56]	; (800c34c <pbuf_alloc+0x1dc>)
 800c314:	480b      	ldr	r0, [pc, #44]	; (800c344 <pbuf_alloc+0x1d4>)
 800c316:	f00b ff3b 	bl	8018190 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800c31a:	e008      	b.n	800c32e <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800c31c:	4b07      	ldr	r3, [pc, #28]	; (800c33c <pbuf_alloc+0x1cc>)
 800c31e:	f240 1227 	movw	r2, #295	; 0x127
 800c322:	490b      	ldr	r1, [pc, #44]	; (800c350 <pbuf_alloc+0x1e0>)
 800c324:	4807      	ldr	r0, [pc, #28]	; (800c344 <pbuf_alloc+0x1d4>)
 800c326:	f00b ff33 	bl	8018190 <iprintf>
      return NULL;
 800c32a:	2300      	movs	r3, #0
 800c32c:	e001      	b.n	800c332 <pbuf_alloc+0x1c2>
      break;
 800c32e:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800c330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c332:	4618      	mov	r0, r3
 800c334:	3728      	adds	r7, #40	; 0x28
 800c336:	46bd      	mov	sp, r7
 800c338:	bd80      	pop	{r7, pc}
 800c33a:	bf00      	nop
 800c33c:	0801a8b0 	.word	0x0801a8b0
 800c340:	0801a8e0 	.word	0x0801a8e0
 800c344:	0801a910 	.word	0x0801a910
 800c348:	0801a938 	.word	0x0801a938
 800c34c:	0801a96c 	.word	0x0801a96c
 800c350:	0801a998 	.word	0x0801a998

0800c354 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b086      	sub	sp, #24
 800c358:	af02      	add	r7, sp, #8
 800c35a:	6078      	str	r0, [r7, #4]
 800c35c:	460b      	mov	r3, r1
 800c35e:	807b      	strh	r3, [r7, #2]
 800c360:	4613      	mov	r3, r2
 800c362:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800c364:	883b      	ldrh	r3, [r7, #0]
 800c366:	2b41      	cmp	r3, #65	; 0x41
 800c368:	d009      	beq.n	800c37e <pbuf_alloc_reference+0x2a>
 800c36a:	883b      	ldrh	r3, [r7, #0]
 800c36c:	2b01      	cmp	r3, #1
 800c36e:	d006      	beq.n	800c37e <pbuf_alloc_reference+0x2a>
 800c370:	4b0f      	ldr	r3, [pc, #60]	; (800c3b0 <pbuf_alloc_reference+0x5c>)
 800c372:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800c376:	490f      	ldr	r1, [pc, #60]	; (800c3b4 <pbuf_alloc_reference+0x60>)
 800c378:	480f      	ldr	r0, [pc, #60]	; (800c3b8 <pbuf_alloc_reference+0x64>)
 800c37a:	f00b ff09 	bl	8018190 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800c37e:	200b      	movs	r0, #11
 800c380:	f7ff fb56 	bl	800ba30 <memp_malloc>
 800c384:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d101      	bne.n	800c390 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800c38c:	2300      	movs	r3, #0
 800c38e:	e00b      	b.n	800c3a8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800c390:	8879      	ldrh	r1, [r7, #2]
 800c392:	887a      	ldrh	r2, [r7, #2]
 800c394:	2300      	movs	r3, #0
 800c396:	9301      	str	r3, [sp, #4]
 800c398:	883b      	ldrh	r3, [r7, #0]
 800c39a:	9300      	str	r3, [sp, #0]
 800c39c:	460b      	mov	r3, r1
 800c39e:	6879      	ldr	r1, [r7, #4]
 800c3a0:	68f8      	ldr	r0, [r7, #12]
 800c3a2:	f7ff febb 	bl	800c11c <pbuf_init_alloced_pbuf>
  return p;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	3710      	adds	r7, #16
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd80      	pop	{r7, pc}
 800c3b0:	0801a8b0 	.word	0x0801a8b0
 800c3b4:	0801a9b4 	.word	0x0801a9b4
 800c3b8:	0801a910 	.word	0x0801a910

0800c3bc <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b088      	sub	sp, #32
 800c3c0:	af02      	add	r7, sp, #8
 800c3c2:	607b      	str	r3, [r7, #4]
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	73fb      	strb	r3, [r7, #15]
 800c3c8:	460b      	mov	r3, r1
 800c3ca:	81bb      	strh	r3, [r7, #12]
 800c3cc:	4613      	mov	r3, r2
 800c3ce:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800c3d0:	7bfb      	ldrb	r3, [r7, #15]
 800c3d2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800c3d4:	8a7b      	ldrh	r3, [r7, #18]
 800c3d6:	3303      	adds	r3, #3
 800c3d8:	f023 0203 	bic.w	r2, r3, #3
 800c3dc:	89bb      	ldrh	r3, [r7, #12]
 800c3de:	441a      	add	r2, r3
 800c3e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3e2:	429a      	cmp	r2, r3
 800c3e4:	d901      	bls.n	800c3ea <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	e018      	b.n	800c41c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800c3ea:	6a3b      	ldr	r3, [r7, #32]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d007      	beq.n	800c400 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800c3f0:	8a7b      	ldrh	r3, [r7, #18]
 800c3f2:	3303      	adds	r3, #3
 800c3f4:	f023 0303 	bic.w	r3, r3, #3
 800c3f8:	6a3a      	ldr	r2, [r7, #32]
 800c3fa:	4413      	add	r3, r2
 800c3fc:	617b      	str	r3, [r7, #20]
 800c3fe:	e001      	b.n	800c404 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800c400:	2300      	movs	r3, #0
 800c402:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	89b9      	ldrh	r1, [r7, #12]
 800c408:	89ba      	ldrh	r2, [r7, #12]
 800c40a:	2302      	movs	r3, #2
 800c40c:	9301      	str	r3, [sp, #4]
 800c40e:	897b      	ldrh	r3, [r7, #10]
 800c410:	9300      	str	r3, [sp, #0]
 800c412:	460b      	mov	r3, r1
 800c414:	6979      	ldr	r1, [r7, #20]
 800c416:	f7ff fe81 	bl	800c11c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800c41a:	687b      	ldr	r3, [r7, #4]
}
 800c41c:	4618      	mov	r0, r3
 800c41e:	3718      	adds	r7, #24
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}

0800c424 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b084      	sub	sp, #16
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
 800c42c:	460b      	mov	r3, r1
 800c42e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d106      	bne.n	800c444 <pbuf_realloc+0x20>
 800c436:	4b3a      	ldr	r3, [pc, #232]	; (800c520 <pbuf_realloc+0xfc>)
 800c438:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800c43c:	4939      	ldr	r1, [pc, #228]	; (800c524 <pbuf_realloc+0x100>)
 800c43e:	483a      	ldr	r0, [pc, #232]	; (800c528 <pbuf_realloc+0x104>)
 800c440:	f00b fea6 	bl	8018190 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	891b      	ldrh	r3, [r3, #8]
 800c448:	887a      	ldrh	r2, [r7, #2]
 800c44a:	429a      	cmp	r2, r3
 800c44c:	d264      	bcs.n	800c518 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	891a      	ldrh	r2, [r3, #8]
 800c452:	887b      	ldrh	r3, [r7, #2]
 800c454:	1ad3      	subs	r3, r2, r3
 800c456:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800c458:	887b      	ldrh	r3, [r7, #2]
 800c45a:	817b      	strh	r3, [r7, #10]
  q = p;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800c460:	e018      	b.n	800c494 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	895b      	ldrh	r3, [r3, #10]
 800c466:	897a      	ldrh	r2, [r7, #10]
 800c468:	1ad3      	subs	r3, r2, r3
 800c46a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	891a      	ldrh	r2, [r3, #8]
 800c470:	893b      	ldrh	r3, [r7, #8]
 800c472:	1ad3      	subs	r3, r2, r3
 800c474:	b29a      	uxth	r2, r3
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d106      	bne.n	800c494 <pbuf_realloc+0x70>
 800c486:	4b26      	ldr	r3, [pc, #152]	; (800c520 <pbuf_realloc+0xfc>)
 800c488:	f240 12af 	movw	r2, #431	; 0x1af
 800c48c:	4927      	ldr	r1, [pc, #156]	; (800c52c <pbuf_realloc+0x108>)
 800c48e:	4826      	ldr	r0, [pc, #152]	; (800c528 <pbuf_realloc+0x104>)
 800c490:	f00b fe7e 	bl	8018190 <iprintf>
  while (rem_len > q->len) {
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	895b      	ldrh	r3, [r3, #10]
 800c498:	897a      	ldrh	r2, [r7, #10]
 800c49a:	429a      	cmp	r2, r3
 800c49c:	d8e1      	bhi.n	800c462 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	7b1b      	ldrb	r3, [r3, #12]
 800c4a2:	f003 030f 	and.w	r3, r3, #15
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d122      	bne.n	800c4f0 <pbuf_realloc+0xcc>
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	895b      	ldrh	r3, [r3, #10]
 800c4ae:	897a      	ldrh	r2, [r7, #10]
 800c4b0:	429a      	cmp	r2, r3
 800c4b2:	d01d      	beq.n	800c4f0 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	7b5b      	ldrb	r3, [r3, #13]
 800c4b8:	f003 0302 	and.w	r3, r3, #2
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d117      	bne.n	800c4f0 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	685b      	ldr	r3, [r3, #4]
 800c4c4:	461a      	mov	r2, r3
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	1ad3      	subs	r3, r2, r3
 800c4ca:	b29a      	uxth	r2, r3
 800c4cc:	897b      	ldrh	r3, [r7, #10]
 800c4ce:	4413      	add	r3, r2
 800c4d0:	b29b      	uxth	r3, r3
 800c4d2:	4619      	mov	r1, r3
 800c4d4:	68f8      	ldr	r0, [r7, #12]
 800c4d6:	f7ff f81f 	bl	800b518 <mem_trim>
 800c4da:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d106      	bne.n	800c4f0 <pbuf_realloc+0xcc>
 800c4e2:	4b0f      	ldr	r3, [pc, #60]	; (800c520 <pbuf_realloc+0xfc>)
 800c4e4:	f240 12bd 	movw	r2, #445	; 0x1bd
 800c4e8:	4911      	ldr	r1, [pc, #68]	; (800c530 <pbuf_realloc+0x10c>)
 800c4ea:	480f      	ldr	r0, [pc, #60]	; (800c528 <pbuf_realloc+0x104>)
 800c4ec:	f00b fe50 	bl	8018190 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	897a      	ldrh	r2, [r7, #10]
 800c4f4:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	895a      	ldrh	r2, [r3, #10]
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d004      	beq.n	800c510 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	4618      	mov	r0, r3
 800c50c:	f000 f910 	bl	800c730 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	2200      	movs	r2, #0
 800c514:	601a      	str	r2, [r3, #0]
 800c516:	e000      	b.n	800c51a <pbuf_realloc+0xf6>
    return;
 800c518:	bf00      	nop

}
 800c51a:	3710      	adds	r7, #16
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}
 800c520:	0801a8b0 	.word	0x0801a8b0
 800c524:	0801a9c8 	.word	0x0801a9c8
 800c528:	0801a910 	.word	0x0801a910
 800c52c:	0801a9e0 	.word	0x0801a9e0
 800c530:	0801a9f8 	.word	0x0801a9f8

0800c534 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b086      	sub	sp, #24
 800c538:	af00      	add	r7, sp, #0
 800c53a:	60f8      	str	r0, [r7, #12]
 800c53c:	60b9      	str	r1, [r7, #8]
 800c53e:	4613      	mov	r3, r2
 800c540:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d106      	bne.n	800c556 <pbuf_add_header_impl+0x22>
 800c548:	4b2b      	ldr	r3, [pc, #172]	; (800c5f8 <pbuf_add_header_impl+0xc4>)
 800c54a:	f240 12df 	movw	r2, #479	; 0x1df
 800c54e:	492b      	ldr	r1, [pc, #172]	; (800c5fc <pbuf_add_header_impl+0xc8>)
 800c550:	482b      	ldr	r0, [pc, #172]	; (800c600 <pbuf_add_header_impl+0xcc>)
 800c552:	f00b fe1d 	bl	8018190 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d003      	beq.n	800c564 <pbuf_add_header_impl+0x30>
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c562:	d301      	bcc.n	800c568 <pbuf_add_header_impl+0x34>
    return 1;
 800c564:	2301      	movs	r3, #1
 800c566:	e043      	b.n	800c5f0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d101      	bne.n	800c572 <pbuf_add_header_impl+0x3e>
    return 0;
 800c56e:	2300      	movs	r3, #0
 800c570:	e03e      	b.n	800c5f0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800c572:	68bb      	ldr	r3, [r7, #8]
 800c574:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	891a      	ldrh	r2, [r3, #8]
 800c57a:	8a7b      	ldrh	r3, [r7, #18]
 800c57c:	4413      	add	r3, r2
 800c57e:	b29b      	uxth	r3, r3
 800c580:	8a7a      	ldrh	r2, [r7, #18]
 800c582:	429a      	cmp	r2, r3
 800c584:	d901      	bls.n	800c58a <pbuf_add_header_impl+0x56>
    return 1;
 800c586:	2301      	movs	r3, #1
 800c588:	e032      	b.n	800c5f0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	7b1b      	ldrb	r3, [r3, #12]
 800c58e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c590:	8a3b      	ldrh	r3, [r7, #16]
 800c592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c596:	2b00      	cmp	r3, #0
 800c598:	d00c      	beq.n	800c5b4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	685a      	ldr	r2, [r3, #4]
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	425b      	negs	r3, r3
 800c5a2:	4413      	add	r3, r2
 800c5a4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	3310      	adds	r3, #16
 800c5aa:	697a      	ldr	r2, [r7, #20]
 800c5ac:	429a      	cmp	r2, r3
 800c5ae:	d20d      	bcs.n	800c5cc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800c5b0:	2301      	movs	r3, #1
 800c5b2:	e01d      	b.n	800c5f0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800c5b4:	79fb      	ldrb	r3, [r7, #7]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d006      	beq.n	800c5c8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	685a      	ldr	r2, [r3, #4]
 800c5be:	68bb      	ldr	r3, [r7, #8]
 800c5c0:	425b      	negs	r3, r3
 800c5c2:	4413      	add	r3, r2
 800c5c4:	617b      	str	r3, [r7, #20]
 800c5c6:	e001      	b.n	800c5cc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800c5c8:	2301      	movs	r3, #1
 800c5ca:	e011      	b.n	800c5f0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	697a      	ldr	r2, [r7, #20]
 800c5d0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	895a      	ldrh	r2, [r3, #10]
 800c5d6:	8a7b      	ldrh	r3, [r7, #18]
 800c5d8:	4413      	add	r3, r2
 800c5da:	b29a      	uxth	r2, r3
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	891a      	ldrh	r2, [r3, #8]
 800c5e4:	8a7b      	ldrh	r3, [r7, #18]
 800c5e6:	4413      	add	r3, r2
 800c5e8:	b29a      	uxth	r2, r3
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	811a      	strh	r2, [r3, #8]


  return 0;
 800c5ee:	2300      	movs	r3, #0
}
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	3718      	adds	r7, #24
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	bd80      	pop	{r7, pc}
 800c5f8:	0801a8b0 	.word	0x0801a8b0
 800c5fc:	0801aa14 	.word	0x0801aa14
 800c600:	0801a910 	.word	0x0801a910

0800c604 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b082      	sub	sp, #8
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
 800c60c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800c60e:	2200      	movs	r2, #0
 800c610:	6839      	ldr	r1, [r7, #0]
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	f7ff ff8e 	bl	800c534 <pbuf_add_header_impl>
 800c618:	4603      	mov	r3, r0
}
 800c61a:	4618      	mov	r0, r3
 800c61c:	3708      	adds	r7, #8
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}
	...

0800c624 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b084      	sub	sp, #16
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
 800c62c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d106      	bne.n	800c642 <pbuf_remove_header+0x1e>
 800c634:	4b20      	ldr	r3, [pc, #128]	; (800c6b8 <pbuf_remove_header+0x94>)
 800c636:	f240 224b 	movw	r2, #587	; 0x24b
 800c63a:	4920      	ldr	r1, [pc, #128]	; (800c6bc <pbuf_remove_header+0x98>)
 800c63c:	4820      	ldr	r0, [pc, #128]	; (800c6c0 <pbuf_remove_header+0x9c>)
 800c63e:	f00b fda7 	bl	8018190 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d003      	beq.n	800c650 <pbuf_remove_header+0x2c>
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c64e:	d301      	bcc.n	800c654 <pbuf_remove_header+0x30>
    return 1;
 800c650:	2301      	movs	r3, #1
 800c652:	e02c      	b.n	800c6ae <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d101      	bne.n	800c65e <pbuf_remove_header+0x3a>
    return 0;
 800c65a:	2300      	movs	r3, #0
 800c65c:	e027      	b.n	800c6ae <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	895b      	ldrh	r3, [r3, #10]
 800c666:	89fa      	ldrh	r2, [r7, #14]
 800c668:	429a      	cmp	r2, r3
 800c66a:	d908      	bls.n	800c67e <pbuf_remove_header+0x5a>
 800c66c:	4b12      	ldr	r3, [pc, #72]	; (800c6b8 <pbuf_remove_header+0x94>)
 800c66e:	f240 2255 	movw	r2, #597	; 0x255
 800c672:	4914      	ldr	r1, [pc, #80]	; (800c6c4 <pbuf_remove_header+0xa0>)
 800c674:	4812      	ldr	r0, [pc, #72]	; (800c6c0 <pbuf_remove_header+0x9c>)
 800c676:	f00b fd8b 	bl	8018190 <iprintf>
 800c67a:	2301      	movs	r3, #1
 800c67c:	e017      	b.n	800c6ae <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	685b      	ldr	r3, [r3, #4]
 800c682:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	685a      	ldr	r2, [r3, #4]
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	441a      	add	r2, r3
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	895a      	ldrh	r2, [r3, #10]
 800c694:	89fb      	ldrh	r3, [r7, #14]
 800c696:	1ad3      	subs	r3, r2, r3
 800c698:	b29a      	uxth	r2, r3
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	891a      	ldrh	r2, [r3, #8]
 800c6a2:	89fb      	ldrh	r3, [r7, #14]
 800c6a4:	1ad3      	subs	r3, r2, r3
 800c6a6:	b29a      	uxth	r2, r3
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800c6ac:	2300      	movs	r3, #0
}
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	3710      	adds	r7, #16
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}
 800c6b6:	bf00      	nop
 800c6b8:	0801a8b0 	.word	0x0801a8b0
 800c6bc:	0801aa14 	.word	0x0801aa14
 800c6c0:	0801a910 	.word	0x0801a910
 800c6c4:	0801aa20 	.word	0x0801aa20

0800c6c8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b082      	sub	sp, #8
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
 800c6d0:	460b      	mov	r3, r1
 800c6d2:	807b      	strh	r3, [r7, #2]
 800c6d4:	4613      	mov	r3, r2
 800c6d6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800c6d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	da08      	bge.n	800c6f2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800c6e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c6e4:	425b      	negs	r3, r3
 800c6e6:	4619      	mov	r1, r3
 800c6e8:	6878      	ldr	r0, [r7, #4]
 800c6ea:	f7ff ff9b 	bl	800c624 <pbuf_remove_header>
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	e007      	b.n	800c702 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800c6f2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c6f6:	787a      	ldrb	r2, [r7, #1]
 800c6f8:	4619      	mov	r1, r3
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f7ff ff1a 	bl	800c534 <pbuf_add_header_impl>
 800c700:	4603      	mov	r3, r0
  }
}
 800c702:	4618      	mov	r0, r3
 800c704:	3708      	adds	r7, #8
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}

0800c70a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c70a:	b580      	push	{r7, lr}
 800c70c:	b082      	sub	sp, #8
 800c70e:	af00      	add	r7, sp, #0
 800c710:	6078      	str	r0, [r7, #4]
 800c712:	460b      	mov	r3, r1
 800c714:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800c716:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c71a:	2201      	movs	r2, #1
 800c71c:	4619      	mov	r1, r3
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f7ff ffd2 	bl	800c6c8 <pbuf_header_impl>
 800c724:	4603      	mov	r3, r0
}
 800c726:	4618      	mov	r0, r3
 800c728:	3708      	adds	r7, #8
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bd80      	pop	{r7, pc}
	...

0800c730 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b088      	sub	sp, #32
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d10b      	bne.n	800c756 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d106      	bne.n	800c752 <pbuf_free+0x22>
 800c744:	4b3b      	ldr	r3, [pc, #236]	; (800c834 <pbuf_free+0x104>)
 800c746:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800c74a:	493b      	ldr	r1, [pc, #236]	; (800c838 <pbuf_free+0x108>)
 800c74c:	483b      	ldr	r0, [pc, #236]	; (800c83c <pbuf_free+0x10c>)
 800c74e:	f00b fd1f 	bl	8018190 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800c752:	2300      	movs	r3, #0
 800c754:	e069      	b.n	800c82a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800c756:	2300      	movs	r3, #0
 800c758:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c75a:	e062      	b.n	800c822 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800c75c:	f00b fc7a 	bl	8018054 <sys_arch_protect>
 800c760:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	7b9b      	ldrb	r3, [r3, #14]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d106      	bne.n	800c778 <pbuf_free+0x48>
 800c76a:	4b32      	ldr	r3, [pc, #200]	; (800c834 <pbuf_free+0x104>)
 800c76c:	f240 22f1 	movw	r2, #753	; 0x2f1
 800c770:	4933      	ldr	r1, [pc, #204]	; (800c840 <pbuf_free+0x110>)
 800c772:	4832      	ldr	r0, [pc, #200]	; (800c83c <pbuf_free+0x10c>)
 800c774:	f00b fd0c 	bl	8018190 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	7b9b      	ldrb	r3, [r3, #14]
 800c77c:	3b01      	subs	r3, #1
 800c77e:	b2da      	uxtb	r2, r3
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	739a      	strb	r2, [r3, #14]
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	7b9b      	ldrb	r3, [r3, #14]
 800c788:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800c78a:	69b8      	ldr	r0, [r7, #24]
 800c78c:	f00b fc70 	bl	8018070 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c790:	7dfb      	ldrb	r3, [r7, #23]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d143      	bne.n	800c81e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	7b1b      	ldrb	r3, [r3, #12]
 800c7a0:	f003 030f 	and.w	r3, r3, #15
 800c7a4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	7b5b      	ldrb	r3, [r3, #13]
 800c7aa:	f003 0302 	and.w	r3, r3, #2
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d011      	beq.n	800c7d6 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c7b6:	68bb      	ldr	r3, [r7, #8]
 800c7b8:	691b      	ldr	r3, [r3, #16]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d106      	bne.n	800c7cc <pbuf_free+0x9c>
 800c7be:	4b1d      	ldr	r3, [pc, #116]	; (800c834 <pbuf_free+0x104>)
 800c7c0:	f240 22ff 	movw	r2, #767	; 0x2ff
 800c7c4:	491f      	ldr	r1, [pc, #124]	; (800c844 <pbuf_free+0x114>)
 800c7c6:	481d      	ldr	r0, [pc, #116]	; (800c83c <pbuf_free+0x10c>)
 800c7c8:	f00b fce2 	bl	8018190 <iprintf>
        pc->custom_free_function(p);
 800c7cc:	68bb      	ldr	r3, [r7, #8]
 800c7ce:	691b      	ldr	r3, [r3, #16]
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	4798      	blx	r3
 800c7d4:	e01d      	b.n	800c812 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800c7d6:	7bfb      	ldrb	r3, [r7, #15]
 800c7d8:	2b02      	cmp	r3, #2
 800c7da:	d104      	bne.n	800c7e6 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800c7dc:	6879      	ldr	r1, [r7, #4]
 800c7de:	200c      	movs	r0, #12
 800c7e0:	f7ff f978 	bl	800bad4 <memp_free>
 800c7e4:	e015      	b.n	800c812 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800c7e6:	7bfb      	ldrb	r3, [r7, #15]
 800c7e8:	2b01      	cmp	r3, #1
 800c7ea:	d104      	bne.n	800c7f6 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800c7ec:	6879      	ldr	r1, [r7, #4]
 800c7ee:	200b      	movs	r0, #11
 800c7f0:	f7ff f970 	bl	800bad4 <memp_free>
 800c7f4:	e00d      	b.n	800c812 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800c7f6:	7bfb      	ldrb	r3, [r7, #15]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d103      	bne.n	800c804 <pbuf_free+0xd4>
          mem_free(p);
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f7fe fdfb 	bl	800b3f8 <mem_free>
 800c802:	e006      	b.n	800c812 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800c804:	4b0b      	ldr	r3, [pc, #44]	; (800c834 <pbuf_free+0x104>)
 800c806:	f240 320f 	movw	r2, #783	; 0x30f
 800c80a:	490f      	ldr	r1, [pc, #60]	; (800c848 <pbuf_free+0x118>)
 800c80c:	480b      	ldr	r0, [pc, #44]	; (800c83c <pbuf_free+0x10c>)
 800c80e:	f00b fcbf 	bl	8018190 <iprintf>
        }
      }
      count++;
 800c812:	7ffb      	ldrb	r3, [r7, #31]
 800c814:	3301      	adds	r3, #1
 800c816:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	607b      	str	r3, [r7, #4]
 800c81c:	e001      	b.n	800c822 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800c81e:	2300      	movs	r3, #0
 800c820:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d199      	bne.n	800c75c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800c828:	7ffb      	ldrb	r3, [r7, #31]
}
 800c82a:	4618      	mov	r0, r3
 800c82c:	3720      	adds	r7, #32
 800c82e:	46bd      	mov	sp, r7
 800c830:	bd80      	pop	{r7, pc}
 800c832:	bf00      	nop
 800c834:	0801a8b0 	.word	0x0801a8b0
 800c838:	0801aa14 	.word	0x0801aa14
 800c83c:	0801a910 	.word	0x0801a910
 800c840:	0801aa40 	.word	0x0801aa40
 800c844:	0801aa58 	.word	0x0801aa58
 800c848:	0801aa7c 	.word	0x0801aa7c

0800c84c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800c84c:	b480      	push	{r7}
 800c84e:	b085      	sub	sp, #20
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c854:	2300      	movs	r3, #0
 800c856:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c858:	e005      	b.n	800c866 <pbuf_clen+0x1a>
    ++len;
 800c85a:	89fb      	ldrh	r3, [r7, #14]
 800c85c:	3301      	adds	r3, #1
 800c85e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d1f6      	bne.n	800c85a <pbuf_clen+0xe>
  }
  return len;
 800c86c:	89fb      	ldrh	r3, [r7, #14]
}
 800c86e:	4618      	mov	r0, r3
 800c870:	3714      	adds	r7, #20
 800c872:	46bd      	mov	sp, r7
 800c874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c878:	4770      	bx	lr
	...

0800c87c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b084      	sub	sp, #16
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d016      	beq.n	800c8b8 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800c88a:	f00b fbe3 	bl	8018054 <sys_arch_protect>
 800c88e:	60f8      	str	r0, [r7, #12]
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	7b9b      	ldrb	r3, [r3, #14]
 800c894:	3301      	adds	r3, #1
 800c896:	b2da      	uxtb	r2, r3
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	739a      	strb	r2, [r3, #14]
 800c89c:	68f8      	ldr	r0, [r7, #12]
 800c89e:	f00b fbe7 	bl	8018070 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	7b9b      	ldrb	r3, [r3, #14]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d106      	bne.n	800c8b8 <pbuf_ref+0x3c>
 800c8aa:	4b05      	ldr	r3, [pc, #20]	; (800c8c0 <pbuf_ref+0x44>)
 800c8ac:	f240 3242 	movw	r2, #834	; 0x342
 800c8b0:	4904      	ldr	r1, [pc, #16]	; (800c8c4 <pbuf_ref+0x48>)
 800c8b2:	4805      	ldr	r0, [pc, #20]	; (800c8c8 <pbuf_ref+0x4c>)
 800c8b4:	f00b fc6c 	bl	8018190 <iprintf>
  }
}
 800c8b8:	bf00      	nop
 800c8ba:	3710      	adds	r7, #16
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bd80      	pop	{r7, pc}
 800c8c0:	0801a8b0 	.word	0x0801a8b0
 800c8c4:	0801aa90 	.word	0x0801aa90
 800c8c8:	0801a910 	.word	0x0801a910

0800c8cc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b084      	sub	sp, #16
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
 800c8d4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d002      	beq.n	800c8e2 <pbuf_cat+0x16>
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d107      	bne.n	800c8f2 <pbuf_cat+0x26>
 800c8e2:	4b20      	ldr	r3, [pc, #128]	; (800c964 <pbuf_cat+0x98>)
 800c8e4:	f240 325a 	movw	r2, #858	; 0x35a
 800c8e8:	491f      	ldr	r1, [pc, #124]	; (800c968 <pbuf_cat+0x9c>)
 800c8ea:	4820      	ldr	r0, [pc, #128]	; (800c96c <pbuf_cat+0xa0>)
 800c8ec:	f00b fc50 	bl	8018190 <iprintf>
 800c8f0:	e034      	b.n	800c95c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	60fb      	str	r3, [r7, #12]
 800c8f6:	e00a      	b.n	800c90e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	891a      	ldrh	r2, [r3, #8]
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	891b      	ldrh	r3, [r3, #8]
 800c900:	4413      	add	r3, r2
 800c902:	b29a      	uxth	r2, r3
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	60fb      	str	r3, [r7, #12]
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d1f0      	bne.n	800c8f8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	891a      	ldrh	r2, [r3, #8]
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	895b      	ldrh	r3, [r3, #10]
 800c91e:	429a      	cmp	r2, r3
 800c920:	d006      	beq.n	800c930 <pbuf_cat+0x64>
 800c922:	4b10      	ldr	r3, [pc, #64]	; (800c964 <pbuf_cat+0x98>)
 800c924:	f240 3262 	movw	r2, #866	; 0x362
 800c928:	4911      	ldr	r1, [pc, #68]	; (800c970 <pbuf_cat+0xa4>)
 800c92a:	4810      	ldr	r0, [pc, #64]	; (800c96c <pbuf_cat+0xa0>)
 800c92c:	f00b fc30 	bl	8018190 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d006      	beq.n	800c946 <pbuf_cat+0x7a>
 800c938:	4b0a      	ldr	r3, [pc, #40]	; (800c964 <pbuf_cat+0x98>)
 800c93a:	f240 3263 	movw	r2, #867	; 0x363
 800c93e:	490d      	ldr	r1, [pc, #52]	; (800c974 <pbuf_cat+0xa8>)
 800c940:	480a      	ldr	r0, [pc, #40]	; (800c96c <pbuf_cat+0xa0>)
 800c942:	f00b fc25 	bl	8018190 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	891a      	ldrh	r2, [r3, #8]
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	891b      	ldrh	r3, [r3, #8]
 800c94e:	4413      	add	r3, r2
 800c950:	b29a      	uxth	r2, r3
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	683a      	ldr	r2, [r7, #0]
 800c95a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c95c:	3710      	adds	r7, #16
 800c95e:	46bd      	mov	sp, r7
 800c960:	bd80      	pop	{r7, pc}
 800c962:	bf00      	nop
 800c964:	0801a8b0 	.word	0x0801a8b0
 800c968:	0801aaa4 	.word	0x0801aaa4
 800c96c:	0801a910 	.word	0x0801a910
 800c970:	0801aadc 	.word	0x0801aadc
 800c974:	0801ab0c 	.word	0x0801ab0c

0800c978 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b082      	sub	sp, #8
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
 800c980:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800c982:	6839      	ldr	r1, [r7, #0]
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	f7ff ffa1 	bl	800c8cc <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800c98a:	6838      	ldr	r0, [r7, #0]
 800c98c:	f7ff ff76 	bl	800c87c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800c990:	bf00      	nop
 800c992:	3708      	adds	r7, #8
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}

0800c998 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b086      	sub	sp, #24
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
 800c9a0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	617b      	str	r3, [r7, #20]
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d008      	beq.n	800c9c2 <pbuf_copy+0x2a>
 800c9b0:	683b      	ldr	r3, [r7, #0]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d005      	beq.n	800c9c2 <pbuf_copy+0x2a>
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	891a      	ldrh	r2, [r3, #8]
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	891b      	ldrh	r3, [r3, #8]
 800c9be:	429a      	cmp	r2, r3
 800c9c0:	d209      	bcs.n	800c9d6 <pbuf_copy+0x3e>
 800c9c2:	4b57      	ldr	r3, [pc, #348]	; (800cb20 <pbuf_copy+0x188>)
 800c9c4:	f240 32ca 	movw	r2, #970	; 0x3ca
 800c9c8:	4956      	ldr	r1, [pc, #344]	; (800cb24 <pbuf_copy+0x18c>)
 800c9ca:	4857      	ldr	r0, [pc, #348]	; (800cb28 <pbuf_copy+0x190>)
 800c9cc:	f00b fbe0 	bl	8018190 <iprintf>
 800c9d0:	f06f 030f 	mvn.w	r3, #15
 800c9d4:	e09f      	b.n	800cb16 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	895b      	ldrh	r3, [r3, #10]
 800c9da:	461a      	mov	r2, r3
 800c9dc:	697b      	ldr	r3, [r7, #20]
 800c9de:	1ad2      	subs	r2, r2, r3
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	895b      	ldrh	r3, [r3, #10]
 800c9e4:	4619      	mov	r1, r3
 800c9e6:	693b      	ldr	r3, [r7, #16]
 800c9e8:	1acb      	subs	r3, r1, r3
 800c9ea:	429a      	cmp	r2, r3
 800c9ec:	d306      	bcc.n	800c9fc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	895b      	ldrh	r3, [r3, #10]
 800c9f2:	461a      	mov	r2, r3
 800c9f4:	693b      	ldr	r3, [r7, #16]
 800c9f6:	1ad3      	subs	r3, r2, r3
 800c9f8:	60fb      	str	r3, [r7, #12]
 800c9fa:	e005      	b.n	800ca08 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	895b      	ldrh	r3, [r3, #10]
 800ca00:	461a      	mov	r2, r3
 800ca02:	697b      	ldr	r3, [r7, #20]
 800ca04:	1ad3      	subs	r3, r2, r3
 800ca06:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	685a      	ldr	r2, [r3, #4]
 800ca0c:	697b      	ldr	r3, [r7, #20]
 800ca0e:	18d0      	adds	r0, r2, r3
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	685a      	ldr	r2, [r3, #4]
 800ca14:	693b      	ldr	r3, [r7, #16]
 800ca16:	4413      	add	r3, r2
 800ca18:	68fa      	ldr	r2, [r7, #12]
 800ca1a:	4619      	mov	r1, r3
 800ca1c:	f00b fb8b 	bl	8018136 <memcpy>
    offset_to += len;
 800ca20:	697a      	ldr	r2, [r7, #20]
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	4413      	add	r3, r2
 800ca26:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800ca28:	693a      	ldr	r2, [r7, #16]
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	4413      	add	r3, r2
 800ca2e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	895b      	ldrh	r3, [r3, #10]
 800ca34:	461a      	mov	r2, r3
 800ca36:	697b      	ldr	r3, [r7, #20]
 800ca38:	4293      	cmp	r3, r2
 800ca3a:	d906      	bls.n	800ca4a <pbuf_copy+0xb2>
 800ca3c:	4b38      	ldr	r3, [pc, #224]	; (800cb20 <pbuf_copy+0x188>)
 800ca3e:	f240 32d9 	movw	r2, #985	; 0x3d9
 800ca42:	493a      	ldr	r1, [pc, #232]	; (800cb2c <pbuf_copy+0x194>)
 800ca44:	4838      	ldr	r0, [pc, #224]	; (800cb28 <pbuf_copy+0x190>)
 800ca46:	f00b fba3 	bl	8018190 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	895b      	ldrh	r3, [r3, #10]
 800ca4e:	461a      	mov	r2, r3
 800ca50:	693b      	ldr	r3, [r7, #16]
 800ca52:	4293      	cmp	r3, r2
 800ca54:	d906      	bls.n	800ca64 <pbuf_copy+0xcc>
 800ca56:	4b32      	ldr	r3, [pc, #200]	; (800cb20 <pbuf_copy+0x188>)
 800ca58:	f240 32da 	movw	r2, #986	; 0x3da
 800ca5c:	4934      	ldr	r1, [pc, #208]	; (800cb30 <pbuf_copy+0x198>)
 800ca5e:	4832      	ldr	r0, [pc, #200]	; (800cb28 <pbuf_copy+0x190>)
 800ca60:	f00b fb96 	bl	8018190 <iprintf>
    if (offset_from >= p_from->len) {
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	895b      	ldrh	r3, [r3, #10]
 800ca68:	461a      	mov	r2, r3
 800ca6a:	693b      	ldr	r3, [r7, #16]
 800ca6c:	4293      	cmp	r3, r2
 800ca6e:	d304      	bcc.n	800ca7a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800ca70:	2300      	movs	r3, #0
 800ca72:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	895b      	ldrh	r3, [r3, #10]
 800ca7e:	461a      	mov	r2, r3
 800ca80:	697b      	ldr	r3, [r7, #20]
 800ca82:	4293      	cmp	r3, r2
 800ca84:	d114      	bne.n	800cab0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800ca86:	2300      	movs	r3, #0
 800ca88:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d10c      	bne.n	800cab0 <pbuf_copy+0x118>
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d009      	beq.n	800cab0 <pbuf_copy+0x118>
 800ca9c:	4b20      	ldr	r3, [pc, #128]	; (800cb20 <pbuf_copy+0x188>)
 800ca9e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800caa2:	4924      	ldr	r1, [pc, #144]	; (800cb34 <pbuf_copy+0x19c>)
 800caa4:	4820      	ldr	r0, [pc, #128]	; (800cb28 <pbuf_copy+0x190>)
 800caa6:	f00b fb73 	bl	8018190 <iprintf>
 800caaa:	f06f 030f 	mvn.w	r3, #15
 800caae:	e032      	b.n	800cb16 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d013      	beq.n	800cade <pbuf_copy+0x146>
 800cab6:	683b      	ldr	r3, [r7, #0]
 800cab8:	895a      	ldrh	r2, [r3, #10]
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	891b      	ldrh	r3, [r3, #8]
 800cabe:	429a      	cmp	r2, r3
 800cac0:	d10d      	bne.n	800cade <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d009      	beq.n	800cade <pbuf_copy+0x146>
 800caca:	4b15      	ldr	r3, [pc, #84]	; (800cb20 <pbuf_copy+0x188>)
 800cacc:	f240 32ea 	movw	r2, #1002	; 0x3ea
 800cad0:	4919      	ldr	r1, [pc, #100]	; (800cb38 <pbuf_copy+0x1a0>)
 800cad2:	4815      	ldr	r0, [pc, #84]	; (800cb28 <pbuf_copy+0x190>)
 800cad4:	f00b fb5c 	bl	8018190 <iprintf>
 800cad8:	f06f 0305 	mvn.w	r3, #5
 800cadc:	e01b      	b.n	800cb16 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d013      	beq.n	800cb0c <pbuf_copy+0x174>
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	895a      	ldrh	r2, [r3, #10]
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	891b      	ldrh	r3, [r3, #8]
 800caec:	429a      	cmp	r2, r3
 800caee:	d10d      	bne.n	800cb0c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d009      	beq.n	800cb0c <pbuf_copy+0x174>
 800caf8:	4b09      	ldr	r3, [pc, #36]	; (800cb20 <pbuf_copy+0x188>)
 800cafa:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800cafe:	490e      	ldr	r1, [pc, #56]	; (800cb38 <pbuf_copy+0x1a0>)
 800cb00:	4809      	ldr	r0, [pc, #36]	; (800cb28 <pbuf_copy+0x190>)
 800cb02:	f00b fb45 	bl	8018190 <iprintf>
 800cb06:	f06f 0305 	mvn.w	r3, #5
 800cb0a:	e004      	b.n	800cb16 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	f47f af61 	bne.w	800c9d6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800cb14:	2300      	movs	r3, #0
}
 800cb16:	4618      	mov	r0, r3
 800cb18:	3718      	adds	r7, #24
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd80      	pop	{r7, pc}
 800cb1e:	bf00      	nop
 800cb20:	0801a8b0 	.word	0x0801a8b0
 800cb24:	0801ab58 	.word	0x0801ab58
 800cb28:	0801a910 	.word	0x0801a910
 800cb2c:	0801ab88 	.word	0x0801ab88
 800cb30:	0801aba0 	.word	0x0801aba0
 800cb34:	0801abbc 	.word	0x0801abbc
 800cb38:	0801abcc 	.word	0x0801abcc

0800cb3c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b088      	sub	sp, #32
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	60f8      	str	r0, [r7, #12]
 800cb44:	60b9      	str	r1, [r7, #8]
 800cb46:	4611      	mov	r1, r2
 800cb48:	461a      	mov	r2, r3
 800cb4a:	460b      	mov	r3, r1
 800cb4c:	80fb      	strh	r3, [r7, #6]
 800cb4e:	4613      	mov	r3, r2
 800cb50:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800cb52:	2300      	movs	r3, #0
 800cb54:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800cb56:	2300      	movs	r3, #0
 800cb58:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d108      	bne.n	800cb72 <pbuf_copy_partial+0x36>
 800cb60:	4b2b      	ldr	r3, [pc, #172]	; (800cc10 <pbuf_copy_partial+0xd4>)
 800cb62:	f240 420a 	movw	r2, #1034	; 0x40a
 800cb66:	492b      	ldr	r1, [pc, #172]	; (800cc14 <pbuf_copy_partial+0xd8>)
 800cb68:	482b      	ldr	r0, [pc, #172]	; (800cc18 <pbuf_copy_partial+0xdc>)
 800cb6a:	f00b fb11 	bl	8018190 <iprintf>
 800cb6e:	2300      	movs	r3, #0
 800cb70:	e04a      	b.n	800cc08 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800cb72:	68bb      	ldr	r3, [r7, #8]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d108      	bne.n	800cb8a <pbuf_copy_partial+0x4e>
 800cb78:	4b25      	ldr	r3, [pc, #148]	; (800cc10 <pbuf_copy_partial+0xd4>)
 800cb7a:	f240 420b 	movw	r2, #1035	; 0x40b
 800cb7e:	4927      	ldr	r1, [pc, #156]	; (800cc1c <pbuf_copy_partial+0xe0>)
 800cb80:	4825      	ldr	r0, [pc, #148]	; (800cc18 <pbuf_copy_partial+0xdc>)
 800cb82:	f00b fb05 	bl	8018190 <iprintf>
 800cb86:	2300      	movs	r3, #0
 800cb88:	e03e      	b.n	800cc08 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	61fb      	str	r3, [r7, #28]
 800cb8e:	e034      	b.n	800cbfa <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800cb90:	88bb      	ldrh	r3, [r7, #4]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d00a      	beq.n	800cbac <pbuf_copy_partial+0x70>
 800cb96:	69fb      	ldr	r3, [r7, #28]
 800cb98:	895b      	ldrh	r3, [r3, #10]
 800cb9a:	88ba      	ldrh	r2, [r7, #4]
 800cb9c:	429a      	cmp	r2, r3
 800cb9e:	d305      	bcc.n	800cbac <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800cba0:	69fb      	ldr	r3, [r7, #28]
 800cba2:	895b      	ldrh	r3, [r3, #10]
 800cba4:	88ba      	ldrh	r2, [r7, #4]
 800cba6:	1ad3      	subs	r3, r2, r3
 800cba8:	80bb      	strh	r3, [r7, #4]
 800cbaa:	e023      	b.n	800cbf4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800cbac:	69fb      	ldr	r3, [r7, #28]
 800cbae:	895a      	ldrh	r2, [r3, #10]
 800cbb0:	88bb      	ldrh	r3, [r7, #4]
 800cbb2:	1ad3      	subs	r3, r2, r3
 800cbb4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800cbb6:	8b3a      	ldrh	r2, [r7, #24]
 800cbb8:	88fb      	ldrh	r3, [r7, #6]
 800cbba:	429a      	cmp	r2, r3
 800cbbc:	d901      	bls.n	800cbc2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800cbbe:	88fb      	ldrh	r3, [r7, #6]
 800cbc0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800cbc2:	8b7b      	ldrh	r3, [r7, #26]
 800cbc4:	68ba      	ldr	r2, [r7, #8]
 800cbc6:	18d0      	adds	r0, r2, r3
 800cbc8:	69fb      	ldr	r3, [r7, #28]
 800cbca:	685a      	ldr	r2, [r3, #4]
 800cbcc:	88bb      	ldrh	r3, [r7, #4]
 800cbce:	4413      	add	r3, r2
 800cbd0:	8b3a      	ldrh	r2, [r7, #24]
 800cbd2:	4619      	mov	r1, r3
 800cbd4:	f00b faaf 	bl	8018136 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800cbd8:	8afa      	ldrh	r2, [r7, #22]
 800cbda:	8b3b      	ldrh	r3, [r7, #24]
 800cbdc:	4413      	add	r3, r2
 800cbde:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800cbe0:	8b7a      	ldrh	r2, [r7, #26]
 800cbe2:	8b3b      	ldrh	r3, [r7, #24]
 800cbe4:	4413      	add	r3, r2
 800cbe6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800cbe8:	88fa      	ldrh	r2, [r7, #6]
 800cbea:	8b3b      	ldrh	r3, [r7, #24]
 800cbec:	1ad3      	subs	r3, r2, r3
 800cbee:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800cbf4:	69fb      	ldr	r3, [r7, #28]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	61fb      	str	r3, [r7, #28]
 800cbfa:	88fb      	ldrh	r3, [r7, #6]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d002      	beq.n	800cc06 <pbuf_copy_partial+0xca>
 800cc00:	69fb      	ldr	r3, [r7, #28]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d1c4      	bne.n	800cb90 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800cc06:	8afb      	ldrh	r3, [r7, #22]
}
 800cc08:	4618      	mov	r0, r3
 800cc0a:	3720      	adds	r7, #32
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bd80      	pop	{r7, pc}
 800cc10:	0801a8b0 	.word	0x0801a8b0
 800cc14:	0801abf8 	.word	0x0801abf8
 800cc18:	0801a910 	.word	0x0801a910
 800cc1c:	0801ac18 	.word	0x0801ac18

0800cc20 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b084      	sub	sp, #16
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	4603      	mov	r3, r0
 800cc28:	603a      	str	r2, [r7, #0]
 800cc2a:	71fb      	strb	r3, [r7, #7]
 800cc2c:	460b      	mov	r3, r1
 800cc2e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	8919      	ldrh	r1, [r3, #8]
 800cc34:	88ba      	ldrh	r2, [r7, #4]
 800cc36:	79fb      	ldrb	r3, [r7, #7]
 800cc38:	4618      	mov	r0, r3
 800cc3a:	f7ff fa99 	bl	800c170 <pbuf_alloc>
 800cc3e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d101      	bne.n	800cc4a <pbuf_clone+0x2a>
    return NULL;
 800cc46:	2300      	movs	r3, #0
 800cc48:	e011      	b.n	800cc6e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800cc4a:	6839      	ldr	r1, [r7, #0]
 800cc4c:	68f8      	ldr	r0, [r7, #12]
 800cc4e:	f7ff fea3 	bl	800c998 <pbuf_copy>
 800cc52:	4603      	mov	r3, r0
 800cc54:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800cc56:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d006      	beq.n	800cc6c <pbuf_clone+0x4c>
 800cc5e:	4b06      	ldr	r3, [pc, #24]	; (800cc78 <pbuf_clone+0x58>)
 800cc60:	f240 5224 	movw	r2, #1316	; 0x524
 800cc64:	4905      	ldr	r1, [pc, #20]	; (800cc7c <pbuf_clone+0x5c>)
 800cc66:	4806      	ldr	r0, [pc, #24]	; (800cc80 <pbuf_clone+0x60>)
 800cc68:	f00b fa92 	bl	8018190 <iprintf>
  return q;
 800cc6c:	68fb      	ldr	r3, [r7, #12]
}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	3710      	adds	r7, #16
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}
 800cc76:	bf00      	nop
 800cc78:	0801a8b0 	.word	0x0801a8b0
 800cc7c:	0801ad24 	.word	0x0801ad24
 800cc80:	0801a910 	.word	0x0801a910

0800cc84 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800cc88:	f00b fa9a 	bl	80181c0 <rand>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	b29b      	uxth	r3, r3
 800cc90:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800cc94:	b29b      	uxth	r3, r3
 800cc96:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800cc9a:	b29a      	uxth	r2, r3
 800cc9c:	4b01      	ldr	r3, [pc, #4]	; (800cca4 <tcp_init+0x20>)
 800cc9e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800cca0:	bf00      	nop
 800cca2:	bd80      	pop	{r7, pc}
 800cca4:	20000010 	.word	0x20000010

0800cca8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b082      	sub	sp, #8
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	7d1b      	ldrb	r3, [r3, #20]
 800ccb4:	2b01      	cmp	r3, #1
 800ccb6:	d105      	bne.n	800ccc4 <tcp_free+0x1c>
 800ccb8:	4b06      	ldr	r3, [pc, #24]	; (800ccd4 <tcp_free+0x2c>)
 800ccba:	22d4      	movs	r2, #212	; 0xd4
 800ccbc:	4906      	ldr	r1, [pc, #24]	; (800ccd8 <tcp_free+0x30>)
 800ccbe:	4807      	ldr	r0, [pc, #28]	; (800ccdc <tcp_free+0x34>)
 800ccc0:	f00b fa66 	bl	8018190 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800ccc4:	6879      	ldr	r1, [r7, #4]
 800ccc6:	2001      	movs	r0, #1
 800ccc8:	f7fe ff04 	bl	800bad4 <memp_free>
}
 800cccc:	bf00      	nop
 800ccce:	3708      	adds	r7, #8
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	bd80      	pop	{r7, pc}
 800ccd4:	0801adb0 	.word	0x0801adb0
 800ccd8:	0801ade0 	.word	0x0801ade0
 800ccdc:	0801adf4 	.word	0x0801adf4

0800cce0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b082      	sub	sp, #8
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	7d1b      	ldrb	r3, [r3, #20]
 800ccec:	2b01      	cmp	r3, #1
 800ccee:	d105      	bne.n	800ccfc <tcp_free_listen+0x1c>
 800ccf0:	4b06      	ldr	r3, [pc, #24]	; (800cd0c <tcp_free_listen+0x2c>)
 800ccf2:	22df      	movs	r2, #223	; 0xdf
 800ccf4:	4906      	ldr	r1, [pc, #24]	; (800cd10 <tcp_free_listen+0x30>)
 800ccf6:	4807      	ldr	r0, [pc, #28]	; (800cd14 <tcp_free_listen+0x34>)
 800ccf8:	f00b fa4a 	bl	8018190 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800ccfc:	6879      	ldr	r1, [r7, #4]
 800ccfe:	2002      	movs	r0, #2
 800cd00:	f7fe fee8 	bl	800bad4 <memp_free>
}
 800cd04:	bf00      	nop
 800cd06:	3708      	adds	r7, #8
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	bd80      	pop	{r7, pc}
 800cd0c:	0801adb0 	.word	0x0801adb0
 800cd10:	0801ae1c 	.word	0x0801ae1c
 800cd14:	0801adf4 	.word	0x0801adf4

0800cd18 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800cd1c:	f001 f8ac 	bl	800de78 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800cd20:	4b07      	ldr	r3, [pc, #28]	; (800cd40 <tcp_tmr+0x28>)
 800cd22:	781b      	ldrb	r3, [r3, #0]
 800cd24:	3301      	adds	r3, #1
 800cd26:	b2da      	uxtb	r2, r3
 800cd28:	4b05      	ldr	r3, [pc, #20]	; (800cd40 <tcp_tmr+0x28>)
 800cd2a:	701a      	strb	r2, [r3, #0]
 800cd2c:	4b04      	ldr	r3, [pc, #16]	; (800cd40 <tcp_tmr+0x28>)
 800cd2e:	781b      	ldrb	r3, [r3, #0]
 800cd30:	f003 0301 	and.w	r3, r3, #1
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d001      	beq.n	800cd3c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800cd38:	f000 fd60 	bl	800d7fc <tcp_slowtmr>
  }
}
 800cd3c:	bf00      	nop
 800cd3e:	bd80      	pop	{r7, pc}
 800cd40:	20008c55 	.word	0x20008c55

0800cd44 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b084      	sub	sp, #16
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
 800cd4c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d105      	bne.n	800cd60 <tcp_remove_listener+0x1c>
 800cd54:	4b0d      	ldr	r3, [pc, #52]	; (800cd8c <tcp_remove_listener+0x48>)
 800cd56:	22ff      	movs	r2, #255	; 0xff
 800cd58:	490d      	ldr	r1, [pc, #52]	; (800cd90 <tcp_remove_listener+0x4c>)
 800cd5a:	480e      	ldr	r0, [pc, #56]	; (800cd94 <tcp_remove_listener+0x50>)
 800cd5c:	f00b fa18 	bl	8018190 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	60fb      	str	r3, [r7, #12]
 800cd64:	e00a      	b.n	800cd7c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd6a:	683a      	ldr	r2, [r7, #0]
 800cd6c:	429a      	cmp	r2, r3
 800cd6e:	d102      	bne.n	800cd76 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	2200      	movs	r2, #0
 800cd74:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	68db      	ldr	r3, [r3, #12]
 800cd7a:	60fb      	str	r3, [r7, #12]
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d1f1      	bne.n	800cd66 <tcp_remove_listener+0x22>
    }
  }
}
 800cd82:	bf00      	nop
 800cd84:	3710      	adds	r7, #16
 800cd86:	46bd      	mov	sp, r7
 800cd88:	bd80      	pop	{r7, pc}
 800cd8a:	bf00      	nop
 800cd8c:	0801adb0 	.word	0x0801adb0
 800cd90:	0801ae38 	.word	0x0801ae38
 800cd94:	0801adf4 	.word	0x0801adf4

0800cd98 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b084      	sub	sp, #16
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d106      	bne.n	800cdb4 <tcp_listen_closed+0x1c>
 800cda6:	4b14      	ldr	r3, [pc, #80]	; (800cdf8 <tcp_listen_closed+0x60>)
 800cda8:	f240 1211 	movw	r2, #273	; 0x111
 800cdac:	4913      	ldr	r1, [pc, #76]	; (800cdfc <tcp_listen_closed+0x64>)
 800cdae:	4814      	ldr	r0, [pc, #80]	; (800ce00 <tcp_listen_closed+0x68>)
 800cdb0:	f00b f9ee 	bl	8018190 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	7d1b      	ldrb	r3, [r3, #20]
 800cdb8:	2b01      	cmp	r3, #1
 800cdba:	d006      	beq.n	800cdca <tcp_listen_closed+0x32>
 800cdbc:	4b0e      	ldr	r3, [pc, #56]	; (800cdf8 <tcp_listen_closed+0x60>)
 800cdbe:	f44f 7289 	mov.w	r2, #274	; 0x112
 800cdc2:	4910      	ldr	r1, [pc, #64]	; (800ce04 <tcp_listen_closed+0x6c>)
 800cdc4:	480e      	ldr	r0, [pc, #56]	; (800ce00 <tcp_listen_closed+0x68>)
 800cdc6:	f00b f9e3 	bl	8018190 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800cdca:	2301      	movs	r3, #1
 800cdcc:	60fb      	str	r3, [r7, #12]
 800cdce:	e00b      	b.n	800cde8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800cdd0:	4a0d      	ldr	r2, [pc, #52]	; (800ce08 <tcp_listen_closed+0x70>)
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	6879      	ldr	r1, [r7, #4]
 800cddc:	4618      	mov	r0, r3
 800cdde:	f7ff ffb1 	bl	800cd44 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	3301      	adds	r3, #1
 800cde6:	60fb      	str	r3, [r7, #12]
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	2b03      	cmp	r3, #3
 800cdec:	d9f0      	bls.n	800cdd0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800cdee:	bf00      	nop
 800cdf0:	3710      	adds	r7, #16
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	bd80      	pop	{r7, pc}
 800cdf6:	bf00      	nop
 800cdf8:	0801adb0 	.word	0x0801adb0
 800cdfc:	0801ae60 	.word	0x0801ae60
 800ce00:	0801adf4 	.word	0x0801adf4
 800ce04:	0801ae6c 	.word	0x0801ae6c
 800ce08:	0802853c 	.word	0x0802853c

0800ce0c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800ce0c:	b5b0      	push	{r4, r5, r7, lr}
 800ce0e:	b088      	sub	sp, #32
 800ce10:	af04      	add	r7, sp, #16
 800ce12:	6078      	str	r0, [r7, #4]
 800ce14:	460b      	mov	r3, r1
 800ce16:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d106      	bne.n	800ce2c <tcp_close_shutdown+0x20>
 800ce1e:	4b61      	ldr	r3, [pc, #388]	; (800cfa4 <tcp_close_shutdown+0x198>)
 800ce20:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800ce24:	4960      	ldr	r1, [pc, #384]	; (800cfa8 <tcp_close_shutdown+0x19c>)
 800ce26:	4861      	ldr	r0, [pc, #388]	; (800cfac <tcp_close_shutdown+0x1a0>)
 800ce28:	f00b f9b2 	bl	8018190 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800ce2c:	78fb      	ldrb	r3, [r7, #3]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d066      	beq.n	800cf00 <tcp_close_shutdown+0xf4>
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	7d1b      	ldrb	r3, [r3, #20]
 800ce36:	2b04      	cmp	r3, #4
 800ce38:	d003      	beq.n	800ce42 <tcp_close_shutdown+0x36>
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	7d1b      	ldrb	r3, [r3, #20]
 800ce3e:	2b07      	cmp	r3, #7
 800ce40:	d15e      	bne.n	800cf00 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d104      	bne.n	800ce54 <tcp_close_shutdown+0x48>
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce4e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ce52:	d055      	beq.n	800cf00 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	8b5b      	ldrh	r3, [r3, #26]
 800ce58:	f003 0310 	and.w	r3, r3, #16
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d106      	bne.n	800ce6e <tcp_close_shutdown+0x62>
 800ce60:	4b50      	ldr	r3, [pc, #320]	; (800cfa4 <tcp_close_shutdown+0x198>)
 800ce62:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800ce66:	4952      	ldr	r1, [pc, #328]	; (800cfb0 <tcp_close_shutdown+0x1a4>)
 800ce68:	4850      	ldr	r0, [pc, #320]	; (800cfac <tcp_close_shutdown+0x1a0>)
 800ce6a:	f00b f991 	bl	8018190 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ce76:	687d      	ldr	r5, [r7, #4]
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	3304      	adds	r3, #4
 800ce7c:	687a      	ldr	r2, [r7, #4]
 800ce7e:	8ad2      	ldrh	r2, [r2, #22]
 800ce80:	6879      	ldr	r1, [r7, #4]
 800ce82:	8b09      	ldrh	r1, [r1, #24]
 800ce84:	9102      	str	r1, [sp, #8]
 800ce86:	9201      	str	r2, [sp, #4]
 800ce88:	9300      	str	r3, [sp, #0]
 800ce8a:	462b      	mov	r3, r5
 800ce8c:	4622      	mov	r2, r4
 800ce8e:	4601      	mov	r1, r0
 800ce90:	6878      	ldr	r0, [r7, #4]
 800ce92:	f005 fde9 	bl	8012a68 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800ce96:	6878      	ldr	r0, [r7, #4]
 800ce98:	f001 fbba 	bl	800e610 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800ce9c:	4b45      	ldr	r3, [pc, #276]	; (800cfb4 <tcp_close_shutdown+0x1a8>)
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	687a      	ldr	r2, [r7, #4]
 800cea2:	429a      	cmp	r2, r3
 800cea4:	d105      	bne.n	800ceb2 <tcp_close_shutdown+0xa6>
 800cea6:	4b43      	ldr	r3, [pc, #268]	; (800cfb4 <tcp_close_shutdown+0x1a8>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	68db      	ldr	r3, [r3, #12]
 800ceac:	4a41      	ldr	r2, [pc, #260]	; (800cfb4 <tcp_close_shutdown+0x1a8>)
 800ceae:	6013      	str	r3, [r2, #0]
 800ceb0:	e013      	b.n	800ceda <tcp_close_shutdown+0xce>
 800ceb2:	4b40      	ldr	r3, [pc, #256]	; (800cfb4 <tcp_close_shutdown+0x1a8>)
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	60fb      	str	r3, [r7, #12]
 800ceb8:	e00c      	b.n	800ced4 <tcp_close_shutdown+0xc8>
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	68db      	ldr	r3, [r3, #12]
 800cebe:	687a      	ldr	r2, [r7, #4]
 800cec0:	429a      	cmp	r2, r3
 800cec2:	d104      	bne.n	800cece <tcp_close_shutdown+0xc2>
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	68da      	ldr	r2, [r3, #12]
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	60da      	str	r2, [r3, #12]
 800cecc:	e005      	b.n	800ceda <tcp_close_shutdown+0xce>
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	68db      	ldr	r3, [r3, #12]
 800ced2:	60fb      	str	r3, [r7, #12]
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d1ef      	bne.n	800ceba <tcp_close_shutdown+0xae>
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2200      	movs	r2, #0
 800cede:	60da      	str	r2, [r3, #12]
 800cee0:	4b35      	ldr	r3, [pc, #212]	; (800cfb8 <tcp_close_shutdown+0x1ac>)
 800cee2:	2201      	movs	r2, #1
 800cee4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800cee6:	4b35      	ldr	r3, [pc, #212]	; (800cfbc <tcp_close_shutdown+0x1b0>)
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	687a      	ldr	r2, [r7, #4]
 800ceec:	429a      	cmp	r2, r3
 800ceee:	d102      	bne.n	800cef6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800cef0:	f004 f84c 	bl	8010f8c <tcp_trigger_input_pcb_close>
 800cef4:	e002      	b.n	800cefc <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f7ff fed6 	bl	800cca8 <tcp_free>
      }
      return ERR_OK;
 800cefc:	2300      	movs	r3, #0
 800cefe:	e04d      	b.n	800cf9c <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	7d1b      	ldrb	r3, [r3, #20]
 800cf04:	2b01      	cmp	r3, #1
 800cf06:	d02d      	beq.n	800cf64 <tcp_close_shutdown+0x158>
 800cf08:	2b02      	cmp	r3, #2
 800cf0a:	d036      	beq.n	800cf7a <tcp_close_shutdown+0x16e>
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d13f      	bne.n	800cf90 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	8adb      	ldrh	r3, [r3, #22]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d021      	beq.n	800cf5c <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800cf18:	4b29      	ldr	r3, [pc, #164]	; (800cfc0 <tcp_close_shutdown+0x1b4>)
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	687a      	ldr	r2, [r7, #4]
 800cf1e:	429a      	cmp	r2, r3
 800cf20:	d105      	bne.n	800cf2e <tcp_close_shutdown+0x122>
 800cf22:	4b27      	ldr	r3, [pc, #156]	; (800cfc0 <tcp_close_shutdown+0x1b4>)
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	68db      	ldr	r3, [r3, #12]
 800cf28:	4a25      	ldr	r2, [pc, #148]	; (800cfc0 <tcp_close_shutdown+0x1b4>)
 800cf2a:	6013      	str	r3, [r2, #0]
 800cf2c:	e013      	b.n	800cf56 <tcp_close_shutdown+0x14a>
 800cf2e:	4b24      	ldr	r3, [pc, #144]	; (800cfc0 <tcp_close_shutdown+0x1b4>)
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	60bb      	str	r3, [r7, #8]
 800cf34:	e00c      	b.n	800cf50 <tcp_close_shutdown+0x144>
 800cf36:	68bb      	ldr	r3, [r7, #8]
 800cf38:	68db      	ldr	r3, [r3, #12]
 800cf3a:	687a      	ldr	r2, [r7, #4]
 800cf3c:	429a      	cmp	r2, r3
 800cf3e:	d104      	bne.n	800cf4a <tcp_close_shutdown+0x13e>
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	68da      	ldr	r2, [r3, #12]
 800cf44:	68bb      	ldr	r3, [r7, #8]
 800cf46:	60da      	str	r2, [r3, #12]
 800cf48:	e005      	b.n	800cf56 <tcp_close_shutdown+0x14a>
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	68db      	ldr	r3, [r3, #12]
 800cf4e:	60bb      	str	r3, [r7, #8]
 800cf50:	68bb      	ldr	r3, [r7, #8]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d1ef      	bne.n	800cf36 <tcp_close_shutdown+0x12a>
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	2200      	movs	r2, #0
 800cf5a:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800cf5c:	6878      	ldr	r0, [r7, #4]
 800cf5e:	f7ff fea3 	bl	800cca8 <tcp_free>
      break;
 800cf62:	e01a      	b.n	800cf9a <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f7ff ff17 	bl	800cd98 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800cf6a:	6879      	ldr	r1, [r7, #4]
 800cf6c:	4815      	ldr	r0, [pc, #84]	; (800cfc4 <tcp_close_shutdown+0x1b8>)
 800cf6e:	f001 fb9f 	bl	800e6b0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800cf72:	6878      	ldr	r0, [r7, #4]
 800cf74:	f7ff feb4 	bl	800cce0 <tcp_free_listen>
      break;
 800cf78:	e00f      	b.n	800cf9a <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800cf7a:	6879      	ldr	r1, [r7, #4]
 800cf7c:	480d      	ldr	r0, [pc, #52]	; (800cfb4 <tcp_close_shutdown+0x1a8>)
 800cf7e:	f001 fb97 	bl	800e6b0 <tcp_pcb_remove>
 800cf82:	4b0d      	ldr	r3, [pc, #52]	; (800cfb8 <tcp_close_shutdown+0x1ac>)
 800cf84:	2201      	movs	r2, #1
 800cf86:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f7ff fe8d 	bl	800cca8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800cf8e:	e004      	b.n	800cf9a <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 800cf90:	6878      	ldr	r0, [r7, #4]
 800cf92:	f000 f819 	bl	800cfc8 <tcp_close_shutdown_fin>
 800cf96:	4603      	mov	r3, r0
 800cf98:	e000      	b.n	800cf9c <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 800cf9a:	2300      	movs	r3, #0
}
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	3710      	adds	r7, #16
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bdb0      	pop	{r4, r5, r7, pc}
 800cfa4:	0801adb0 	.word	0x0801adb0
 800cfa8:	0801ae84 	.word	0x0801ae84
 800cfac:	0801adf4 	.word	0x0801adf4
 800cfb0:	0801aea4 	.word	0x0801aea4
 800cfb4:	2000fad8 	.word	0x2000fad8
 800cfb8:	2000fad4 	.word	0x2000fad4
 800cfbc:	2000faec 	.word	0x2000faec
 800cfc0:	2000fae4 	.word	0x2000fae4
 800cfc4:	2000fae0 	.word	0x2000fae0

0800cfc8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b084      	sub	sp, #16
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d106      	bne.n	800cfe4 <tcp_close_shutdown_fin+0x1c>
 800cfd6:	4b2c      	ldr	r3, [pc, #176]	; (800d088 <tcp_close_shutdown_fin+0xc0>)
 800cfd8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800cfdc:	492b      	ldr	r1, [pc, #172]	; (800d08c <tcp_close_shutdown_fin+0xc4>)
 800cfde:	482c      	ldr	r0, [pc, #176]	; (800d090 <tcp_close_shutdown_fin+0xc8>)
 800cfe0:	f00b f8d6 	bl	8018190 <iprintf>

  switch (pcb->state) {
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	7d1b      	ldrb	r3, [r3, #20]
 800cfe8:	2b04      	cmp	r3, #4
 800cfea:	d010      	beq.n	800d00e <tcp_close_shutdown_fin+0x46>
 800cfec:	2b07      	cmp	r3, #7
 800cfee:	d01b      	beq.n	800d028 <tcp_close_shutdown_fin+0x60>
 800cff0:	2b03      	cmp	r3, #3
 800cff2:	d126      	bne.n	800d042 <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800cff4:	6878      	ldr	r0, [r7, #4]
 800cff6:	f004 fe35 	bl	8011c64 <tcp_send_fin>
 800cffa:	4603      	mov	r3, r0
 800cffc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d11f      	bne.n	800d046 <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	2205      	movs	r2, #5
 800d00a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d00c:	e01b      	b.n	800d046 <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800d00e:	6878      	ldr	r0, [r7, #4]
 800d010:	f004 fe28 	bl	8011c64 <tcp_send_fin>
 800d014:	4603      	mov	r3, r0
 800d016:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d018:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d114      	bne.n	800d04a <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2205      	movs	r2, #5
 800d024:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d026:	e010      	b.n	800d04a <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	f004 fe1b 	bl	8011c64 <tcp_send_fin>
 800d02e:	4603      	mov	r3, r0
 800d030:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d109      	bne.n	800d04e <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2209      	movs	r2, #9
 800d03e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d040:	e005      	b.n	800d04e <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800d042:	2300      	movs	r3, #0
 800d044:	e01c      	b.n	800d080 <tcp_close_shutdown_fin+0xb8>
      break;
 800d046:	bf00      	nop
 800d048:	e002      	b.n	800d050 <tcp_close_shutdown_fin+0x88>
      break;
 800d04a:	bf00      	nop
 800d04c:	e000      	b.n	800d050 <tcp_close_shutdown_fin+0x88>
      break;
 800d04e:	bf00      	nop
  }

  if (err == ERR_OK) {
 800d050:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d103      	bne.n	800d060 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800d058:	6878      	ldr	r0, [r7, #4]
 800d05a:	f004 ff41 	bl	8011ee0 <tcp_output>
 800d05e:	e00d      	b.n	800d07c <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800d060:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d064:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d068:	d108      	bne.n	800d07c <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	8b5b      	ldrh	r3, [r3, #26]
 800d06e:	f043 0308 	orr.w	r3, r3, #8
 800d072:	b29a      	uxth	r2, r3
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800d078:	2300      	movs	r3, #0
 800d07a:	e001      	b.n	800d080 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800d07c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d080:	4618      	mov	r0, r3
 800d082:	3710      	adds	r7, #16
 800d084:	46bd      	mov	sp, r7
 800d086:	bd80      	pop	{r7, pc}
 800d088:	0801adb0 	.word	0x0801adb0
 800d08c:	0801ae60 	.word	0x0801ae60
 800d090:	0801adf4 	.word	0x0801adf4

0800d094 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b082      	sub	sp, #8
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d109      	bne.n	800d0b6 <tcp_close+0x22>
 800d0a2:	4b0f      	ldr	r3, [pc, #60]	; (800d0e0 <tcp_close+0x4c>)
 800d0a4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800d0a8:	490e      	ldr	r1, [pc, #56]	; (800d0e4 <tcp_close+0x50>)
 800d0aa:	480f      	ldr	r0, [pc, #60]	; (800d0e8 <tcp_close+0x54>)
 800d0ac:	f00b f870 	bl	8018190 <iprintf>
 800d0b0:	f06f 030f 	mvn.w	r3, #15
 800d0b4:	e00f      	b.n	800d0d6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	7d1b      	ldrb	r3, [r3, #20]
 800d0ba:	2b01      	cmp	r3, #1
 800d0bc:	d006      	beq.n	800d0cc <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	8b5b      	ldrh	r3, [r3, #26]
 800d0c2:	f043 0310 	orr.w	r3, r3, #16
 800d0c6:	b29a      	uxth	r2, r3
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800d0cc:	2101      	movs	r1, #1
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	f7ff fe9c 	bl	800ce0c <tcp_close_shutdown>
 800d0d4:	4603      	mov	r3, r0
}
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	3708      	adds	r7, #8
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	bd80      	pop	{r7, pc}
 800d0de:	bf00      	nop
 800d0e0:	0801adb0 	.word	0x0801adb0
 800d0e4:	0801aec0 	.word	0x0801aec0
 800d0e8:	0801adf4 	.word	0x0801adf4

0800d0ec <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b084      	sub	sp, #16
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	60f8      	str	r0, [r7, #12]
 800d0f4:	60b9      	str	r1, [r7, #8]
 800d0f6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d109      	bne.n	800d112 <tcp_shutdown+0x26>
 800d0fe:	4b25      	ldr	r3, [pc, #148]	; (800d194 <tcp_shutdown+0xa8>)
 800d100:	f240 2207 	movw	r2, #519	; 0x207
 800d104:	4924      	ldr	r1, [pc, #144]	; (800d198 <tcp_shutdown+0xac>)
 800d106:	4825      	ldr	r0, [pc, #148]	; (800d19c <tcp_shutdown+0xb0>)
 800d108:	f00b f842 	bl	8018190 <iprintf>
 800d10c:	f06f 030f 	mvn.w	r3, #15
 800d110:	e03c      	b.n	800d18c <tcp_shutdown+0xa0>

  if (pcb->state == LISTEN) {
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	7d1b      	ldrb	r3, [r3, #20]
 800d116:	2b01      	cmp	r3, #1
 800d118:	d102      	bne.n	800d120 <tcp_shutdown+0x34>
    return ERR_CONN;
 800d11a:	f06f 030a 	mvn.w	r3, #10
 800d11e:	e035      	b.n	800d18c <tcp_shutdown+0xa0>
  }
  if (shut_rx) {
 800d120:	68bb      	ldr	r3, [r7, #8]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d01b      	beq.n	800d15e <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	8b5b      	ldrh	r3, [r3, #26]
 800d12a:	f043 0310 	orr.w	r3, r3, #16
 800d12e:	b29a      	uxth	r2, r3
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d005      	beq.n	800d146 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800d13a:	2101      	movs	r1, #1
 800d13c:	68f8      	ldr	r0, [r7, #12]
 800d13e:	f7ff fe65 	bl	800ce0c <tcp_close_shutdown>
 800d142:	4603      	mov	r3, r0
 800d144:	e022      	b.n	800d18c <tcp_shutdown+0xa0>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d007      	beq.n	800d15e <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d152:	4618      	mov	r0, r3
 800d154:	f7ff faec 	bl	800c730 <pbuf_free>
      pcb->refused_data = NULL;
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	2200      	movs	r2, #0
 800d15c:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d012      	beq.n	800d18a <tcp_shutdown+0x9e>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	7d1b      	ldrb	r3, [r3, #20]
 800d168:	2b03      	cmp	r3, #3
 800d16a:	db0b      	blt.n	800d184 <tcp_shutdown+0x98>
 800d16c:	2b04      	cmp	r3, #4
 800d16e:	dd01      	ble.n	800d174 <tcp_shutdown+0x88>
 800d170:	2b07      	cmp	r3, #7
 800d172:	d107      	bne.n	800d184 <tcp_shutdown+0x98>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	b2db      	uxtb	r3, r3
 800d178:	4619      	mov	r1, r3
 800d17a:	68f8      	ldr	r0, [r7, #12]
 800d17c:	f7ff fe46 	bl	800ce0c <tcp_close_shutdown>
 800d180:	4603      	mov	r3, r0
 800d182:	e003      	b.n	800d18c <tcp_shutdown+0xa0>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800d184:	f06f 030a 	mvn.w	r3, #10
 800d188:	e000      	b.n	800d18c <tcp_shutdown+0xa0>
    }
  }
  return ERR_OK;
 800d18a:	2300      	movs	r3, #0
}
 800d18c:	4618      	mov	r0, r3
 800d18e:	3710      	adds	r7, #16
 800d190:	46bd      	mov	sp, r7
 800d192:	bd80      	pop	{r7, pc}
 800d194:	0801adb0 	.word	0x0801adb0
 800d198:	0801aed8 	.word	0x0801aed8
 800d19c:	0801adf4 	.word	0x0801adf4

0800d1a0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b08e      	sub	sp, #56	; 0x38
 800d1a4:	af04      	add	r7, sp, #16
 800d1a6:	6078      	str	r0, [r7, #4]
 800d1a8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d107      	bne.n	800d1c0 <tcp_abandon+0x20>
 800d1b0:	4b52      	ldr	r3, [pc, #328]	; (800d2fc <tcp_abandon+0x15c>)
 800d1b2:	f240 223d 	movw	r2, #573	; 0x23d
 800d1b6:	4952      	ldr	r1, [pc, #328]	; (800d300 <tcp_abandon+0x160>)
 800d1b8:	4852      	ldr	r0, [pc, #328]	; (800d304 <tcp_abandon+0x164>)
 800d1ba:	f00a ffe9 	bl	8018190 <iprintf>
 800d1be:	e099      	b.n	800d2f4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	7d1b      	ldrb	r3, [r3, #20]
 800d1c4:	2b01      	cmp	r3, #1
 800d1c6:	d106      	bne.n	800d1d6 <tcp_abandon+0x36>
 800d1c8:	4b4c      	ldr	r3, [pc, #304]	; (800d2fc <tcp_abandon+0x15c>)
 800d1ca:	f240 2241 	movw	r2, #577	; 0x241
 800d1ce:	494e      	ldr	r1, [pc, #312]	; (800d308 <tcp_abandon+0x168>)
 800d1d0:	484c      	ldr	r0, [pc, #304]	; (800d304 <tcp_abandon+0x164>)
 800d1d2:	f00a ffdd 	bl	8018190 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	7d1b      	ldrb	r3, [r3, #20]
 800d1da:	2b0a      	cmp	r3, #10
 800d1dc:	d107      	bne.n	800d1ee <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800d1de:	6879      	ldr	r1, [r7, #4]
 800d1e0:	484a      	ldr	r0, [pc, #296]	; (800d30c <tcp_abandon+0x16c>)
 800d1e2:	f001 fa65 	bl	800e6b0 <tcp_pcb_remove>
    tcp_free(pcb);
 800d1e6:	6878      	ldr	r0, [r7, #4]
 800d1e8:	f7ff fd5e 	bl	800cca8 <tcp_free>
 800d1ec:	e082      	b.n	800d2f4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1fa:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d200:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d208:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	691b      	ldr	r3, [r3, #16]
 800d20e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	7d1b      	ldrb	r3, [r3, #20]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d126      	bne.n	800d266 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	8adb      	ldrh	r3, [r3, #22]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d02e      	beq.n	800d27e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d220:	4b3b      	ldr	r3, [pc, #236]	; (800d310 <tcp_abandon+0x170>)
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	687a      	ldr	r2, [r7, #4]
 800d226:	429a      	cmp	r2, r3
 800d228:	d105      	bne.n	800d236 <tcp_abandon+0x96>
 800d22a:	4b39      	ldr	r3, [pc, #228]	; (800d310 <tcp_abandon+0x170>)
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	68db      	ldr	r3, [r3, #12]
 800d230:	4a37      	ldr	r2, [pc, #220]	; (800d310 <tcp_abandon+0x170>)
 800d232:	6013      	str	r3, [r2, #0]
 800d234:	e013      	b.n	800d25e <tcp_abandon+0xbe>
 800d236:	4b36      	ldr	r3, [pc, #216]	; (800d310 <tcp_abandon+0x170>)
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	61fb      	str	r3, [r7, #28]
 800d23c:	e00c      	b.n	800d258 <tcp_abandon+0xb8>
 800d23e:	69fb      	ldr	r3, [r7, #28]
 800d240:	68db      	ldr	r3, [r3, #12]
 800d242:	687a      	ldr	r2, [r7, #4]
 800d244:	429a      	cmp	r2, r3
 800d246:	d104      	bne.n	800d252 <tcp_abandon+0xb2>
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	68da      	ldr	r2, [r3, #12]
 800d24c:	69fb      	ldr	r3, [r7, #28]
 800d24e:	60da      	str	r2, [r3, #12]
 800d250:	e005      	b.n	800d25e <tcp_abandon+0xbe>
 800d252:	69fb      	ldr	r3, [r7, #28]
 800d254:	68db      	ldr	r3, [r3, #12]
 800d256:	61fb      	str	r3, [r7, #28]
 800d258:	69fb      	ldr	r3, [r7, #28]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d1ef      	bne.n	800d23e <tcp_abandon+0x9e>
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	2200      	movs	r2, #0
 800d262:	60da      	str	r2, [r3, #12]
 800d264:	e00b      	b.n	800d27e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800d266:	683b      	ldr	r3, [r7, #0]
 800d268:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	8adb      	ldrh	r3, [r3, #22]
 800d26e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d270:	6879      	ldr	r1, [r7, #4]
 800d272:	4828      	ldr	r0, [pc, #160]	; (800d314 <tcp_abandon+0x174>)
 800d274:	f001 fa1c 	bl	800e6b0 <tcp_pcb_remove>
 800d278:	4b27      	ldr	r3, [pc, #156]	; (800d318 <tcp_abandon+0x178>)
 800d27a:	2201      	movs	r2, #1
 800d27c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d282:	2b00      	cmp	r3, #0
 800d284:	d004      	beq.n	800d290 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d28a:	4618      	mov	r0, r3
 800d28c:	f000 fed4 	bl	800e038 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d294:	2b00      	cmp	r3, #0
 800d296:	d004      	beq.n	800d2a2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d29c:	4618      	mov	r0, r3
 800d29e:	f000 fecb 	bl	800e038 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d004      	beq.n	800d2b4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	f000 fec2 	bl	800e038 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800d2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d00e      	beq.n	800d2d8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800d2ba:	6879      	ldr	r1, [r7, #4]
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	3304      	adds	r3, #4
 800d2c0:	687a      	ldr	r2, [r7, #4]
 800d2c2:	8b12      	ldrh	r2, [r2, #24]
 800d2c4:	9202      	str	r2, [sp, #8]
 800d2c6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d2c8:	9201      	str	r2, [sp, #4]
 800d2ca:	9300      	str	r3, [sp, #0]
 800d2cc:	460b      	mov	r3, r1
 800d2ce:	697a      	ldr	r2, [r7, #20]
 800d2d0:	69b9      	ldr	r1, [r7, #24]
 800d2d2:	6878      	ldr	r0, [r7, #4]
 800d2d4:	f005 fbc8 	bl	8012a68 <tcp_rst>
    }
    last_state = pcb->state;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	7d1b      	ldrb	r3, [r3, #20]
 800d2dc:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800d2de:	6878      	ldr	r0, [r7, #4]
 800d2e0:	f7ff fce2 	bl	800cca8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800d2e4:	693b      	ldr	r3, [r7, #16]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d004      	beq.n	800d2f4 <tcp_abandon+0x154>
 800d2ea:	693b      	ldr	r3, [r7, #16]
 800d2ec:	f06f 010c 	mvn.w	r1, #12
 800d2f0:	68f8      	ldr	r0, [r7, #12]
 800d2f2:	4798      	blx	r3
  }
}
 800d2f4:	3728      	adds	r7, #40	; 0x28
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}
 800d2fa:	bf00      	nop
 800d2fc:	0801adb0 	.word	0x0801adb0
 800d300:	0801aef4 	.word	0x0801aef4
 800d304:	0801adf4 	.word	0x0801adf4
 800d308:	0801af10 	.word	0x0801af10
 800d30c:	2000fae8 	.word	0x2000fae8
 800d310:	2000fae4 	.word	0x2000fae4
 800d314:	2000fad8 	.word	0x2000fad8
 800d318:	2000fad4 	.word	0x2000fad4

0800d31c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b082      	sub	sp, #8
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800d324:	2101      	movs	r1, #1
 800d326:	6878      	ldr	r0, [r7, #4]
 800d328:	f7ff ff3a 	bl	800d1a0 <tcp_abandon>
}
 800d32c:	bf00      	nop
 800d32e:	3708      	adds	r7, #8
 800d330:	46bd      	mov	sp, r7
 800d332:	bd80      	pop	{r7, pc}

0800d334 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b088      	sub	sp, #32
 800d338:	af00      	add	r7, sp, #0
 800d33a:	60f8      	str	r0, [r7, #12]
 800d33c:	60b9      	str	r1, [r7, #8]
 800d33e:	4613      	mov	r3, r2
 800d340:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800d342:	2304      	movs	r3, #4
 800d344:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d346:	68bb      	ldr	r3, [r7, #8]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d101      	bne.n	800d350 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800d34c:	4b3e      	ldr	r3, [pc, #248]	; (800d448 <tcp_bind+0x114>)
 800d34e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d109      	bne.n	800d36a <tcp_bind+0x36>
 800d356:	4b3d      	ldr	r3, [pc, #244]	; (800d44c <tcp_bind+0x118>)
 800d358:	f240 22a9 	movw	r2, #681	; 0x2a9
 800d35c:	493c      	ldr	r1, [pc, #240]	; (800d450 <tcp_bind+0x11c>)
 800d35e:	483d      	ldr	r0, [pc, #244]	; (800d454 <tcp_bind+0x120>)
 800d360:	f00a ff16 	bl	8018190 <iprintf>
 800d364:	f06f 030f 	mvn.w	r3, #15
 800d368:	e06a      	b.n	800d440 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	7d1b      	ldrb	r3, [r3, #20]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d009      	beq.n	800d386 <tcp_bind+0x52>
 800d372:	4b36      	ldr	r3, [pc, #216]	; (800d44c <tcp_bind+0x118>)
 800d374:	f240 22ab 	movw	r2, #683	; 0x2ab
 800d378:	4937      	ldr	r1, [pc, #220]	; (800d458 <tcp_bind+0x124>)
 800d37a:	4836      	ldr	r0, [pc, #216]	; (800d454 <tcp_bind+0x120>)
 800d37c:	f00a ff08 	bl	8018190 <iprintf>
 800d380:	f06f 0305 	mvn.w	r3, #5
 800d384:	e05c      	b.n	800d440 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800d386:	88fb      	ldrh	r3, [r7, #6]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d109      	bne.n	800d3a0 <tcp_bind+0x6c>
    port = tcp_new_port();
 800d38c:	f000 f9f0 	bl	800d770 <tcp_new_port>
 800d390:	4603      	mov	r3, r0
 800d392:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800d394:	88fb      	ldrh	r3, [r7, #6]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d135      	bne.n	800d406 <tcp_bind+0xd2>
      return ERR_BUF;
 800d39a:	f06f 0301 	mvn.w	r3, #1
 800d39e:	e04f      	b.n	800d440 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	61fb      	str	r3, [r7, #28]
 800d3a4:	e02b      	b.n	800d3fe <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800d3a6:	4a2d      	ldr	r2, [pc, #180]	; (800d45c <tcp_bind+0x128>)
 800d3a8:	69fb      	ldr	r3, [r7, #28]
 800d3aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	61bb      	str	r3, [r7, #24]
 800d3b2:	e01e      	b.n	800d3f2 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800d3b4:	69bb      	ldr	r3, [r7, #24]
 800d3b6:	8adb      	ldrh	r3, [r3, #22]
 800d3b8:	88fa      	ldrh	r2, [r7, #6]
 800d3ba:	429a      	cmp	r2, r3
 800d3bc:	d116      	bne.n	800d3ec <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800d3be:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d010      	beq.n	800d3e6 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800d3c4:	69bb      	ldr	r3, [r7, #24]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d00c      	beq.n	800d3e6 <tcp_bind+0xb2>
 800d3cc:	68bb      	ldr	r3, [r7, #8]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d009      	beq.n	800d3e6 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800d3d2:	68bb      	ldr	r3, [r7, #8]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d005      	beq.n	800d3e6 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800d3da:	69bb      	ldr	r3, [r7, #24]
 800d3dc:	681a      	ldr	r2, [r3, #0]
 800d3de:	68bb      	ldr	r3, [r7, #8]
 800d3e0:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800d3e2:	429a      	cmp	r2, r3
 800d3e4:	d102      	bne.n	800d3ec <tcp_bind+0xb8>
              return ERR_USE;
 800d3e6:	f06f 0307 	mvn.w	r3, #7
 800d3ea:	e029      	b.n	800d440 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800d3ec:	69bb      	ldr	r3, [r7, #24]
 800d3ee:	68db      	ldr	r3, [r3, #12]
 800d3f0:	61bb      	str	r3, [r7, #24]
 800d3f2:	69bb      	ldr	r3, [r7, #24]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d1dd      	bne.n	800d3b4 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800d3f8:	69fb      	ldr	r3, [r7, #28]
 800d3fa:	3301      	adds	r3, #1
 800d3fc:	61fb      	str	r3, [r7, #28]
 800d3fe:	69fa      	ldr	r2, [r7, #28]
 800d400:	697b      	ldr	r3, [r7, #20]
 800d402:	429a      	cmp	r2, r3
 800d404:	dbcf      	blt.n	800d3a6 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800d406:	68bb      	ldr	r3, [r7, #8]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d00c      	beq.n	800d426 <tcp_bind+0xf2>
 800d40c:	68bb      	ldr	r3, [r7, #8]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d008      	beq.n	800d426 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800d414:	68bb      	ldr	r3, [r7, #8]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d002      	beq.n	800d420 <tcp_bind+0xec>
 800d41a:	68bb      	ldr	r3, [r7, #8]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	e000      	b.n	800d422 <tcp_bind+0xee>
 800d420:	2300      	movs	r3, #0
 800d422:	68fa      	ldr	r2, [r7, #12]
 800d424:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	88fa      	ldrh	r2, [r7, #6]
 800d42a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800d42c:	4b0c      	ldr	r3, [pc, #48]	; (800d460 <tcp_bind+0x12c>)
 800d42e:	681a      	ldr	r2, [r3, #0]
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	60da      	str	r2, [r3, #12]
 800d434:	4a0a      	ldr	r2, [pc, #40]	; (800d460 <tcp_bind+0x12c>)
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	6013      	str	r3, [r2, #0]
 800d43a:	f005 fcd7 	bl	8012dec <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800d43e:	2300      	movs	r3, #0
}
 800d440:	4618      	mov	r0, r3
 800d442:	3720      	adds	r7, #32
 800d444:	46bd      	mov	sp, r7
 800d446:	bd80      	pop	{r7, pc}
 800d448:	08028574 	.word	0x08028574
 800d44c:	0801adb0 	.word	0x0801adb0
 800d450:	0801af44 	.word	0x0801af44
 800d454:	0801adf4 	.word	0x0801adf4
 800d458:	0801af5c 	.word	0x0801af5c
 800d45c:	0802853c 	.word	0x0802853c
 800d460:	2000fae4 	.word	0x2000fae4

0800d464 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b084      	sub	sp, #16
 800d468:	af00      	add	r7, sp, #0
 800d46a:	60f8      	str	r0, [r7, #12]
 800d46c:	60b9      	str	r1, [r7, #8]
 800d46e:	4613      	mov	r3, r2
 800d470:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800d472:	68bb      	ldr	r3, [r7, #8]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d106      	bne.n	800d486 <tcp_accept_null+0x22>
 800d478:	4b07      	ldr	r3, [pc, #28]	; (800d498 <tcp_accept_null+0x34>)
 800d47a:	f240 320f 	movw	r2, #783	; 0x30f
 800d47e:	4907      	ldr	r1, [pc, #28]	; (800d49c <tcp_accept_null+0x38>)
 800d480:	4807      	ldr	r0, [pc, #28]	; (800d4a0 <tcp_accept_null+0x3c>)
 800d482:	f00a fe85 	bl	8018190 <iprintf>

  tcp_abort(pcb);
 800d486:	68b8      	ldr	r0, [r7, #8]
 800d488:	f7ff ff48 	bl	800d31c <tcp_abort>

  return ERR_ABRT;
 800d48c:	f06f 030c 	mvn.w	r3, #12
}
 800d490:	4618      	mov	r0, r3
 800d492:	3710      	adds	r7, #16
 800d494:	46bd      	mov	sp, r7
 800d496:	bd80      	pop	{r7, pc}
 800d498:	0801adb0 	.word	0x0801adb0
 800d49c:	0801af84 	.word	0x0801af84
 800d4a0:	0801adf4 	.word	0x0801adf4

0800d4a4 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b082      	sub	sp, #8
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
 800d4ac:	460b      	mov	r3, r1
 800d4ae:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800d4b0:	78fb      	ldrb	r3, [r7, #3]
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	4619      	mov	r1, r3
 800d4b6:	6878      	ldr	r0, [r7, #4]
 800d4b8:	f000 f806 	bl	800d4c8 <tcp_listen_with_backlog_and_err>
 800d4bc:	4603      	mov	r3, r0
}
 800d4be:	4618      	mov	r0, r3
 800d4c0:	3708      	adds	r7, #8
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bd80      	pop	{r7, pc}
	...

0800d4c8 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b088      	sub	sp, #32
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	60f8      	str	r0, [r7, #12]
 800d4d0:	460b      	mov	r3, r1
 800d4d2:	607a      	str	r2, [r7, #4]
 800d4d4:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d109      	bne.n	800d4f4 <tcp_listen_with_backlog_and_err+0x2c>
 800d4e0:	4b47      	ldr	r3, [pc, #284]	; (800d600 <tcp_listen_with_backlog_and_err+0x138>)
 800d4e2:	f240 3259 	movw	r2, #857	; 0x359
 800d4e6:	4947      	ldr	r1, [pc, #284]	; (800d604 <tcp_listen_with_backlog_and_err+0x13c>)
 800d4e8:	4847      	ldr	r0, [pc, #284]	; (800d608 <tcp_listen_with_backlog_and_err+0x140>)
 800d4ea:	f00a fe51 	bl	8018190 <iprintf>
 800d4ee:	23f0      	movs	r3, #240	; 0xf0
 800d4f0:	76fb      	strb	r3, [r7, #27]
 800d4f2:	e079      	b.n	800d5e8 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	7d1b      	ldrb	r3, [r3, #20]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d009      	beq.n	800d510 <tcp_listen_with_backlog_and_err+0x48>
 800d4fc:	4b40      	ldr	r3, [pc, #256]	; (800d600 <tcp_listen_with_backlog_and_err+0x138>)
 800d4fe:	f240 325a 	movw	r2, #858	; 0x35a
 800d502:	4942      	ldr	r1, [pc, #264]	; (800d60c <tcp_listen_with_backlog_and_err+0x144>)
 800d504:	4840      	ldr	r0, [pc, #256]	; (800d608 <tcp_listen_with_backlog_and_err+0x140>)
 800d506:	f00a fe43 	bl	8018190 <iprintf>
 800d50a:	23f1      	movs	r3, #241	; 0xf1
 800d50c:	76fb      	strb	r3, [r7, #27]
 800d50e:	e06b      	b.n	800d5e8 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	7d1b      	ldrb	r3, [r3, #20]
 800d514:	2b01      	cmp	r3, #1
 800d516:	d104      	bne.n	800d522 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800d51c:	23f7      	movs	r3, #247	; 0xf7
 800d51e:	76fb      	strb	r3, [r7, #27]
    goto done;
 800d520:	e062      	b.n	800d5e8 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800d522:	2002      	movs	r0, #2
 800d524:	f7fe fa84 	bl	800ba30 <memp_malloc>
 800d528:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800d52a:	69fb      	ldr	r3, [r7, #28]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d102      	bne.n	800d536 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800d530:	23ff      	movs	r3, #255	; 0xff
 800d532:	76fb      	strb	r3, [r7, #27]
    goto done;
 800d534:	e058      	b.n	800d5e8 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	691a      	ldr	r2, [r3, #16]
 800d53a:	69fb      	ldr	r3, [r7, #28]
 800d53c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	8ada      	ldrh	r2, [r3, #22]
 800d542:	69fb      	ldr	r3, [r7, #28]
 800d544:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800d546:	69fb      	ldr	r3, [r7, #28]
 800d548:	2201      	movs	r2, #1
 800d54a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	7d5a      	ldrb	r2, [r3, #21]
 800d550:	69fb      	ldr	r3, [r7, #28]
 800d552:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	7a5a      	ldrb	r2, [r3, #9]
 800d558:	69fb      	ldr	r3, [r7, #28]
 800d55a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800d55c:	69fb      	ldr	r3, [r7, #28]
 800d55e:	2200      	movs	r2, #0
 800d560:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	7ada      	ldrb	r2, [r3, #11]
 800d566:	69fb      	ldr	r3, [r7, #28]
 800d568:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	7a9a      	ldrb	r2, [r3, #10]
 800d56e:	69fb      	ldr	r3, [r7, #28]
 800d570:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	681a      	ldr	r2, [r3, #0]
 800d576:	69fb      	ldr	r3, [r7, #28]
 800d578:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	8adb      	ldrh	r3, [r3, #22]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d021      	beq.n	800d5c6 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800d582:	4b23      	ldr	r3, [pc, #140]	; (800d610 <tcp_listen_with_backlog_and_err+0x148>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	68fa      	ldr	r2, [r7, #12]
 800d588:	429a      	cmp	r2, r3
 800d58a:	d105      	bne.n	800d598 <tcp_listen_with_backlog_and_err+0xd0>
 800d58c:	4b20      	ldr	r3, [pc, #128]	; (800d610 <tcp_listen_with_backlog_and_err+0x148>)
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	68db      	ldr	r3, [r3, #12]
 800d592:	4a1f      	ldr	r2, [pc, #124]	; (800d610 <tcp_listen_with_backlog_and_err+0x148>)
 800d594:	6013      	str	r3, [r2, #0]
 800d596:	e013      	b.n	800d5c0 <tcp_listen_with_backlog_and_err+0xf8>
 800d598:	4b1d      	ldr	r3, [pc, #116]	; (800d610 <tcp_listen_with_backlog_and_err+0x148>)
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	617b      	str	r3, [r7, #20]
 800d59e:	e00c      	b.n	800d5ba <tcp_listen_with_backlog_and_err+0xf2>
 800d5a0:	697b      	ldr	r3, [r7, #20]
 800d5a2:	68db      	ldr	r3, [r3, #12]
 800d5a4:	68fa      	ldr	r2, [r7, #12]
 800d5a6:	429a      	cmp	r2, r3
 800d5a8:	d104      	bne.n	800d5b4 <tcp_listen_with_backlog_and_err+0xec>
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	68da      	ldr	r2, [r3, #12]
 800d5ae:	697b      	ldr	r3, [r7, #20]
 800d5b0:	60da      	str	r2, [r3, #12]
 800d5b2:	e005      	b.n	800d5c0 <tcp_listen_with_backlog_and_err+0xf8>
 800d5b4:	697b      	ldr	r3, [r7, #20]
 800d5b6:	68db      	ldr	r3, [r3, #12]
 800d5b8:	617b      	str	r3, [r7, #20]
 800d5ba:	697b      	ldr	r3, [r7, #20]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d1ef      	bne.n	800d5a0 <tcp_listen_with_backlog_and_err+0xd8>
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800d5c6:	68f8      	ldr	r0, [r7, #12]
 800d5c8:	f7ff fb6e 	bl	800cca8 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800d5cc:	69fb      	ldr	r3, [r7, #28]
 800d5ce:	4a11      	ldr	r2, [pc, #68]	; (800d614 <tcp_listen_with_backlog_and_err+0x14c>)
 800d5d0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800d5d2:	4b11      	ldr	r3, [pc, #68]	; (800d618 <tcp_listen_with_backlog_and_err+0x150>)
 800d5d4:	681a      	ldr	r2, [r3, #0]
 800d5d6:	69fb      	ldr	r3, [r7, #28]
 800d5d8:	60da      	str	r2, [r3, #12]
 800d5da:	4a0f      	ldr	r2, [pc, #60]	; (800d618 <tcp_listen_with_backlog_and_err+0x150>)
 800d5dc:	69fb      	ldr	r3, [r7, #28]
 800d5de:	6013      	str	r3, [r2, #0]
 800d5e0:	f005 fc04 	bl	8012dec <tcp_timer_needed>
  res = ERR_OK;
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d002      	beq.n	800d5f4 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	7efa      	ldrb	r2, [r7, #27]
 800d5f2:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800d5f4:	69fb      	ldr	r3, [r7, #28]
}
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	3720      	adds	r7, #32
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bd80      	pop	{r7, pc}
 800d5fe:	bf00      	nop
 800d600:	0801adb0 	.word	0x0801adb0
 800d604:	0801afa4 	.word	0x0801afa4
 800d608:	0801adf4 	.word	0x0801adf4
 800d60c:	0801afd4 	.word	0x0801afd4
 800d610:	2000fae4 	.word	0x2000fae4
 800d614:	0800d465 	.word	0x0800d465
 800d618:	2000fae0 	.word	0x2000fae0

0800d61c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b084      	sub	sp, #16
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d106      	bne.n	800d638 <tcp_update_rcv_ann_wnd+0x1c>
 800d62a:	4b25      	ldr	r3, [pc, #148]	; (800d6c0 <tcp_update_rcv_ann_wnd+0xa4>)
 800d62c:	f240 32a6 	movw	r2, #934	; 0x3a6
 800d630:	4924      	ldr	r1, [pc, #144]	; (800d6c4 <tcp_update_rcv_ann_wnd+0xa8>)
 800d632:	4825      	ldr	r0, [pc, #148]	; (800d6c8 <tcp_update_rcv_ann_wnd+0xac>)
 800d634:	f00a fdac 	bl	8018190 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d63c:	687a      	ldr	r2, [r7, #4]
 800d63e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d640:	4413      	add	r3, r2
 800d642:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d648:	687a      	ldr	r2, [r7, #4]
 800d64a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800d64c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800d650:	bf28      	it	cs
 800d652:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800d656:	b292      	uxth	r2, r2
 800d658:	4413      	add	r3, r2
 800d65a:	68fa      	ldr	r2, [r7, #12]
 800d65c:	1ad3      	subs	r3, r2, r3
 800d65e:	2b00      	cmp	r3, #0
 800d660:	db08      	blt.n	800d674 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d66e:	68fa      	ldr	r2, [r7, #12]
 800d670:	1ad3      	subs	r3, r2, r3
 800d672:	e020      	b.n	800d6b6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d67c:	1ad3      	subs	r3, r2, r3
 800d67e:	2b00      	cmp	r3, #0
 800d680:	dd03      	ble.n	800d68a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2200      	movs	r2, #0
 800d686:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d688:	e014      	b.n	800d6b4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d692:	1ad3      	subs	r3, r2, r3
 800d694:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800d696:	68bb      	ldr	r3, [r7, #8]
 800d698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d69c:	d306      	bcc.n	800d6ac <tcp_update_rcv_ann_wnd+0x90>
 800d69e:	4b08      	ldr	r3, [pc, #32]	; (800d6c0 <tcp_update_rcv_ann_wnd+0xa4>)
 800d6a0:	f240 32b6 	movw	r2, #950	; 0x3b6
 800d6a4:	4909      	ldr	r1, [pc, #36]	; (800d6cc <tcp_update_rcv_ann_wnd+0xb0>)
 800d6a6:	4808      	ldr	r0, [pc, #32]	; (800d6c8 <tcp_update_rcv_ann_wnd+0xac>)
 800d6a8:	f00a fd72 	bl	8018190 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800d6ac:	68bb      	ldr	r3, [r7, #8]
 800d6ae:	b29a      	uxth	r2, r3
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800d6b4:	2300      	movs	r3, #0
  }
}
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	3710      	adds	r7, #16
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	bd80      	pop	{r7, pc}
 800d6be:	bf00      	nop
 800d6c0:	0801adb0 	.word	0x0801adb0
 800d6c4:	0801b00c 	.word	0x0801b00c
 800d6c8:	0801adf4 	.word	0x0801adf4
 800d6cc:	0801b030 	.word	0x0801b030

0800d6d0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b084      	sub	sp, #16
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
 800d6d8:	460b      	mov	r3, r1
 800d6da:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d107      	bne.n	800d6f2 <tcp_recved+0x22>
 800d6e2:	4b1f      	ldr	r3, [pc, #124]	; (800d760 <tcp_recved+0x90>)
 800d6e4:	f240 32cf 	movw	r2, #975	; 0x3cf
 800d6e8:	491e      	ldr	r1, [pc, #120]	; (800d764 <tcp_recved+0x94>)
 800d6ea:	481f      	ldr	r0, [pc, #124]	; (800d768 <tcp_recved+0x98>)
 800d6ec:	f00a fd50 	bl	8018190 <iprintf>
 800d6f0:	e032      	b.n	800d758 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	7d1b      	ldrb	r3, [r3, #20]
 800d6f6:	2b01      	cmp	r3, #1
 800d6f8:	d106      	bne.n	800d708 <tcp_recved+0x38>
 800d6fa:	4b19      	ldr	r3, [pc, #100]	; (800d760 <tcp_recved+0x90>)
 800d6fc:	f240 32d3 	movw	r2, #979	; 0x3d3
 800d700:	491a      	ldr	r1, [pc, #104]	; (800d76c <tcp_recved+0x9c>)
 800d702:	4819      	ldr	r0, [pc, #100]	; (800d768 <tcp_recved+0x98>)
 800d704:	f00a fd44 	bl	8018190 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d70c:	887b      	ldrh	r3, [r7, #2]
 800d70e:	4413      	add	r3, r2
 800d710:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800d712:	89fb      	ldrh	r3, [r7, #14]
 800d714:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d718:	d804      	bhi.n	800d724 <tcp_recved+0x54>
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d71e:	89fa      	ldrh	r2, [r7, #14]
 800d720:	429a      	cmp	r2, r3
 800d722:	d204      	bcs.n	800d72e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d72a:	851a      	strh	r2, [r3, #40]	; 0x28
 800d72c:	e002      	b.n	800d734 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	89fa      	ldrh	r2, [r7, #14]
 800d732:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800d734:	6878      	ldr	r0, [r7, #4]
 800d736:	f7ff ff71 	bl	800d61c <tcp_update_rcv_ann_wnd>
 800d73a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800d73c:	68bb      	ldr	r3, [r7, #8]
 800d73e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d742:	d309      	bcc.n	800d758 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	8b5b      	ldrh	r3, [r3, #26]
 800d748:	f043 0302 	orr.w	r3, r3, #2
 800d74c:	b29a      	uxth	r2, r3
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d752:	6878      	ldr	r0, [r7, #4]
 800d754:	f004 fbc4 	bl	8011ee0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800d758:	3710      	adds	r7, #16
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd80      	pop	{r7, pc}
 800d75e:	bf00      	nop
 800d760:	0801adb0 	.word	0x0801adb0
 800d764:	0801b04c 	.word	0x0801b04c
 800d768:	0801adf4 	.word	0x0801adf4
 800d76c:	0801b064 	.word	0x0801b064

0800d770 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800d770:	b480      	push	{r7}
 800d772:	b083      	sub	sp, #12
 800d774:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800d776:	2300      	movs	r3, #0
 800d778:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800d77a:	4b1e      	ldr	r3, [pc, #120]	; (800d7f4 <tcp_new_port+0x84>)
 800d77c:	881b      	ldrh	r3, [r3, #0]
 800d77e:	3301      	adds	r3, #1
 800d780:	b29a      	uxth	r2, r3
 800d782:	4b1c      	ldr	r3, [pc, #112]	; (800d7f4 <tcp_new_port+0x84>)
 800d784:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800d786:	4b1b      	ldr	r3, [pc, #108]	; (800d7f4 <tcp_new_port+0x84>)
 800d788:	881b      	ldrh	r3, [r3, #0]
 800d78a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d78e:	4293      	cmp	r3, r2
 800d790:	d103      	bne.n	800d79a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800d792:	4b18      	ldr	r3, [pc, #96]	; (800d7f4 <tcp_new_port+0x84>)
 800d794:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800d798:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d79a:	2300      	movs	r3, #0
 800d79c:	71fb      	strb	r3, [r7, #7]
 800d79e:	e01e      	b.n	800d7de <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d7a0:	79fb      	ldrb	r3, [r7, #7]
 800d7a2:	4a15      	ldr	r2, [pc, #84]	; (800d7f8 <tcp_new_port+0x88>)
 800d7a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	603b      	str	r3, [r7, #0]
 800d7ac:	e011      	b.n	800d7d2 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	8ada      	ldrh	r2, [r3, #22]
 800d7b2:	4b10      	ldr	r3, [pc, #64]	; (800d7f4 <tcp_new_port+0x84>)
 800d7b4:	881b      	ldrh	r3, [r3, #0]
 800d7b6:	429a      	cmp	r2, r3
 800d7b8:	d108      	bne.n	800d7cc <tcp_new_port+0x5c>
        n++;
 800d7ba:	88bb      	ldrh	r3, [r7, #4]
 800d7bc:	3301      	adds	r3, #1
 800d7be:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800d7c0:	88bb      	ldrh	r3, [r7, #4]
 800d7c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d7c6:	d3d8      	bcc.n	800d77a <tcp_new_port+0xa>
          return 0;
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	e00d      	b.n	800d7e8 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	68db      	ldr	r3, [r3, #12]
 800d7d0:	603b      	str	r3, [r7, #0]
 800d7d2:	683b      	ldr	r3, [r7, #0]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d1ea      	bne.n	800d7ae <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d7d8:	79fb      	ldrb	r3, [r7, #7]
 800d7da:	3301      	adds	r3, #1
 800d7dc:	71fb      	strb	r3, [r7, #7]
 800d7de:	79fb      	ldrb	r3, [r7, #7]
 800d7e0:	2b03      	cmp	r3, #3
 800d7e2:	d9dd      	bls.n	800d7a0 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800d7e4:	4b03      	ldr	r3, [pc, #12]	; (800d7f4 <tcp_new_port+0x84>)
 800d7e6:	881b      	ldrh	r3, [r3, #0]
}
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	370c      	adds	r7, #12
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f2:	4770      	bx	lr
 800d7f4:	20000010 	.word	0x20000010
 800d7f8:	0802853c 	.word	0x0802853c

0800d7fc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800d7fc:	b5b0      	push	{r4, r5, r7, lr}
 800d7fe:	b090      	sub	sp, #64	; 0x40
 800d800:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800d802:	2300      	movs	r3, #0
 800d804:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800d808:	4b94      	ldr	r3, [pc, #592]	; (800da5c <tcp_slowtmr+0x260>)
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	3301      	adds	r3, #1
 800d80e:	4a93      	ldr	r2, [pc, #588]	; (800da5c <tcp_slowtmr+0x260>)
 800d810:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800d812:	4b93      	ldr	r3, [pc, #588]	; (800da60 <tcp_slowtmr+0x264>)
 800d814:	781b      	ldrb	r3, [r3, #0]
 800d816:	3301      	adds	r3, #1
 800d818:	b2da      	uxtb	r2, r3
 800d81a:	4b91      	ldr	r3, [pc, #580]	; (800da60 <tcp_slowtmr+0x264>)
 800d81c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800d81e:	2300      	movs	r3, #0
 800d820:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800d822:	4b90      	ldr	r3, [pc, #576]	; (800da64 <tcp_slowtmr+0x268>)
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800d828:	e29f      	b.n	800dd6a <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d82a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d82c:	7d1b      	ldrb	r3, [r3, #20]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d106      	bne.n	800d840 <tcp_slowtmr+0x44>
 800d832:	4b8d      	ldr	r3, [pc, #564]	; (800da68 <tcp_slowtmr+0x26c>)
 800d834:	f240 42be 	movw	r2, #1214	; 0x4be
 800d838:	498c      	ldr	r1, [pc, #560]	; (800da6c <tcp_slowtmr+0x270>)
 800d83a:	488d      	ldr	r0, [pc, #564]	; (800da70 <tcp_slowtmr+0x274>)
 800d83c:	f00a fca8 	bl	8018190 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d842:	7d1b      	ldrb	r3, [r3, #20]
 800d844:	2b01      	cmp	r3, #1
 800d846:	d106      	bne.n	800d856 <tcp_slowtmr+0x5a>
 800d848:	4b87      	ldr	r3, [pc, #540]	; (800da68 <tcp_slowtmr+0x26c>)
 800d84a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800d84e:	4989      	ldr	r1, [pc, #548]	; (800da74 <tcp_slowtmr+0x278>)
 800d850:	4887      	ldr	r0, [pc, #540]	; (800da70 <tcp_slowtmr+0x274>)
 800d852:	f00a fc9d 	bl	8018190 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d858:	7d1b      	ldrb	r3, [r3, #20]
 800d85a:	2b0a      	cmp	r3, #10
 800d85c:	d106      	bne.n	800d86c <tcp_slowtmr+0x70>
 800d85e:	4b82      	ldr	r3, [pc, #520]	; (800da68 <tcp_slowtmr+0x26c>)
 800d860:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800d864:	4984      	ldr	r1, [pc, #528]	; (800da78 <tcp_slowtmr+0x27c>)
 800d866:	4882      	ldr	r0, [pc, #520]	; (800da70 <tcp_slowtmr+0x274>)
 800d868:	f00a fc92 	bl	8018190 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800d86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d86e:	7f9a      	ldrb	r2, [r3, #30]
 800d870:	4b7b      	ldr	r3, [pc, #492]	; (800da60 <tcp_slowtmr+0x264>)
 800d872:	781b      	ldrb	r3, [r3, #0]
 800d874:	429a      	cmp	r2, r3
 800d876:	d105      	bne.n	800d884 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800d878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d87a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d87e:	68db      	ldr	r3, [r3, #12]
 800d880:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800d882:	e272      	b.n	800dd6a <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800d884:	4b76      	ldr	r3, [pc, #472]	; (800da60 <tcp_slowtmr+0x264>)
 800d886:	781a      	ldrb	r2, [r3, #0]
 800d888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d88a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800d88c:	2300      	movs	r3, #0
 800d88e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800d892:	2300      	movs	r3, #0
 800d894:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d89a:	7d1b      	ldrb	r3, [r3, #20]
 800d89c:	2b02      	cmp	r3, #2
 800d89e:	d10a      	bne.n	800d8b6 <tcp_slowtmr+0xba>
 800d8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d8a6:	2b05      	cmp	r3, #5
 800d8a8:	d905      	bls.n	800d8b6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800d8aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d8ae:	3301      	adds	r3, #1
 800d8b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d8b4:	e11e      	b.n	800daf4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800d8b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d8bc:	2b0b      	cmp	r3, #11
 800d8be:	d905      	bls.n	800d8cc <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800d8c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d8c4:	3301      	adds	r3, #1
 800d8c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d8ca:	e113      	b.n	800daf4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800d8cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ce:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d075      	beq.n	800d9c2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800d8d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d006      	beq.n	800d8ec <tcp_slowtmr+0xf0>
 800d8de:	4b62      	ldr	r3, [pc, #392]	; (800da68 <tcp_slowtmr+0x26c>)
 800d8e0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800d8e4:	4965      	ldr	r1, [pc, #404]	; (800da7c <tcp_slowtmr+0x280>)
 800d8e6:	4862      	ldr	r0, [pc, #392]	; (800da70 <tcp_slowtmr+0x274>)
 800d8e8:	f00a fc52 	bl	8018190 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800d8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d106      	bne.n	800d902 <tcp_slowtmr+0x106>
 800d8f4:	4b5c      	ldr	r3, [pc, #368]	; (800da68 <tcp_slowtmr+0x26c>)
 800d8f6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800d8fa:	4961      	ldr	r1, [pc, #388]	; (800da80 <tcp_slowtmr+0x284>)
 800d8fc:	485c      	ldr	r0, [pc, #368]	; (800da70 <tcp_slowtmr+0x274>)
 800d8fe:	f00a fc47 	bl	8018190 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800d902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d904:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d908:	2b0b      	cmp	r3, #11
 800d90a:	d905      	bls.n	800d918 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800d90c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d910:	3301      	adds	r3, #1
 800d912:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d916:	e0ed      	b.n	800daf4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800d918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d91a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d91e:	3b01      	subs	r3, #1
 800d920:	4a58      	ldr	r2, [pc, #352]	; (800da84 <tcp_slowtmr+0x288>)
 800d922:	5cd3      	ldrb	r3, [r2, r3]
 800d924:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800d926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d928:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d92c:	7c7a      	ldrb	r2, [r7, #17]
 800d92e:	429a      	cmp	r2, r3
 800d930:	d907      	bls.n	800d942 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800d932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d934:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d938:	3301      	adds	r3, #1
 800d93a:	b2da      	uxtb	r2, r3
 800d93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d93e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800d942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d944:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d948:	7c7a      	ldrb	r2, [r7, #17]
 800d94a:	429a      	cmp	r2, r3
 800d94c:	f200 80d2 	bhi.w	800daf4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800d950:	2301      	movs	r3, #1
 800d952:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800d954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d956:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d108      	bne.n	800d970 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800d95e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d960:	f005 f976 	bl	8012c50 <tcp_zero_window_probe>
 800d964:	4603      	mov	r3, r0
 800d966:	2b00      	cmp	r3, #0
 800d968:	d014      	beq.n	800d994 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800d96a:	2300      	movs	r3, #0
 800d96c:	623b      	str	r3, [r7, #32]
 800d96e:	e011      	b.n	800d994 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800d970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d972:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d976:	4619      	mov	r1, r3
 800d978:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d97a:	f004 f82b 	bl	80119d4 <tcp_split_unsent_seg>
 800d97e:	4603      	mov	r3, r0
 800d980:	2b00      	cmp	r3, #0
 800d982:	d107      	bne.n	800d994 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800d984:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d986:	f004 faab 	bl	8011ee0 <tcp_output>
 800d98a:	4603      	mov	r3, r0
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d101      	bne.n	800d994 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800d990:	2300      	movs	r3, #0
 800d992:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800d994:	6a3b      	ldr	r3, [r7, #32]
 800d996:	2b00      	cmp	r3, #0
 800d998:	f000 80ac 	beq.w	800daf4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800d99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d99e:	2200      	movs	r2, #0
 800d9a0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9a6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d9aa:	2b06      	cmp	r3, #6
 800d9ac:	f200 80a2 	bhi.w	800daf4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800d9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9b2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d9b6:	3301      	adds	r3, #1
 800d9b8:	b2da      	uxtb	r2, r3
 800d9ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9bc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800d9c0:	e098      	b.n	800daf4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800d9c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9c4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	db0f      	blt.n	800d9ec <tcp_slowtmr+0x1f0>
 800d9cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ce:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d9d2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d9d6:	4293      	cmp	r3, r2
 800d9d8:	d008      	beq.n	800d9ec <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800d9da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9dc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d9e0:	b29b      	uxth	r3, r3
 800d9e2:	3301      	adds	r3, #1
 800d9e4:	b29b      	uxth	r3, r3
 800d9e6:	b21a      	sxth	r2, r3
 800d9e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ea:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800d9ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ee:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800d9f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9f4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d9f8:	429a      	cmp	r2, r3
 800d9fa:	db7b      	blt.n	800daf4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800d9fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d9fe:	f004 fd67 	bl	80124d0 <tcp_rexmit_rto_prepare>
 800da02:	4603      	mov	r3, r0
 800da04:	2b00      	cmp	r3, #0
 800da06:	d007      	beq.n	800da18 <tcp_slowtmr+0x21c>
 800da08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d171      	bne.n	800daf4 <tcp_slowtmr+0x2f8>
 800da10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da14:	2b00      	cmp	r3, #0
 800da16:	d06d      	beq.n	800daf4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800da18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da1a:	7d1b      	ldrb	r3, [r3, #20]
 800da1c:	2b02      	cmp	r3, #2
 800da1e:	d03a      	beq.n	800da96 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800da20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800da26:	2b0c      	cmp	r3, #12
 800da28:	bf28      	it	cs
 800da2a:	230c      	movcs	r3, #12
 800da2c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800da2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da30:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800da34:	10db      	asrs	r3, r3, #3
 800da36:	b21b      	sxth	r3, r3
 800da38:	461a      	mov	r2, r3
 800da3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da3c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800da40:	4413      	add	r3, r2
 800da42:	7efa      	ldrb	r2, [r7, #27]
 800da44:	4910      	ldr	r1, [pc, #64]	; (800da88 <tcp_slowtmr+0x28c>)
 800da46:	5c8a      	ldrb	r2, [r1, r2]
 800da48:	4093      	lsls	r3, r2
 800da4a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800da4c:	697b      	ldr	r3, [r7, #20]
 800da4e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800da52:	4293      	cmp	r3, r2
 800da54:	dc1a      	bgt.n	800da8c <tcp_slowtmr+0x290>
 800da56:	697b      	ldr	r3, [r7, #20]
 800da58:	b21a      	sxth	r2, r3
 800da5a:	e019      	b.n	800da90 <tcp_slowtmr+0x294>
 800da5c:	2000fadc 	.word	0x2000fadc
 800da60:	20008c56 	.word	0x20008c56
 800da64:	2000fad8 	.word	0x2000fad8
 800da68:	0801adb0 	.word	0x0801adb0
 800da6c:	0801b0f4 	.word	0x0801b0f4
 800da70:	0801adf4 	.word	0x0801adf4
 800da74:	0801b120 	.word	0x0801b120
 800da78:	0801b14c 	.word	0x0801b14c
 800da7c:	0801b17c 	.word	0x0801b17c
 800da80:	0801b1b0 	.word	0x0801b1b0
 800da84:	08028534 	.word	0x08028534
 800da88:	08028524 	.word	0x08028524
 800da8c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800da90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800da96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da98:	2200      	movs	r2, #0
 800da9a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800da9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da9e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800daa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daa4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800daa8:	4293      	cmp	r3, r2
 800daaa:	bf28      	it	cs
 800daac:	4613      	movcs	r3, r2
 800daae:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800dab0:	8a7b      	ldrh	r3, [r7, #18]
 800dab2:	085b      	lsrs	r3, r3, #1
 800dab4:	b29a      	uxth	r2, r3
 800dab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dab8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800dabc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dabe:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800dac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dac4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dac6:	005b      	lsls	r3, r3, #1
 800dac8:	b29b      	uxth	r3, r3
 800daca:	429a      	cmp	r2, r3
 800dacc:	d206      	bcs.n	800dadc <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800dace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dad0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dad2:	005b      	lsls	r3, r3, #1
 800dad4:	b29a      	uxth	r2, r3
 800dad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dad8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800dadc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dade:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800dae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dae2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800dae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dae8:	2200      	movs	r2, #0
 800daea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800daee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800daf0:	f004 fd5e 	bl	80125b0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800daf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daf6:	7d1b      	ldrb	r3, [r3, #20]
 800daf8:	2b06      	cmp	r3, #6
 800dafa:	d111      	bne.n	800db20 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800dafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dafe:	8b5b      	ldrh	r3, [r3, #26]
 800db00:	f003 0310 	and.w	r3, r3, #16
 800db04:	2b00      	cmp	r3, #0
 800db06:	d00b      	beq.n	800db20 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800db08:	4b9d      	ldr	r3, [pc, #628]	; (800dd80 <tcp_slowtmr+0x584>)
 800db0a:	681a      	ldr	r2, [r3, #0]
 800db0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db0e:	6a1b      	ldr	r3, [r3, #32]
 800db10:	1ad3      	subs	r3, r2, r3
 800db12:	2b28      	cmp	r3, #40	; 0x28
 800db14:	d904      	bls.n	800db20 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800db16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db1a:	3301      	adds	r3, #1
 800db1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800db20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db22:	7a5b      	ldrb	r3, [r3, #9]
 800db24:	f003 0308 	and.w	r3, r3, #8
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d04c      	beq.n	800dbc6 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800db2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db2e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800db30:	2b04      	cmp	r3, #4
 800db32:	d003      	beq.n	800db3c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800db34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db36:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800db38:	2b07      	cmp	r3, #7
 800db3a:	d144      	bne.n	800dbc6 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800db3c:	4b90      	ldr	r3, [pc, #576]	; (800dd80 <tcp_slowtmr+0x584>)
 800db3e:	681a      	ldr	r2, [r3, #0]
 800db40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db42:	6a1b      	ldr	r3, [r3, #32]
 800db44:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800db46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800db4c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800db50:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800db54:	498b      	ldr	r1, [pc, #556]	; (800dd84 <tcp_slowtmr+0x588>)
 800db56:	fba1 1303 	umull	r1, r3, r1, r3
 800db5a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800db5c:	429a      	cmp	r2, r3
 800db5e:	d90a      	bls.n	800db76 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800db60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db64:	3301      	adds	r3, #1
 800db66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800db6a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800db6e:	3301      	adds	r3, #1
 800db70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800db74:	e027      	b.n	800dbc6 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800db76:	4b82      	ldr	r3, [pc, #520]	; (800dd80 <tcp_slowtmr+0x584>)
 800db78:	681a      	ldr	r2, [r3, #0]
 800db7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db7c:	6a1b      	ldr	r3, [r3, #32]
 800db7e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800db80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db82:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800db86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db88:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800db8c:	4618      	mov	r0, r3
 800db8e:	4b7e      	ldr	r3, [pc, #504]	; (800dd88 <tcp_slowtmr+0x58c>)
 800db90:	fb03 f300 	mul.w	r3, r3, r0
 800db94:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800db96:	497b      	ldr	r1, [pc, #492]	; (800dd84 <tcp_slowtmr+0x588>)
 800db98:	fba1 1303 	umull	r1, r3, r1, r3
 800db9c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800db9e:	429a      	cmp	r2, r3
 800dba0:	d911      	bls.n	800dbc6 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800dba2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dba4:	f005 f814 	bl	8012bd0 <tcp_keepalive>
 800dba8:	4603      	mov	r3, r0
 800dbaa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800dbae:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d107      	bne.n	800dbc6 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800dbb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbb8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800dbbc:	3301      	adds	r3, #1
 800dbbe:	b2da      	uxtb	r2, r3
 800dbc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbc2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800dbc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d011      	beq.n	800dbf2 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800dbce:	4b6c      	ldr	r3, [pc, #432]	; (800dd80 <tcp_slowtmr+0x584>)
 800dbd0:	681a      	ldr	r2, [r3, #0]
 800dbd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbd4:	6a1b      	ldr	r3, [r3, #32]
 800dbd6:	1ad2      	subs	r2, r2, r3
 800dbd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbda:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800dbde:	4619      	mov	r1, r3
 800dbe0:	460b      	mov	r3, r1
 800dbe2:	005b      	lsls	r3, r3, #1
 800dbe4:	440b      	add	r3, r1
 800dbe6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800dbe8:	429a      	cmp	r2, r3
 800dbea:	d302      	bcc.n	800dbf2 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800dbec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dbee:	f000 fec3 	bl	800e978 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800dbf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbf4:	7d1b      	ldrb	r3, [r3, #20]
 800dbf6:	2b03      	cmp	r3, #3
 800dbf8:	d10b      	bne.n	800dc12 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dbfa:	4b61      	ldr	r3, [pc, #388]	; (800dd80 <tcp_slowtmr+0x584>)
 800dbfc:	681a      	ldr	r2, [r3, #0]
 800dbfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc00:	6a1b      	ldr	r3, [r3, #32]
 800dc02:	1ad3      	subs	r3, r2, r3
 800dc04:	2b28      	cmp	r3, #40	; 0x28
 800dc06:	d904      	bls.n	800dc12 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800dc08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc0c:	3301      	adds	r3, #1
 800dc0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800dc12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc14:	7d1b      	ldrb	r3, [r3, #20]
 800dc16:	2b09      	cmp	r3, #9
 800dc18:	d10b      	bne.n	800dc32 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800dc1a:	4b59      	ldr	r3, [pc, #356]	; (800dd80 <tcp_slowtmr+0x584>)
 800dc1c:	681a      	ldr	r2, [r3, #0]
 800dc1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc20:	6a1b      	ldr	r3, [r3, #32]
 800dc22:	1ad3      	subs	r3, r2, r3
 800dc24:	2bf0      	cmp	r3, #240	; 0xf0
 800dc26:	d904      	bls.n	800dc32 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800dc28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc2c:	3301      	adds	r3, #1
 800dc2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800dc32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d060      	beq.n	800dcfc <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800dc3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc40:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800dc42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dc44:	f000 fce4 	bl	800e610 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800dc48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d010      	beq.n	800dc70 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800dc4e:	4b4f      	ldr	r3, [pc, #316]	; (800dd8c <tcp_slowtmr+0x590>)
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc54:	429a      	cmp	r2, r3
 800dc56:	d106      	bne.n	800dc66 <tcp_slowtmr+0x46a>
 800dc58:	4b4d      	ldr	r3, [pc, #308]	; (800dd90 <tcp_slowtmr+0x594>)
 800dc5a:	f240 526d 	movw	r2, #1389	; 0x56d
 800dc5e:	494d      	ldr	r1, [pc, #308]	; (800dd94 <tcp_slowtmr+0x598>)
 800dc60:	484d      	ldr	r0, [pc, #308]	; (800dd98 <tcp_slowtmr+0x59c>)
 800dc62:	f00a fa95 	bl	8018190 <iprintf>
        prev->next = pcb->next;
 800dc66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc68:	68da      	ldr	r2, [r3, #12]
 800dc6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc6c:	60da      	str	r2, [r3, #12]
 800dc6e:	e00f      	b.n	800dc90 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800dc70:	4b46      	ldr	r3, [pc, #280]	; (800dd8c <tcp_slowtmr+0x590>)
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc76:	429a      	cmp	r2, r3
 800dc78:	d006      	beq.n	800dc88 <tcp_slowtmr+0x48c>
 800dc7a:	4b45      	ldr	r3, [pc, #276]	; (800dd90 <tcp_slowtmr+0x594>)
 800dc7c:	f240 5271 	movw	r2, #1393	; 0x571
 800dc80:	4946      	ldr	r1, [pc, #280]	; (800dd9c <tcp_slowtmr+0x5a0>)
 800dc82:	4845      	ldr	r0, [pc, #276]	; (800dd98 <tcp_slowtmr+0x59c>)
 800dc84:	f00a fa84 	bl	8018190 <iprintf>
        tcp_active_pcbs = pcb->next;
 800dc88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc8a:	68db      	ldr	r3, [r3, #12]
 800dc8c:	4a3f      	ldr	r2, [pc, #252]	; (800dd8c <tcp_slowtmr+0x590>)
 800dc8e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800dc90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d013      	beq.n	800dcc0 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800dc98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc9a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800dc9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc9e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800dca0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800dca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dca4:	3304      	adds	r3, #4
 800dca6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dca8:	8ad2      	ldrh	r2, [r2, #22]
 800dcaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dcac:	8b09      	ldrh	r1, [r1, #24]
 800dcae:	9102      	str	r1, [sp, #8]
 800dcb0:	9201      	str	r2, [sp, #4]
 800dcb2:	9300      	str	r3, [sp, #0]
 800dcb4:	462b      	mov	r3, r5
 800dcb6:	4622      	mov	r2, r4
 800dcb8:	4601      	mov	r1, r0
 800dcba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dcbc:	f004 fed4 	bl	8012a68 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800dcc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcc2:	691b      	ldr	r3, [r3, #16]
 800dcc4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800dcc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcc8:	7d1b      	ldrb	r3, [r3, #20]
 800dcca:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800dccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcce:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800dcd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcd2:	68db      	ldr	r3, [r3, #12]
 800dcd4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800dcd6:	6838      	ldr	r0, [r7, #0]
 800dcd8:	f7fe ffe6 	bl	800cca8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800dcdc:	4b30      	ldr	r3, [pc, #192]	; (800dda0 <tcp_slowtmr+0x5a4>)
 800dcde:	2200      	movs	r2, #0
 800dce0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d004      	beq.n	800dcf2 <tcp_slowtmr+0x4f6>
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	f06f 010c 	mvn.w	r1, #12
 800dcee:	68b8      	ldr	r0, [r7, #8]
 800dcf0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800dcf2:	4b2b      	ldr	r3, [pc, #172]	; (800dda0 <tcp_slowtmr+0x5a4>)
 800dcf4:	781b      	ldrb	r3, [r3, #0]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d037      	beq.n	800dd6a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800dcfa:	e590      	b.n	800d81e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800dcfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcfe:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800dd00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd02:	68db      	ldr	r3, [r3, #12]
 800dd04:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800dd06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd08:	7f1b      	ldrb	r3, [r3, #28]
 800dd0a:	3301      	adds	r3, #1
 800dd0c:	b2da      	uxtb	r2, r3
 800dd0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd10:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800dd12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd14:	7f1a      	ldrb	r2, [r3, #28]
 800dd16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd18:	7f5b      	ldrb	r3, [r3, #29]
 800dd1a:	429a      	cmp	r2, r3
 800dd1c:	d325      	bcc.n	800dd6a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800dd1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd20:	2200      	movs	r2, #0
 800dd22:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800dd24:	4b1e      	ldr	r3, [pc, #120]	; (800dda0 <tcp_slowtmr+0x5a4>)
 800dd26:	2200      	movs	r2, #0
 800dd28:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800dd2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d00b      	beq.n	800dd4c <tcp_slowtmr+0x550>
 800dd34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dd3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd3c:	6912      	ldr	r2, [r2, #16]
 800dd3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dd40:	4610      	mov	r0, r2
 800dd42:	4798      	blx	r3
 800dd44:	4603      	mov	r3, r0
 800dd46:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800dd4a:	e002      	b.n	800dd52 <tcp_slowtmr+0x556>
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800dd52:	4b13      	ldr	r3, [pc, #76]	; (800dda0 <tcp_slowtmr+0x5a4>)
 800dd54:	781b      	ldrb	r3, [r3, #0]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d000      	beq.n	800dd5c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800dd5a:	e560      	b.n	800d81e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800dd5c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d102      	bne.n	800dd6a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800dd64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd66:	f004 f8bb 	bl	8011ee0 <tcp_output>
  while (pcb != NULL) {
 800dd6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	f47f ad5c 	bne.w	800d82a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800dd72:	2300      	movs	r3, #0
 800dd74:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800dd76:	4b0b      	ldr	r3, [pc, #44]	; (800dda4 <tcp_slowtmr+0x5a8>)
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800dd7c:	e067      	b.n	800de4e <tcp_slowtmr+0x652>
 800dd7e:	bf00      	nop
 800dd80:	2000fadc 	.word	0x2000fadc
 800dd84:	10624dd3 	.word	0x10624dd3
 800dd88:	000124f8 	.word	0x000124f8
 800dd8c:	2000fad8 	.word	0x2000fad8
 800dd90:	0801adb0 	.word	0x0801adb0
 800dd94:	0801b1e8 	.word	0x0801b1e8
 800dd98:	0801adf4 	.word	0x0801adf4
 800dd9c:	0801b214 	.word	0x0801b214
 800dda0:	2000fad4 	.word	0x2000fad4
 800dda4:	2000fae8 	.word	0x2000fae8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800dda8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddaa:	7d1b      	ldrb	r3, [r3, #20]
 800ddac:	2b0a      	cmp	r3, #10
 800ddae:	d006      	beq.n	800ddbe <tcp_slowtmr+0x5c2>
 800ddb0:	4b2a      	ldr	r3, [pc, #168]	; (800de5c <tcp_slowtmr+0x660>)
 800ddb2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800ddb6:	492a      	ldr	r1, [pc, #168]	; (800de60 <tcp_slowtmr+0x664>)
 800ddb8:	482a      	ldr	r0, [pc, #168]	; (800de64 <tcp_slowtmr+0x668>)
 800ddba:	f00a f9e9 	bl	8018190 <iprintf>
    pcb_remove = 0;
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ddc4:	4b28      	ldr	r3, [pc, #160]	; (800de68 <tcp_slowtmr+0x66c>)
 800ddc6:	681a      	ldr	r2, [r3, #0]
 800ddc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddca:	6a1b      	ldr	r3, [r3, #32]
 800ddcc:	1ad3      	subs	r3, r2, r3
 800ddce:	2bf0      	cmp	r3, #240	; 0xf0
 800ddd0:	d904      	bls.n	800dddc <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800ddd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ddd6:	3301      	adds	r3, #1
 800ddd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800dddc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d02f      	beq.n	800de44 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800dde4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dde6:	f000 fc13 	bl	800e610 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800ddea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d010      	beq.n	800de12 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ddf0:	4b1e      	ldr	r3, [pc, #120]	; (800de6c <tcp_slowtmr+0x670>)
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ddf6:	429a      	cmp	r2, r3
 800ddf8:	d106      	bne.n	800de08 <tcp_slowtmr+0x60c>
 800ddfa:	4b18      	ldr	r3, [pc, #96]	; (800de5c <tcp_slowtmr+0x660>)
 800ddfc:	f240 52af 	movw	r2, #1455	; 0x5af
 800de00:	491b      	ldr	r1, [pc, #108]	; (800de70 <tcp_slowtmr+0x674>)
 800de02:	4818      	ldr	r0, [pc, #96]	; (800de64 <tcp_slowtmr+0x668>)
 800de04:	f00a f9c4 	bl	8018190 <iprintf>
        prev->next = pcb->next;
 800de08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de0a:	68da      	ldr	r2, [r3, #12]
 800de0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de0e:	60da      	str	r2, [r3, #12]
 800de10:	e00f      	b.n	800de32 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800de12:	4b16      	ldr	r3, [pc, #88]	; (800de6c <tcp_slowtmr+0x670>)
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de18:	429a      	cmp	r2, r3
 800de1a:	d006      	beq.n	800de2a <tcp_slowtmr+0x62e>
 800de1c:	4b0f      	ldr	r3, [pc, #60]	; (800de5c <tcp_slowtmr+0x660>)
 800de1e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800de22:	4914      	ldr	r1, [pc, #80]	; (800de74 <tcp_slowtmr+0x678>)
 800de24:	480f      	ldr	r0, [pc, #60]	; (800de64 <tcp_slowtmr+0x668>)
 800de26:	f00a f9b3 	bl	8018190 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800de2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de2c:	68db      	ldr	r3, [r3, #12]
 800de2e:	4a0f      	ldr	r2, [pc, #60]	; (800de6c <tcp_slowtmr+0x670>)
 800de30:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800de32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de34:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800de36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de38:	68db      	ldr	r3, [r3, #12]
 800de3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800de3c:	69f8      	ldr	r0, [r7, #28]
 800de3e:	f7fe ff33 	bl	800cca8 <tcp_free>
 800de42:	e004      	b.n	800de4e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800de44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de46:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800de48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de4a:	68db      	ldr	r3, [r3, #12]
 800de4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800de4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de50:	2b00      	cmp	r3, #0
 800de52:	d1a9      	bne.n	800dda8 <tcp_slowtmr+0x5ac>
    }
  }
}
 800de54:	bf00      	nop
 800de56:	3730      	adds	r7, #48	; 0x30
 800de58:	46bd      	mov	sp, r7
 800de5a:	bdb0      	pop	{r4, r5, r7, pc}
 800de5c:	0801adb0 	.word	0x0801adb0
 800de60:	0801b240 	.word	0x0801b240
 800de64:	0801adf4 	.word	0x0801adf4
 800de68:	2000fadc 	.word	0x2000fadc
 800de6c:	2000fae8 	.word	0x2000fae8
 800de70:	0801b270 	.word	0x0801b270
 800de74:	0801b298 	.word	0x0801b298

0800de78 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b082      	sub	sp, #8
 800de7c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800de7e:	4b2d      	ldr	r3, [pc, #180]	; (800df34 <tcp_fasttmr+0xbc>)
 800de80:	781b      	ldrb	r3, [r3, #0]
 800de82:	3301      	adds	r3, #1
 800de84:	b2da      	uxtb	r2, r3
 800de86:	4b2b      	ldr	r3, [pc, #172]	; (800df34 <tcp_fasttmr+0xbc>)
 800de88:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800de8a:	4b2b      	ldr	r3, [pc, #172]	; (800df38 <tcp_fasttmr+0xc0>)
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800de90:	e048      	b.n	800df24 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	7f9a      	ldrb	r2, [r3, #30]
 800de96:	4b27      	ldr	r3, [pc, #156]	; (800df34 <tcp_fasttmr+0xbc>)
 800de98:	781b      	ldrb	r3, [r3, #0]
 800de9a:	429a      	cmp	r2, r3
 800de9c:	d03f      	beq.n	800df1e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800de9e:	4b25      	ldr	r3, [pc, #148]	; (800df34 <tcp_fasttmr+0xbc>)
 800dea0:	781a      	ldrb	r2, [r3, #0]
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	8b5b      	ldrh	r3, [r3, #26]
 800deaa:	f003 0301 	and.w	r3, r3, #1
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d010      	beq.n	800ded4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	8b5b      	ldrh	r3, [r3, #26]
 800deb6:	f043 0302 	orr.w	r3, r3, #2
 800deba:	b29a      	uxth	r2, r3
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800dec0:	6878      	ldr	r0, [r7, #4]
 800dec2:	f004 f80d 	bl	8011ee0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	8b5b      	ldrh	r3, [r3, #26]
 800deca:	f023 0303 	bic.w	r3, r3, #3
 800dece:	b29a      	uxth	r2, r3
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	8b5b      	ldrh	r3, [r3, #26]
 800ded8:	f003 0308 	and.w	r3, r3, #8
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d009      	beq.n	800def4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	8b5b      	ldrh	r3, [r3, #26]
 800dee4:	f023 0308 	bic.w	r3, r3, #8
 800dee8:	b29a      	uxth	r2, r3
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800deee:	6878      	ldr	r0, [r7, #4]
 800def0:	f7ff f86a 	bl	800cfc8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	68db      	ldr	r3, [r3, #12]
 800def8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800defe:	2b00      	cmp	r3, #0
 800df00:	d00a      	beq.n	800df18 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800df02:	4b0e      	ldr	r3, [pc, #56]	; (800df3c <tcp_fasttmr+0xc4>)
 800df04:	2200      	movs	r2, #0
 800df06:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800df08:	6878      	ldr	r0, [r7, #4]
 800df0a:	f000 f819 	bl	800df40 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800df0e:	4b0b      	ldr	r3, [pc, #44]	; (800df3c <tcp_fasttmr+0xc4>)
 800df10:	781b      	ldrb	r3, [r3, #0]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d000      	beq.n	800df18 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800df16:	e7b8      	b.n	800de8a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800df18:	683b      	ldr	r3, [r7, #0]
 800df1a:	607b      	str	r3, [r7, #4]
 800df1c:	e002      	b.n	800df24 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	68db      	ldr	r3, [r3, #12]
 800df22:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d1b3      	bne.n	800de92 <tcp_fasttmr+0x1a>
    }
  }
}
 800df2a:	bf00      	nop
 800df2c:	3708      	adds	r7, #8
 800df2e:	46bd      	mov	sp, r7
 800df30:	bd80      	pop	{r7, pc}
 800df32:	bf00      	nop
 800df34:	20008c56 	.word	0x20008c56
 800df38:	2000fad8 	.word	0x2000fad8
 800df3c:	2000fad4 	.word	0x2000fad4

0800df40 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800df40:	b590      	push	{r4, r7, lr}
 800df42:	b085      	sub	sp, #20
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d109      	bne.n	800df62 <tcp_process_refused_data+0x22>
 800df4e:	4b37      	ldr	r3, [pc, #220]	; (800e02c <tcp_process_refused_data+0xec>)
 800df50:	f240 6209 	movw	r2, #1545	; 0x609
 800df54:	4936      	ldr	r1, [pc, #216]	; (800e030 <tcp_process_refused_data+0xf0>)
 800df56:	4837      	ldr	r0, [pc, #220]	; (800e034 <tcp_process_refused_data+0xf4>)
 800df58:	f00a f91a 	bl	8018190 <iprintf>
 800df5c:	f06f 030f 	mvn.w	r3, #15
 800df60:	e060      	b.n	800e024 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800df66:	7b5b      	ldrb	r3, [r3, #13]
 800df68:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800df6e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	2200      	movs	r2, #0
 800df74:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d00b      	beq.n	800df98 <tcp_process_refused_data+0x58>
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	6918      	ldr	r0, [r3, #16]
 800df8a:	2300      	movs	r3, #0
 800df8c:	68ba      	ldr	r2, [r7, #8]
 800df8e:	6879      	ldr	r1, [r7, #4]
 800df90:	47a0      	blx	r4
 800df92:	4603      	mov	r3, r0
 800df94:	73fb      	strb	r3, [r7, #15]
 800df96:	e007      	b.n	800dfa8 <tcp_process_refused_data+0x68>
 800df98:	2300      	movs	r3, #0
 800df9a:	68ba      	ldr	r2, [r7, #8]
 800df9c:	6879      	ldr	r1, [r7, #4]
 800df9e:	2000      	movs	r0, #0
 800dfa0:	f000 f8c0 	bl	800e124 <tcp_recv_null>
 800dfa4:	4603      	mov	r3, r0
 800dfa6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800dfa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d12a      	bne.n	800e006 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800dfb0:	7bbb      	ldrb	r3, [r7, #14]
 800dfb2:	f003 0320 	and.w	r3, r3, #32
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d033      	beq.n	800e022 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dfbe:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800dfc2:	d005      	beq.n	800dfd0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dfc8:	3301      	adds	r3, #1
 800dfca:	b29a      	uxth	r2, r3
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d00b      	beq.n	800dff2 <tcp_process_refused_data+0xb2>
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	6918      	ldr	r0, [r3, #16]
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	6879      	ldr	r1, [r7, #4]
 800dfea:	47a0      	blx	r4
 800dfec:	4603      	mov	r3, r0
 800dfee:	73fb      	strb	r3, [r7, #15]
 800dff0:	e001      	b.n	800dff6 <tcp_process_refused_data+0xb6>
 800dff2:	2300      	movs	r3, #0
 800dff4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800dff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dffa:	f113 0f0d 	cmn.w	r3, #13
 800dffe:	d110      	bne.n	800e022 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800e000:	f06f 030c 	mvn.w	r3, #12
 800e004:	e00e      	b.n	800e024 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800e006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e00a:	f113 0f0d 	cmn.w	r3, #13
 800e00e:	d102      	bne.n	800e016 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800e010:	f06f 030c 	mvn.w	r3, #12
 800e014:	e006      	b.n	800e024 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	68ba      	ldr	r2, [r7, #8]
 800e01a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800e01c:	f06f 0304 	mvn.w	r3, #4
 800e020:	e000      	b.n	800e024 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800e022:	2300      	movs	r3, #0
}
 800e024:	4618      	mov	r0, r3
 800e026:	3714      	adds	r7, #20
 800e028:	46bd      	mov	sp, r7
 800e02a:	bd90      	pop	{r4, r7, pc}
 800e02c:	0801adb0 	.word	0x0801adb0
 800e030:	0801b2c0 	.word	0x0801b2c0
 800e034:	0801adf4 	.word	0x0801adf4

0800e038 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b084      	sub	sp, #16
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800e040:	e007      	b.n	800e052 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800e048:	6878      	ldr	r0, [r7, #4]
 800e04a:	f000 f809 	bl	800e060 <tcp_seg_free>
    seg = next;
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d1f4      	bne.n	800e042 <tcp_segs_free+0xa>
  }
}
 800e058:	bf00      	nop
 800e05a:	3710      	adds	r7, #16
 800e05c:	46bd      	mov	sp, r7
 800e05e:	bd80      	pop	{r7, pc}

0800e060 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b082      	sub	sp, #8
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d00c      	beq.n	800e088 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	685b      	ldr	r3, [r3, #4]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d004      	beq.n	800e080 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	685b      	ldr	r3, [r3, #4]
 800e07a:	4618      	mov	r0, r3
 800e07c:	f7fe fb58 	bl	800c730 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800e080:	6879      	ldr	r1, [r7, #4]
 800e082:	2003      	movs	r0, #3
 800e084:	f7fd fd26 	bl	800bad4 <memp_free>
  }
}
 800e088:	bf00      	nop
 800e08a:	3708      	adds	r7, #8
 800e08c:	46bd      	mov	sp, r7
 800e08e:	bd80      	pop	{r7, pc}

0800e090 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b082      	sub	sp, #8
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
 800e098:	460b      	mov	r3, r1
 800e09a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d107      	bne.n	800e0b2 <tcp_setprio+0x22>
 800e0a2:	4b07      	ldr	r3, [pc, #28]	; (800e0c0 <tcp_setprio+0x30>)
 800e0a4:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800e0a8:	4906      	ldr	r1, [pc, #24]	; (800e0c4 <tcp_setprio+0x34>)
 800e0aa:	4807      	ldr	r0, [pc, #28]	; (800e0c8 <tcp_setprio+0x38>)
 800e0ac:	f00a f870 	bl	8018190 <iprintf>
 800e0b0:	e002      	b.n	800e0b8 <tcp_setprio+0x28>

  pcb->prio = prio;
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	78fa      	ldrb	r2, [r7, #3]
 800e0b6:	755a      	strb	r2, [r3, #21]
}
 800e0b8:	3708      	adds	r7, #8
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	bd80      	pop	{r7, pc}
 800e0be:	bf00      	nop
 800e0c0:	0801adb0 	.word	0x0801adb0
 800e0c4:	0801b2e8 	.word	0x0801b2e8
 800e0c8:	0801adf4 	.word	0x0801adf4

0800e0cc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	b084      	sub	sp, #16
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d106      	bne.n	800e0e8 <tcp_seg_copy+0x1c>
 800e0da:	4b0f      	ldr	r3, [pc, #60]	; (800e118 <tcp_seg_copy+0x4c>)
 800e0dc:	f240 6282 	movw	r2, #1666	; 0x682
 800e0e0:	490e      	ldr	r1, [pc, #56]	; (800e11c <tcp_seg_copy+0x50>)
 800e0e2:	480f      	ldr	r0, [pc, #60]	; (800e120 <tcp_seg_copy+0x54>)
 800e0e4:	f00a f854 	bl	8018190 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800e0e8:	2003      	movs	r0, #3
 800e0ea:	f7fd fca1 	bl	800ba30 <memp_malloc>
 800e0ee:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d101      	bne.n	800e0fa <tcp_seg_copy+0x2e>
    return NULL;
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	e00a      	b.n	800e110 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800e0fa:	2210      	movs	r2, #16
 800e0fc:	6879      	ldr	r1, [r7, #4]
 800e0fe:	68f8      	ldr	r0, [r7, #12]
 800e100:	f00a f819 	bl	8018136 <memcpy>
  pbuf_ref(cseg->p);
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	685b      	ldr	r3, [r3, #4]
 800e108:	4618      	mov	r0, r3
 800e10a:	f7fe fbb7 	bl	800c87c <pbuf_ref>
  return cseg;
 800e10e:	68fb      	ldr	r3, [r7, #12]
}
 800e110:	4618      	mov	r0, r3
 800e112:	3710      	adds	r7, #16
 800e114:	46bd      	mov	sp, r7
 800e116:	bd80      	pop	{r7, pc}
 800e118:	0801adb0 	.word	0x0801adb0
 800e11c:	0801b304 	.word	0x0801b304
 800e120:	0801adf4 	.word	0x0801adf4

0800e124 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b084      	sub	sp, #16
 800e128:	af00      	add	r7, sp, #0
 800e12a:	60f8      	str	r0, [r7, #12]
 800e12c:	60b9      	str	r1, [r7, #8]
 800e12e:	607a      	str	r2, [r7, #4]
 800e130:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800e132:	68bb      	ldr	r3, [r7, #8]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d109      	bne.n	800e14c <tcp_recv_null+0x28>
 800e138:	4b12      	ldr	r3, [pc, #72]	; (800e184 <tcp_recv_null+0x60>)
 800e13a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e13e:	4912      	ldr	r1, [pc, #72]	; (800e188 <tcp_recv_null+0x64>)
 800e140:	4812      	ldr	r0, [pc, #72]	; (800e18c <tcp_recv_null+0x68>)
 800e142:	f00a f825 	bl	8018190 <iprintf>
 800e146:	f06f 030f 	mvn.w	r3, #15
 800e14a:	e016      	b.n	800e17a <tcp_recv_null+0x56>

  if (p != NULL) {
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d009      	beq.n	800e166 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	891b      	ldrh	r3, [r3, #8]
 800e156:	4619      	mov	r1, r3
 800e158:	68b8      	ldr	r0, [r7, #8]
 800e15a:	f7ff fab9 	bl	800d6d0 <tcp_recved>
    pbuf_free(p);
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	f7fe fae6 	bl	800c730 <pbuf_free>
 800e164:	e008      	b.n	800e178 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800e166:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d104      	bne.n	800e178 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800e16e:	68b8      	ldr	r0, [r7, #8]
 800e170:	f7fe ff90 	bl	800d094 <tcp_close>
 800e174:	4603      	mov	r3, r0
 800e176:	e000      	b.n	800e17a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800e178:	2300      	movs	r3, #0
}
 800e17a:	4618      	mov	r0, r3
 800e17c:	3710      	adds	r7, #16
 800e17e:	46bd      	mov	sp, r7
 800e180:	bd80      	pop	{r7, pc}
 800e182:	bf00      	nop
 800e184:	0801adb0 	.word	0x0801adb0
 800e188:	0801b320 	.word	0x0801b320
 800e18c:	0801adf4 	.word	0x0801adf4

0800e190 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b086      	sub	sp, #24
 800e194:	af00      	add	r7, sp, #0
 800e196:	4603      	mov	r3, r0
 800e198:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800e19a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	db01      	blt.n	800e1a6 <tcp_kill_prio+0x16>
 800e1a2:	79fb      	ldrb	r3, [r7, #7]
 800e1a4:	e000      	b.n	800e1a8 <tcp_kill_prio+0x18>
 800e1a6:	237f      	movs	r3, #127	; 0x7f
 800e1a8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800e1aa:	7afb      	ldrb	r3, [r7, #11]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d034      	beq.n	800e21a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800e1b0:	7afb      	ldrb	r3, [r7, #11]
 800e1b2:	3b01      	subs	r3, #1
 800e1b4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e1be:	4b19      	ldr	r3, [pc, #100]	; (800e224 <tcp_kill_prio+0x94>)
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	617b      	str	r3, [r7, #20]
 800e1c4:	e01f      	b.n	800e206 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800e1c6:	697b      	ldr	r3, [r7, #20]
 800e1c8:	7d5b      	ldrb	r3, [r3, #21]
 800e1ca:	7afa      	ldrb	r2, [r7, #11]
 800e1cc:	429a      	cmp	r2, r3
 800e1ce:	d80c      	bhi.n	800e1ea <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e1d0:	697b      	ldr	r3, [r7, #20]
 800e1d2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800e1d4:	7afa      	ldrb	r2, [r7, #11]
 800e1d6:	429a      	cmp	r2, r3
 800e1d8:	d112      	bne.n	800e200 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e1da:	4b13      	ldr	r3, [pc, #76]	; (800e228 <tcp_kill_prio+0x98>)
 800e1dc:	681a      	ldr	r2, [r3, #0]
 800e1de:	697b      	ldr	r3, [r7, #20]
 800e1e0:	6a1b      	ldr	r3, [r3, #32]
 800e1e2:	1ad3      	subs	r3, r2, r3
 800e1e4:	68fa      	ldr	r2, [r7, #12]
 800e1e6:	429a      	cmp	r2, r3
 800e1e8:	d80a      	bhi.n	800e200 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800e1ea:	4b0f      	ldr	r3, [pc, #60]	; (800e228 <tcp_kill_prio+0x98>)
 800e1ec:	681a      	ldr	r2, [r3, #0]
 800e1ee:	697b      	ldr	r3, [r7, #20]
 800e1f0:	6a1b      	ldr	r3, [r3, #32]
 800e1f2:	1ad3      	subs	r3, r2, r3
 800e1f4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800e1f6:	697b      	ldr	r3, [r7, #20]
 800e1f8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800e1fa:	697b      	ldr	r3, [r7, #20]
 800e1fc:	7d5b      	ldrb	r3, [r3, #21]
 800e1fe:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e200:	697b      	ldr	r3, [r7, #20]
 800e202:	68db      	ldr	r3, [r3, #12]
 800e204:	617b      	str	r3, [r7, #20]
 800e206:	697b      	ldr	r3, [r7, #20]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d1dc      	bne.n	800e1c6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800e20c:	693b      	ldr	r3, [r7, #16]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d004      	beq.n	800e21c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e212:	6938      	ldr	r0, [r7, #16]
 800e214:	f7ff f882 	bl	800d31c <tcp_abort>
 800e218:	e000      	b.n	800e21c <tcp_kill_prio+0x8c>
    return;
 800e21a:	bf00      	nop
  }
}
 800e21c:	3718      	adds	r7, #24
 800e21e:	46bd      	mov	sp, r7
 800e220:	bd80      	pop	{r7, pc}
 800e222:	bf00      	nop
 800e224:	2000fad8 	.word	0x2000fad8
 800e228:	2000fadc 	.word	0x2000fadc

0800e22c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b086      	sub	sp, #24
 800e230:	af00      	add	r7, sp, #0
 800e232:	4603      	mov	r3, r0
 800e234:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800e236:	79fb      	ldrb	r3, [r7, #7]
 800e238:	2b08      	cmp	r3, #8
 800e23a:	d009      	beq.n	800e250 <tcp_kill_state+0x24>
 800e23c:	79fb      	ldrb	r3, [r7, #7]
 800e23e:	2b09      	cmp	r3, #9
 800e240:	d006      	beq.n	800e250 <tcp_kill_state+0x24>
 800e242:	4b1a      	ldr	r3, [pc, #104]	; (800e2ac <tcp_kill_state+0x80>)
 800e244:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800e248:	4919      	ldr	r1, [pc, #100]	; (800e2b0 <tcp_kill_state+0x84>)
 800e24a:	481a      	ldr	r0, [pc, #104]	; (800e2b4 <tcp_kill_state+0x88>)
 800e24c:	f009 ffa0 	bl	8018190 <iprintf>

  inactivity = 0;
 800e250:	2300      	movs	r3, #0
 800e252:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e254:	2300      	movs	r3, #0
 800e256:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e258:	4b17      	ldr	r3, [pc, #92]	; (800e2b8 <tcp_kill_state+0x8c>)
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	617b      	str	r3, [r7, #20]
 800e25e:	e017      	b.n	800e290 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800e260:	697b      	ldr	r3, [r7, #20]
 800e262:	7d1b      	ldrb	r3, [r3, #20]
 800e264:	79fa      	ldrb	r2, [r7, #7]
 800e266:	429a      	cmp	r2, r3
 800e268:	d10f      	bne.n	800e28a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e26a:	4b14      	ldr	r3, [pc, #80]	; (800e2bc <tcp_kill_state+0x90>)
 800e26c:	681a      	ldr	r2, [r3, #0]
 800e26e:	697b      	ldr	r3, [r7, #20]
 800e270:	6a1b      	ldr	r3, [r3, #32]
 800e272:	1ad3      	subs	r3, r2, r3
 800e274:	68fa      	ldr	r2, [r7, #12]
 800e276:	429a      	cmp	r2, r3
 800e278:	d807      	bhi.n	800e28a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800e27a:	4b10      	ldr	r3, [pc, #64]	; (800e2bc <tcp_kill_state+0x90>)
 800e27c:	681a      	ldr	r2, [r3, #0]
 800e27e:	697b      	ldr	r3, [r7, #20]
 800e280:	6a1b      	ldr	r3, [r3, #32]
 800e282:	1ad3      	subs	r3, r2, r3
 800e284:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800e286:	697b      	ldr	r3, [r7, #20]
 800e288:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e28a:	697b      	ldr	r3, [r7, #20]
 800e28c:	68db      	ldr	r3, [r3, #12]
 800e28e:	617b      	str	r3, [r7, #20]
 800e290:	697b      	ldr	r3, [r7, #20]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d1e4      	bne.n	800e260 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800e296:	693b      	ldr	r3, [r7, #16]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d003      	beq.n	800e2a4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800e29c:	2100      	movs	r1, #0
 800e29e:	6938      	ldr	r0, [r7, #16]
 800e2a0:	f7fe ff7e 	bl	800d1a0 <tcp_abandon>
  }
}
 800e2a4:	bf00      	nop
 800e2a6:	3718      	adds	r7, #24
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	bd80      	pop	{r7, pc}
 800e2ac:	0801adb0 	.word	0x0801adb0
 800e2b0:	0801b33c 	.word	0x0801b33c
 800e2b4:	0801adf4 	.word	0x0801adf4
 800e2b8:	2000fad8 	.word	0x2000fad8
 800e2bc:	2000fadc 	.word	0x2000fadc

0800e2c0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b084      	sub	sp, #16
 800e2c4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e2ce:	4b12      	ldr	r3, [pc, #72]	; (800e318 <tcp_kill_timewait+0x58>)
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	60fb      	str	r3, [r7, #12]
 800e2d4:	e012      	b.n	800e2fc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e2d6:	4b11      	ldr	r3, [pc, #68]	; (800e31c <tcp_kill_timewait+0x5c>)
 800e2d8:	681a      	ldr	r2, [r3, #0]
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	6a1b      	ldr	r3, [r3, #32]
 800e2de:	1ad3      	subs	r3, r2, r3
 800e2e0:	687a      	ldr	r2, [r7, #4]
 800e2e2:	429a      	cmp	r2, r3
 800e2e4:	d807      	bhi.n	800e2f6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800e2e6:	4b0d      	ldr	r3, [pc, #52]	; (800e31c <tcp_kill_timewait+0x5c>)
 800e2e8:	681a      	ldr	r2, [r3, #0]
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	6a1b      	ldr	r3, [r3, #32]
 800e2ee:	1ad3      	subs	r3, r2, r3
 800e2f0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	68db      	ldr	r3, [r3, #12]
 800e2fa:	60fb      	str	r3, [r7, #12]
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d1e9      	bne.n	800e2d6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800e302:	68bb      	ldr	r3, [r7, #8]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d002      	beq.n	800e30e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e308:	68b8      	ldr	r0, [r7, #8]
 800e30a:	f7ff f807 	bl	800d31c <tcp_abort>
  }
}
 800e30e:	bf00      	nop
 800e310:	3710      	adds	r7, #16
 800e312:	46bd      	mov	sp, r7
 800e314:	bd80      	pop	{r7, pc}
 800e316:	bf00      	nop
 800e318:	2000fae8 	.word	0x2000fae8
 800e31c:	2000fadc 	.word	0x2000fadc

0800e320 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b082      	sub	sp, #8
 800e324:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800e326:	4b10      	ldr	r3, [pc, #64]	; (800e368 <tcp_handle_closepend+0x48>)
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e32c:	e014      	b.n	800e358 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	68db      	ldr	r3, [r3, #12]
 800e332:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	8b5b      	ldrh	r3, [r3, #26]
 800e338:	f003 0308 	and.w	r3, r3, #8
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d009      	beq.n	800e354 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	8b5b      	ldrh	r3, [r3, #26]
 800e344:	f023 0308 	bic.w	r3, r3, #8
 800e348:	b29a      	uxth	r2, r3
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800e34e:	6878      	ldr	r0, [r7, #4]
 800e350:	f7fe fe3a 	bl	800cfc8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800e354:	683b      	ldr	r3, [r7, #0]
 800e356:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d1e7      	bne.n	800e32e <tcp_handle_closepend+0xe>
  }
}
 800e35e:	bf00      	nop
 800e360:	3708      	adds	r7, #8
 800e362:	46bd      	mov	sp, r7
 800e364:	bd80      	pop	{r7, pc}
 800e366:	bf00      	nop
 800e368:	2000fad8 	.word	0x2000fad8

0800e36c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b084      	sub	sp, #16
 800e370:	af00      	add	r7, sp, #0
 800e372:	4603      	mov	r3, r0
 800e374:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e376:	2001      	movs	r0, #1
 800e378:	f7fd fb5a 	bl	800ba30 <memp_malloc>
 800e37c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d126      	bne.n	800e3d2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800e384:	f7ff ffcc 	bl	800e320 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800e388:	f7ff ff9a 	bl	800e2c0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e38c:	2001      	movs	r0, #1
 800e38e:	f7fd fb4f 	bl	800ba30 <memp_malloc>
 800e392:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d11b      	bne.n	800e3d2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800e39a:	2009      	movs	r0, #9
 800e39c:	f7ff ff46 	bl	800e22c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e3a0:	2001      	movs	r0, #1
 800e3a2:	f7fd fb45 	bl	800ba30 <memp_malloc>
 800e3a6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d111      	bne.n	800e3d2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800e3ae:	2008      	movs	r0, #8
 800e3b0:	f7ff ff3c 	bl	800e22c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e3b4:	2001      	movs	r0, #1
 800e3b6:	f7fd fb3b 	bl	800ba30 <memp_malloc>
 800e3ba:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d107      	bne.n	800e3d2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800e3c2:	79fb      	ldrb	r3, [r7, #7]
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	f7ff fee3 	bl	800e190 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e3ca:	2001      	movs	r0, #1
 800e3cc:	f7fd fb30 	bl	800ba30 <memp_malloc>
 800e3d0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d03f      	beq.n	800e458 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800e3d8:	229c      	movs	r2, #156	; 0x9c
 800e3da:	2100      	movs	r1, #0
 800e3dc:	68f8      	ldr	r0, [r7, #12]
 800e3de:	f009 fece 	bl	801817e <memset>
    pcb->prio = prio;
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	79fa      	ldrb	r2, [r7, #7]
 800e3e6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e3ee:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e3f8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	22ff      	movs	r2, #255	; 0xff
 800e406:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e40e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	2206      	movs	r2, #6
 800e414:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	2206      	movs	r2, #6
 800e41c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e424:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	2201      	movs	r2, #1
 800e42a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800e42e:	4b0d      	ldr	r3, [pc, #52]	; (800e464 <tcp_alloc+0xf8>)
 800e430:	681a      	ldr	r2, [r3, #0]
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800e436:	4b0c      	ldr	r3, [pc, #48]	; (800e468 <tcp_alloc+0xfc>)
 800e438:	781a      	ldrb	r2, [r3, #0]
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e444:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	4a08      	ldr	r2, [pc, #32]	; (800e46c <tcp_alloc+0x100>)
 800e44c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	4a07      	ldr	r2, [pc, #28]	; (800e470 <tcp_alloc+0x104>)
 800e454:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800e458:	68fb      	ldr	r3, [r7, #12]
}
 800e45a:	4618      	mov	r0, r3
 800e45c:	3710      	adds	r7, #16
 800e45e:	46bd      	mov	sp, r7
 800e460:	bd80      	pop	{r7, pc}
 800e462:	bf00      	nop
 800e464:	2000fadc 	.word	0x2000fadc
 800e468:	20008c56 	.word	0x20008c56
 800e46c:	0800e125 	.word	0x0800e125
 800e470:	006ddd00 	.word	0x006ddd00

0800e474 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b084      	sub	sp, #16
 800e478:	af00      	add	r7, sp, #0
 800e47a:	4603      	mov	r3, r0
 800e47c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800e47e:	2040      	movs	r0, #64	; 0x40
 800e480:	f7ff ff74 	bl	800e36c <tcp_alloc>
 800e484:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800e486:	68fb      	ldr	r3, [r7, #12]
}
 800e488:	4618      	mov	r0, r3
 800e48a:	3710      	adds	r7, #16
 800e48c:	46bd      	mov	sp, r7
 800e48e:	bd80      	pop	{r7, pc}

0800e490 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800e490:	b480      	push	{r7}
 800e492:	b083      	sub	sp, #12
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
 800e498:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d002      	beq.n	800e4a6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	683a      	ldr	r2, [r7, #0]
 800e4a4:	611a      	str	r2, [r3, #16]
  }
}
 800e4a6:	bf00      	nop
 800e4a8:	370c      	adds	r7, #12
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b0:	4770      	bx	lr
	...

0800e4b4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	b082      	sub	sp, #8
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	6078      	str	r0, [r7, #4]
 800e4bc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d00e      	beq.n	800e4e2 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	7d1b      	ldrb	r3, [r3, #20]
 800e4c8:	2b01      	cmp	r3, #1
 800e4ca:	d106      	bne.n	800e4da <tcp_recv+0x26>
 800e4cc:	4b07      	ldr	r3, [pc, #28]	; (800e4ec <tcp_recv+0x38>)
 800e4ce:	f240 72df 	movw	r2, #2015	; 0x7df
 800e4d2:	4907      	ldr	r1, [pc, #28]	; (800e4f0 <tcp_recv+0x3c>)
 800e4d4:	4807      	ldr	r0, [pc, #28]	; (800e4f4 <tcp_recv+0x40>)
 800e4d6:	f009 fe5b 	bl	8018190 <iprintf>
    pcb->recv = recv;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	683a      	ldr	r2, [r7, #0]
 800e4de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800e4e2:	bf00      	nop
 800e4e4:	3708      	adds	r7, #8
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	bd80      	pop	{r7, pc}
 800e4ea:	bf00      	nop
 800e4ec:	0801adb0 	.word	0x0801adb0
 800e4f0:	0801b34c 	.word	0x0801b34c
 800e4f4:	0801adf4 	.word	0x0801adf4

0800e4f8 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b082      	sub	sp, #8
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	6078      	str	r0, [r7, #4]
 800e500:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d00e      	beq.n	800e526 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	7d1b      	ldrb	r3, [r3, #20]
 800e50c:	2b01      	cmp	r3, #1
 800e50e:	d106      	bne.n	800e51e <tcp_sent+0x26>
 800e510:	4b07      	ldr	r3, [pc, #28]	; (800e530 <tcp_sent+0x38>)
 800e512:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800e516:	4907      	ldr	r1, [pc, #28]	; (800e534 <tcp_sent+0x3c>)
 800e518:	4807      	ldr	r0, [pc, #28]	; (800e538 <tcp_sent+0x40>)
 800e51a:	f009 fe39 	bl	8018190 <iprintf>
    pcb->sent = sent;
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	683a      	ldr	r2, [r7, #0]
 800e522:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800e526:	bf00      	nop
 800e528:	3708      	adds	r7, #8
 800e52a:	46bd      	mov	sp, r7
 800e52c:	bd80      	pop	{r7, pc}
 800e52e:	bf00      	nop
 800e530:	0801adb0 	.word	0x0801adb0
 800e534:	0801b374 	.word	0x0801b374
 800e538:	0801adf4 	.word	0x0801adf4

0800e53c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b082      	sub	sp, #8
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
 800e544:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d00e      	beq.n	800e56a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	7d1b      	ldrb	r3, [r3, #20]
 800e550:	2b01      	cmp	r3, #1
 800e552:	d106      	bne.n	800e562 <tcp_err+0x26>
 800e554:	4b07      	ldr	r3, [pc, #28]	; (800e574 <tcp_err+0x38>)
 800e556:	f640 020d 	movw	r2, #2061	; 0x80d
 800e55a:	4907      	ldr	r1, [pc, #28]	; (800e578 <tcp_err+0x3c>)
 800e55c:	4807      	ldr	r0, [pc, #28]	; (800e57c <tcp_err+0x40>)
 800e55e:	f009 fe17 	bl	8018190 <iprintf>
    pcb->errf = err;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	683a      	ldr	r2, [r7, #0]
 800e566:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800e56a:	bf00      	nop
 800e56c:	3708      	adds	r7, #8
 800e56e:	46bd      	mov	sp, r7
 800e570:	bd80      	pop	{r7, pc}
 800e572:	bf00      	nop
 800e574:	0801adb0 	.word	0x0801adb0
 800e578:	0801b39c 	.word	0x0801b39c
 800e57c:	0801adf4 	.word	0x0801adf4

0800e580 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800e580:	b480      	push	{r7}
 800e582:	b085      	sub	sp, #20
 800e584:	af00      	add	r7, sp, #0
 800e586:	6078      	str	r0, [r7, #4]
 800e588:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d008      	beq.n	800e5a2 <tcp_accept+0x22>
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	7d1b      	ldrb	r3, [r3, #20]
 800e594:	2b01      	cmp	r3, #1
 800e596:	d104      	bne.n	800e5a2 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	683a      	ldr	r2, [r7, #0]
 800e5a0:	619a      	str	r2, [r3, #24]
  }
}
 800e5a2:	bf00      	nop
 800e5a4:	3714      	adds	r7, #20
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ac:	4770      	bx	lr
	...

0800e5b0 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b084      	sub	sp, #16
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	60f8      	str	r0, [r7, #12]
 800e5b8:	60b9      	str	r1, [r7, #8]
 800e5ba:	4613      	mov	r3, r2
 800e5bc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d107      	bne.n	800e5d4 <tcp_poll+0x24>
 800e5c4:	4b0e      	ldr	r3, [pc, #56]	; (800e600 <tcp_poll+0x50>)
 800e5c6:	f640 023d 	movw	r2, #2109	; 0x83d
 800e5ca:	490e      	ldr	r1, [pc, #56]	; (800e604 <tcp_poll+0x54>)
 800e5cc:	480e      	ldr	r0, [pc, #56]	; (800e608 <tcp_poll+0x58>)
 800e5ce:	f009 fddf 	bl	8018190 <iprintf>
 800e5d2:	e011      	b.n	800e5f8 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	7d1b      	ldrb	r3, [r3, #20]
 800e5d8:	2b01      	cmp	r3, #1
 800e5da:	d106      	bne.n	800e5ea <tcp_poll+0x3a>
 800e5dc:	4b08      	ldr	r3, [pc, #32]	; (800e600 <tcp_poll+0x50>)
 800e5de:	f640 023e 	movw	r2, #2110	; 0x83e
 800e5e2:	490a      	ldr	r1, [pc, #40]	; (800e60c <tcp_poll+0x5c>)
 800e5e4:	4808      	ldr	r0, [pc, #32]	; (800e608 <tcp_poll+0x58>)
 800e5e6:	f009 fdd3 	bl	8018190 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	68ba      	ldr	r2, [r7, #8]
 800e5ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	79fa      	ldrb	r2, [r7, #7]
 800e5f6:	775a      	strb	r2, [r3, #29]
}
 800e5f8:	3710      	adds	r7, #16
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	bd80      	pop	{r7, pc}
 800e5fe:	bf00      	nop
 800e600:	0801adb0 	.word	0x0801adb0
 800e604:	0801b3c4 	.word	0x0801b3c4
 800e608:	0801adf4 	.word	0x0801adf4
 800e60c:	0801b3dc 	.word	0x0801b3dc

0800e610 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b082      	sub	sp, #8
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d107      	bne.n	800e62e <tcp_pcb_purge+0x1e>
 800e61e:	4b21      	ldr	r3, [pc, #132]	; (800e6a4 <tcp_pcb_purge+0x94>)
 800e620:	f640 0251 	movw	r2, #2129	; 0x851
 800e624:	4920      	ldr	r1, [pc, #128]	; (800e6a8 <tcp_pcb_purge+0x98>)
 800e626:	4821      	ldr	r0, [pc, #132]	; (800e6ac <tcp_pcb_purge+0x9c>)
 800e628:	f009 fdb2 	bl	8018190 <iprintf>
 800e62c:	e037      	b.n	800e69e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	7d1b      	ldrb	r3, [r3, #20]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d033      	beq.n	800e69e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800e63a:	2b0a      	cmp	r3, #10
 800e63c:	d02f      	beq.n	800e69e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800e642:	2b01      	cmp	r3, #1
 800e644:	d02b      	beq.n	800e69e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d007      	beq.n	800e65e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e652:	4618      	mov	r0, r3
 800e654:	f7fe f86c 	bl	800c730 <pbuf_free>
      pcb->refused_data = NULL;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	2200      	movs	r2, #0
 800e65c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e662:	2b00      	cmp	r3, #0
 800e664:	d002      	beq.n	800e66c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800e666:	6878      	ldr	r0, [r7, #4]
 800e668:	f000 f986 	bl	800e978 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e672:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e678:	4618      	mov	r0, r3
 800e67a:	f7ff fcdd 	bl	800e038 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e682:	4618      	mov	r0, r3
 800e684:	f7ff fcd8 	bl	800e038 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	2200      	movs	r2, #0
 800e68c:	66da      	str	r2, [r3, #108]	; 0x6c
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	2200      	movs	r2, #0
 800e69a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800e69e:	3708      	adds	r7, #8
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	bd80      	pop	{r7, pc}
 800e6a4:	0801adb0 	.word	0x0801adb0
 800e6a8:	0801b3fc 	.word	0x0801b3fc
 800e6ac:	0801adf4 	.word	0x0801adf4

0800e6b0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	b084      	sub	sp, #16
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	6078      	str	r0, [r7, #4]
 800e6b8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800e6ba:	683b      	ldr	r3, [r7, #0]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d106      	bne.n	800e6ce <tcp_pcb_remove+0x1e>
 800e6c0:	4b3e      	ldr	r3, [pc, #248]	; (800e7bc <tcp_pcb_remove+0x10c>)
 800e6c2:	f640 0283 	movw	r2, #2179	; 0x883
 800e6c6:	493e      	ldr	r1, [pc, #248]	; (800e7c0 <tcp_pcb_remove+0x110>)
 800e6c8:	483e      	ldr	r0, [pc, #248]	; (800e7c4 <tcp_pcb_remove+0x114>)
 800e6ca:	f009 fd61 	bl	8018190 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d106      	bne.n	800e6e2 <tcp_pcb_remove+0x32>
 800e6d4:	4b39      	ldr	r3, [pc, #228]	; (800e7bc <tcp_pcb_remove+0x10c>)
 800e6d6:	f640 0284 	movw	r2, #2180	; 0x884
 800e6da:	493b      	ldr	r1, [pc, #236]	; (800e7c8 <tcp_pcb_remove+0x118>)
 800e6dc:	4839      	ldr	r0, [pc, #228]	; (800e7c4 <tcp_pcb_remove+0x114>)
 800e6de:	f009 fd57 	bl	8018190 <iprintf>

  TCP_RMV(pcblist, pcb);
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	683a      	ldr	r2, [r7, #0]
 800e6e8:	429a      	cmp	r2, r3
 800e6ea:	d105      	bne.n	800e6f8 <tcp_pcb_remove+0x48>
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	68da      	ldr	r2, [r3, #12]
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	601a      	str	r2, [r3, #0]
 800e6f6:	e013      	b.n	800e720 <tcp_pcb_remove+0x70>
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	60fb      	str	r3, [r7, #12]
 800e6fe:	e00c      	b.n	800e71a <tcp_pcb_remove+0x6a>
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	68db      	ldr	r3, [r3, #12]
 800e704:	683a      	ldr	r2, [r7, #0]
 800e706:	429a      	cmp	r2, r3
 800e708:	d104      	bne.n	800e714 <tcp_pcb_remove+0x64>
 800e70a:	683b      	ldr	r3, [r7, #0]
 800e70c:	68da      	ldr	r2, [r3, #12]
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	60da      	str	r2, [r3, #12]
 800e712:	e005      	b.n	800e720 <tcp_pcb_remove+0x70>
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	68db      	ldr	r3, [r3, #12]
 800e718:	60fb      	str	r3, [r7, #12]
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d1ef      	bne.n	800e700 <tcp_pcb_remove+0x50>
 800e720:	683b      	ldr	r3, [r7, #0]
 800e722:	2200      	movs	r2, #0
 800e724:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800e726:	6838      	ldr	r0, [r7, #0]
 800e728:	f7ff ff72 	bl	800e610 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800e72c:	683b      	ldr	r3, [r7, #0]
 800e72e:	7d1b      	ldrb	r3, [r3, #20]
 800e730:	2b0a      	cmp	r3, #10
 800e732:	d013      	beq.n	800e75c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800e734:	683b      	ldr	r3, [r7, #0]
 800e736:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800e738:	2b01      	cmp	r3, #1
 800e73a:	d00f      	beq.n	800e75c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800e73c:	683b      	ldr	r3, [r7, #0]
 800e73e:	8b5b      	ldrh	r3, [r3, #26]
 800e740:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800e744:	2b00      	cmp	r3, #0
 800e746:	d009      	beq.n	800e75c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800e748:	683b      	ldr	r3, [r7, #0]
 800e74a:	8b5b      	ldrh	r3, [r3, #26]
 800e74c:	f043 0302 	orr.w	r3, r3, #2
 800e750:	b29a      	uxth	r2, r3
 800e752:	683b      	ldr	r3, [r7, #0]
 800e754:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e756:	6838      	ldr	r0, [r7, #0]
 800e758:	f003 fbc2 	bl	8011ee0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800e75c:	683b      	ldr	r3, [r7, #0]
 800e75e:	7d1b      	ldrb	r3, [r3, #20]
 800e760:	2b01      	cmp	r3, #1
 800e762:	d020      	beq.n	800e7a6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800e764:	683b      	ldr	r3, [r7, #0]
 800e766:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d006      	beq.n	800e77a <tcp_pcb_remove+0xca>
 800e76c:	4b13      	ldr	r3, [pc, #76]	; (800e7bc <tcp_pcb_remove+0x10c>)
 800e76e:	f640 0293 	movw	r2, #2195	; 0x893
 800e772:	4916      	ldr	r1, [pc, #88]	; (800e7cc <tcp_pcb_remove+0x11c>)
 800e774:	4813      	ldr	r0, [pc, #76]	; (800e7c4 <tcp_pcb_remove+0x114>)
 800e776:	f009 fd0b 	bl	8018190 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800e77a:	683b      	ldr	r3, [r7, #0]
 800e77c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d006      	beq.n	800e790 <tcp_pcb_remove+0xe0>
 800e782:	4b0e      	ldr	r3, [pc, #56]	; (800e7bc <tcp_pcb_remove+0x10c>)
 800e784:	f640 0294 	movw	r2, #2196	; 0x894
 800e788:	4911      	ldr	r1, [pc, #68]	; (800e7d0 <tcp_pcb_remove+0x120>)
 800e78a:	480e      	ldr	r0, [pc, #56]	; (800e7c4 <tcp_pcb_remove+0x114>)
 800e78c:	f009 fd00 	bl	8018190 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800e790:	683b      	ldr	r3, [r7, #0]
 800e792:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e794:	2b00      	cmp	r3, #0
 800e796:	d006      	beq.n	800e7a6 <tcp_pcb_remove+0xf6>
 800e798:	4b08      	ldr	r3, [pc, #32]	; (800e7bc <tcp_pcb_remove+0x10c>)
 800e79a:	f640 0296 	movw	r2, #2198	; 0x896
 800e79e:	490d      	ldr	r1, [pc, #52]	; (800e7d4 <tcp_pcb_remove+0x124>)
 800e7a0:	4808      	ldr	r0, [pc, #32]	; (800e7c4 <tcp_pcb_remove+0x114>)
 800e7a2:	f009 fcf5 	bl	8018190 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800e7a6:	683b      	ldr	r3, [r7, #0]
 800e7a8:	2200      	movs	r2, #0
 800e7aa:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800e7ac:	683b      	ldr	r3, [r7, #0]
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800e7b2:	bf00      	nop
 800e7b4:	3710      	adds	r7, #16
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	bd80      	pop	{r7, pc}
 800e7ba:	bf00      	nop
 800e7bc:	0801adb0 	.word	0x0801adb0
 800e7c0:	0801b418 	.word	0x0801b418
 800e7c4:	0801adf4 	.word	0x0801adf4
 800e7c8:	0801b434 	.word	0x0801b434
 800e7cc:	0801b454 	.word	0x0801b454
 800e7d0:	0801b46c 	.word	0x0801b46c
 800e7d4:	0801b488 	.word	0x0801b488

0800e7d8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b082      	sub	sp, #8
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d106      	bne.n	800e7f4 <tcp_next_iss+0x1c>
 800e7e6:	4b0a      	ldr	r3, [pc, #40]	; (800e810 <tcp_next_iss+0x38>)
 800e7e8:	f640 02af 	movw	r2, #2223	; 0x8af
 800e7ec:	4909      	ldr	r1, [pc, #36]	; (800e814 <tcp_next_iss+0x3c>)
 800e7ee:	480a      	ldr	r0, [pc, #40]	; (800e818 <tcp_next_iss+0x40>)
 800e7f0:	f009 fcce 	bl	8018190 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800e7f4:	4b09      	ldr	r3, [pc, #36]	; (800e81c <tcp_next_iss+0x44>)
 800e7f6:	681a      	ldr	r2, [r3, #0]
 800e7f8:	4b09      	ldr	r3, [pc, #36]	; (800e820 <tcp_next_iss+0x48>)
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	4413      	add	r3, r2
 800e7fe:	4a07      	ldr	r2, [pc, #28]	; (800e81c <tcp_next_iss+0x44>)
 800e800:	6013      	str	r3, [r2, #0]
  return iss;
 800e802:	4b06      	ldr	r3, [pc, #24]	; (800e81c <tcp_next_iss+0x44>)
 800e804:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800e806:	4618      	mov	r0, r3
 800e808:	3708      	adds	r7, #8
 800e80a:	46bd      	mov	sp, r7
 800e80c:	bd80      	pop	{r7, pc}
 800e80e:	bf00      	nop
 800e810:	0801adb0 	.word	0x0801adb0
 800e814:	0801b4a0 	.word	0x0801b4a0
 800e818:	0801adf4 	.word	0x0801adf4
 800e81c:	20000014 	.word	0x20000014
 800e820:	2000fadc 	.word	0x2000fadc

0800e824 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800e824:	b580      	push	{r7, lr}
 800e826:	b086      	sub	sp, #24
 800e828:	af00      	add	r7, sp, #0
 800e82a:	4603      	mov	r3, r0
 800e82c:	60b9      	str	r1, [r7, #8]
 800e82e:	607a      	str	r2, [r7, #4]
 800e830:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d106      	bne.n	800e846 <tcp_eff_send_mss_netif+0x22>
 800e838:	4b14      	ldr	r3, [pc, #80]	; (800e88c <tcp_eff_send_mss_netif+0x68>)
 800e83a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800e83e:	4914      	ldr	r1, [pc, #80]	; (800e890 <tcp_eff_send_mss_netif+0x6c>)
 800e840:	4814      	ldr	r0, [pc, #80]	; (800e894 <tcp_eff_send_mss_netif+0x70>)
 800e842:	f009 fca5 	bl	8018190 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800e846:	68bb      	ldr	r3, [r7, #8]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d101      	bne.n	800e850 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800e84c:	89fb      	ldrh	r3, [r7, #14]
 800e84e:	e019      	b.n	800e884 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800e850:	68bb      	ldr	r3, [r7, #8]
 800e852:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e854:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800e856:	8afb      	ldrh	r3, [r7, #22]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d012      	beq.n	800e882 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800e85c:	2328      	movs	r3, #40	; 0x28
 800e85e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800e860:	8afa      	ldrh	r2, [r7, #22]
 800e862:	8abb      	ldrh	r3, [r7, #20]
 800e864:	429a      	cmp	r2, r3
 800e866:	d904      	bls.n	800e872 <tcp_eff_send_mss_netif+0x4e>
 800e868:	8afa      	ldrh	r2, [r7, #22]
 800e86a:	8abb      	ldrh	r3, [r7, #20]
 800e86c:	1ad3      	subs	r3, r2, r3
 800e86e:	b29b      	uxth	r3, r3
 800e870:	e000      	b.n	800e874 <tcp_eff_send_mss_netif+0x50>
 800e872:	2300      	movs	r3, #0
 800e874:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800e876:	8a7a      	ldrh	r2, [r7, #18]
 800e878:	89fb      	ldrh	r3, [r7, #14]
 800e87a:	4293      	cmp	r3, r2
 800e87c:	bf28      	it	cs
 800e87e:	4613      	movcs	r3, r2
 800e880:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800e882:	89fb      	ldrh	r3, [r7, #14]
}
 800e884:	4618      	mov	r0, r3
 800e886:	3718      	adds	r7, #24
 800e888:	46bd      	mov	sp, r7
 800e88a:	bd80      	pop	{r7, pc}
 800e88c:	0801adb0 	.word	0x0801adb0
 800e890:	0801b4bc 	.word	0x0801b4bc
 800e894:	0801adf4 	.word	0x0801adf4

0800e898 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b084      	sub	sp, #16
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
 800e8a0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800e8a2:	683b      	ldr	r3, [r7, #0]
 800e8a4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d119      	bne.n	800e8e0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800e8ac:	4b10      	ldr	r3, [pc, #64]	; (800e8f0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800e8ae:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800e8b2:	4910      	ldr	r1, [pc, #64]	; (800e8f4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800e8b4:	4810      	ldr	r0, [pc, #64]	; (800e8f8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800e8b6:	f009 fc6b 	bl	8018190 <iprintf>

  while (pcb != NULL) {
 800e8ba:	e011      	b.n	800e8e0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	681a      	ldr	r2, [r3, #0]
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	429a      	cmp	r2, r3
 800e8c6:	d108      	bne.n	800e8da <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	68db      	ldr	r3, [r3, #12]
 800e8cc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800e8ce:	68f8      	ldr	r0, [r7, #12]
 800e8d0:	f7fe fd24 	bl	800d31c <tcp_abort>
      pcb = next;
 800e8d4:	68bb      	ldr	r3, [r7, #8]
 800e8d6:	60fb      	str	r3, [r7, #12]
 800e8d8:	e002      	b.n	800e8e0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	68db      	ldr	r3, [r3, #12]
 800e8de:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d1ea      	bne.n	800e8bc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800e8e6:	bf00      	nop
 800e8e8:	3710      	adds	r7, #16
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	bd80      	pop	{r7, pc}
 800e8ee:	bf00      	nop
 800e8f0:	0801adb0 	.word	0x0801adb0
 800e8f4:	0801b4e4 	.word	0x0801b4e4
 800e8f8:	0801adf4 	.word	0x0801adf4

0800e8fc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b084      	sub	sp, #16
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
 800e904:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d02a      	beq.n	800e962 <tcp_netif_ip_addr_changed+0x66>
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d026      	beq.n	800e962 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800e914:	4b15      	ldr	r3, [pc, #84]	; (800e96c <tcp_netif_ip_addr_changed+0x70>)
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	4619      	mov	r1, r3
 800e91a:	6878      	ldr	r0, [r7, #4]
 800e91c:	f7ff ffbc 	bl	800e898 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800e920:	4b13      	ldr	r3, [pc, #76]	; (800e970 <tcp_netif_ip_addr_changed+0x74>)
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	4619      	mov	r1, r3
 800e926:	6878      	ldr	r0, [r7, #4]
 800e928:	f7ff ffb6 	bl	800e898 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800e92c:	683b      	ldr	r3, [r7, #0]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d017      	beq.n	800e962 <tcp_netif_ip_addr_changed+0x66>
 800e932:	683b      	ldr	r3, [r7, #0]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d013      	beq.n	800e962 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e93a:	4b0e      	ldr	r3, [pc, #56]	; (800e974 <tcp_netif_ip_addr_changed+0x78>)
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	60fb      	str	r3, [r7, #12]
 800e940:	e00c      	b.n	800e95c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	681a      	ldr	r2, [r3, #0]
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	429a      	cmp	r2, r3
 800e94c:	d103      	bne.n	800e956 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800e94e:	683b      	ldr	r3, [r7, #0]
 800e950:	681a      	ldr	r2, [r3, #0]
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	68db      	ldr	r3, [r3, #12]
 800e95a:	60fb      	str	r3, [r7, #12]
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d1ef      	bne.n	800e942 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800e962:	bf00      	nop
 800e964:	3710      	adds	r7, #16
 800e966:	46bd      	mov	sp, r7
 800e968:	bd80      	pop	{r7, pc}
 800e96a:	bf00      	nop
 800e96c:	2000fad8 	.word	0x2000fad8
 800e970:	2000fae4 	.word	0x2000fae4
 800e974:	2000fae0 	.word	0x2000fae0

0800e978 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b082      	sub	sp, #8
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e984:	2b00      	cmp	r3, #0
 800e986:	d007      	beq.n	800e998 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e98c:	4618      	mov	r0, r3
 800e98e:	f7ff fb53 	bl	800e038 <tcp_segs_free>
    pcb->ooseq = NULL;
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	2200      	movs	r2, #0
 800e996:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800e998:	bf00      	nop
 800e99a:	3708      	adds	r7, #8
 800e99c:	46bd      	mov	sp, r7
 800e99e:	bd80      	pop	{r7, pc}

0800e9a0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800e9a0:	b590      	push	{r4, r7, lr}
 800e9a2:	b08d      	sub	sp, #52	; 0x34
 800e9a4:	af04      	add	r7, sp, #16
 800e9a6:	6078      	str	r0, [r7, #4]
 800e9a8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d105      	bne.n	800e9bc <tcp_input+0x1c>
 800e9b0:	4b9b      	ldr	r3, [pc, #620]	; (800ec20 <tcp_input+0x280>)
 800e9b2:	2283      	movs	r2, #131	; 0x83
 800e9b4:	499b      	ldr	r1, [pc, #620]	; (800ec24 <tcp_input+0x284>)
 800e9b6:	489c      	ldr	r0, [pc, #624]	; (800ec28 <tcp_input+0x288>)
 800e9b8:	f009 fbea 	bl	8018190 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	685b      	ldr	r3, [r3, #4]
 800e9c0:	4a9a      	ldr	r2, [pc, #616]	; (800ec2c <tcp_input+0x28c>)
 800e9c2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	895b      	ldrh	r3, [r3, #10]
 800e9c8:	2b13      	cmp	r3, #19
 800e9ca:	f240 83c4 	bls.w	800f156 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e9ce:	4b98      	ldr	r3, [pc, #608]	; (800ec30 <tcp_input+0x290>)
 800e9d0:	695a      	ldr	r2, [r3, #20]
 800e9d2:	4b97      	ldr	r3, [pc, #604]	; (800ec30 <tcp_input+0x290>)
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	4619      	mov	r1, r3
 800e9d8:	4610      	mov	r0, r2
 800e9da:	f008 fa2b 	bl	8016e34 <ip4_addr_isbroadcast_u32>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	f040 83ba 	bne.w	800f15a <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800e9e6:	4b92      	ldr	r3, [pc, #584]	; (800ec30 <tcp_input+0x290>)
 800e9e8:	695b      	ldr	r3, [r3, #20]
 800e9ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e9ee:	2be0      	cmp	r3, #224	; 0xe0
 800e9f0:	f000 83b3 	beq.w	800f15a <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800e9f4:	4b8d      	ldr	r3, [pc, #564]	; (800ec2c <tcp_input+0x28c>)
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	899b      	ldrh	r3, [r3, #12]
 800e9fa:	b29b      	uxth	r3, r3
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	f7fc fb2b 	bl	800b058 <lwip_htons>
 800ea02:	4603      	mov	r3, r0
 800ea04:	0b1b      	lsrs	r3, r3, #12
 800ea06:	b29b      	uxth	r3, r3
 800ea08:	b2db      	uxtb	r3, r3
 800ea0a:	009b      	lsls	r3, r3, #2
 800ea0c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800ea0e:	7cbb      	ldrb	r3, [r7, #18]
 800ea10:	2b13      	cmp	r3, #19
 800ea12:	f240 83a2 	bls.w	800f15a <tcp_input+0x7ba>
 800ea16:	7cbb      	ldrb	r3, [r7, #18]
 800ea18:	b29a      	uxth	r2, r3
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	891b      	ldrh	r3, [r3, #8]
 800ea1e:	429a      	cmp	r2, r3
 800ea20:	f200 839b 	bhi.w	800f15a <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800ea24:	7cbb      	ldrb	r3, [r7, #18]
 800ea26:	b29b      	uxth	r3, r3
 800ea28:	3b14      	subs	r3, #20
 800ea2a:	b29a      	uxth	r2, r3
 800ea2c:	4b81      	ldr	r3, [pc, #516]	; (800ec34 <tcp_input+0x294>)
 800ea2e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800ea30:	4b81      	ldr	r3, [pc, #516]	; (800ec38 <tcp_input+0x298>)
 800ea32:	2200      	movs	r2, #0
 800ea34:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	895a      	ldrh	r2, [r3, #10]
 800ea3a:	7cbb      	ldrb	r3, [r7, #18]
 800ea3c:	b29b      	uxth	r3, r3
 800ea3e:	429a      	cmp	r2, r3
 800ea40:	d309      	bcc.n	800ea56 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800ea42:	4b7c      	ldr	r3, [pc, #496]	; (800ec34 <tcp_input+0x294>)
 800ea44:	881a      	ldrh	r2, [r3, #0]
 800ea46:	4b7d      	ldr	r3, [pc, #500]	; (800ec3c <tcp_input+0x29c>)
 800ea48:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800ea4a:	7cbb      	ldrb	r3, [r7, #18]
 800ea4c:	4619      	mov	r1, r3
 800ea4e:	6878      	ldr	r0, [r7, #4]
 800ea50:	f7fd fde8 	bl	800c624 <pbuf_remove_header>
 800ea54:	e04e      	b.n	800eaf4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d105      	bne.n	800ea6a <tcp_input+0xca>
 800ea5e:	4b70      	ldr	r3, [pc, #448]	; (800ec20 <tcp_input+0x280>)
 800ea60:	22c2      	movs	r2, #194	; 0xc2
 800ea62:	4977      	ldr	r1, [pc, #476]	; (800ec40 <tcp_input+0x2a0>)
 800ea64:	4870      	ldr	r0, [pc, #448]	; (800ec28 <tcp_input+0x288>)
 800ea66:	f009 fb93 	bl	8018190 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800ea6a:	2114      	movs	r1, #20
 800ea6c:	6878      	ldr	r0, [r7, #4]
 800ea6e:	f7fd fdd9 	bl	800c624 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	895a      	ldrh	r2, [r3, #10]
 800ea76:	4b71      	ldr	r3, [pc, #452]	; (800ec3c <tcp_input+0x29c>)
 800ea78:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800ea7a:	4b6e      	ldr	r3, [pc, #440]	; (800ec34 <tcp_input+0x294>)
 800ea7c:	881a      	ldrh	r2, [r3, #0]
 800ea7e:	4b6f      	ldr	r3, [pc, #444]	; (800ec3c <tcp_input+0x29c>)
 800ea80:	881b      	ldrh	r3, [r3, #0]
 800ea82:	1ad3      	subs	r3, r2, r3
 800ea84:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800ea86:	4b6d      	ldr	r3, [pc, #436]	; (800ec3c <tcp_input+0x29c>)
 800ea88:	881b      	ldrh	r3, [r3, #0]
 800ea8a:	4619      	mov	r1, r3
 800ea8c:	6878      	ldr	r0, [r7, #4]
 800ea8e:	f7fd fdc9 	bl	800c624 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	895b      	ldrh	r3, [r3, #10]
 800ea98:	8a3a      	ldrh	r2, [r7, #16]
 800ea9a:	429a      	cmp	r2, r3
 800ea9c:	f200 835f 	bhi.w	800f15e <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	685b      	ldr	r3, [r3, #4]
 800eaa6:	4a64      	ldr	r2, [pc, #400]	; (800ec38 <tcp_input+0x298>)
 800eaa8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	8a3a      	ldrh	r2, [r7, #16]
 800eab0:	4611      	mov	r1, r2
 800eab2:	4618      	mov	r0, r3
 800eab4:	f7fd fdb6 	bl	800c624 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	891a      	ldrh	r2, [r3, #8]
 800eabc:	8a3b      	ldrh	r3, [r7, #16]
 800eabe:	1ad3      	subs	r3, r2, r3
 800eac0:	b29a      	uxth	r2, r3
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	895b      	ldrh	r3, [r3, #10]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d005      	beq.n	800eada <tcp_input+0x13a>
 800eace:	4b54      	ldr	r3, [pc, #336]	; (800ec20 <tcp_input+0x280>)
 800ead0:	22df      	movs	r2, #223	; 0xdf
 800ead2:	495c      	ldr	r1, [pc, #368]	; (800ec44 <tcp_input+0x2a4>)
 800ead4:	4854      	ldr	r0, [pc, #336]	; (800ec28 <tcp_input+0x288>)
 800ead6:	f009 fb5b 	bl	8018190 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	891a      	ldrh	r2, [r3, #8]
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	891b      	ldrh	r3, [r3, #8]
 800eae4:	429a      	cmp	r2, r3
 800eae6:	d005      	beq.n	800eaf4 <tcp_input+0x154>
 800eae8:	4b4d      	ldr	r3, [pc, #308]	; (800ec20 <tcp_input+0x280>)
 800eaea:	22e0      	movs	r2, #224	; 0xe0
 800eaec:	4956      	ldr	r1, [pc, #344]	; (800ec48 <tcp_input+0x2a8>)
 800eaee:	484e      	ldr	r0, [pc, #312]	; (800ec28 <tcp_input+0x288>)
 800eaf0:	f009 fb4e 	bl	8018190 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800eaf4:	4b4d      	ldr	r3, [pc, #308]	; (800ec2c <tcp_input+0x28c>)
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	881b      	ldrh	r3, [r3, #0]
 800eafa:	b29a      	uxth	r2, r3
 800eafc:	4b4b      	ldr	r3, [pc, #300]	; (800ec2c <tcp_input+0x28c>)
 800eafe:	681c      	ldr	r4, [r3, #0]
 800eb00:	4610      	mov	r0, r2
 800eb02:	f7fc faa9 	bl	800b058 <lwip_htons>
 800eb06:	4603      	mov	r3, r0
 800eb08:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800eb0a:	4b48      	ldr	r3, [pc, #288]	; (800ec2c <tcp_input+0x28c>)
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	885b      	ldrh	r3, [r3, #2]
 800eb10:	b29a      	uxth	r2, r3
 800eb12:	4b46      	ldr	r3, [pc, #280]	; (800ec2c <tcp_input+0x28c>)
 800eb14:	681c      	ldr	r4, [r3, #0]
 800eb16:	4610      	mov	r0, r2
 800eb18:	f7fc fa9e 	bl	800b058 <lwip_htons>
 800eb1c:	4603      	mov	r3, r0
 800eb1e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800eb20:	4b42      	ldr	r3, [pc, #264]	; (800ec2c <tcp_input+0x28c>)
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	685a      	ldr	r2, [r3, #4]
 800eb26:	4b41      	ldr	r3, [pc, #260]	; (800ec2c <tcp_input+0x28c>)
 800eb28:	681c      	ldr	r4, [r3, #0]
 800eb2a:	4610      	mov	r0, r2
 800eb2c:	f7fc faa9 	bl	800b082 <lwip_htonl>
 800eb30:	4603      	mov	r3, r0
 800eb32:	6063      	str	r3, [r4, #4]
 800eb34:	6863      	ldr	r3, [r4, #4]
 800eb36:	4a45      	ldr	r2, [pc, #276]	; (800ec4c <tcp_input+0x2ac>)
 800eb38:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800eb3a:	4b3c      	ldr	r3, [pc, #240]	; (800ec2c <tcp_input+0x28c>)
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	689a      	ldr	r2, [r3, #8]
 800eb40:	4b3a      	ldr	r3, [pc, #232]	; (800ec2c <tcp_input+0x28c>)
 800eb42:	681c      	ldr	r4, [r3, #0]
 800eb44:	4610      	mov	r0, r2
 800eb46:	f7fc fa9c 	bl	800b082 <lwip_htonl>
 800eb4a:	4603      	mov	r3, r0
 800eb4c:	60a3      	str	r3, [r4, #8]
 800eb4e:	68a3      	ldr	r3, [r4, #8]
 800eb50:	4a3f      	ldr	r2, [pc, #252]	; (800ec50 <tcp_input+0x2b0>)
 800eb52:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800eb54:	4b35      	ldr	r3, [pc, #212]	; (800ec2c <tcp_input+0x28c>)
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	89db      	ldrh	r3, [r3, #14]
 800eb5a:	b29a      	uxth	r2, r3
 800eb5c:	4b33      	ldr	r3, [pc, #204]	; (800ec2c <tcp_input+0x28c>)
 800eb5e:	681c      	ldr	r4, [r3, #0]
 800eb60:	4610      	mov	r0, r2
 800eb62:	f7fc fa79 	bl	800b058 <lwip_htons>
 800eb66:	4603      	mov	r3, r0
 800eb68:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800eb6a:	4b30      	ldr	r3, [pc, #192]	; (800ec2c <tcp_input+0x28c>)
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	899b      	ldrh	r3, [r3, #12]
 800eb70:	b29b      	uxth	r3, r3
 800eb72:	4618      	mov	r0, r3
 800eb74:	f7fc fa70 	bl	800b058 <lwip_htons>
 800eb78:	4603      	mov	r3, r0
 800eb7a:	b2db      	uxtb	r3, r3
 800eb7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eb80:	b2da      	uxtb	r2, r3
 800eb82:	4b34      	ldr	r3, [pc, #208]	; (800ec54 <tcp_input+0x2b4>)
 800eb84:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	891a      	ldrh	r2, [r3, #8]
 800eb8a:	4b33      	ldr	r3, [pc, #204]	; (800ec58 <tcp_input+0x2b8>)
 800eb8c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800eb8e:	4b31      	ldr	r3, [pc, #196]	; (800ec54 <tcp_input+0x2b4>)
 800eb90:	781b      	ldrb	r3, [r3, #0]
 800eb92:	f003 0303 	and.w	r3, r3, #3
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d00c      	beq.n	800ebb4 <tcp_input+0x214>
    tcplen++;
 800eb9a:	4b2f      	ldr	r3, [pc, #188]	; (800ec58 <tcp_input+0x2b8>)
 800eb9c:	881b      	ldrh	r3, [r3, #0]
 800eb9e:	3301      	adds	r3, #1
 800eba0:	b29a      	uxth	r2, r3
 800eba2:	4b2d      	ldr	r3, [pc, #180]	; (800ec58 <tcp_input+0x2b8>)
 800eba4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	891a      	ldrh	r2, [r3, #8]
 800ebaa:	4b2b      	ldr	r3, [pc, #172]	; (800ec58 <tcp_input+0x2b8>)
 800ebac:	881b      	ldrh	r3, [r3, #0]
 800ebae:	429a      	cmp	r2, r3
 800ebb0:	f200 82d7 	bhi.w	800f162 <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ebb8:	4b28      	ldr	r3, [pc, #160]	; (800ec5c <tcp_input+0x2bc>)
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	61fb      	str	r3, [r7, #28]
 800ebbe:	e09d      	b.n	800ecfc <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800ebc0:	69fb      	ldr	r3, [r7, #28]
 800ebc2:	7d1b      	ldrb	r3, [r3, #20]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d105      	bne.n	800ebd4 <tcp_input+0x234>
 800ebc8:	4b15      	ldr	r3, [pc, #84]	; (800ec20 <tcp_input+0x280>)
 800ebca:	22fb      	movs	r2, #251	; 0xfb
 800ebcc:	4924      	ldr	r1, [pc, #144]	; (800ec60 <tcp_input+0x2c0>)
 800ebce:	4816      	ldr	r0, [pc, #88]	; (800ec28 <tcp_input+0x288>)
 800ebd0:	f009 fade 	bl	8018190 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800ebd4:	69fb      	ldr	r3, [r7, #28]
 800ebd6:	7d1b      	ldrb	r3, [r3, #20]
 800ebd8:	2b0a      	cmp	r3, #10
 800ebda:	d105      	bne.n	800ebe8 <tcp_input+0x248>
 800ebdc:	4b10      	ldr	r3, [pc, #64]	; (800ec20 <tcp_input+0x280>)
 800ebde:	22fc      	movs	r2, #252	; 0xfc
 800ebe0:	4920      	ldr	r1, [pc, #128]	; (800ec64 <tcp_input+0x2c4>)
 800ebe2:	4811      	ldr	r0, [pc, #68]	; (800ec28 <tcp_input+0x288>)
 800ebe4:	f009 fad4 	bl	8018190 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800ebe8:	69fb      	ldr	r3, [r7, #28]
 800ebea:	7d1b      	ldrb	r3, [r3, #20]
 800ebec:	2b01      	cmp	r3, #1
 800ebee:	d105      	bne.n	800ebfc <tcp_input+0x25c>
 800ebf0:	4b0b      	ldr	r3, [pc, #44]	; (800ec20 <tcp_input+0x280>)
 800ebf2:	22fd      	movs	r2, #253	; 0xfd
 800ebf4:	491c      	ldr	r1, [pc, #112]	; (800ec68 <tcp_input+0x2c8>)
 800ebf6:	480c      	ldr	r0, [pc, #48]	; (800ec28 <tcp_input+0x288>)
 800ebf8:	f009 faca 	bl	8018190 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ebfc:	69fb      	ldr	r3, [r7, #28]
 800ebfe:	7a1b      	ldrb	r3, [r3, #8]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d033      	beq.n	800ec6c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ec04:	69fb      	ldr	r3, [r7, #28]
 800ec06:	7a1a      	ldrb	r2, [r3, #8]
 800ec08:	4b09      	ldr	r3, [pc, #36]	; (800ec30 <tcp_input+0x290>)
 800ec0a:	685b      	ldr	r3, [r3, #4]
 800ec0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ec10:	3301      	adds	r3, #1
 800ec12:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ec14:	429a      	cmp	r2, r3
 800ec16:	d029      	beq.n	800ec6c <tcp_input+0x2cc>
      prev = pcb;
 800ec18:	69fb      	ldr	r3, [r7, #28]
 800ec1a:	61bb      	str	r3, [r7, #24]
      continue;
 800ec1c:	e06b      	b.n	800ecf6 <tcp_input+0x356>
 800ec1e:	bf00      	nop
 800ec20:	0801b518 	.word	0x0801b518
 800ec24:	0801b54c 	.word	0x0801b54c
 800ec28:	0801b564 	.word	0x0801b564
 800ec2c:	20008c68 	.word	0x20008c68
 800ec30:	2000c3a4 	.word	0x2000c3a4
 800ec34:	20008c6c 	.word	0x20008c6c
 800ec38:	20008c70 	.word	0x20008c70
 800ec3c:	20008c6e 	.word	0x20008c6e
 800ec40:	0801b58c 	.word	0x0801b58c
 800ec44:	0801b59c 	.word	0x0801b59c
 800ec48:	0801b5a8 	.word	0x0801b5a8
 800ec4c:	20008c78 	.word	0x20008c78
 800ec50:	20008c7c 	.word	0x20008c7c
 800ec54:	20008c84 	.word	0x20008c84
 800ec58:	20008c82 	.word	0x20008c82
 800ec5c:	2000fad8 	.word	0x2000fad8
 800ec60:	0801b5c8 	.word	0x0801b5c8
 800ec64:	0801b5f0 	.word	0x0801b5f0
 800ec68:	0801b61c 	.word	0x0801b61c
    }

    if (pcb->remote_port == tcphdr->src &&
 800ec6c:	69fb      	ldr	r3, [r7, #28]
 800ec6e:	8b1a      	ldrh	r2, [r3, #24]
 800ec70:	4b94      	ldr	r3, [pc, #592]	; (800eec4 <tcp_input+0x524>)
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	881b      	ldrh	r3, [r3, #0]
 800ec76:	b29b      	uxth	r3, r3
 800ec78:	429a      	cmp	r2, r3
 800ec7a:	d13a      	bne.n	800ecf2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800ec7c:	69fb      	ldr	r3, [r7, #28]
 800ec7e:	8ada      	ldrh	r2, [r3, #22]
 800ec80:	4b90      	ldr	r3, [pc, #576]	; (800eec4 <tcp_input+0x524>)
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	885b      	ldrh	r3, [r3, #2]
 800ec86:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800ec88:	429a      	cmp	r2, r3
 800ec8a:	d132      	bne.n	800ecf2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ec8c:	69fb      	ldr	r3, [r7, #28]
 800ec8e:	685a      	ldr	r2, [r3, #4]
 800ec90:	4b8d      	ldr	r3, [pc, #564]	; (800eec8 <tcp_input+0x528>)
 800ec92:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800ec94:	429a      	cmp	r2, r3
 800ec96:	d12c      	bne.n	800ecf2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ec98:	69fb      	ldr	r3, [r7, #28]
 800ec9a:	681a      	ldr	r2, [r3, #0]
 800ec9c:	4b8a      	ldr	r3, [pc, #552]	; (800eec8 <tcp_input+0x528>)
 800ec9e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800eca0:	429a      	cmp	r2, r3
 800eca2:	d126      	bne.n	800ecf2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800eca4:	69fb      	ldr	r3, [r7, #28]
 800eca6:	68db      	ldr	r3, [r3, #12]
 800eca8:	69fa      	ldr	r2, [r7, #28]
 800ecaa:	429a      	cmp	r2, r3
 800ecac:	d106      	bne.n	800ecbc <tcp_input+0x31c>
 800ecae:	4b87      	ldr	r3, [pc, #540]	; (800eecc <tcp_input+0x52c>)
 800ecb0:	f240 120d 	movw	r2, #269	; 0x10d
 800ecb4:	4986      	ldr	r1, [pc, #536]	; (800eed0 <tcp_input+0x530>)
 800ecb6:	4887      	ldr	r0, [pc, #540]	; (800eed4 <tcp_input+0x534>)
 800ecb8:	f009 fa6a 	bl	8018190 <iprintf>
      if (prev != NULL) {
 800ecbc:	69bb      	ldr	r3, [r7, #24]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d00a      	beq.n	800ecd8 <tcp_input+0x338>
        prev->next = pcb->next;
 800ecc2:	69fb      	ldr	r3, [r7, #28]
 800ecc4:	68da      	ldr	r2, [r3, #12]
 800ecc6:	69bb      	ldr	r3, [r7, #24]
 800ecc8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800ecca:	4b83      	ldr	r3, [pc, #524]	; (800eed8 <tcp_input+0x538>)
 800eccc:	681a      	ldr	r2, [r3, #0]
 800ecce:	69fb      	ldr	r3, [r7, #28]
 800ecd0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800ecd2:	4a81      	ldr	r2, [pc, #516]	; (800eed8 <tcp_input+0x538>)
 800ecd4:	69fb      	ldr	r3, [r7, #28]
 800ecd6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800ecd8:	69fb      	ldr	r3, [r7, #28]
 800ecda:	68db      	ldr	r3, [r3, #12]
 800ecdc:	69fa      	ldr	r2, [r7, #28]
 800ecde:	429a      	cmp	r2, r3
 800ece0:	d111      	bne.n	800ed06 <tcp_input+0x366>
 800ece2:	4b7a      	ldr	r3, [pc, #488]	; (800eecc <tcp_input+0x52c>)
 800ece4:	f240 1215 	movw	r2, #277	; 0x115
 800ece8:	497c      	ldr	r1, [pc, #496]	; (800eedc <tcp_input+0x53c>)
 800ecea:	487a      	ldr	r0, [pc, #488]	; (800eed4 <tcp_input+0x534>)
 800ecec:	f009 fa50 	bl	8018190 <iprintf>
      break;
 800ecf0:	e009      	b.n	800ed06 <tcp_input+0x366>
    }
    prev = pcb;
 800ecf2:	69fb      	ldr	r3, [r7, #28]
 800ecf4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ecf6:	69fb      	ldr	r3, [r7, #28]
 800ecf8:	68db      	ldr	r3, [r3, #12]
 800ecfa:	61fb      	str	r3, [r7, #28]
 800ecfc:	69fb      	ldr	r3, [r7, #28]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	f47f af5e 	bne.w	800ebc0 <tcp_input+0x220>
 800ed04:	e000      	b.n	800ed08 <tcp_input+0x368>
      break;
 800ed06:	bf00      	nop
  }

  if (pcb == NULL) {
 800ed08:	69fb      	ldr	r3, [r7, #28]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	f040 8095 	bne.w	800ee3a <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ed10:	4b73      	ldr	r3, [pc, #460]	; (800eee0 <tcp_input+0x540>)
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	61fb      	str	r3, [r7, #28]
 800ed16:	e03f      	b.n	800ed98 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ed18:	69fb      	ldr	r3, [r7, #28]
 800ed1a:	7d1b      	ldrb	r3, [r3, #20]
 800ed1c:	2b0a      	cmp	r3, #10
 800ed1e:	d006      	beq.n	800ed2e <tcp_input+0x38e>
 800ed20:	4b6a      	ldr	r3, [pc, #424]	; (800eecc <tcp_input+0x52c>)
 800ed22:	f240 121f 	movw	r2, #287	; 0x11f
 800ed26:	496f      	ldr	r1, [pc, #444]	; (800eee4 <tcp_input+0x544>)
 800ed28:	486a      	ldr	r0, [pc, #424]	; (800eed4 <tcp_input+0x534>)
 800ed2a:	f009 fa31 	bl	8018190 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ed2e:	69fb      	ldr	r3, [r7, #28]
 800ed30:	7a1b      	ldrb	r3, [r3, #8]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d009      	beq.n	800ed4a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ed36:	69fb      	ldr	r3, [r7, #28]
 800ed38:	7a1a      	ldrb	r2, [r3, #8]
 800ed3a:	4b63      	ldr	r3, [pc, #396]	; (800eec8 <tcp_input+0x528>)
 800ed3c:	685b      	ldr	r3, [r3, #4]
 800ed3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ed42:	3301      	adds	r3, #1
 800ed44:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ed46:	429a      	cmp	r2, r3
 800ed48:	d122      	bne.n	800ed90 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800ed4a:	69fb      	ldr	r3, [r7, #28]
 800ed4c:	8b1a      	ldrh	r2, [r3, #24]
 800ed4e:	4b5d      	ldr	r3, [pc, #372]	; (800eec4 <tcp_input+0x524>)
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	881b      	ldrh	r3, [r3, #0]
 800ed54:	b29b      	uxth	r3, r3
 800ed56:	429a      	cmp	r2, r3
 800ed58:	d11b      	bne.n	800ed92 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800ed5a:	69fb      	ldr	r3, [r7, #28]
 800ed5c:	8ada      	ldrh	r2, [r3, #22]
 800ed5e:	4b59      	ldr	r3, [pc, #356]	; (800eec4 <tcp_input+0x524>)
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	885b      	ldrh	r3, [r3, #2]
 800ed64:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800ed66:	429a      	cmp	r2, r3
 800ed68:	d113      	bne.n	800ed92 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ed6a:	69fb      	ldr	r3, [r7, #28]
 800ed6c:	685a      	ldr	r2, [r3, #4]
 800ed6e:	4b56      	ldr	r3, [pc, #344]	; (800eec8 <tcp_input+0x528>)
 800ed70:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800ed72:	429a      	cmp	r2, r3
 800ed74:	d10d      	bne.n	800ed92 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ed76:	69fb      	ldr	r3, [r7, #28]
 800ed78:	681a      	ldr	r2, [r3, #0]
 800ed7a:	4b53      	ldr	r3, [pc, #332]	; (800eec8 <tcp_input+0x528>)
 800ed7c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ed7e:	429a      	cmp	r2, r3
 800ed80:	d107      	bne.n	800ed92 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800ed82:	69f8      	ldr	r0, [r7, #28]
 800ed84:	f000 fb52 	bl	800f42c <tcp_timewait_input>
        }
        pbuf_free(p);
 800ed88:	6878      	ldr	r0, [r7, #4]
 800ed8a:	f7fd fcd1 	bl	800c730 <pbuf_free>
        return;
 800ed8e:	e1ee      	b.n	800f16e <tcp_input+0x7ce>
        continue;
 800ed90:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ed92:	69fb      	ldr	r3, [r7, #28]
 800ed94:	68db      	ldr	r3, [r3, #12]
 800ed96:	61fb      	str	r3, [r7, #28]
 800ed98:	69fb      	ldr	r3, [r7, #28]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d1bc      	bne.n	800ed18 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800ed9e:	2300      	movs	r3, #0
 800eda0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800eda2:	4b51      	ldr	r3, [pc, #324]	; (800eee8 <tcp_input+0x548>)
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	617b      	str	r3, [r7, #20]
 800eda8:	e02a      	b.n	800ee00 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800edaa:	697b      	ldr	r3, [r7, #20]
 800edac:	7a1b      	ldrb	r3, [r3, #8]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d00c      	beq.n	800edcc <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800edb2:	697b      	ldr	r3, [r7, #20]
 800edb4:	7a1a      	ldrb	r2, [r3, #8]
 800edb6:	4b44      	ldr	r3, [pc, #272]	; (800eec8 <tcp_input+0x528>)
 800edb8:	685b      	ldr	r3, [r3, #4]
 800edba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800edbe:	3301      	adds	r3, #1
 800edc0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800edc2:	429a      	cmp	r2, r3
 800edc4:	d002      	beq.n	800edcc <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800edc6:	697b      	ldr	r3, [r7, #20]
 800edc8:	61bb      	str	r3, [r7, #24]
        continue;
 800edca:	e016      	b.n	800edfa <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800edcc:	697b      	ldr	r3, [r7, #20]
 800edce:	8ada      	ldrh	r2, [r3, #22]
 800edd0:	4b3c      	ldr	r3, [pc, #240]	; (800eec4 <tcp_input+0x524>)
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	885b      	ldrh	r3, [r3, #2]
 800edd6:	b29b      	uxth	r3, r3
 800edd8:	429a      	cmp	r2, r3
 800edda:	d10c      	bne.n	800edf6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800eddc:	697b      	ldr	r3, [r7, #20]
 800edde:	681a      	ldr	r2, [r3, #0]
 800ede0:	4b39      	ldr	r3, [pc, #228]	; (800eec8 <tcp_input+0x528>)
 800ede2:	695b      	ldr	r3, [r3, #20]
 800ede4:	429a      	cmp	r2, r3
 800ede6:	d00f      	beq.n	800ee08 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800ede8:	697b      	ldr	r3, [r7, #20]
 800edea:	2b00      	cmp	r3, #0
 800edec:	d00d      	beq.n	800ee0a <tcp_input+0x46a>
 800edee:	697b      	ldr	r3, [r7, #20]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d009      	beq.n	800ee0a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800edf6:	697b      	ldr	r3, [r7, #20]
 800edf8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800edfa:	697b      	ldr	r3, [r7, #20]
 800edfc:	68db      	ldr	r3, [r3, #12]
 800edfe:	617b      	str	r3, [r7, #20]
 800ee00:	697b      	ldr	r3, [r7, #20]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d1d1      	bne.n	800edaa <tcp_input+0x40a>
 800ee06:	e000      	b.n	800ee0a <tcp_input+0x46a>
            break;
 800ee08:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800ee0a:	697b      	ldr	r3, [r7, #20]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d014      	beq.n	800ee3a <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800ee10:	69bb      	ldr	r3, [r7, #24]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d00a      	beq.n	800ee2c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800ee16:	697b      	ldr	r3, [r7, #20]
 800ee18:	68da      	ldr	r2, [r3, #12]
 800ee1a:	69bb      	ldr	r3, [r7, #24]
 800ee1c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800ee1e:	4b32      	ldr	r3, [pc, #200]	; (800eee8 <tcp_input+0x548>)
 800ee20:	681a      	ldr	r2, [r3, #0]
 800ee22:	697b      	ldr	r3, [r7, #20]
 800ee24:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800ee26:	4a30      	ldr	r2, [pc, #192]	; (800eee8 <tcp_input+0x548>)
 800ee28:	697b      	ldr	r3, [r7, #20]
 800ee2a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800ee2c:	6978      	ldr	r0, [r7, #20]
 800ee2e:	f000 f9ff 	bl	800f230 <tcp_listen_input>
      }
      pbuf_free(p);
 800ee32:	6878      	ldr	r0, [r7, #4]
 800ee34:	f7fd fc7c 	bl	800c730 <pbuf_free>
      return;
 800ee38:	e199      	b.n	800f16e <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800ee3a:	69fb      	ldr	r3, [r7, #28]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	f000 8160 	beq.w	800f102 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800ee42:	4b2a      	ldr	r3, [pc, #168]	; (800eeec <tcp_input+0x54c>)
 800ee44:	2200      	movs	r2, #0
 800ee46:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	891a      	ldrh	r2, [r3, #8]
 800ee4c:	4b27      	ldr	r3, [pc, #156]	; (800eeec <tcp_input+0x54c>)
 800ee4e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800ee50:	4a26      	ldr	r2, [pc, #152]	; (800eeec <tcp_input+0x54c>)
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800ee56:	4b1b      	ldr	r3, [pc, #108]	; (800eec4 <tcp_input+0x524>)
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	4a24      	ldr	r2, [pc, #144]	; (800eeec <tcp_input+0x54c>)
 800ee5c:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800ee5e:	4b24      	ldr	r3, [pc, #144]	; (800eef0 <tcp_input+0x550>)
 800ee60:	2200      	movs	r2, #0
 800ee62:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800ee64:	4b23      	ldr	r3, [pc, #140]	; (800eef4 <tcp_input+0x554>)
 800ee66:	2200      	movs	r2, #0
 800ee68:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800ee6a:	4b23      	ldr	r3, [pc, #140]	; (800eef8 <tcp_input+0x558>)
 800ee6c:	2200      	movs	r2, #0
 800ee6e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800ee70:	4b22      	ldr	r3, [pc, #136]	; (800eefc <tcp_input+0x55c>)
 800ee72:	781b      	ldrb	r3, [r3, #0]
 800ee74:	f003 0308 	and.w	r3, r3, #8
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d006      	beq.n	800ee8a <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	7b5b      	ldrb	r3, [r3, #13]
 800ee80:	f043 0301 	orr.w	r3, r3, #1
 800ee84:	b2da      	uxtb	r2, r3
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800ee8a:	69fb      	ldr	r3, [r7, #28]
 800ee8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d038      	beq.n	800ef04 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ee92:	69f8      	ldr	r0, [r7, #28]
 800ee94:	f7ff f854 	bl	800df40 <tcp_process_refused_data>
 800ee98:	4603      	mov	r3, r0
 800ee9a:	f113 0f0d 	cmn.w	r3, #13
 800ee9e:	d007      	beq.n	800eeb0 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800eea0:	69fb      	ldr	r3, [r7, #28]
 800eea2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d02d      	beq.n	800ef04 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800eea8:	4b15      	ldr	r3, [pc, #84]	; (800ef00 <tcp_input+0x560>)
 800eeaa:	881b      	ldrh	r3, [r3, #0]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d029      	beq.n	800ef04 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800eeb0:	69fb      	ldr	r3, [r7, #28]
 800eeb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	f040 8104 	bne.w	800f0c2 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800eeba:	69f8      	ldr	r0, [r7, #28]
 800eebc:	f003 fe26 	bl	8012b0c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800eec0:	e0ff      	b.n	800f0c2 <tcp_input+0x722>
 800eec2:	bf00      	nop
 800eec4:	20008c68 	.word	0x20008c68
 800eec8:	2000c3a4 	.word	0x2000c3a4
 800eecc:	0801b518 	.word	0x0801b518
 800eed0:	0801b644 	.word	0x0801b644
 800eed4:	0801b564 	.word	0x0801b564
 800eed8:	2000fad8 	.word	0x2000fad8
 800eedc:	0801b670 	.word	0x0801b670
 800eee0:	2000fae8 	.word	0x2000fae8
 800eee4:	0801b69c 	.word	0x0801b69c
 800eee8:	2000fae0 	.word	0x2000fae0
 800eeec:	20008c58 	.word	0x20008c58
 800eef0:	20008c88 	.word	0x20008c88
 800eef4:	20008c85 	.word	0x20008c85
 800eef8:	20008c80 	.word	0x20008c80
 800eefc:	20008c84 	.word	0x20008c84
 800ef00:	20008c82 	.word	0x20008c82
      }
    }
    tcp_input_pcb = pcb;
 800ef04:	4a9b      	ldr	r2, [pc, #620]	; (800f174 <tcp_input+0x7d4>)
 800ef06:	69fb      	ldr	r3, [r7, #28]
 800ef08:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800ef0a:	69f8      	ldr	r0, [r7, #28]
 800ef0c:	f000 fb0a 	bl	800f524 <tcp_process>
 800ef10:	4603      	mov	r3, r0
 800ef12:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800ef14:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ef18:	f113 0f0d 	cmn.w	r3, #13
 800ef1c:	f000 80d3 	beq.w	800f0c6 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800ef20:	4b95      	ldr	r3, [pc, #596]	; (800f178 <tcp_input+0x7d8>)
 800ef22:	781b      	ldrb	r3, [r3, #0]
 800ef24:	f003 0308 	and.w	r3, r3, #8
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d015      	beq.n	800ef58 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800ef2c:	69fb      	ldr	r3, [r7, #28]
 800ef2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d008      	beq.n	800ef48 <tcp_input+0x5a8>
 800ef36:	69fb      	ldr	r3, [r7, #28]
 800ef38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ef3c:	69fa      	ldr	r2, [r7, #28]
 800ef3e:	6912      	ldr	r2, [r2, #16]
 800ef40:	f06f 010d 	mvn.w	r1, #13
 800ef44:	4610      	mov	r0, r2
 800ef46:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ef48:	69f9      	ldr	r1, [r7, #28]
 800ef4a:	488c      	ldr	r0, [pc, #560]	; (800f17c <tcp_input+0x7dc>)
 800ef4c:	f7ff fbb0 	bl	800e6b0 <tcp_pcb_remove>
        tcp_free(pcb);
 800ef50:	69f8      	ldr	r0, [r7, #28]
 800ef52:	f7fd fea9 	bl	800cca8 <tcp_free>
 800ef56:	e0c1      	b.n	800f0dc <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800ef58:	2300      	movs	r3, #0
 800ef5a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800ef5c:	4b88      	ldr	r3, [pc, #544]	; (800f180 <tcp_input+0x7e0>)
 800ef5e:	881b      	ldrh	r3, [r3, #0]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d01d      	beq.n	800efa0 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800ef64:	4b86      	ldr	r3, [pc, #536]	; (800f180 <tcp_input+0x7e0>)
 800ef66:	881b      	ldrh	r3, [r3, #0]
 800ef68:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800ef6a:	69fb      	ldr	r3, [r7, #28]
 800ef6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d00a      	beq.n	800ef8a <tcp_input+0x5ea>
 800ef74:	69fb      	ldr	r3, [r7, #28]
 800ef76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef7a:	69fa      	ldr	r2, [r7, #28]
 800ef7c:	6910      	ldr	r0, [r2, #16]
 800ef7e:	89fa      	ldrh	r2, [r7, #14]
 800ef80:	69f9      	ldr	r1, [r7, #28]
 800ef82:	4798      	blx	r3
 800ef84:	4603      	mov	r3, r0
 800ef86:	74fb      	strb	r3, [r7, #19]
 800ef88:	e001      	b.n	800ef8e <tcp_input+0x5ee>
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ef8e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ef92:	f113 0f0d 	cmn.w	r3, #13
 800ef96:	f000 8098 	beq.w	800f0ca <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800ef9a:	4b79      	ldr	r3, [pc, #484]	; (800f180 <tcp_input+0x7e0>)
 800ef9c:	2200      	movs	r2, #0
 800ef9e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800efa0:	69f8      	ldr	r0, [r7, #28]
 800efa2:	f000 f905 	bl	800f1b0 <tcp_input_delayed_close>
 800efa6:	4603      	mov	r3, r0
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	f040 8090 	bne.w	800f0ce <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800efae:	4b75      	ldr	r3, [pc, #468]	; (800f184 <tcp_input+0x7e4>)
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d041      	beq.n	800f03a <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800efb6:	69fb      	ldr	r3, [r7, #28]
 800efb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d006      	beq.n	800efcc <tcp_input+0x62c>
 800efbe:	4b72      	ldr	r3, [pc, #456]	; (800f188 <tcp_input+0x7e8>)
 800efc0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800efc4:	4971      	ldr	r1, [pc, #452]	; (800f18c <tcp_input+0x7ec>)
 800efc6:	4872      	ldr	r0, [pc, #456]	; (800f190 <tcp_input+0x7f0>)
 800efc8:	f009 f8e2 	bl	8018190 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800efcc:	69fb      	ldr	r3, [r7, #28]
 800efce:	8b5b      	ldrh	r3, [r3, #26]
 800efd0:	f003 0310 	and.w	r3, r3, #16
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d008      	beq.n	800efea <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800efd8:	4b6a      	ldr	r3, [pc, #424]	; (800f184 <tcp_input+0x7e4>)
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	4618      	mov	r0, r3
 800efde:	f7fd fba7 	bl	800c730 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800efe2:	69f8      	ldr	r0, [r7, #28]
 800efe4:	f7fe f99a 	bl	800d31c <tcp_abort>
            goto aborted;
 800efe8:	e078      	b.n	800f0dc <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800efea:	69fb      	ldr	r3, [r7, #28]
 800efec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d00c      	beq.n	800f00e <tcp_input+0x66e>
 800eff4:	69fb      	ldr	r3, [r7, #28]
 800eff6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800effa:	69fb      	ldr	r3, [r7, #28]
 800effc:	6918      	ldr	r0, [r3, #16]
 800effe:	4b61      	ldr	r3, [pc, #388]	; (800f184 <tcp_input+0x7e4>)
 800f000:	681a      	ldr	r2, [r3, #0]
 800f002:	2300      	movs	r3, #0
 800f004:	69f9      	ldr	r1, [r7, #28]
 800f006:	47a0      	blx	r4
 800f008:	4603      	mov	r3, r0
 800f00a:	74fb      	strb	r3, [r7, #19]
 800f00c:	e008      	b.n	800f020 <tcp_input+0x680>
 800f00e:	4b5d      	ldr	r3, [pc, #372]	; (800f184 <tcp_input+0x7e4>)
 800f010:	681a      	ldr	r2, [r3, #0]
 800f012:	2300      	movs	r3, #0
 800f014:	69f9      	ldr	r1, [r7, #28]
 800f016:	2000      	movs	r0, #0
 800f018:	f7ff f884 	bl	800e124 <tcp_recv_null>
 800f01c:	4603      	mov	r3, r0
 800f01e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800f020:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f024:	f113 0f0d 	cmn.w	r3, #13
 800f028:	d053      	beq.n	800f0d2 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800f02a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d003      	beq.n	800f03a <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800f032:	4b54      	ldr	r3, [pc, #336]	; (800f184 <tcp_input+0x7e4>)
 800f034:	681a      	ldr	r2, [r3, #0]
 800f036:	69fb      	ldr	r3, [r7, #28]
 800f038:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800f03a:	4b4f      	ldr	r3, [pc, #316]	; (800f178 <tcp_input+0x7d8>)
 800f03c:	781b      	ldrb	r3, [r3, #0]
 800f03e:	f003 0320 	and.w	r3, r3, #32
 800f042:	2b00      	cmp	r3, #0
 800f044:	d030      	beq.n	800f0a8 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800f046:	69fb      	ldr	r3, [r7, #28]
 800f048:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d009      	beq.n	800f062 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f04e:	69fb      	ldr	r3, [r7, #28]
 800f050:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f052:	7b5a      	ldrb	r2, [r3, #13]
 800f054:	69fb      	ldr	r3, [r7, #28]
 800f056:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f058:	f042 0220 	orr.w	r2, r2, #32
 800f05c:	b2d2      	uxtb	r2, r2
 800f05e:	735a      	strb	r2, [r3, #13]
 800f060:	e022      	b.n	800f0a8 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f062:	69fb      	ldr	r3, [r7, #28]
 800f064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f066:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f06a:	d005      	beq.n	800f078 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800f06c:	69fb      	ldr	r3, [r7, #28]
 800f06e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f070:	3301      	adds	r3, #1
 800f072:	b29a      	uxth	r2, r3
 800f074:	69fb      	ldr	r3, [r7, #28]
 800f076:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800f078:	69fb      	ldr	r3, [r7, #28]
 800f07a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d00b      	beq.n	800f09a <tcp_input+0x6fa>
 800f082:	69fb      	ldr	r3, [r7, #28]
 800f084:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f088:	69fb      	ldr	r3, [r7, #28]
 800f08a:	6918      	ldr	r0, [r3, #16]
 800f08c:	2300      	movs	r3, #0
 800f08e:	2200      	movs	r2, #0
 800f090:	69f9      	ldr	r1, [r7, #28]
 800f092:	47a0      	blx	r4
 800f094:	4603      	mov	r3, r0
 800f096:	74fb      	strb	r3, [r7, #19]
 800f098:	e001      	b.n	800f09e <tcp_input+0x6fe>
 800f09a:	2300      	movs	r3, #0
 800f09c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f09e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f0a2:	f113 0f0d 	cmn.w	r3, #13
 800f0a6:	d016      	beq.n	800f0d6 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f0a8:	4b32      	ldr	r3, [pc, #200]	; (800f174 <tcp_input+0x7d4>)
 800f0aa:	2200      	movs	r2, #0
 800f0ac:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f0ae:	69f8      	ldr	r0, [r7, #28]
 800f0b0:	f000 f87e 	bl	800f1b0 <tcp_input_delayed_close>
 800f0b4:	4603      	mov	r3, r0
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d10f      	bne.n	800f0da <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800f0ba:	69f8      	ldr	r0, [r7, #28]
 800f0bc:	f002 ff10 	bl	8011ee0 <tcp_output>
 800f0c0:	e00c      	b.n	800f0dc <tcp_input+0x73c>
        goto aborted;
 800f0c2:	bf00      	nop
 800f0c4:	e00a      	b.n	800f0dc <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800f0c6:	bf00      	nop
 800f0c8:	e008      	b.n	800f0dc <tcp_input+0x73c>
              goto aborted;
 800f0ca:	bf00      	nop
 800f0cc:	e006      	b.n	800f0dc <tcp_input+0x73c>
          goto aborted;
 800f0ce:	bf00      	nop
 800f0d0:	e004      	b.n	800f0dc <tcp_input+0x73c>
            goto aborted;
 800f0d2:	bf00      	nop
 800f0d4:	e002      	b.n	800f0dc <tcp_input+0x73c>
              goto aborted;
 800f0d6:	bf00      	nop
 800f0d8:	e000      	b.n	800f0dc <tcp_input+0x73c>
          goto aborted;
 800f0da:	bf00      	nop
    tcp_input_pcb = NULL;
 800f0dc:	4b25      	ldr	r3, [pc, #148]	; (800f174 <tcp_input+0x7d4>)
 800f0de:	2200      	movs	r2, #0
 800f0e0:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800f0e2:	4b28      	ldr	r3, [pc, #160]	; (800f184 <tcp_input+0x7e4>)
 800f0e4:	2200      	movs	r2, #0
 800f0e6:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800f0e8:	4b2a      	ldr	r3, [pc, #168]	; (800f194 <tcp_input+0x7f4>)
 800f0ea:	685b      	ldr	r3, [r3, #4]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d03d      	beq.n	800f16c <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 800f0f0:	4b28      	ldr	r3, [pc, #160]	; (800f194 <tcp_input+0x7f4>)
 800f0f2:	685b      	ldr	r3, [r3, #4]
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	f7fd fb1b 	bl	800c730 <pbuf_free>
      inseg.p = NULL;
 800f0fa:	4b26      	ldr	r3, [pc, #152]	; (800f194 <tcp_input+0x7f4>)
 800f0fc:	2200      	movs	r2, #0
 800f0fe:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800f100:	e034      	b.n	800f16c <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f102:	4b25      	ldr	r3, [pc, #148]	; (800f198 <tcp_input+0x7f8>)
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	899b      	ldrh	r3, [r3, #12]
 800f108:	b29b      	uxth	r3, r3
 800f10a:	4618      	mov	r0, r3
 800f10c:	f7fb ffa4 	bl	800b058 <lwip_htons>
 800f110:	4603      	mov	r3, r0
 800f112:	b2db      	uxtb	r3, r3
 800f114:	f003 0304 	and.w	r3, r3, #4
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d118      	bne.n	800f14e <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f11c:	4b1f      	ldr	r3, [pc, #124]	; (800f19c <tcp_input+0x7fc>)
 800f11e:	6819      	ldr	r1, [r3, #0]
 800f120:	4b1f      	ldr	r3, [pc, #124]	; (800f1a0 <tcp_input+0x800>)
 800f122:	881b      	ldrh	r3, [r3, #0]
 800f124:	461a      	mov	r2, r3
 800f126:	4b1f      	ldr	r3, [pc, #124]	; (800f1a4 <tcp_input+0x804>)
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f12c:	4b1a      	ldr	r3, [pc, #104]	; (800f198 <tcp_input+0x7f8>)
 800f12e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f130:	885b      	ldrh	r3, [r3, #2]
 800f132:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f134:	4a18      	ldr	r2, [pc, #96]	; (800f198 <tcp_input+0x7f8>)
 800f136:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f138:	8812      	ldrh	r2, [r2, #0]
 800f13a:	b292      	uxth	r2, r2
 800f13c:	9202      	str	r2, [sp, #8]
 800f13e:	9301      	str	r3, [sp, #4]
 800f140:	4b19      	ldr	r3, [pc, #100]	; (800f1a8 <tcp_input+0x808>)
 800f142:	9300      	str	r3, [sp, #0]
 800f144:	4b19      	ldr	r3, [pc, #100]	; (800f1ac <tcp_input+0x80c>)
 800f146:	4602      	mov	r2, r0
 800f148:	2000      	movs	r0, #0
 800f14a:	f003 fc8d 	bl	8012a68 <tcp_rst>
    pbuf_free(p);
 800f14e:	6878      	ldr	r0, [r7, #4]
 800f150:	f7fd faee 	bl	800c730 <pbuf_free>
  return;
 800f154:	e00a      	b.n	800f16c <tcp_input+0x7cc>
    goto dropped;
 800f156:	bf00      	nop
 800f158:	e004      	b.n	800f164 <tcp_input+0x7c4>
dropped:
 800f15a:	bf00      	nop
 800f15c:	e002      	b.n	800f164 <tcp_input+0x7c4>
      goto dropped;
 800f15e:	bf00      	nop
 800f160:	e000      	b.n	800f164 <tcp_input+0x7c4>
      goto dropped;
 800f162:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800f164:	6878      	ldr	r0, [r7, #4]
 800f166:	f7fd fae3 	bl	800c730 <pbuf_free>
 800f16a:	e000      	b.n	800f16e <tcp_input+0x7ce>
  return;
 800f16c:	bf00      	nop
}
 800f16e:	3724      	adds	r7, #36	; 0x24
 800f170:	46bd      	mov	sp, r7
 800f172:	bd90      	pop	{r4, r7, pc}
 800f174:	2000faec 	.word	0x2000faec
 800f178:	20008c85 	.word	0x20008c85
 800f17c:	2000fad8 	.word	0x2000fad8
 800f180:	20008c80 	.word	0x20008c80
 800f184:	20008c88 	.word	0x20008c88
 800f188:	0801b518 	.word	0x0801b518
 800f18c:	0801b6cc 	.word	0x0801b6cc
 800f190:	0801b564 	.word	0x0801b564
 800f194:	20008c58 	.word	0x20008c58
 800f198:	20008c68 	.word	0x20008c68
 800f19c:	20008c7c 	.word	0x20008c7c
 800f1a0:	20008c82 	.word	0x20008c82
 800f1a4:	20008c78 	.word	0x20008c78
 800f1a8:	2000c3b4 	.word	0x2000c3b4
 800f1ac:	2000c3b8 	.word	0x2000c3b8

0800f1b0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b082      	sub	sp, #8
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d106      	bne.n	800f1cc <tcp_input_delayed_close+0x1c>
 800f1be:	4b17      	ldr	r3, [pc, #92]	; (800f21c <tcp_input_delayed_close+0x6c>)
 800f1c0:	f240 225a 	movw	r2, #602	; 0x25a
 800f1c4:	4916      	ldr	r1, [pc, #88]	; (800f220 <tcp_input_delayed_close+0x70>)
 800f1c6:	4817      	ldr	r0, [pc, #92]	; (800f224 <tcp_input_delayed_close+0x74>)
 800f1c8:	f008 ffe2 	bl	8018190 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800f1cc:	4b16      	ldr	r3, [pc, #88]	; (800f228 <tcp_input_delayed_close+0x78>)
 800f1ce:	781b      	ldrb	r3, [r3, #0]
 800f1d0:	f003 0310 	and.w	r3, r3, #16
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d01c      	beq.n	800f212 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	8b5b      	ldrh	r3, [r3, #26]
 800f1dc:	f003 0310 	and.w	r3, r3, #16
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d10d      	bne.n	800f200 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d008      	beq.n	800f200 <tcp_input_delayed_close+0x50>
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f1f4:	687a      	ldr	r2, [r7, #4]
 800f1f6:	6912      	ldr	r2, [r2, #16]
 800f1f8:	f06f 010e 	mvn.w	r1, #14
 800f1fc:	4610      	mov	r0, r2
 800f1fe:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f200:	6879      	ldr	r1, [r7, #4]
 800f202:	480a      	ldr	r0, [pc, #40]	; (800f22c <tcp_input_delayed_close+0x7c>)
 800f204:	f7ff fa54 	bl	800e6b0 <tcp_pcb_remove>
    tcp_free(pcb);
 800f208:	6878      	ldr	r0, [r7, #4]
 800f20a:	f7fd fd4d 	bl	800cca8 <tcp_free>
    return 1;
 800f20e:	2301      	movs	r3, #1
 800f210:	e000      	b.n	800f214 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800f212:	2300      	movs	r3, #0
}
 800f214:	4618      	mov	r0, r3
 800f216:	3708      	adds	r7, #8
 800f218:	46bd      	mov	sp, r7
 800f21a:	bd80      	pop	{r7, pc}
 800f21c:	0801b518 	.word	0x0801b518
 800f220:	0801b6e8 	.word	0x0801b6e8
 800f224:	0801b564 	.word	0x0801b564
 800f228:	20008c85 	.word	0x20008c85
 800f22c:	2000fad8 	.word	0x2000fad8

0800f230 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800f230:	b590      	push	{r4, r7, lr}
 800f232:	b08b      	sub	sp, #44	; 0x2c
 800f234:	af04      	add	r7, sp, #16
 800f236:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800f238:	4b6f      	ldr	r3, [pc, #444]	; (800f3f8 <tcp_listen_input+0x1c8>)
 800f23a:	781b      	ldrb	r3, [r3, #0]
 800f23c:	f003 0304 	and.w	r3, r3, #4
 800f240:	2b00      	cmp	r3, #0
 800f242:	f040 80d3 	bne.w	800f3ec <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d106      	bne.n	800f25a <tcp_listen_input+0x2a>
 800f24c:	4b6b      	ldr	r3, [pc, #428]	; (800f3fc <tcp_listen_input+0x1cc>)
 800f24e:	f240 2281 	movw	r2, #641	; 0x281
 800f252:	496b      	ldr	r1, [pc, #428]	; (800f400 <tcp_listen_input+0x1d0>)
 800f254:	486b      	ldr	r0, [pc, #428]	; (800f404 <tcp_listen_input+0x1d4>)
 800f256:	f008 ff9b 	bl	8018190 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800f25a:	4b67      	ldr	r3, [pc, #412]	; (800f3f8 <tcp_listen_input+0x1c8>)
 800f25c:	781b      	ldrb	r3, [r3, #0]
 800f25e:	f003 0310 	and.w	r3, r3, #16
 800f262:	2b00      	cmp	r3, #0
 800f264:	d019      	beq.n	800f29a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f266:	4b68      	ldr	r3, [pc, #416]	; (800f408 <tcp_listen_input+0x1d8>)
 800f268:	6819      	ldr	r1, [r3, #0]
 800f26a:	4b68      	ldr	r3, [pc, #416]	; (800f40c <tcp_listen_input+0x1dc>)
 800f26c:	881b      	ldrh	r3, [r3, #0]
 800f26e:	461a      	mov	r2, r3
 800f270:	4b67      	ldr	r3, [pc, #412]	; (800f410 <tcp_listen_input+0x1e0>)
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f276:	4b67      	ldr	r3, [pc, #412]	; (800f414 <tcp_listen_input+0x1e4>)
 800f278:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f27a:	885b      	ldrh	r3, [r3, #2]
 800f27c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f27e:	4a65      	ldr	r2, [pc, #404]	; (800f414 <tcp_listen_input+0x1e4>)
 800f280:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f282:	8812      	ldrh	r2, [r2, #0]
 800f284:	b292      	uxth	r2, r2
 800f286:	9202      	str	r2, [sp, #8]
 800f288:	9301      	str	r3, [sp, #4]
 800f28a:	4b63      	ldr	r3, [pc, #396]	; (800f418 <tcp_listen_input+0x1e8>)
 800f28c:	9300      	str	r3, [sp, #0]
 800f28e:	4b63      	ldr	r3, [pc, #396]	; (800f41c <tcp_listen_input+0x1ec>)
 800f290:	4602      	mov	r2, r0
 800f292:	6878      	ldr	r0, [r7, #4]
 800f294:	f003 fbe8 	bl	8012a68 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800f298:	e0aa      	b.n	800f3f0 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 800f29a:	4b57      	ldr	r3, [pc, #348]	; (800f3f8 <tcp_listen_input+0x1c8>)
 800f29c:	781b      	ldrb	r3, [r3, #0]
 800f29e:	f003 0302 	and.w	r3, r3, #2
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	f000 80a4 	beq.w	800f3f0 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	7d5b      	ldrb	r3, [r3, #21]
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	f7ff f85d 	bl	800e36c <tcp_alloc>
 800f2b2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800f2b4:	697b      	ldr	r3, [r7, #20]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d111      	bne.n	800f2de <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	699b      	ldr	r3, [r3, #24]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d00a      	beq.n	800f2d8 <tcp_listen_input+0xa8>
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	699b      	ldr	r3, [r3, #24]
 800f2c6:	687a      	ldr	r2, [r7, #4]
 800f2c8:	6910      	ldr	r0, [r2, #16]
 800f2ca:	f04f 32ff 	mov.w	r2, #4294967295
 800f2ce:	2100      	movs	r1, #0
 800f2d0:	4798      	blx	r3
 800f2d2:	4603      	mov	r3, r0
 800f2d4:	73bb      	strb	r3, [r7, #14]
      return;
 800f2d6:	e08c      	b.n	800f3f2 <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f2d8:	23f0      	movs	r3, #240	; 0xf0
 800f2da:	73bb      	strb	r3, [r7, #14]
      return;
 800f2dc:	e089      	b.n	800f3f2 <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800f2de:	4b50      	ldr	r3, [pc, #320]	; (800f420 <tcp_listen_input+0x1f0>)
 800f2e0:	695a      	ldr	r2, [r3, #20]
 800f2e2:	697b      	ldr	r3, [r7, #20]
 800f2e4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800f2e6:	4b4e      	ldr	r3, [pc, #312]	; (800f420 <tcp_listen_input+0x1f0>)
 800f2e8:	691a      	ldr	r2, [r3, #16]
 800f2ea:	697b      	ldr	r3, [r7, #20]
 800f2ec:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	8ada      	ldrh	r2, [r3, #22]
 800f2f2:	697b      	ldr	r3, [r7, #20]
 800f2f4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800f2f6:	4b47      	ldr	r3, [pc, #284]	; (800f414 <tcp_listen_input+0x1e4>)
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	881b      	ldrh	r3, [r3, #0]
 800f2fc:	b29a      	uxth	r2, r3
 800f2fe:	697b      	ldr	r3, [r7, #20]
 800f300:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800f302:	697b      	ldr	r3, [r7, #20]
 800f304:	2203      	movs	r2, #3
 800f306:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800f308:	4b41      	ldr	r3, [pc, #260]	; (800f410 <tcp_listen_input+0x1e0>)
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	1c5a      	adds	r2, r3, #1
 800f30e:	697b      	ldr	r3, [r7, #20]
 800f310:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800f312:	697b      	ldr	r3, [r7, #20]
 800f314:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f316:	697b      	ldr	r3, [r7, #20]
 800f318:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800f31a:	6978      	ldr	r0, [r7, #20]
 800f31c:	f7ff fa5c 	bl	800e7d8 <tcp_next_iss>
 800f320:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800f322:	697b      	ldr	r3, [r7, #20]
 800f324:	693a      	ldr	r2, [r7, #16]
 800f326:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800f328:	697b      	ldr	r3, [r7, #20]
 800f32a:	693a      	ldr	r2, [r7, #16]
 800f32c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800f32e:	697b      	ldr	r3, [r7, #20]
 800f330:	693a      	ldr	r2, [r7, #16]
 800f332:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800f334:	697b      	ldr	r3, [r7, #20]
 800f336:	693a      	ldr	r2, [r7, #16]
 800f338:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800f33a:	4b35      	ldr	r3, [pc, #212]	; (800f410 <tcp_listen_input+0x1e0>)
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	1e5a      	subs	r2, r3, #1
 800f340:	697b      	ldr	r3, [r7, #20]
 800f342:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	691a      	ldr	r2, [r3, #16]
 800f348:	697b      	ldr	r3, [r7, #20]
 800f34a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800f34c:	697b      	ldr	r3, [r7, #20]
 800f34e:	687a      	ldr	r2, [r7, #4]
 800f350:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	7a5b      	ldrb	r3, [r3, #9]
 800f356:	f003 030c 	and.w	r3, r3, #12
 800f35a:	b2da      	uxtb	r2, r3
 800f35c:	697b      	ldr	r3, [r7, #20]
 800f35e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	7a1a      	ldrb	r2, [r3, #8]
 800f364:	697b      	ldr	r3, [r7, #20]
 800f366:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800f368:	4b2e      	ldr	r3, [pc, #184]	; (800f424 <tcp_listen_input+0x1f4>)
 800f36a:	681a      	ldr	r2, [r3, #0]
 800f36c:	697b      	ldr	r3, [r7, #20]
 800f36e:	60da      	str	r2, [r3, #12]
 800f370:	4a2c      	ldr	r2, [pc, #176]	; (800f424 <tcp_listen_input+0x1f4>)
 800f372:	697b      	ldr	r3, [r7, #20]
 800f374:	6013      	str	r3, [r2, #0]
 800f376:	f003 fd39 	bl	8012dec <tcp_timer_needed>
 800f37a:	4b2b      	ldr	r3, [pc, #172]	; (800f428 <tcp_listen_input+0x1f8>)
 800f37c:	2201      	movs	r2, #1
 800f37e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800f380:	6978      	ldr	r0, [r7, #20]
 800f382:	f001 fd8f 	bl	8010ea4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800f386:	4b23      	ldr	r3, [pc, #140]	; (800f414 <tcp_listen_input+0x1e4>)
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	89db      	ldrh	r3, [r3, #14]
 800f38c:	b29a      	uxth	r2, r3
 800f38e:	697b      	ldr	r3, [r7, #20]
 800f390:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800f394:	697b      	ldr	r3, [r7, #20]
 800f396:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f39a:	697b      	ldr	r3, [r7, #20]
 800f39c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800f3a0:	697b      	ldr	r3, [r7, #20]
 800f3a2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f3a4:	697b      	ldr	r3, [r7, #20]
 800f3a6:	3304      	adds	r3, #4
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	f007 fa91 	bl	80168d0 <ip4_route>
 800f3ae:	4601      	mov	r1, r0
 800f3b0:	697b      	ldr	r3, [r7, #20]
 800f3b2:	3304      	adds	r3, #4
 800f3b4:	461a      	mov	r2, r3
 800f3b6:	4620      	mov	r0, r4
 800f3b8:	f7ff fa34 	bl	800e824 <tcp_eff_send_mss_netif>
 800f3bc:	4603      	mov	r3, r0
 800f3be:	461a      	mov	r2, r3
 800f3c0:	697b      	ldr	r3, [r7, #20]
 800f3c2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800f3c4:	2112      	movs	r1, #18
 800f3c6:	6978      	ldr	r0, [r7, #20]
 800f3c8:	f002 fc9c 	bl	8011d04 <tcp_enqueue_flags>
 800f3cc:	4603      	mov	r3, r0
 800f3ce:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800f3d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d004      	beq.n	800f3e2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800f3d8:	2100      	movs	r1, #0
 800f3da:	6978      	ldr	r0, [r7, #20]
 800f3dc:	f7fd fee0 	bl	800d1a0 <tcp_abandon>
      return;
 800f3e0:	e007      	b.n	800f3f2 <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 800f3e2:	6978      	ldr	r0, [r7, #20]
 800f3e4:	f002 fd7c 	bl	8011ee0 <tcp_output>
  return;
 800f3e8:	bf00      	nop
 800f3ea:	e001      	b.n	800f3f0 <tcp_listen_input+0x1c0>
    return;
 800f3ec:	bf00      	nop
 800f3ee:	e000      	b.n	800f3f2 <tcp_listen_input+0x1c2>
  return;
 800f3f0:	bf00      	nop
}
 800f3f2:	371c      	adds	r7, #28
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	bd90      	pop	{r4, r7, pc}
 800f3f8:	20008c84 	.word	0x20008c84
 800f3fc:	0801b518 	.word	0x0801b518
 800f400:	0801b710 	.word	0x0801b710
 800f404:	0801b564 	.word	0x0801b564
 800f408:	20008c7c 	.word	0x20008c7c
 800f40c:	20008c82 	.word	0x20008c82
 800f410:	20008c78 	.word	0x20008c78
 800f414:	20008c68 	.word	0x20008c68
 800f418:	2000c3b4 	.word	0x2000c3b4
 800f41c:	2000c3b8 	.word	0x2000c3b8
 800f420:	2000c3a4 	.word	0x2000c3a4
 800f424:	2000fad8 	.word	0x2000fad8
 800f428:	2000fad4 	.word	0x2000fad4

0800f42c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800f42c:	b580      	push	{r7, lr}
 800f42e:	b086      	sub	sp, #24
 800f430:	af04      	add	r7, sp, #16
 800f432:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800f434:	4b30      	ldr	r3, [pc, #192]	; (800f4f8 <tcp_timewait_input+0xcc>)
 800f436:	781b      	ldrb	r3, [r3, #0]
 800f438:	f003 0304 	and.w	r3, r3, #4
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d154      	bne.n	800f4ea <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d106      	bne.n	800f454 <tcp_timewait_input+0x28>
 800f446:	4b2d      	ldr	r3, [pc, #180]	; (800f4fc <tcp_timewait_input+0xd0>)
 800f448:	f240 22ee 	movw	r2, #750	; 0x2ee
 800f44c:	492c      	ldr	r1, [pc, #176]	; (800f500 <tcp_timewait_input+0xd4>)
 800f44e:	482d      	ldr	r0, [pc, #180]	; (800f504 <tcp_timewait_input+0xd8>)
 800f450:	f008 fe9e 	bl	8018190 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800f454:	4b28      	ldr	r3, [pc, #160]	; (800f4f8 <tcp_timewait_input+0xcc>)
 800f456:	781b      	ldrb	r3, [r3, #0]
 800f458:	f003 0302 	and.w	r3, r3, #2
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d02a      	beq.n	800f4b6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800f460:	4b29      	ldr	r3, [pc, #164]	; (800f508 <tcp_timewait_input+0xdc>)
 800f462:	681a      	ldr	r2, [r3, #0]
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f468:	1ad3      	subs	r3, r2, r3
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	db2d      	blt.n	800f4ca <tcp_timewait_input+0x9e>
 800f46e:	4b26      	ldr	r3, [pc, #152]	; (800f508 <tcp_timewait_input+0xdc>)
 800f470:	681a      	ldr	r2, [r3, #0]
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f476:	6879      	ldr	r1, [r7, #4]
 800f478:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f47a:	440b      	add	r3, r1
 800f47c:	1ad3      	subs	r3, r2, r3
 800f47e:	2b00      	cmp	r3, #0
 800f480:	dc23      	bgt.n	800f4ca <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f482:	4b22      	ldr	r3, [pc, #136]	; (800f50c <tcp_timewait_input+0xe0>)
 800f484:	6819      	ldr	r1, [r3, #0]
 800f486:	4b22      	ldr	r3, [pc, #136]	; (800f510 <tcp_timewait_input+0xe4>)
 800f488:	881b      	ldrh	r3, [r3, #0]
 800f48a:	461a      	mov	r2, r3
 800f48c:	4b1e      	ldr	r3, [pc, #120]	; (800f508 <tcp_timewait_input+0xdc>)
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f492:	4b20      	ldr	r3, [pc, #128]	; (800f514 <tcp_timewait_input+0xe8>)
 800f494:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f496:	885b      	ldrh	r3, [r3, #2]
 800f498:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f49a:	4a1e      	ldr	r2, [pc, #120]	; (800f514 <tcp_timewait_input+0xe8>)
 800f49c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f49e:	8812      	ldrh	r2, [r2, #0]
 800f4a0:	b292      	uxth	r2, r2
 800f4a2:	9202      	str	r2, [sp, #8]
 800f4a4:	9301      	str	r3, [sp, #4]
 800f4a6:	4b1c      	ldr	r3, [pc, #112]	; (800f518 <tcp_timewait_input+0xec>)
 800f4a8:	9300      	str	r3, [sp, #0]
 800f4aa:	4b1c      	ldr	r3, [pc, #112]	; (800f51c <tcp_timewait_input+0xf0>)
 800f4ac:	4602      	mov	r2, r0
 800f4ae:	6878      	ldr	r0, [r7, #4]
 800f4b0:	f003 fada 	bl	8012a68 <tcp_rst>
      return;
 800f4b4:	e01c      	b.n	800f4f0 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 800f4b6:	4b10      	ldr	r3, [pc, #64]	; (800f4f8 <tcp_timewait_input+0xcc>)
 800f4b8:	781b      	ldrb	r3, [r3, #0]
 800f4ba:	f003 0301 	and.w	r3, r3, #1
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d003      	beq.n	800f4ca <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800f4c2:	4b17      	ldr	r3, [pc, #92]	; (800f520 <tcp_timewait_input+0xf4>)
 800f4c4:	681a      	ldr	r2, [r3, #0]
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800f4ca:	4b11      	ldr	r3, [pc, #68]	; (800f510 <tcp_timewait_input+0xe4>)
 800f4cc:	881b      	ldrh	r3, [r3, #0]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d00d      	beq.n	800f4ee <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	8b5b      	ldrh	r3, [r3, #26]
 800f4d6:	f043 0302 	orr.w	r3, r3, #2
 800f4da:	b29a      	uxth	r2, r3
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f4e0:	6878      	ldr	r0, [r7, #4]
 800f4e2:	f002 fcfd 	bl	8011ee0 <tcp_output>
  }
  return;
 800f4e6:	bf00      	nop
 800f4e8:	e001      	b.n	800f4ee <tcp_timewait_input+0xc2>
    return;
 800f4ea:	bf00      	nop
 800f4ec:	e000      	b.n	800f4f0 <tcp_timewait_input+0xc4>
  return;
 800f4ee:	bf00      	nop
}
 800f4f0:	3708      	adds	r7, #8
 800f4f2:	46bd      	mov	sp, r7
 800f4f4:	bd80      	pop	{r7, pc}
 800f4f6:	bf00      	nop
 800f4f8:	20008c84 	.word	0x20008c84
 800f4fc:	0801b518 	.word	0x0801b518
 800f500:	0801b730 	.word	0x0801b730
 800f504:	0801b564 	.word	0x0801b564
 800f508:	20008c78 	.word	0x20008c78
 800f50c:	20008c7c 	.word	0x20008c7c
 800f510:	20008c82 	.word	0x20008c82
 800f514:	20008c68 	.word	0x20008c68
 800f518:	2000c3b4 	.word	0x2000c3b4
 800f51c:	2000c3b8 	.word	0x2000c3b8
 800f520:	2000fadc 	.word	0x2000fadc

0800f524 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800f524:	b590      	push	{r4, r7, lr}
 800f526:	b08d      	sub	sp, #52	; 0x34
 800f528:	af04      	add	r7, sp, #16
 800f52a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800f52c:	2300      	movs	r3, #0
 800f52e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800f530:	2300      	movs	r3, #0
 800f532:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d106      	bne.n	800f548 <tcp_process+0x24>
 800f53a:	4ba5      	ldr	r3, [pc, #660]	; (800f7d0 <tcp_process+0x2ac>)
 800f53c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800f540:	49a4      	ldr	r1, [pc, #656]	; (800f7d4 <tcp_process+0x2b0>)
 800f542:	48a5      	ldr	r0, [pc, #660]	; (800f7d8 <tcp_process+0x2b4>)
 800f544:	f008 fe24 	bl	8018190 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800f548:	4ba4      	ldr	r3, [pc, #656]	; (800f7dc <tcp_process+0x2b8>)
 800f54a:	781b      	ldrb	r3, [r3, #0]
 800f54c:	f003 0304 	and.w	r3, r3, #4
 800f550:	2b00      	cmp	r3, #0
 800f552:	d04e      	beq.n	800f5f2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	7d1b      	ldrb	r3, [r3, #20]
 800f558:	2b02      	cmp	r3, #2
 800f55a:	d108      	bne.n	800f56e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f560:	4b9f      	ldr	r3, [pc, #636]	; (800f7e0 <tcp_process+0x2bc>)
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	429a      	cmp	r2, r3
 800f566:	d123      	bne.n	800f5b0 <tcp_process+0x8c>
        acceptable = 1;
 800f568:	2301      	movs	r3, #1
 800f56a:	76fb      	strb	r3, [r7, #27]
 800f56c:	e020      	b.n	800f5b0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f572:	4b9c      	ldr	r3, [pc, #624]	; (800f7e4 <tcp_process+0x2c0>)
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	429a      	cmp	r2, r3
 800f578:	d102      	bne.n	800f580 <tcp_process+0x5c>
        acceptable = 1;
 800f57a:	2301      	movs	r3, #1
 800f57c:	76fb      	strb	r3, [r7, #27]
 800f57e:	e017      	b.n	800f5b0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f580:	4b98      	ldr	r3, [pc, #608]	; (800f7e4 <tcp_process+0x2c0>)
 800f582:	681a      	ldr	r2, [r3, #0]
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f588:	1ad3      	subs	r3, r2, r3
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	db10      	blt.n	800f5b0 <tcp_process+0x8c>
 800f58e:	4b95      	ldr	r3, [pc, #596]	; (800f7e4 <tcp_process+0x2c0>)
 800f590:	681a      	ldr	r2, [r3, #0]
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f596:	6879      	ldr	r1, [r7, #4]
 800f598:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f59a:	440b      	add	r3, r1
 800f59c:	1ad3      	subs	r3, r2, r3
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	dc06      	bgt.n	800f5b0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	8b5b      	ldrh	r3, [r3, #26]
 800f5a6:	f043 0302 	orr.w	r3, r3, #2
 800f5aa:	b29a      	uxth	r2, r3
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800f5b0:	7efb      	ldrb	r3, [r7, #27]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d01b      	beq.n	800f5ee <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	7d1b      	ldrb	r3, [r3, #20]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d106      	bne.n	800f5cc <tcp_process+0xa8>
 800f5be:	4b84      	ldr	r3, [pc, #528]	; (800f7d0 <tcp_process+0x2ac>)
 800f5c0:	f44f 724e 	mov.w	r2, #824	; 0x338
 800f5c4:	4988      	ldr	r1, [pc, #544]	; (800f7e8 <tcp_process+0x2c4>)
 800f5c6:	4884      	ldr	r0, [pc, #528]	; (800f7d8 <tcp_process+0x2b4>)
 800f5c8:	f008 fde2 	bl	8018190 <iprintf>
      recv_flags |= TF_RESET;
 800f5cc:	4b87      	ldr	r3, [pc, #540]	; (800f7ec <tcp_process+0x2c8>)
 800f5ce:	781b      	ldrb	r3, [r3, #0]
 800f5d0:	f043 0308 	orr.w	r3, r3, #8
 800f5d4:	b2da      	uxtb	r2, r3
 800f5d6:	4b85      	ldr	r3, [pc, #532]	; (800f7ec <tcp_process+0x2c8>)
 800f5d8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	8b5b      	ldrh	r3, [r3, #26]
 800f5de:	f023 0301 	bic.w	r3, r3, #1
 800f5e2:	b29a      	uxth	r2, r3
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800f5e8:	f06f 030d 	mvn.w	r3, #13
 800f5ec:	e37a      	b.n	800fce4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	e378      	b.n	800fce4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800f5f2:	4b7a      	ldr	r3, [pc, #488]	; (800f7dc <tcp_process+0x2b8>)
 800f5f4:	781b      	ldrb	r3, [r3, #0]
 800f5f6:	f003 0302 	and.w	r3, r3, #2
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d010      	beq.n	800f620 <tcp_process+0xfc>
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	7d1b      	ldrb	r3, [r3, #20]
 800f602:	2b02      	cmp	r3, #2
 800f604:	d00c      	beq.n	800f620 <tcp_process+0xfc>
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	7d1b      	ldrb	r3, [r3, #20]
 800f60a:	2b03      	cmp	r3, #3
 800f60c:	d008      	beq.n	800f620 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	8b5b      	ldrh	r3, [r3, #26]
 800f612:	f043 0302 	orr.w	r3, r3, #2
 800f616:	b29a      	uxth	r2, r3
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800f61c:	2300      	movs	r3, #0
 800f61e:	e361      	b.n	800fce4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	8b5b      	ldrh	r3, [r3, #26]
 800f624:	f003 0310 	and.w	r3, r3, #16
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d103      	bne.n	800f634 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800f62c:	4b70      	ldr	r3, [pc, #448]	; (800f7f0 <tcp_process+0x2cc>)
 800f62e:	681a      	ldr	r2, [r3, #0]
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	2200      	movs	r2, #0
 800f638:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	2200      	movs	r2, #0
 800f640:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800f644:	6878      	ldr	r0, [r7, #4]
 800f646:	f001 fc2d 	bl	8010ea4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	7d1b      	ldrb	r3, [r3, #20]
 800f64e:	3b02      	subs	r3, #2
 800f650:	2b07      	cmp	r3, #7
 800f652:	f200 8337 	bhi.w	800fcc4 <tcp_process+0x7a0>
 800f656:	a201      	add	r2, pc, #4	; (adr r2, 800f65c <tcp_process+0x138>)
 800f658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f65c:	0800f67d 	.word	0x0800f67d
 800f660:	0800f8ad 	.word	0x0800f8ad
 800f664:	0800fa25 	.word	0x0800fa25
 800f668:	0800fa4f 	.word	0x0800fa4f
 800f66c:	0800fb73 	.word	0x0800fb73
 800f670:	0800fa25 	.word	0x0800fa25
 800f674:	0800fbff 	.word	0x0800fbff
 800f678:	0800fc8f 	.word	0x0800fc8f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800f67c:	4b57      	ldr	r3, [pc, #348]	; (800f7dc <tcp_process+0x2b8>)
 800f67e:	781b      	ldrb	r3, [r3, #0]
 800f680:	f003 0310 	and.w	r3, r3, #16
 800f684:	2b00      	cmp	r3, #0
 800f686:	f000 80e4 	beq.w	800f852 <tcp_process+0x32e>
 800f68a:	4b54      	ldr	r3, [pc, #336]	; (800f7dc <tcp_process+0x2b8>)
 800f68c:	781b      	ldrb	r3, [r3, #0]
 800f68e:	f003 0302 	and.w	r3, r3, #2
 800f692:	2b00      	cmp	r3, #0
 800f694:	f000 80dd 	beq.w	800f852 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f69c:	1c5a      	adds	r2, r3, #1
 800f69e:	4b50      	ldr	r3, [pc, #320]	; (800f7e0 <tcp_process+0x2bc>)
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	429a      	cmp	r2, r3
 800f6a4:	f040 80d5 	bne.w	800f852 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800f6a8:	4b4e      	ldr	r3, [pc, #312]	; (800f7e4 <tcp_process+0x2c0>)
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	1c5a      	adds	r2, r3, #1
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800f6ba:	4b49      	ldr	r3, [pc, #292]	; (800f7e0 <tcp_process+0x2bc>)
 800f6bc:	681a      	ldr	r2, [r3, #0]
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800f6c2:	4b4c      	ldr	r3, [pc, #304]	; (800f7f4 <tcp_process+0x2d0>)
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	89db      	ldrh	r3, [r3, #14]
 800f6c8:	b29a      	uxth	r2, r3
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800f6dc:	4b41      	ldr	r3, [pc, #260]	; (800f7e4 <tcp_process+0x2c0>)
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	1e5a      	subs	r2, r3, #1
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	2204      	movs	r2, #4
 800f6ea:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	3304      	adds	r3, #4
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	f007 f8eb 	bl	80168d0 <ip4_route>
 800f6fa:	4601      	mov	r1, r0
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	3304      	adds	r3, #4
 800f700:	461a      	mov	r2, r3
 800f702:	4620      	mov	r0, r4
 800f704:	f7ff f88e 	bl	800e824 <tcp_eff_send_mss_netif>
 800f708:	4603      	mov	r3, r0
 800f70a:	461a      	mov	r2, r3
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f714:	009a      	lsls	r2, r3, #2
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f71a:	005b      	lsls	r3, r3, #1
 800f71c:	f241 111c 	movw	r1, #4380	; 0x111c
 800f720:	428b      	cmp	r3, r1
 800f722:	bf38      	it	cc
 800f724:	460b      	movcc	r3, r1
 800f726:	429a      	cmp	r2, r3
 800f728:	d204      	bcs.n	800f734 <tcp_process+0x210>
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f72e:	009b      	lsls	r3, r3, #2
 800f730:	b29b      	uxth	r3, r3
 800f732:	e00d      	b.n	800f750 <tcp_process+0x22c>
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f738:	005b      	lsls	r3, r3, #1
 800f73a:	f241 121c 	movw	r2, #4380	; 0x111c
 800f73e:	4293      	cmp	r3, r2
 800f740:	d904      	bls.n	800f74c <tcp_process+0x228>
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f746:	005b      	lsls	r3, r3, #1
 800f748:	b29b      	uxth	r3, r3
 800f74a:	e001      	b.n	800f750 <tcp_process+0x22c>
 800f74c:	f241 131c 	movw	r3, #4380	; 0x111c
 800f750:	687a      	ldr	r2, [r7, #4]
 800f752:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d106      	bne.n	800f76e <tcp_process+0x24a>
 800f760:	4b1b      	ldr	r3, [pc, #108]	; (800f7d0 <tcp_process+0x2ac>)
 800f762:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800f766:	4924      	ldr	r1, [pc, #144]	; (800f7f8 <tcp_process+0x2d4>)
 800f768:	481b      	ldr	r0, [pc, #108]	; (800f7d8 <tcp_process+0x2b4>)
 800f76a:	f008 fd11 	bl	8018190 <iprintf>
        --pcb->snd_queuelen;
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f774:	3b01      	subs	r3, #1
 800f776:	b29a      	uxth	r2, r3
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f782:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800f784:	69fb      	ldr	r3, [r7, #28]
 800f786:	2b00      	cmp	r3, #0
 800f788:	d111      	bne.n	800f7ae <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f78e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800f790:	69fb      	ldr	r3, [r7, #28]
 800f792:	2b00      	cmp	r3, #0
 800f794:	d106      	bne.n	800f7a4 <tcp_process+0x280>
 800f796:	4b0e      	ldr	r3, [pc, #56]	; (800f7d0 <tcp_process+0x2ac>)
 800f798:	f44f 725d 	mov.w	r2, #884	; 0x374
 800f79c:	4917      	ldr	r1, [pc, #92]	; (800f7fc <tcp_process+0x2d8>)
 800f79e:	480e      	ldr	r0, [pc, #56]	; (800f7d8 <tcp_process+0x2b4>)
 800f7a0:	f008 fcf6 	bl	8018190 <iprintf>
          pcb->unsent = rseg->next;
 800f7a4:	69fb      	ldr	r3, [r7, #28]
 800f7a6:	681a      	ldr	r2, [r3, #0]
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	66da      	str	r2, [r3, #108]	; 0x6c
 800f7ac:	e003      	b.n	800f7b6 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800f7ae:	69fb      	ldr	r3, [r7, #28]
 800f7b0:	681a      	ldr	r2, [r3, #0]
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800f7b6:	69f8      	ldr	r0, [r7, #28]
 800f7b8:	f7fe fc52 	bl	800e060 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d11d      	bne.n	800f800 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f7ca:	861a      	strh	r2, [r3, #48]	; 0x30
 800f7cc:	e01f      	b.n	800f80e <tcp_process+0x2ea>
 800f7ce:	bf00      	nop
 800f7d0:	0801b518 	.word	0x0801b518
 800f7d4:	0801b750 	.word	0x0801b750
 800f7d8:	0801b564 	.word	0x0801b564
 800f7dc:	20008c84 	.word	0x20008c84
 800f7e0:	20008c7c 	.word	0x20008c7c
 800f7e4:	20008c78 	.word	0x20008c78
 800f7e8:	0801b76c 	.word	0x0801b76c
 800f7ec:	20008c85 	.word	0x20008c85
 800f7f0:	2000fadc 	.word	0x2000fadc
 800f7f4:	20008c68 	.word	0x20008c68
 800f7f8:	0801b78c 	.word	0x0801b78c
 800f7fc:	0801b7a4 	.word	0x0801b7a4
        } else {
          pcb->rtime = 0;
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	2200      	movs	r2, #0
 800f804:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	2200      	movs	r2, #0
 800f80a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f814:	2b00      	cmp	r3, #0
 800f816:	d00a      	beq.n	800f82e <tcp_process+0x30a>
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f81e:	687a      	ldr	r2, [r7, #4]
 800f820:	6910      	ldr	r0, [r2, #16]
 800f822:	2200      	movs	r2, #0
 800f824:	6879      	ldr	r1, [r7, #4]
 800f826:	4798      	blx	r3
 800f828:	4603      	mov	r3, r0
 800f82a:	76bb      	strb	r3, [r7, #26]
 800f82c:	e001      	b.n	800f832 <tcp_process+0x30e>
 800f82e:	2300      	movs	r3, #0
 800f830:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800f832:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f836:	f113 0f0d 	cmn.w	r3, #13
 800f83a:	d102      	bne.n	800f842 <tcp_process+0x31e>
          return ERR_ABRT;
 800f83c:	f06f 030c 	mvn.w	r3, #12
 800f840:	e250      	b.n	800fce4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	8b5b      	ldrh	r3, [r3, #26]
 800f846:	f043 0302 	orr.w	r3, r3, #2
 800f84a:	b29a      	uxth	r2, r3
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800f850:	e23a      	b.n	800fcc8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800f852:	4b9d      	ldr	r3, [pc, #628]	; (800fac8 <tcp_process+0x5a4>)
 800f854:	781b      	ldrb	r3, [r3, #0]
 800f856:	f003 0310 	and.w	r3, r3, #16
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	f000 8234 	beq.w	800fcc8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f860:	4b9a      	ldr	r3, [pc, #616]	; (800facc <tcp_process+0x5a8>)
 800f862:	6819      	ldr	r1, [r3, #0]
 800f864:	4b9a      	ldr	r3, [pc, #616]	; (800fad0 <tcp_process+0x5ac>)
 800f866:	881b      	ldrh	r3, [r3, #0]
 800f868:	461a      	mov	r2, r3
 800f86a:	4b9a      	ldr	r3, [pc, #616]	; (800fad4 <tcp_process+0x5b0>)
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f870:	4b99      	ldr	r3, [pc, #612]	; (800fad8 <tcp_process+0x5b4>)
 800f872:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f874:	885b      	ldrh	r3, [r3, #2]
 800f876:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f878:	4a97      	ldr	r2, [pc, #604]	; (800fad8 <tcp_process+0x5b4>)
 800f87a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f87c:	8812      	ldrh	r2, [r2, #0]
 800f87e:	b292      	uxth	r2, r2
 800f880:	9202      	str	r2, [sp, #8]
 800f882:	9301      	str	r3, [sp, #4]
 800f884:	4b95      	ldr	r3, [pc, #596]	; (800fadc <tcp_process+0x5b8>)
 800f886:	9300      	str	r3, [sp, #0]
 800f888:	4b95      	ldr	r3, [pc, #596]	; (800fae0 <tcp_process+0x5bc>)
 800f88a:	4602      	mov	r2, r0
 800f88c:	6878      	ldr	r0, [r7, #4]
 800f88e:	f003 f8eb 	bl	8012a68 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f898:	2b05      	cmp	r3, #5
 800f89a:	f200 8215 	bhi.w	800fcc8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	2200      	movs	r2, #0
 800f8a2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800f8a4:	6878      	ldr	r0, [r7, #4]
 800f8a6:	f002 feab 	bl	8012600 <tcp_rexmit_rto>
      break;
 800f8aa:	e20d      	b.n	800fcc8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800f8ac:	4b86      	ldr	r3, [pc, #536]	; (800fac8 <tcp_process+0x5a4>)
 800f8ae:	781b      	ldrb	r3, [r3, #0]
 800f8b0:	f003 0310 	and.w	r3, r3, #16
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	f000 80a1 	beq.w	800f9fc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f8ba:	4b84      	ldr	r3, [pc, #528]	; (800facc <tcp_process+0x5a8>)
 800f8bc:	681a      	ldr	r2, [r3, #0]
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8c2:	1ad3      	subs	r3, r2, r3
 800f8c4:	3b01      	subs	r3, #1
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	db7e      	blt.n	800f9c8 <tcp_process+0x4a4>
 800f8ca:	4b80      	ldr	r3, [pc, #512]	; (800facc <tcp_process+0x5a8>)
 800f8cc:	681a      	ldr	r2, [r3, #0]
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f8d2:	1ad3      	subs	r3, r2, r3
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	dc77      	bgt.n	800f9c8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	2204      	movs	r2, #4
 800f8dc:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d102      	bne.n	800f8ec <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800f8e6:	23fa      	movs	r3, #250	; 0xfa
 800f8e8:	76bb      	strb	r3, [r7, #26]
 800f8ea:	e01d      	b.n	800f928 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f8f0:	699b      	ldr	r3, [r3, #24]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d106      	bne.n	800f904 <tcp_process+0x3e0>
 800f8f6:	4b7b      	ldr	r3, [pc, #492]	; (800fae4 <tcp_process+0x5c0>)
 800f8f8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800f8fc:	497a      	ldr	r1, [pc, #488]	; (800fae8 <tcp_process+0x5c4>)
 800f8fe:	487b      	ldr	r0, [pc, #492]	; (800faec <tcp_process+0x5c8>)
 800f900:	f008 fc46 	bl	8018190 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f908:	699b      	ldr	r3, [r3, #24]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d00a      	beq.n	800f924 <tcp_process+0x400>
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f912:	699b      	ldr	r3, [r3, #24]
 800f914:	687a      	ldr	r2, [r7, #4]
 800f916:	6910      	ldr	r0, [r2, #16]
 800f918:	2200      	movs	r2, #0
 800f91a:	6879      	ldr	r1, [r7, #4]
 800f91c:	4798      	blx	r3
 800f91e:	4603      	mov	r3, r0
 800f920:	76bb      	strb	r3, [r7, #26]
 800f922:	e001      	b.n	800f928 <tcp_process+0x404>
 800f924:	23f0      	movs	r3, #240	; 0xf0
 800f926:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800f928:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d00a      	beq.n	800f946 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800f930:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f934:	f113 0f0d 	cmn.w	r3, #13
 800f938:	d002      	beq.n	800f940 <tcp_process+0x41c>
              tcp_abort(pcb);
 800f93a:	6878      	ldr	r0, [r7, #4]
 800f93c:	f7fd fcee 	bl	800d31c <tcp_abort>
            }
            return ERR_ABRT;
 800f940:	f06f 030c 	mvn.w	r3, #12
 800f944:	e1ce      	b.n	800fce4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800f946:	6878      	ldr	r0, [r7, #4]
 800f948:	f000 fae0 	bl	800ff0c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800f94c:	4b68      	ldr	r3, [pc, #416]	; (800faf0 <tcp_process+0x5cc>)
 800f94e:	881b      	ldrh	r3, [r3, #0]
 800f950:	2b00      	cmp	r3, #0
 800f952:	d005      	beq.n	800f960 <tcp_process+0x43c>
            recv_acked--;
 800f954:	4b66      	ldr	r3, [pc, #408]	; (800faf0 <tcp_process+0x5cc>)
 800f956:	881b      	ldrh	r3, [r3, #0]
 800f958:	3b01      	subs	r3, #1
 800f95a:	b29a      	uxth	r2, r3
 800f95c:	4b64      	ldr	r3, [pc, #400]	; (800faf0 <tcp_process+0x5cc>)
 800f95e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f964:	009a      	lsls	r2, r3, #2
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f96a:	005b      	lsls	r3, r3, #1
 800f96c:	f241 111c 	movw	r1, #4380	; 0x111c
 800f970:	428b      	cmp	r3, r1
 800f972:	bf38      	it	cc
 800f974:	460b      	movcc	r3, r1
 800f976:	429a      	cmp	r2, r3
 800f978:	d204      	bcs.n	800f984 <tcp_process+0x460>
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f97e:	009b      	lsls	r3, r3, #2
 800f980:	b29b      	uxth	r3, r3
 800f982:	e00d      	b.n	800f9a0 <tcp_process+0x47c>
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f988:	005b      	lsls	r3, r3, #1
 800f98a:	f241 121c 	movw	r2, #4380	; 0x111c
 800f98e:	4293      	cmp	r3, r2
 800f990:	d904      	bls.n	800f99c <tcp_process+0x478>
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f996:	005b      	lsls	r3, r3, #1
 800f998:	b29b      	uxth	r3, r3
 800f99a:	e001      	b.n	800f9a0 <tcp_process+0x47c>
 800f99c:	f241 131c 	movw	r3, #4380	; 0x111c
 800f9a0:	687a      	ldr	r2, [r7, #4]
 800f9a2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800f9a6:	4b53      	ldr	r3, [pc, #332]	; (800faf4 <tcp_process+0x5d0>)
 800f9a8:	781b      	ldrb	r3, [r3, #0]
 800f9aa:	f003 0320 	and.w	r3, r3, #32
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d037      	beq.n	800fa22 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	8b5b      	ldrh	r3, [r3, #26]
 800f9b6:	f043 0302 	orr.w	r3, r3, #2
 800f9ba:	b29a      	uxth	r2, r3
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	2207      	movs	r2, #7
 800f9c4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800f9c6:	e02c      	b.n	800fa22 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f9c8:	4b40      	ldr	r3, [pc, #256]	; (800facc <tcp_process+0x5a8>)
 800f9ca:	6819      	ldr	r1, [r3, #0]
 800f9cc:	4b40      	ldr	r3, [pc, #256]	; (800fad0 <tcp_process+0x5ac>)
 800f9ce:	881b      	ldrh	r3, [r3, #0]
 800f9d0:	461a      	mov	r2, r3
 800f9d2:	4b40      	ldr	r3, [pc, #256]	; (800fad4 <tcp_process+0x5b0>)
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f9d8:	4b3f      	ldr	r3, [pc, #252]	; (800fad8 <tcp_process+0x5b4>)
 800f9da:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f9dc:	885b      	ldrh	r3, [r3, #2]
 800f9de:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f9e0:	4a3d      	ldr	r2, [pc, #244]	; (800fad8 <tcp_process+0x5b4>)
 800f9e2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f9e4:	8812      	ldrh	r2, [r2, #0]
 800f9e6:	b292      	uxth	r2, r2
 800f9e8:	9202      	str	r2, [sp, #8]
 800f9ea:	9301      	str	r3, [sp, #4]
 800f9ec:	4b3b      	ldr	r3, [pc, #236]	; (800fadc <tcp_process+0x5b8>)
 800f9ee:	9300      	str	r3, [sp, #0]
 800f9f0:	4b3b      	ldr	r3, [pc, #236]	; (800fae0 <tcp_process+0x5bc>)
 800f9f2:	4602      	mov	r2, r0
 800f9f4:	6878      	ldr	r0, [r7, #4]
 800f9f6:	f003 f837 	bl	8012a68 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800f9fa:	e167      	b.n	800fccc <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800f9fc:	4b32      	ldr	r3, [pc, #200]	; (800fac8 <tcp_process+0x5a4>)
 800f9fe:	781b      	ldrb	r3, [r3, #0]
 800fa00:	f003 0302 	and.w	r3, r3, #2
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	f000 8161 	beq.w	800fccc <tcp_process+0x7a8>
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa0e:	1e5a      	subs	r2, r3, #1
 800fa10:	4b30      	ldr	r3, [pc, #192]	; (800fad4 <tcp_process+0x5b0>)
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	429a      	cmp	r2, r3
 800fa16:	f040 8159 	bne.w	800fccc <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800fa1a:	6878      	ldr	r0, [r7, #4]
 800fa1c:	f002 fe12 	bl	8012644 <tcp_rexmit>
      break;
 800fa20:	e154      	b.n	800fccc <tcp_process+0x7a8>
 800fa22:	e153      	b.n	800fccc <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800fa24:	6878      	ldr	r0, [r7, #4]
 800fa26:	f000 fa71 	bl	800ff0c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800fa2a:	4b32      	ldr	r3, [pc, #200]	; (800faf4 <tcp_process+0x5d0>)
 800fa2c:	781b      	ldrb	r3, [r3, #0]
 800fa2e:	f003 0320 	and.w	r3, r3, #32
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	f000 814c 	beq.w	800fcd0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	8b5b      	ldrh	r3, [r3, #26]
 800fa3c:	f043 0302 	orr.w	r3, r3, #2
 800fa40:	b29a      	uxth	r2, r3
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	2207      	movs	r2, #7
 800fa4a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fa4c:	e140      	b.n	800fcd0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800fa4e:	6878      	ldr	r0, [r7, #4]
 800fa50:	f000 fa5c 	bl	800ff0c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800fa54:	4b27      	ldr	r3, [pc, #156]	; (800faf4 <tcp_process+0x5d0>)
 800fa56:	781b      	ldrb	r3, [r3, #0]
 800fa58:	f003 0320 	and.w	r3, r3, #32
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d071      	beq.n	800fb44 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fa60:	4b19      	ldr	r3, [pc, #100]	; (800fac8 <tcp_process+0x5a4>)
 800fa62:	781b      	ldrb	r3, [r3, #0]
 800fa64:	f003 0310 	and.w	r3, r3, #16
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d060      	beq.n	800fb2e <tcp_process+0x60a>
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fa70:	4b16      	ldr	r3, [pc, #88]	; (800facc <tcp_process+0x5a8>)
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	429a      	cmp	r2, r3
 800fa76:	d15a      	bne.n	800fb2e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d156      	bne.n	800fb2e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	8b5b      	ldrh	r3, [r3, #26]
 800fa84:	f043 0302 	orr.w	r3, r3, #2
 800fa88:	b29a      	uxth	r2, r3
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800fa8e:	6878      	ldr	r0, [r7, #4]
 800fa90:	f7fe fdbe 	bl	800e610 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800fa94:	4b18      	ldr	r3, [pc, #96]	; (800faf8 <tcp_process+0x5d4>)
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	687a      	ldr	r2, [r7, #4]
 800fa9a:	429a      	cmp	r2, r3
 800fa9c:	d105      	bne.n	800faaa <tcp_process+0x586>
 800fa9e:	4b16      	ldr	r3, [pc, #88]	; (800faf8 <tcp_process+0x5d4>)
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	68db      	ldr	r3, [r3, #12]
 800faa4:	4a14      	ldr	r2, [pc, #80]	; (800faf8 <tcp_process+0x5d4>)
 800faa6:	6013      	str	r3, [r2, #0]
 800faa8:	e02e      	b.n	800fb08 <tcp_process+0x5e4>
 800faaa:	4b13      	ldr	r3, [pc, #76]	; (800faf8 <tcp_process+0x5d4>)
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	617b      	str	r3, [r7, #20]
 800fab0:	e027      	b.n	800fb02 <tcp_process+0x5de>
 800fab2:	697b      	ldr	r3, [r7, #20]
 800fab4:	68db      	ldr	r3, [r3, #12]
 800fab6:	687a      	ldr	r2, [r7, #4]
 800fab8:	429a      	cmp	r2, r3
 800faba:	d11f      	bne.n	800fafc <tcp_process+0x5d8>
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	68da      	ldr	r2, [r3, #12]
 800fac0:	697b      	ldr	r3, [r7, #20]
 800fac2:	60da      	str	r2, [r3, #12]
 800fac4:	e020      	b.n	800fb08 <tcp_process+0x5e4>
 800fac6:	bf00      	nop
 800fac8:	20008c84 	.word	0x20008c84
 800facc:	20008c7c 	.word	0x20008c7c
 800fad0:	20008c82 	.word	0x20008c82
 800fad4:	20008c78 	.word	0x20008c78
 800fad8:	20008c68 	.word	0x20008c68
 800fadc:	2000c3b4 	.word	0x2000c3b4
 800fae0:	2000c3b8 	.word	0x2000c3b8
 800fae4:	0801b518 	.word	0x0801b518
 800fae8:	0801b7b8 	.word	0x0801b7b8
 800faec:	0801b564 	.word	0x0801b564
 800faf0:	20008c80 	.word	0x20008c80
 800faf4:	20008c85 	.word	0x20008c85
 800faf8:	2000fad8 	.word	0x2000fad8
 800fafc:	697b      	ldr	r3, [r7, #20]
 800fafe:	68db      	ldr	r3, [r3, #12]
 800fb00:	617b      	str	r3, [r7, #20]
 800fb02:	697b      	ldr	r3, [r7, #20]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d1d4      	bne.n	800fab2 <tcp_process+0x58e>
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	60da      	str	r2, [r3, #12]
 800fb0e:	4b77      	ldr	r3, [pc, #476]	; (800fcec <tcp_process+0x7c8>)
 800fb10:	2201      	movs	r2, #1
 800fb12:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	220a      	movs	r2, #10
 800fb18:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800fb1a:	4b75      	ldr	r3, [pc, #468]	; (800fcf0 <tcp_process+0x7cc>)
 800fb1c:	681a      	ldr	r2, [r3, #0]
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	60da      	str	r2, [r3, #12]
 800fb22:	4a73      	ldr	r2, [pc, #460]	; (800fcf0 <tcp_process+0x7cc>)
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	6013      	str	r3, [r2, #0]
 800fb28:	f003 f960 	bl	8012dec <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800fb2c:	e0d2      	b.n	800fcd4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	8b5b      	ldrh	r3, [r3, #26]
 800fb32:	f043 0302 	orr.w	r3, r3, #2
 800fb36:	b29a      	uxth	r2, r3
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	2208      	movs	r2, #8
 800fb40:	751a      	strb	r2, [r3, #20]
      break;
 800fb42:	e0c7      	b.n	800fcd4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fb44:	4b6b      	ldr	r3, [pc, #428]	; (800fcf4 <tcp_process+0x7d0>)
 800fb46:	781b      	ldrb	r3, [r3, #0]
 800fb48:	f003 0310 	and.w	r3, r3, #16
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	f000 80c1 	beq.w	800fcd4 <tcp_process+0x7b0>
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fb56:	4b68      	ldr	r3, [pc, #416]	; (800fcf8 <tcp_process+0x7d4>)
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	429a      	cmp	r2, r3
 800fb5c:	f040 80ba 	bne.w	800fcd4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	f040 80b5 	bne.w	800fcd4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	2206      	movs	r2, #6
 800fb6e:	751a      	strb	r2, [r3, #20]
      break;
 800fb70:	e0b0      	b.n	800fcd4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800fb72:	6878      	ldr	r0, [r7, #4]
 800fb74:	f000 f9ca 	bl	800ff0c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800fb78:	4b60      	ldr	r3, [pc, #384]	; (800fcfc <tcp_process+0x7d8>)
 800fb7a:	781b      	ldrb	r3, [r3, #0]
 800fb7c:	f003 0320 	and.w	r3, r3, #32
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	f000 80a9 	beq.w	800fcd8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	8b5b      	ldrh	r3, [r3, #26]
 800fb8a:	f043 0302 	orr.w	r3, r3, #2
 800fb8e:	b29a      	uxth	r2, r3
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800fb94:	6878      	ldr	r0, [r7, #4]
 800fb96:	f7fe fd3b 	bl	800e610 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800fb9a:	4b59      	ldr	r3, [pc, #356]	; (800fd00 <tcp_process+0x7dc>)
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	687a      	ldr	r2, [r7, #4]
 800fba0:	429a      	cmp	r2, r3
 800fba2:	d105      	bne.n	800fbb0 <tcp_process+0x68c>
 800fba4:	4b56      	ldr	r3, [pc, #344]	; (800fd00 <tcp_process+0x7dc>)
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	68db      	ldr	r3, [r3, #12]
 800fbaa:	4a55      	ldr	r2, [pc, #340]	; (800fd00 <tcp_process+0x7dc>)
 800fbac:	6013      	str	r3, [r2, #0]
 800fbae:	e013      	b.n	800fbd8 <tcp_process+0x6b4>
 800fbb0:	4b53      	ldr	r3, [pc, #332]	; (800fd00 <tcp_process+0x7dc>)
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	613b      	str	r3, [r7, #16]
 800fbb6:	e00c      	b.n	800fbd2 <tcp_process+0x6ae>
 800fbb8:	693b      	ldr	r3, [r7, #16]
 800fbba:	68db      	ldr	r3, [r3, #12]
 800fbbc:	687a      	ldr	r2, [r7, #4]
 800fbbe:	429a      	cmp	r2, r3
 800fbc0:	d104      	bne.n	800fbcc <tcp_process+0x6a8>
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	68da      	ldr	r2, [r3, #12]
 800fbc6:	693b      	ldr	r3, [r7, #16]
 800fbc8:	60da      	str	r2, [r3, #12]
 800fbca:	e005      	b.n	800fbd8 <tcp_process+0x6b4>
 800fbcc:	693b      	ldr	r3, [r7, #16]
 800fbce:	68db      	ldr	r3, [r3, #12]
 800fbd0:	613b      	str	r3, [r7, #16]
 800fbd2:	693b      	ldr	r3, [r7, #16]
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d1ef      	bne.n	800fbb8 <tcp_process+0x694>
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	2200      	movs	r2, #0
 800fbdc:	60da      	str	r2, [r3, #12]
 800fbde:	4b43      	ldr	r3, [pc, #268]	; (800fcec <tcp_process+0x7c8>)
 800fbe0:	2201      	movs	r2, #1
 800fbe2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	220a      	movs	r2, #10
 800fbe8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800fbea:	4b41      	ldr	r3, [pc, #260]	; (800fcf0 <tcp_process+0x7cc>)
 800fbec:	681a      	ldr	r2, [r3, #0]
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	60da      	str	r2, [r3, #12]
 800fbf2:	4a3f      	ldr	r2, [pc, #252]	; (800fcf0 <tcp_process+0x7cc>)
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	6013      	str	r3, [r2, #0]
 800fbf8:	f003 f8f8 	bl	8012dec <tcp_timer_needed>
      }
      break;
 800fbfc:	e06c      	b.n	800fcd8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800fbfe:	6878      	ldr	r0, [r7, #4]
 800fc00:	f000 f984 	bl	800ff0c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800fc04:	4b3b      	ldr	r3, [pc, #236]	; (800fcf4 <tcp_process+0x7d0>)
 800fc06:	781b      	ldrb	r3, [r3, #0]
 800fc08:	f003 0310 	and.w	r3, r3, #16
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d065      	beq.n	800fcdc <tcp_process+0x7b8>
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fc14:	4b38      	ldr	r3, [pc, #224]	; (800fcf8 <tcp_process+0x7d4>)
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	429a      	cmp	r2, r3
 800fc1a:	d15f      	bne.n	800fcdc <tcp_process+0x7b8>
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d15b      	bne.n	800fcdc <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800fc24:	6878      	ldr	r0, [r7, #4]
 800fc26:	f7fe fcf3 	bl	800e610 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800fc2a:	4b35      	ldr	r3, [pc, #212]	; (800fd00 <tcp_process+0x7dc>)
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	687a      	ldr	r2, [r7, #4]
 800fc30:	429a      	cmp	r2, r3
 800fc32:	d105      	bne.n	800fc40 <tcp_process+0x71c>
 800fc34:	4b32      	ldr	r3, [pc, #200]	; (800fd00 <tcp_process+0x7dc>)
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	68db      	ldr	r3, [r3, #12]
 800fc3a:	4a31      	ldr	r2, [pc, #196]	; (800fd00 <tcp_process+0x7dc>)
 800fc3c:	6013      	str	r3, [r2, #0]
 800fc3e:	e013      	b.n	800fc68 <tcp_process+0x744>
 800fc40:	4b2f      	ldr	r3, [pc, #188]	; (800fd00 <tcp_process+0x7dc>)
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	60fb      	str	r3, [r7, #12]
 800fc46:	e00c      	b.n	800fc62 <tcp_process+0x73e>
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	68db      	ldr	r3, [r3, #12]
 800fc4c:	687a      	ldr	r2, [r7, #4]
 800fc4e:	429a      	cmp	r2, r3
 800fc50:	d104      	bne.n	800fc5c <tcp_process+0x738>
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	68da      	ldr	r2, [r3, #12]
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	60da      	str	r2, [r3, #12]
 800fc5a:	e005      	b.n	800fc68 <tcp_process+0x744>
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	68db      	ldr	r3, [r3, #12]
 800fc60:	60fb      	str	r3, [r7, #12]
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d1ef      	bne.n	800fc48 <tcp_process+0x724>
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	60da      	str	r2, [r3, #12]
 800fc6e:	4b1f      	ldr	r3, [pc, #124]	; (800fcec <tcp_process+0x7c8>)
 800fc70:	2201      	movs	r2, #1
 800fc72:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	220a      	movs	r2, #10
 800fc78:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800fc7a:	4b1d      	ldr	r3, [pc, #116]	; (800fcf0 <tcp_process+0x7cc>)
 800fc7c:	681a      	ldr	r2, [r3, #0]
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	60da      	str	r2, [r3, #12]
 800fc82:	4a1b      	ldr	r2, [pc, #108]	; (800fcf0 <tcp_process+0x7cc>)
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	6013      	str	r3, [r2, #0]
 800fc88:	f003 f8b0 	bl	8012dec <tcp_timer_needed>
      }
      break;
 800fc8c:	e026      	b.n	800fcdc <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800fc8e:	6878      	ldr	r0, [r7, #4]
 800fc90:	f000 f93c 	bl	800ff0c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800fc94:	4b17      	ldr	r3, [pc, #92]	; (800fcf4 <tcp_process+0x7d0>)
 800fc96:	781b      	ldrb	r3, [r3, #0]
 800fc98:	f003 0310 	and.w	r3, r3, #16
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d01f      	beq.n	800fce0 <tcp_process+0x7bc>
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fca4:	4b14      	ldr	r3, [pc, #80]	; (800fcf8 <tcp_process+0x7d4>)
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	429a      	cmp	r2, r3
 800fcaa:	d119      	bne.n	800fce0 <tcp_process+0x7bc>
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d115      	bne.n	800fce0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800fcb4:	4b11      	ldr	r3, [pc, #68]	; (800fcfc <tcp_process+0x7d8>)
 800fcb6:	781b      	ldrb	r3, [r3, #0]
 800fcb8:	f043 0310 	orr.w	r3, r3, #16
 800fcbc:	b2da      	uxtb	r2, r3
 800fcbe:	4b0f      	ldr	r3, [pc, #60]	; (800fcfc <tcp_process+0x7d8>)
 800fcc0:	701a      	strb	r2, [r3, #0]
      }
      break;
 800fcc2:	e00d      	b.n	800fce0 <tcp_process+0x7bc>
    default:
      break;
 800fcc4:	bf00      	nop
 800fcc6:	e00c      	b.n	800fce2 <tcp_process+0x7be>
      break;
 800fcc8:	bf00      	nop
 800fcca:	e00a      	b.n	800fce2 <tcp_process+0x7be>
      break;
 800fccc:	bf00      	nop
 800fcce:	e008      	b.n	800fce2 <tcp_process+0x7be>
      break;
 800fcd0:	bf00      	nop
 800fcd2:	e006      	b.n	800fce2 <tcp_process+0x7be>
      break;
 800fcd4:	bf00      	nop
 800fcd6:	e004      	b.n	800fce2 <tcp_process+0x7be>
      break;
 800fcd8:	bf00      	nop
 800fcda:	e002      	b.n	800fce2 <tcp_process+0x7be>
      break;
 800fcdc:	bf00      	nop
 800fcde:	e000      	b.n	800fce2 <tcp_process+0x7be>
      break;
 800fce0:	bf00      	nop
  }
  return ERR_OK;
 800fce2:	2300      	movs	r3, #0
}
 800fce4:	4618      	mov	r0, r3
 800fce6:	3724      	adds	r7, #36	; 0x24
 800fce8:	46bd      	mov	sp, r7
 800fcea:	bd90      	pop	{r4, r7, pc}
 800fcec:	2000fad4 	.word	0x2000fad4
 800fcf0:	2000fae8 	.word	0x2000fae8
 800fcf4:	20008c84 	.word	0x20008c84
 800fcf8:	20008c7c 	.word	0x20008c7c
 800fcfc:	20008c85 	.word	0x20008c85
 800fd00:	2000fad8 	.word	0x2000fad8

0800fd04 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800fd04:	b590      	push	{r4, r7, lr}
 800fd06:	b085      	sub	sp, #20
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	6078      	str	r0, [r7, #4]
 800fd0c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d106      	bne.n	800fd22 <tcp_oos_insert_segment+0x1e>
 800fd14:	4b3b      	ldr	r3, [pc, #236]	; (800fe04 <tcp_oos_insert_segment+0x100>)
 800fd16:	f240 421f 	movw	r2, #1055	; 0x41f
 800fd1a:	493b      	ldr	r1, [pc, #236]	; (800fe08 <tcp_oos_insert_segment+0x104>)
 800fd1c:	483b      	ldr	r0, [pc, #236]	; (800fe0c <tcp_oos_insert_segment+0x108>)
 800fd1e:	f008 fa37 	bl	8018190 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	68db      	ldr	r3, [r3, #12]
 800fd26:	899b      	ldrh	r3, [r3, #12]
 800fd28:	b29b      	uxth	r3, r3
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	f7fb f994 	bl	800b058 <lwip_htons>
 800fd30:	4603      	mov	r3, r0
 800fd32:	b2db      	uxtb	r3, r3
 800fd34:	f003 0301 	and.w	r3, r3, #1
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d028      	beq.n	800fd8e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800fd3c:	6838      	ldr	r0, [r7, #0]
 800fd3e:	f7fe f97b 	bl	800e038 <tcp_segs_free>
    next = NULL;
 800fd42:	2300      	movs	r3, #0
 800fd44:	603b      	str	r3, [r7, #0]
 800fd46:	e056      	b.n	800fdf6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800fd48:	683b      	ldr	r3, [r7, #0]
 800fd4a:	68db      	ldr	r3, [r3, #12]
 800fd4c:	899b      	ldrh	r3, [r3, #12]
 800fd4e:	b29b      	uxth	r3, r3
 800fd50:	4618      	mov	r0, r3
 800fd52:	f7fb f981 	bl	800b058 <lwip_htons>
 800fd56:	4603      	mov	r3, r0
 800fd58:	b2db      	uxtb	r3, r3
 800fd5a:	f003 0301 	and.w	r3, r3, #1
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d00d      	beq.n	800fd7e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	68db      	ldr	r3, [r3, #12]
 800fd66:	899b      	ldrh	r3, [r3, #12]
 800fd68:	b29c      	uxth	r4, r3
 800fd6a:	2001      	movs	r0, #1
 800fd6c:	f7fb f974 	bl	800b058 <lwip_htons>
 800fd70:	4603      	mov	r3, r0
 800fd72:	461a      	mov	r2, r3
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	68db      	ldr	r3, [r3, #12]
 800fd78:	4322      	orrs	r2, r4
 800fd7a:	b292      	uxth	r2, r2
 800fd7c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800fd7e:	683b      	ldr	r3, [r7, #0]
 800fd80:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800fd82:	683b      	ldr	r3, [r7, #0]
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800fd88:	68f8      	ldr	r0, [r7, #12]
 800fd8a:	f7fe f969 	bl	800e060 <tcp_seg_free>
    while (next &&
 800fd8e:	683b      	ldr	r3, [r7, #0]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d00e      	beq.n	800fdb2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	891b      	ldrh	r3, [r3, #8]
 800fd98:	461a      	mov	r2, r3
 800fd9a:	4b1d      	ldr	r3, [pc, #116]	; (800fe10 <tcp_oos_insert_segment+0x10c>)
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	441a      	add	r2, r3
 800fda0:	683b      	ldr	r3, [r7, #0]
 800fda2:	68db      	ldr	r3, [r3, #12]
 800fda4:	685b      	ldr	r3, [r3, #4]
 800fda6:	6839      	ldr	r1, [r7, #0]
 800fda8:	8909      	ldrh	r1, [r1, #8]
 800fdaa:	440b      	add	r3, r1
 800fdac:	1ad3      	subs	r3, r2, r3
    while (next &&
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	daca      	bge.n	800fd48 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800fdb2:	683b      	ldr	r3, [r7, #0]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d01e      	beq.n	800fdf6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	891b      	ldrh	r3, [r3, #8]
 800fdbc:	461a      	mov	r2, r3
 800fdbe:	4b14      	ldr	r3, [pc, #80]	; (800fe10 <tcp_oos_insert_segment+0x10c>)
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	441a      	add	r2, r3
 800fdc4:	683b      	ldr	r3, [r7, #0]
 800fdc6:	68db      	ldr	r3, [r3, #12]
 800fdc8:	685b      	ldr	r3, [r3, #4]
 800fdca:	1ad3      	subs	r3, r2, r3
    if (next &&
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	dd12      	ble.n	800fdf6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800fdd0:	683b      	ldr	r3, [r7, #0]
 800fdd2:	68db      	ldr	r3, [r3, #12]
 800fdd4:	685b      	ldr	r3, [r3, #4]
 800fdd6:	b29a      	uxth	r2, r3
 800fdd8:	4b0d      	ldr	r3, [pc, #52]	; (800fe10 <tcp_oos_insert_segment+0x10c>)
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	b29b      	uxth	r3, r3
 800fdde:	1ad3      	subs	r3, r2, r3
 800fde0:	b29a      	uxth	r2, r3
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	685a      	ldr	r2, [r3, #4]
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	891b      	ldrh	r3, [r3, #8]
 800fdee:	4619      	mov	r1, r3
 800fdf0:	4610      	mov	r0, r2
 800fdf2:	f7fc fb17 	bl	800c424 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	683a      	ldr	r2, [r7, #0]
 800fdfa:	601a      	str	r2, [r3, #0]
}
 800fdfc:	bf00      	nop
 800fdfe:	3714      	adds	r7, #20
 800fe00:	46bd      	mov	sp, r7
 800fe02:	bd90      	pop	{r4, r7, pc}
 800fe04:	0801b518 	.word	0x0801b518
 800fe08:	0801b7d8 	.word	0x0801b7d8
 800fe0c:	0801b564 	.word	0x0801b564
 800fe10:	20008c78 	.word	0x20008c78

0800fe14 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800fe14:	b5b0      	push	{r4, r5, r7, lr}
 800fe16:	b086      	sub	sp, #24
 800fe18:	af00      	add	r7, sp, #0
 800fe1a:	60f8      	str	r0, [r7, #12]
 800fe1c:	60b9      	str	r1, [r7, #8]
 800fe1e:	607a      	str	r2, [r7, #4]
 800fe20:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800fe22:	e03e      	b.n	800fea2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800fe24:	68bb      	ldr	r3, [r7, #8]
 800fe26:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800fe28:	68bb      	ldr	r3, [r7, #8]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800fe2e:	697b      	ldr	r3, [r7, #20]
 800fe30:	685b      	ldr	r3, [r3, #4]
 800fe32:	4618      	mov	r0, r3
 800fe34:	f7fc fd0a 	bl	800c84c <pbuf_clen>
 800fe38:	4603      	mov	r3, r0
 800fe3a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fe42:	8a7a      	ldrh	r2, [r7, #18]
 800fe44:	429a      	cmp	r2, r3
 800fe46:	d906      	bls.n	800fe56 <tcp_free_acked_segments+0x42>
 800fe48:	4b2a      	ldr	r3, [pc, #168]	; (800fef4 <tcp_free_acked_segments+0xe0>)
 800fe4a:	f240 4257 	movw	r2, #1111	; 0x457
 800fe4e:	492a      	ldr	r1, [pc, #168]	; (800fef8 <tcp_free_acked_segments+0xe4>)
 800fe50:	482a      	ldr	r0, [pc, #168]	; (800fefc <tcp_free_acked_segments+0xe8>)
 800fe52:	f008 f99d 	bl	8018190 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800fe5c:	8a7b      	ldrh	r3, [r7, #18]
 800fe5e:	1ad3      	subs	r3, r2, r3
 800fe60:	b29a      	uxth	r2, r3
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800fe68:	697b      	ldr	r3, [r7, #20]
 800fe6a:	891a      	ldrh	r2, [r3, #8]
 800fe6c:	4b24      	ldr	r3, [pc, #144]	; (800ff00 <tcp_free_acked_segments+0xec>)
 800fe6e:	881b      	ldrh	r3, [r3, #0]
 800fe70:	4413      	add	r3, r2
 800fe72:	b29a      	uxth	r2, r3
 800fe74:	4b22      	ldr	r3, [pc, #136]	; (800ff00 <tcp_free_acked_segments+0xec>)
 800fe76:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800fe78:	6978      	ldr	r0, [r7, #20]
 800fe7a:	f7fe f8f1 	bl	800e060 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d00c      	beq.n	800fea2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800fe88:	68bb      	ldr	r3, [r7, #8]
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d109      	bne.n	800fea2 <tcp_free_acked_segments+0x8e>
 800fe8e:	683b      	ldr	r3, [r7, #0]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d106      	bne.n	800fea2 <tcp_free_acked_segments+0x8e>
 800fe94:	4b17      	ldr	r3, [pc, #92]	; (800fef4 <tcp_free_acked_segments+0xe0>)
 800fe96:	f240 4262 	movw	r2, #1122	; 0x462
 800fe9a:	491a      	ldr	r1, [pc, #104]	; (800ff04 <tcp_free_acked_segments+0xf0>)
 800fe9c:	4817      	ldr	r0, [pc, #92]	; (800fefc <tcp_free_acked_segments+0xe8>)
 800fe9e:	f008 f977 	bl	8018190 <iprintf>
  while (seg_list != NULL &&
 800fea2:	68bb      	ldr	r3, [r7, #8]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d020      	beq.n	800feea <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800fea8:	68bb      	ldr	r3, [r7, #8]
 800feaa:	68db      	ldr	r3, [r3, #12]
 800feac:	685b      	ldr	r3, [r3, #4]
 800feae:	4618      	mov	r0, r3
 800feb0:	f7fb f8e7 	bl	800b082 <lwip_htonl>
 800feb4:	4604      	mov	r4, r0
 800feb6:	68bb      	ldr	r3, [r7, #8]
 800feb8:	891b      	ldrh	r3, [r3, #8]
 800feba:	461d      	mov	r5, r3
 800febc:	68bb      	ldr	r3, [r7, #8]
 800febe:	68db      	ldr	r3, [r3, #12]
 800fec0:	899b      	ldrh	r3, [r3, #12]
 800fec2:	b29b      	uxth	r3, r3
 800fec4:	4618      	mov	r0, r3
 800fec6:	f7fb f8c7 	bl	800b058 <lwip_htons>
 800feca:	4603      	mov	r3, r0
 800fecc:	b2db      	uxtb	r3, r3
 800fece:	f003 0303 	and.w	r3, r3, #3
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d001      	beq.n	800feda <tcp_free_acked_segments+0xc6>
 800fed6:	2301      	movs	r3, #1
 800fed8:	e000      	b.n	800fedc <tcp_free_acked_segments+0xc8>
 800feda:	2300      	movs	r3, #0
 800fedc:	442b      	add	r3, r5
 800fede:	18e2      	adds	r2, r4, r3
 800fee0:	4b09      	ldr	r3, [pc, #36]	; (800ff08 <tcp_free_acked_segments+0xf4>)
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	dd9c      	ble.n	800fe24 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800feea:	68bb      	ldr	r3, [r7, #8]
}
 800feec:	4618      	mov	r0, r3
 800feee:	3718      	adds	r7, #24
 800fef0:	46bd      	mov	sp, r7
 800fef2:	bdb0      	pop	{r4, r5, r7, pc}
 800fef4:	0801b518 	.word	0x0801b518
 800fef8:	0801b800 	.word	0x0801b800
 800fefc:	0801b564 	.word	0x0801b564
 800ff00:	20008c80 	.word	0x20008c80
 800ff04:	0801b828 	.word	0x0801b828
 800ff08:	20008c7c 	.word	0x20008c7c

0800ff0c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800ff0c:	b5b0      	push	{r4, r5, r7, lr}
 800ff0e:	b094      	sub	sp, #80	; 0x50
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800ff14:	2300      	movs	r3, #0
 800ff16:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d106      	bne.n	800ff2c <tcp_receive+0x20>
 800ff1e:	4ba6      	ldr	r3, [pc, #664]	; (80101b8 <tcp_receive+0x2ac>)
 800ff20:	f240 427b 	movw	r2, #1147	; 0x47b
 800ff24:	49a5      	ldr	r1, [pc, #660]	; (80101bc <tcp_receive+0x2b0>)
 800ff26:	48a6      	ldr	r0, [pc, #664]	; (80101c0 <tcp_receive+0x2b4>)
 800ff28:	f008 f932 	bl	8018190 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	7d1b      	ldrb	r3, [r3, #20]
 800ff30:	2b03      	cmp	r3, #3
 800ff32:	d806      	bhi.n	800ff42 <tcp_receive+0x36>
 800ff34:	4ba0      	ldr	r3, [pc, #640]	; (80101b8 <tcp_receive+0x2ac>)
 800ff36:	f240 427c 	movw	r2, #1148	; 0x47c
 800ff3a:	49a2      	ldr	r1, [pc, #648]	; (80101c4 <tcp_receive+0x2b8>)
 800ff3c:	48a0      	ldr	r0, [pc, #640]	; (80101c0 <tcp_receive+0x2b4>)
 800ff3e:	f008 f927 	bl	8018190 <iprintf>

  if (flags & TCP_ACK) {
 800ff42:	4ba1      	ldr	r3, [pc, #644]	; (80101c8 <tcp_receive+0x2bc>)
 800ff44:	781b      	ldrb	r3, [r3, #0]
 800ff46:	f003 0310 	and.w	r3, r3, #16
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	f000 8263 	beq.w	8010416 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ff56:	461a      	mov	r2, r3
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff5c:	4413      	add	r3, r2
 800ff5e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ff64:	4b99      	ldr	r3, [pc, #612]	; (80101cc <tcp_receive+0x2c0>)
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	1ad3      	subs	r3, r2, r3
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	db1b      	blt.n	800ffa6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ff72:	4b96      	ldr	r3, [pc, #600]	; (80101cc <tcp_receive+0x2c0>)
 800ff74:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ff76:	429a      	cmp	r2, r3
 800ff78:	d106      	bne.n	800ff88 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ff7e:	4b94      	ldr	r3, [pc, #592]	; (80101d0 <tcp_receive+0x2c4>)
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	1ad3      	subs	r3, r2, r3
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	db0e      	blt.n	800ffa6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ff8c:	4b90      	ldr	r3, [pc, #576]	; (80101d0 <tcp_receive+0x2c4>)
 800ff8e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ff90:	429a      	cmp	r2, r3
 800ff92:	d125      	bne.n	800ffe0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ff94:	4b8f      	ldr	r3, [pc, #572]	; (80101d4 <tcp_receive+0x2c8>)
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	89db      	ldrh	r3, [r3, #14]
 800ff9a:	b29a      	uxth	r2, r3
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ffa2:	429a      	cmp	r2, r3
 800ffa4:	d91c      	bls.n	800ffe0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800ffa6:	4b8b      	ldr	r3, [pc, #556]	; (80101d4 <tcp_receive+0x2c8>)
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	89db      	ldrh	r3, [r3, #14]
 800ffac:	b29a      	uxth	r2, r3
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ffc0:	429a      	cmp	r2, r3
 800ffc2:	d205      	bcs.n	800ffd0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800ffd0:	4b7e      	ldr	r3, [pc, #504]	; (80101cc <tcp_receive+0x2c0>)
 800ffd2:	681a      	ldr	r2, [r3, #0]
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800ffd8:	4b7d      	ldr	r3, [pc, #500]	; (80101d0 <tcp_receive+0x2c4>)
 800ffda:	681a      	ldr	r2, [r3, #0]
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800ffe0:	4b7b      	ldr	r3, [pc, #492]	; (80101d0 <tcp_receive+0x2c4>)
 800ffe2:	681a      	ldr	r2, [r3, #0]
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ffe8:	1ad3      	subs	r3, r2, r3
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	dc58      	bgt.n	80100a0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800ffee:	4b7a      	ldr	r3, [pc, #488]	; (80101d8 <tcp_receive+0x2cc>)
 800fff0:	881b      	ldrh	r3, [r3, #0]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d14b      	bne.n	801008e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fffa:	687a      	ldr	r2, [r7, #4]
 800fffc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8010000:	4413      	add	r3, r2
 8010002:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010004:	429a      	cmp	r2, r3
 8010006:	d142      	bne.n	801008e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801000e:	2b00      	cmp	r3, #0
 8010010:	db3d      	blt.n	801008e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010016:	4b6e      	ldr	r3, [pc, #440]	; (80101d0 <tcp_receive+0x2c4>)
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	429a      	cmp	r2, r3
 801001c:	d137      	bne.n	801008e <tcp_receive+0x182>
              found_dupack = 1;
 801001e:	2301      	movs	r3, #1
 8010020:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010028:	2bff      	cmp	r3, #255	; 0xff
 801002a:	d007      	beq.n	801003c <tcp_receive+0x130>
                ++pcb->dupacks;
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010032:	3301      	adds	r3, #1
 8010034:	b2da      	uxtb	r2, r3
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010042:	2b03      	cmp	r3, #3
 8010044:	d91b      	bls.n	801007e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010050:	4413      	add	r3, r2
 8010052:	b29a      	uxth	r2, r3
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801005a:	429a      	cmp	r2, r3
 801005c:	d30a      	bcc.n	8010074 <tcp_receive+0x168>
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010068:	4413      	add	r3, r2
 801006a:	b29a      	uxth	r2, r3
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010072:	e004      	b.n	801007e <tcp_receive+0x172>
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801007a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010084:	2b02      	cmp	r3, #2
 8010086:	d902      	bls.n	801008e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010088:	6878      	ldr	r0, [r7, #4]
 801008a:	f002 fb47 	bl	801271c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801008e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010090:	2b00      	cmp	r3, #0
 8010092:	f040 8160 	bne.w	8010356 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	2200      	movs	r2, #0
 801009a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801009e:	e15a      	b.n	8010356 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80100a0:	4b4b      	ldr	r3, [pc, #300]	; (80101d0 <tcp_receive+0x2c4>)
 80100a2:	681a      	ldr	r2, [r3, #0]
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80100a8:	1ad3      	subs	r3, r2, r3
 80100aa:	3b01      	subs	r3, #1
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	f2c0 814d 	blt.w	801034c <tcp_receive+0x440>
 80100b2:	4b47      	ldr	r3, [pc, #284]	; (80101d0 <tcp_receive+0x2c4>)
 80100b4:	681a      	ldr	r2, [r3, #0]
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80100ba:	1ad3      	subs	r3, r2, r3
 80100bc:	2b00      	cmp	r3, #0
 80100be:	f300 8145 	bgt.w	801034c <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	8b5b      	ldrh	r3, [r3, #26]
 80100c6:	f003 0304 	and.w	r3, r3, #4
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d010      	beq.n	80100f0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	8b5b      	ldrh	r3, [r3, #26]
 80100d2:	f023 0304 	bic.w	r3, r3, #4
 80100d6:	b29a      	uxth	r2, r3
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	2200      	movs	r2, #0
 80100ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	2200      	movs	r2, #0
 80100f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80100fe:	10db      	asrs	r3, r3, #3
 8010100:	b21b      	sxth	r3, r3
 8010102:	b29a      	uxth	r2, r3
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801010a:	b29b      	uxth	r3, r3
 801010c:	4413      	add	r3, r2
 801010e:	b29b      	uxth	r3, r3
 8010110:	b21a      	sxth	r2, r3
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010118:	4b2d      	ldr	r3, [pc, #180]	; (80101d0 <tcp_receive+0x2c4>)
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	b29a      	uxth	r2, r3
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010122:	b29b      	uxth	r3, r3
 8010124:	1ad3      	subs	r3, r2, r3
 8010126:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	2200      	movs	r2, #0
 801012c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010130:	4b27      	ldr	r3, [pc, #156]	; (80101d0 <tcp_receive+0x2c4>)
 8010132:	681a      	ldr	r2, [r3, #0]
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	7d1b      	ldrb	r3, [r3, #20]
 801013c:	2b03      	cmp	r3, #3
 801013e:	f240 8096 	bls.w	801026e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801014e:	429a      	cmp	r2, r3
 8010150:	d244      	bcs.n	80101dc <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	8b5b      	ldrh	r3, [r3, #26]
 8010156:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801015a:	2b00      	cmp	r3, #0
 801015c:	d001      	beq.n	8010162 <tcp_receive+0x256>
 801015e:	2301      	movs	r3, #1
 8010160:	e000      	b.n	8010164 <tcp_receive+0x258>
 8010162:	2302      	movs	r3, #2
 8010164:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8010168:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801016c:	b29a      	uxth	r2, r3
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010172:	fb12 f303 	smulbb	r3, r2, r3
 8010176:	b29b      	uxth	r3, r3
 8010178:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801017a:	4293      	cmp	r3, r2
 801017c:	bf28      	it	cs
 801017e:	4613      	movcs	r3, r2
 8010180:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010188:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801018a:	4413      	add	r3, r2
 801018c:	b29a      	uxth	r2, r3
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010194:	429a      	cmp	r2, r3
 8010196:	d309      	bcc.n	80101ac <tcp_receive+0x2a0>
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801019e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80101a0:	4413      	add	r3, r2
 80101a2:	b29a      	uxth	r2, r3
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80101aa:	e060      	b.n	801026e <tcp_receive+0x362>
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80101b2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80101b6:	e05a      	b.n	801026e <tcp_receive+0x362>
 80101b8:	0801b518 	.word	0x0801b518
 80101bc:	0801b848 	.word	0x0801b848
 80101c0:	0801b564 	.word	0x0801b564
 80101c4:	0801b864 	.word	0x0801b864
 80101c8:	20008c84 	.word	0x20008c84
 80101cc:	20008c78 	.word	0x20008c78
 80101d0:	20008c7c 	.word	0x20008c7c
 80101d4:	20008c68 	.word	0x20008c68
 80101d8:	20008c82 	.word	0x20008c82
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80101e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80101e4:	4413      	add	r3, r2
 80101e6:	b29a      	uxth	r2, r3
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80101ee:	429a      	cmp	r2, r3
 80101f0:	d309      	bcc.n	8010206 <tcp_receive+0x2fa>
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80101f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80101fa:	4413      	add	r3, r2
 80101fc:	b29a      	uxth	r2, r3
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010204:	e004      	b.n	8010210 <tcp_receive+0x304>
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801020c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801021c:	429a      	cmp	r2, r3
 801021e:	d326      	bcc.n	801026e <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801022c:	1ad3      	subs	r3, r2, r3
 801022e:	b29a      	uxth	r2, r3
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010240:	4413      	add	r3, r2
 8010242:	b29a      	uxth	r2, r3
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801024a:	429a      	cmp	r2, r3
 801024c:	d30a      	bcc.n	8010264 <tcp_receive+0x358>
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010258:	4413      	add	r3, r2
 801025a:	b29a      	uxth	r2, r3
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010262:	e004      	b.n	801026e <tcp_receive+0x362>
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801026a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010276:	4a98      	ldr	r2, [pc, #608]	; (80104d8 <tcp_receive+0x5cc>)
 8010278:	6878      	ldr	r0, [r7, #4]
 801027a:	f7ff fdcb 	bl	800fe14 <tcp_free_acked_segments>
 801027e:	4602      	mov	r2, r0
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801028c:	4a93      	ldr	r2, [pc, #588]	; (80104dc <tcp_receive+0x5d0>)
 801028e:	6878      	ldr	r0, [r7, #4]
 8010290:	f7ff fdc0 	bl	800fe14 <tcp_free_acked_segments>
 8010294:	4602      	mov	r2, r0
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d104      	bne.n	80102ac <tcp_receive+0x3a0>
        pcb->rtime = -1;
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80102a8:	861a      	strh	r2, [r3, #48]	; 0x30
 80102aa:	e002      	b.n	80102b2 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	2200      	movs	r2, #0
 80102b0:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	2200      	movs	r2, #0
 80102b6:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d103      	bne.n	80102c8 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	2200      	movs	r2, #0
 80102c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80102ce:	4b84      	ldr	r3, [pc, #528]	; (80104e0 <tcp_receive+0x5d4>)
 80102d0:	881b      	ldrh	r3, [r3, #0]
 80102d2:	4413      	add	r3, r2
 80102d4:	b29a      	uxth	r2, r3
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	8b5b      	ldrh	r3, [r3, #26]
 80102e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d035      	beq.n	8010354 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d118      	bne.n	8010322 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d00c      	beq.n	8010312 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010300:	68db      	ldr	r3, [r3, #12]
 8010302:	685b      	ldr	r3, [r3, #4]
 8010304:	4618      	mov	r0, r3
 8010306:	f7fa febc 	bl	800b082 <lwip_htonl>
 801030a:	4603      	mov	r3, r0
 801030c:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801030e:	2b00      	cmp	r3, #0
 8010310:	dc20      	bgt.n	8010354 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	8b5b      	ldrh	r3, [r3, #26]
 8010316:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801031a:	b29a      	uxth	r2, r3
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010320:	e018      	b.n	8010354 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801032a:	68db      	ldr	r3, [r3, #12]
 801032c:	685b      	ldr	r3, [r3, #4]
 801032e:	4618      	mov	r0, r3
 8010330:	f7fa fea7 	bl	800b082 <lwip_htonl>
 8010334:	4603      	mov	r3, r0
 8010336:	1ae3      	subs	r3, r4, r3
 8010338:	2b00      	cmp	r3, #0
 801033a:	dc0b      	bgt.n	8010354 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	8b5b      	ldrh	r3, [r3, #26]
 8010340:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010344:	b29a      	uxth	r2, r3
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801034a:	e003      	b.n	8010354 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801034c:	6878      	ldr	r0, [r7, #4]
 801034e:	f002 fbdd 	bl	8012b0c <tcp_send_empty_ack>
 8010352:	e000      	b.n	8010356 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010354:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801035a:	2b00      	cmp	r3, #0
 801035c:	d05b      	beq.n	8010416 <tcp_receive+0x50a>
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010362:	4b60      	ldr	r3, [pc, #384]	; (80104e4 <tcp_receive+0x5d8>)
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	1ad3      	subs	r3, r2, r3
 8010368:	2b00      	cmp	r3, #0
 801036a:	da54      	bge.n	8010416 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801036c:	4b5e      	ldr	r3, [pc, #376]	; (80104e8 <tcp_receive+0x5dc>)
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	b29a      	uxth	r2, r3
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010376:	b29b      	uxth	r3, r3
 8010378:	1ad3      	subs	r3, r2, r3
 801037a:	b29b      	uxth	r3, r3
 801037c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010380:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801038a:	10db      	asrs	r3, r3, #3
 801038c:	b21b      	sxth	r3, r3
 801038e:	b29b      	uxth	r3, r3
 8010390:	1ad3      	subs	r3, r2, r3
 8010392:	b29b      	uxth	r3, r3
 8010394:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801039e:	b29a      	uxth	r2, r3
 80103a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80103a4:	4413      	add	r3, r2
 80103a6:	b29b      	uxth	r3, r3
 80103a8:	b21a      	sxth	r2, r3
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80103ae:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	da05      	bge.n	80103c2 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 80103b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80103ba:	425b      	negs	r3, r3
 80103bc:	b29b      	uxth	r3, r3
 80103be:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80103c2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80103cc:	109b      	asrs	r3, r3, #2
 80103ce:	b21b      	sxth	r3, r3
 80103d0:	b29b      	uxth	r3, r3
 80103d2:	1ad3      	subs	r3, r2, r3
 80103d4:	b29b      	uxth	r3, r3
 80103d6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80103e0:	b29a      	uxth	r2, r3
 80103e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80103e6:	4413      	add	r3, r2
 80103e8:	b29b      	uxth	r3, r3
 80103ea:	b21a      	sxth	r2, r3
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80103f6:	10db      	asrs	r3, r3, #3
 80103f8:	b21b      	sxth	r3, r3
 80103fa:	b29a      	uxth	r2, r3
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010402:	b29b      	uxth	r3, r3
 8010404:	4413      	add	r3, r2
 8010406:	b29b      	uxth	r3, r3
 8010408:	b21a      	sxth	r2, r3
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	2200      	movs	r2, #0
 8010414:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010416:	4b35      	ldr	r3, [pc, #212]	; (80104ec <tcp_receive+0x5e0>)
 8010418:	881b      	ldrh	r3, [r3, #0]
 801041a:	2b00      	cmp	r3, #0
 801041c:	f000 84e1 	beq.w	8010de2 <tcp_receive+0xed6>
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	7d1b      	ldrb	r3, [r3, #20]
 8010424:	2b06      	cmp	r3, #6
 8010426:	f200 84dc 	bhi.w	8010de2 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801042e:	4b30      	ldr	r3, [pc, #192]	; (80104f0 <tcp_receive+0x5e4>)
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	1ad3      	subs	r3, r2, r3
 8010434:	3b01      	subs	r3, #1
 8010436:	2b00      	cmp	r3, #0
 8010438:	f2c0 808e 	blt.w	8010558 <tcp_receive+0x64c>
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010440:	4b2a      	ldr	r3, [pc, #168]	; (80104ec <tcp_receive+0x5e0>)
 8010442:	881b      	ldrh	r3, [r3, #0]
 8010444:	4619      	mov	r1, r3
 8010446:	4b2a      	ldr	r3, [pc, #168]	; (80104f0 <tcp_receive+0x5e4>)
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	440b      	add	r3, r1
 801044c:	1ad3      	subs	r3, r2, r3
 801044e:	3301      	adds	r3, #1
 8010450:	2b00      	cmp	r3, #0
 8010452:	f300 8081 	bgt.w	8010558 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010456:	4b27      	ldr	r3, [pc, #156]	; (80104f4 <tcp_receive+0x5e8>)
 8010458:	685b      	ldr	r3, [r3, #4]
 801045a:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010460:	4b23      	ldr	r3, [pc, #140]	; (80104f0 <tcp_receive+0x5e4>)
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	1ad3      	subs	r3, r2, r3
 8010466:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010468:	4b22      	ldr	r3, [pc, #136]	; (80104f4 <tcp_receive+0x5e8>)
 801046a:	685b      	ldr	r3, [r3, #4]
 801046c:	2b00      	cmp	r3, #0
 801046e:	d106      	bne.n	801047e <tcp_receive+0x572>
 8010470:	4b21      	ldr	r3, [pc, #132]	; (80104f8 <tcp_receive+0x5ec>)
 8010472:	f240 5294 	movw	r2, #1428	; 0x594
 8010476:	4921      	ldr	r1, [pc, #132]	; (80104fc <tcp_receive+0x5f0>)
 8010478:	4821      	ldr	r0, [pc, #132]	; (8010500 <tcp_receive+0x5f4>)
 801047a:	f007 fe89 	bl	8018190 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801047e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010480:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010484:	4293      	cmp	r3, r2
 8010486:	d906      	bls.n	8010496 <tcp_receive+0x58a>
 8010488:	4b1b      	ldr	r3, [pc, #108]	; (80104f8 <tcp_receive+0x5ec>)
 801048a:	f240 5295 	movw	r2, #1429	; 0x595
 801048e:	491d      	ldr	r1, [pc, #116]	; (8010504 <tcp_receive+0x5f8>)
 8010490:	481b      	ldr	r0, [pc, #108]	; (8010500 <tcp_receive+0x5f4>)
 8010492:	f007 fe7d 	bl	8018190 <iprintf>
      off = (u16_t)off32;
 8010496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010498:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801049c:	4b15      	ldr	r3, [pc, #84]	; (80104f4 <tcp_receive+0x5e8>)
 801049e:	685b      	ldr	r3, [r3, #4]
 80104a0:	891b      	ldrh	r3, [r3, #8]
 80104a2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80104a6:	429a      	cmp	r2, r3
 80104a8:	d906      	bls.n	80104b8 <tcp_receive+0x5ac>
 80104aa:	4b13      	ldr	r3, [pc, #76]	; (80104f8 <tcp_receive+0x5ec>)
 80104ac:	f240 5297 	movw	r2, #1431	; 0x597
 80104b0:	4915      	ldr	r1, [pc, #84]	; (8010508 <tcp_receive+0x5fc>)
 80104b2:	4813      	ldr	r0, [pc, #76]	; (8010500 <tcp_receive+0x5f4>)
 80104b4:	f007 fe6c 	bl	8018190 <iprintf>
      inseg.len -= off;
 80104b8:	4b0e      	ldr	r3, [pc, #56]	; (80104f4 <tcp_receive+0x5e8>)
 80104ba:	891a      	ldrh	r2, [r3, #8]
 80104bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80104c0:	1ad3      	subs	r3, r2, r3
 80104c2:	b29a      	uxth	r2, r3
 80104c4:	4b0b      	ldr	r3, [pc, #44]	; (80104f4 <tcp_receive+0x5e8>)
 80104c6:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80104c8:	4b0a      	ldr	r3, [pc, #40]	; (80104f4 <tcp_receive+0x5e8>)
 80104ca:	685b      	ldr	r3, [r3, #4]
 80104cc:	891a      	ldrh	r2, [r3, #8]
 80104ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80104d2:	1ad3      	subs	r3, r2, r3
 80104d4:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80104d6:	e029      	b.n	801052c <tcp_receive+0x620>
 80104d8:	0801b880 	.word	0x0801b880
 80104dc:	0801b888 	.word	0x0801b888
 80104e0:	20008c80 	.word	0x20008c80
 80104e4:	20008c7c 	.word	0x20008c7c
 80104e8:	2000fadc 	.word	0x2000fadc
 80104ec:	20008c82 	.word	0x20008c82
 80104f0:	20008c78 	.word	0x20008c78
 80104f4:	20008c58 	.word	0x20008c58
 80104f8:	0801b518 	.word	0x0801b518
 80104fc:	0801b890 	.word	0x0801b890
 8010500:	0801b564 	.word	0x0801b564
 8010504:	0801b8a0 	.word	0x0801b8a0
 8010508:	0801b8b0 	.word	0x0801b8b0
        off -= p->len;
 801050c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801050e:	895b      	ldrh	r3, [r3, #10]
 8010510:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010514:	1ad3      	subs	r3, r2, r3
 8010516:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801051a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801051c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801051e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8010520:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010522:	2200      	movs	r2, #0
 8010524:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8010526:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801052c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801052e:	895b      	ldrh	r3, [r3, #10]
 8010530:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010534:	429a      	cmp	r2, r3
 8010536:	d8e9      	bhi.n	801050c <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8010538:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801053c:	4619      	mov	r1, r3
 801053e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010540:	f7fc f870 	bl	800c624 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010548:	4a91      	ldr	r2, [pc, #580]	; (8010790 <tcp_receive+0x884>)
 801054a:	6013      	str	r3, [r2, #0]
 801054c:	4b91      	ldr	r3, [pc, #580]	; (8010794 <tcp_receive+0x888>)
 801054e:	68db      	ldr	r3, [r3, #12]
 8010550:	4a8f      	ldr	r2, [pc, #572]	; (8010790 <tcp_receive+0x884>)
 8010552:	6812      	ldr	r2, [r2, #0]
 8010554:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010556:	e00d      	b.n	8010574 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010558:	4b8d      	ldr	r3, [pc, #564]	; (8010790 <tcp_receive+0x884>)
 801055a:	681a      	ldr	r2, [r3, #0]
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010560:	1ad3      	subs	r3, r2, r3
 8010562:	2b00      	cmp	r3, #0
 8010564:	da06      	bge.n	8010574 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	8b5b      	ldrh	r3, [r3, #26]
 801056a:	f043 0302 	orr.w	r3, r3, #2
 801056e:	b29a      	uxth	r2, r3
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010574:	4b86      	ldr	r3, [pc, #536]	; (8010790 <tcp_receive+0x884>)
 8010576:	681a      	ldr	r2, [r3, #0]
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801057c:	1ad3      	subs	r3, r2, r3
 801057e:	2b00      	cmp	r3, #0
 8010580:	f2c0 842a 	blt.w	8010dd8 <tcp_receive+0xecc>
 8010584:	4b82      	ldr	r3, [pc, #520]	; (8010790 <tcp_receive+0x884>)
 8010586:	681a      	ldr	r2, [r3, #0]
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801058c:	6879      	ldr	r1, [r7, #4]
 801058e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010590:	440b      	add	r3, r1
 8010592:	1ad3      	subs	r3, r2, r3
 8010594:	3301      	adds	r3, #1
 8010596:	2b00      	cmp	r3, #0
 8010598:	f300 841e 	bgt.w	8010dd8 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80105a0:	4b7b      	ldr	r3, [pc, #492]	; (8010790 <tcp_receive+0x884>)
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	429a      	cmp	r2, r3
 80105a6:	f040 829a 	bne.w	8010ade <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80105aa:	4b7a      	ldr	r3, [pc, #488]	; (8010794 <tcp_receive+0x888>)
 80105ac:	891c      	ldrh	r4, [r3, #8]
 80105ae:	4b79      	ldr	r3, [pc, #484]	; (8010794 <tcp_receive+0x888>)
 80105b0:	68db      	ldr	r3, [r3, #12]
 80105b2:	899b      	ldrh	r3, [r3, #12]
 80105b4:	b29b      	uxth	r3, r3
 80105b6:	4618      	mov	r0, r3
 80105b8:	f7fa fd4e 	bl	800b058 <lwip_htons>
 80105bc:	4603      	mov	r3, r0
 80105be:	b2db      	uxtb	r3, r3
 80105c0:	f003 0303 	and.w	r3, r3, #3
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d001      	beq.n	80105cc <tcp_receive+0x6c0>
 80105c8:	2301      	movs	r3, #1
 80105ca:	e000      	b.n	80105ce <tcp_receive+0x6c2>
 80105cc:	2300      	movs	r3, #0
 80105ce:	4423      	add	r3, r4
 80105d0:	b29a      	uxth	r2, r3
 80105d2:	4b71      	ldr	r3, [pc, #452]	; (8010798 <tcp_receive+0x88c>)
 80105d4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80105da:	4b6f      	ldr	r3, [pc, #444]	; (8010798 <tcp_receive+0x88c>)
 80105dc:	881b      	ldrh	r3, [r3, #0]
 80105de:	429a      	cmp	r2, r3
 80105e0:	d275      	bcs.n	80106ce <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80105e2:	4b6c      	ldr	r3, [pc, #432]	; (8010794 <tcp_receive+0x888>)
 80105e4:	68db      	ldr	r3, [r3, #12]
 80105e6:	899b      	ldrh	r3, [r3, #12]
 80105e8:	b29b      	uxth	r3, r3
 80105ea:	4618      	mov	r0, r3
 80105ec:	f7fa fd34 	bl	800b058 <lwip_htons>
 80105f0:	4603      	mov	r3, r0
 80105f2:	b2db      	uxtb	r3, r3
 80105f4:	f003 0301 	and.w	r3, r3, #1
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d01f      	beq.n	801063c <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80105fc:	4b65      	ldr	r3, [pc, #404]	; (8010794 <tcp_receive+0x888>)
 80105fe:	68db      	ldr	r3, [r3, #12]
 8010600:	899b      	ldrh	r3, [r3, #12]
 8010602:	b29b      	uxth	r3, r3
 8010604:	b21b      	sxth	r3, r3
 8010606:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801060a:	b21c      	sxth	r4, r3
 801060c:	4b61      	ldr	r3, [pc, #388]	; (8010794 <tcp_receive+0x888>)
 801060e:	68db      	ldr	r3, [r3, #12]
 8010610:	899b      	ldrh	r3, [r3, #12]
 8010612:	b29b      	uxth	r3, r3
 8010614:	4618      	mov	r0, r3
 8010616:	f7fa fd1f 	bl	800b058 <lwip_htons>
 801061a:	4603      	mov	r3, r0
 801061c:	b2db      	uxtb	r3, r3
 801061e:	b29b      	uxth	r3, r3
 8010620:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010624:	b29b      	uxth	r3, r3
 8010626:	4618      	mov	r0, r3
 8010628:	f7fa fd16 	bl	800b058 <lwip_htons>
 801062c:	4603      	mov	r3, r0
 801062e:	b21b      	sxth	r3, r3
 8010630:	4323      	orrs	r3, r4
 8010632:	b21a      	sxth	r2, r3
 8010634:	4b57      	ldr	r3, [pc, #348]	; (8010794 <tcp_receive+0x888>)
 8010636:	68db      	ldr	r3, [r3, #12]
 8010638:	b292      	uxth	r2, r2
 801063a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010640:	4b54      	ldr	r3, [pc, #336]	; (8010794 <tcp_receive+0x888>)
 8010642:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010644:	4b53      	ldr	r3, [pc, #332]	; (8010794 <tcp_receive+0x888>)
 8010646:	68db      	ldr	r3, [r3, #12]
 8010648:	899b      	ldrh	r3, [r3, #12]
 801064a:	b29b      	uxth	r3, r3
 801064c:	4618      	mov	r0, r3
 801064e:	f7fa fd03 	bl	800b058 <lwip_htons>
 8010652:	4603      	mov	r3, r0
 8010654:	b2db      	uxtb	r3, r3
 8010656:	f003 0302 	and.w	r3, r3, #2
 801065a:	2b00      	cmp	r3, #0
 801065c:	d005      	beq.n	801066a <tcp_receive+0x75e>
            inseg.len -= 1;
 801065e:	4b4d      	ldr	r3, [pc, #308]	; (8010794 <tcp_receive+0x888>)
 8010660:	891b      	ldrh	r3, [r3, #8]
 8010662:	3b01      	subs	r3, #1
 8010664:	b29a      	uxth	r2, r3
 8010666:	4b4b      	ldr	r3, [pc, #300]	; (8010794 <tcp_receive+0x888>)
 8010668:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801066a:	4b4a      	ldr	r3, [pc, #296]	; (8010794 <tcp_receive+0x888>)
 801066c:	685a      	ldr	r2, [r3, #4]
 801066e:	4b49      	ldr	r3, [pc, #292]	; (8010794 <tcp_receive+0x888>)
 8010670:	891b      	ldrh	r3, [r3, #8]
 8010672:	4619      	mov	r1, r3
 8010674:	4610      	mov	r0, r2
 8010676:	f7fb fed5 	bl	800c424 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801067a:	4b46      	ldr	r3, [pc, #280]	; (8010794 <tcp_receive+0x888>)
 801067c:	891c      	ldrh	r4, [r3, #8]
 801067e:	4b45      	ldr	r3, [pc, #276]	; (8010794 <tcp_receive+0x888>)
 8010680:	68db      	ldr	r3, [r3, #12]
 8010682:	899b      	ldrh	r3, [r3, #12]
 8010684:	b29b      	uxth	r3, r3
 8010686:	4618      	mov	r0, r3
 8010688:	f7fa fce6 	bl	800b058 <lwip_htons>
 801068c:	4603      	mov	r3, r0
 801068e:	b2db      	uxtb	r3, r3
 8010690:	f003 0303 	and.w	r3, r3, #3
 8010694:	2b00      	cmp	r3, #0
 8010696:	d001      	beq.n	801069c <tcp_receive+0x790>
 8010698:	2301      	movs	r3, #1
 801069a:	e000      	b.n	801069e <tcp_receive+0x792>
 801069c:	2300      	movs	r3, #0
 801069e:	4423      	add	r3, r4
 80106a0:	b29a      	uxth	r2, r3
 80106a2:	4b3d      	ldr	r3, [pc, #244]	; (8010798 <tcp_receive+0x88c>)
 80106a4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80106a6:	4b3c      	ldr	r3, [pc, #240]	; (8010798 <tcp_receive+0x88c>)
 80106a8:	881b      	ldrh	r3, [r3, #0]
 80106aa:	461a      	mov	r2, r3
 80106ac:	4b38      	ldr	r3, [pc, #224]	; (8010790 <tcp_receive+0x884>)
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	441a      	add	r2, r3
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106b6:	6879      	ldr	r1, [r7, #4]
 80106b8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80106ba:	440b      	add	r3, r1
 80106bc:	429a      	cmp	r2, r3
 80106be:	d006      	beq.n	80106ce <tcp_receive+0x7c2>
 80106c0:	4b36      	ldr	r3, [pc, #216]	; (801079c <tcp_receive+0x890>)
 80106c2:	f240 52cc 	movw	r2, #1484	; 0x5cc
 80106c6:	4936      	ldr	r1, [pc, #216]	; (80107a0 <tcp_receive+0x894>)
 80106c8:	4836      	ldr	r0, [pc, #216]	; (80107a4 <tcp_receive+0x898>)
 80106ca:	f007 fd61 	bl	8018190 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	f000 80e7 	beq.w	80108a6 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80106d8:	4b2e      	ldr	r3, [pc, #184]	; (8010794 <tcp_receive+0x888>)
 80106da:	68db      	ldr	r3, [r3, #12]
 80106dc:	899b      	ldrh	r3, [r3, #12]
 80106de:	b29b      	uxth	r3, r3
 80106e0:	4618      	mov	r0, r3
 80106e2:	f7fa fcb9 	bl	800b058 <lwip_htons>
 80106e6:	4603      	mov	r3, r0
 80106e8:	b2db      	uxtb	r3, r3
 80106ea:	f003 0301 	and.w	r3, r3, #1
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d010      	beq.n	8010714 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80106f2:	e00a      	b.n	801070a <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80106f8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80106fe:	681a      	ldr	r2, [r3, #0]
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8010704:	68f8      	ldr	r0, [r7, #12]
 8010706:	f7fd fcab 	bl	800e060 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801070e:	2b00      	cmp	r3, #0
 8010710:	d1f0      	bne.n	80106f4 <tcp_receive+0x7e8>
 8010712:	e0c8      	b.n	80108a6 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010718:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801071a:	e052      	b.n	80107c2 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801071c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801071e:	68db      	ldr	r3, [r3, #12]
 8010720:	899b      	ldrh	r3, [r3, #12]
 8010722:	b29b      	uxth	r3, r3
 8010724:	4618      	mov	r0, r3
 8010726:	f7fa fc97 	bl	800b058 <lwip_htons>
 801072a:	4603      	mov	r3, r0
 801072c:	b2db      	uxtb	r3, r3
 801072e:	f003 0301 	and.w	r3, r3, #1
 8010732:	2b00      	cmp	r3, #0
 8010734:	d03d      	beq.n	80107b2 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8010736:	4b17      	ldr	r3, [pc, #92]	; (8010794 <tcp_receive+0x888>)
 8010738:	68db      	ldr	r3, [r3, #12]
 801073a:	899b      	ldrh	r3, [r3, #12]
 801073c:	b29b      	uxth	r3, r3
 801073e:	4618      	mov	r0, r3
 8010740:	f7fa fc8a 	bl	800b058 <lwip_htons>
 8010744:	4603      	mov	r3, r0
 8010746:	b2db      	uxtb	r3, r3
 8010748:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801074c:	2b00      	cmp	r3, #0
 801074e:	d130      	bne.n	80107b2 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010750:	4b10      	ldr	r3, [pc, #64]	; (8010794 <tcp_receive+0x888>)
 8010752:	68db      	ldr	r3, [r3, #12]
 8010754:	899b      	ldrh	r3, [r3, #12]
 8010756:	b29c      	uxth	r4, r3
 8010758:	2001      	movs	r0, #1
 801075a:	f7fa fc7d 	bl	800b058 <lwip_htons>
 801075e:	4603      	mov	r3, r0
 8010760:	461a      	mov	r2, r3
 8010762:	4b0c      	ldr	r3, [pc, #48]	; (8010794 <tcp_receive+0x888>)
 8010764:	68db      	ldr	r3, [r3, #12]
 8010766:	4322      	orrs	r2, r4
 8010768:	b292      	uxth	r2, r2
 801076a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801076c:	4b09      	ldr	r3, [pc, #36]	; (8010794 <tcp_receive+0x888>)
 801076e:	891c      	ldrh	r4, [r3, #8]
 8010770:	4b08      	ldr	r3, [pc, #32]	; (8010794 <tcp_receive+0x888>)
 8010772:	68db      	ldr	r3, [r3, #12]
 8010774:	899b      	ldrh	r3, [r3, #12]
 8010776:	b29b      	uxth	r3, r3
 8010778:	4618      	mov	r0, r3
 801077a:	f7fa fc6d 	bl	800b058 <lwip_htons>
 801077e:	4603      	mov	r3, r0
 8010780:	b2db      	uxtb	r3, r3
 8010782:	f003 0303 	and.w	r3, r3, #3
 8010786:	2b00      	cmp	r3, #0
 8010788:	d00e      	beq.n	80107a8 <tcp_receive+0x89c>
 801078a:	2301      	movs	r3, #1
 801078c:	e00d      	b.n	80107aa <tcp_receive+0x89e>
 801078e:	bf00      	nop
 8010790:	20008c78 	.word	0x20008c78
 8010794:	20008c58 	.word	0x20008c58
 8010798:	20008c82 	.word	0x20008c82
 801079c:	0801b518 	.word	0x0801b518
 80107a0:	0801b8c0 	.word	0x0801b8c0
 80107a4:	0801b564 	.word	0x0801b564
 80107a8:	2300      	movs	r3, #0
 80107aa:	4423      	add	r3, r4
 80107ac:	b29a      	uxth	r2, r3
 80107ae:	4b98      	ldr	r3, [pc, #608]	; (8010a10 <tcp_receive+0xb04>)
 80107b0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80107b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107b4:	613b      	str	r3, [r7, #16]
              next = next->next;
 80107b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80107bc:	6938      	ldr	r0, [r7, #16]
 80107be:	f7fd fc4f 	bl	800e060 <tcp_seg_free>
            while (next &&
 80107c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d00e      	beq.n	80107e6 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80107c8:	4b91      	ldr	r3, [pc, #580]	; (8010a10 <tcp_receive+0xb04>)
 80107ca:	881b      	ldrh	r3, [r3, #0]
 80107cc:	461a      	mov	r2, r3
 80107ce:	4b91      	ldr	r3, [pc, #580]	; (8010a14 <tcp_receive+0xb08>)
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	441a      	add	r2, r3
 80107d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107d6:	68db      	ldr	r3, [r3, #12]
 80107d8:	685b      	ldr	r3, [r3, #4]
 80107da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80107dc:	8909      	ldrh	r1, [r1, #8]
 80107de:	440b      	add	r3, r1
 80107e0:	1ad3      	subs	r3, r2, r3
            while (next &&
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	da9a      	bge.n	801071c <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80107e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d059      	beq.n	80108a0 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80107ec:	4b88      	ldr	r3, [pc, #544]	; (8010a10 <tcp_receive+0xb04>)
 80107ee:	881b      	ldrh	r3, [r3, #0]
 80107f0:	461a      	mov	r2, r3
 80107f2:	4b88      	ldr	r3, [pc, #544]	; (8010a14 <tcp_receive+0xb08>)
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	441a      	add	r2, r3
 80107f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107fa:	68db      	ldr	r3, [r3, #12]
 80107fc:	685b      	ldr	r3, [r3, #4]
 80107fe:	1ad3      	subs	r3, r2, r3
            if (next &&
 8010800:	2b00      	cmp	r3, #0
 8010802:	dd4d      	ble.n	80108a0 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8010804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010806:	68db      	ldr	r3, [r3, #12]
 8010808:	685b      	ldr	r3, [r3, #4]
 801080a:	b29a      	uxth	r2, r3
 801080c:	4b81      	ldr	r3, [pc, #516]	; (8010a14 <tcp_receive+0xb08>)
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	b29b      	uxth	r3, r3
 8010812:	1ad3      	subs	r3, r2, r3
 8010814:	b29a      	uxth	r2, r3
 8010816:	4b80      	ldr	r3, [pc, #512]	; (8010a18 <tcp_receive+0xb0c>)
 8010818:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801081a:	4b7f      	ldr	r3, [pc, #508]	; (8010a18 <tcp_receive+0xb0c>)
 801081c:	68db      	ldr	r3, [r3, #12]
 801081e:	899b      	ldrh	r3, [r3, #12]
 8010820:	b29b      	uxth	r3, r3
 8010822:	4618      	mov	r0, r3
 8010824:	f7fa fc18 	bl	800b058 <lwip_htons>
 8010828:	4603      	mov	r3, r0
 801082a:	b2db      	uxtb	r3, r3
 801082c:	f003 0302 	and.w	r3, r3, #2
 8010830:	2b00      	cmp	r3, #0
 8010832:	d005      	beq.n	8010840 <tcp_receive+0x934>
                inseg.len -= 1;
 8010834:	4b78      	ldr	r3, [pc, #480]	; (8010a18 <tcp_receive+0xb0c>)
 8010836:	891b      	ldrh	r3, [r3, #8]
 8010838:	3b01      	subs	r3, #1
 801083a:	b29a      	uxth	r2, r3
 801083c:	4b76      	ldr	r3, [pc, #472]	; (8010a18 <tcp_receive+0xb0c>)
 801083e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8010840:	4b75      	ldr	r3, [pc, #468]	; (8010a18 <tcp_receive+0xb0c>)
 8010842:	685a      	ldr	r2, [r3, #4]
 8010844:	4b74      	ldr	r3, [pc, #464]	; (8010a18 <tcp_receive+0xb0c>)
 8010846:	891b      	ldrh	r3, [r3, #8]
 8010848:	4619      	mov	r1, r3
 801084a:	4610      	mov	r0, r2
 801084c:	f7fb fdea 	bl	800c424 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8010850:	4b71      	ldr	r3, [pc, #452]	; (8010a18 <tcp_receive+0xb0c>)
 8010852:	891c      	ldrh	r4, [r3, #8]
 8010854:	4b70      	ldr	r3, [pc, #448]	; (8010a18 <tcp_receive+0xb0c>)
 8010856:	68db      	ldr	r3, [r3, #12]
 8010858:	899b      	ldrh	r3, [r3, #12]
 801085a:	b29b      	uxth	r3, r3
 801085c:	4618      	mov	r0, r3
 801085e:	f7fa fbfb 	bl	800b058 <lwip_htons>
 8010862:	4603      	mov	r3, r0
 8010864:	b2db      	uxtb	r3, r3
 8010866:	f003 0303 	and.w	r3, r3, #3
 801086a:	2b00      	cmp	r3, #0
 801086c:	d001      	beq.n	8010872 <tcp_receive+0x966>
 801086e:	2301      	movs	r3, #1
 8010870:	e000      	b.n	8010874 <tcp_receive+0x968>
 8010872:	2300      	movs	r3, #0
 8010874:	4423      	add	r3, r4
 8010876:	b29a      	uxth	r2, r3
 8010878:	4b65      	ldr	r3, [pc, #404]	; (8010a10 <tcp_receive+0xb04>)
 801087a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801087c:	4b64      	ldr	r3, [pc, #400]	; (8010a10 <tcp_receive+0xb04>)
 801087e:	881b      	ldrh	r3, [r3, #0]
 8010880:	461a      	mov	r2, r3
 8010882:	4b64      	ldr	r3, [pc, #400]	; (8010a14 <tcp_receive+0xb08>)
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	441a      	add	r2, r3
 8010888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801088a:	68db      	ldr	r3, [r3, #12]
 801088c:	685b      	ldr	r3, [r3, #4]
 801088e:	429a      	cmp	r2, r3
 8010890:	d006      	beq.n	80108a0 <tcp_receive+0x994>
 8010892:	4b62      	ldr	r3, [pc, #392]	; (8010a1c <tcp_receive+0xb10>)
 8010894:	f240 52fd 	movw	r2, #1533	; 0x5fd
 8010898:	4961      	ldr	r1, [pc, #388]	; (8010a20 <tcp_receive+0xb14>)
 801089a:	4862      	ldr	r0, [pc, #392]	; (8010a24 <tcp_receive+0xb18>)
 801089c:	f007 fc78 	bl	8018190 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80108a4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80108a6:	4b5a      	ldr	r3, [pc, #360]	; (8010a10 <tcp_receive+0xb04>)
 80108a8:	881b      	ldrh	r3, [r3, #0]
 80108aa:	461a      	mov	r2, r3
 80108ac:	4b59      	ldr	r3, [pc, #356]	; (8010a14 <tcp_receive+0xb08>)
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	441a      	add	r2, r3
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80108ba:	4b55      	ldr	r3, [pc, #340]	; (8010a10 <tcp_receive+0xb04>)
 80108bc:	881b      	ldrh	r3, [r3, #0]
 80108be:	429a      	cmp	r2, r3
 80108c0:	d206      	bcs.n	80108d0 <tcp_receive+0x9c4>
 80108c2:	4b56      	ldr	r3, [pc, #344]	; (8010a1c <tcp_receive+0xb10>)
 80108c4:	f240 6207 	movw	r2, #1543	; 0x607
 80108c8:	4957      	ldr	r1, [pc, #348]	; (8010a28 <tcp_receive+0xb1c>)
 80108ca:	4856      	ldr	r0, [pc, #344]	; (8010a24 <tcp_receive+0xb18>)
 80108cc:	f007 fc60 	bl	8018190 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80108d4:	4b4e      	ldr	r3, [pc, #312]	; (8010a10 <tcp_receive+0xb04>)
 80108d6:	881b      	ldrh	r3, [r3, #0]
 80108d8:	1ad3      	subs	r3, r2, r3
 80108da:	b29a      	uxth	r2, r3
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80108e0:	6878      	ldr	r0, [r7, #4]
 80108e2:	f7fc fe9b 	bl	800d61c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80108e6:	4b4c      	ldr	r3, [pc, #304]	; (8010a18 <tcp_receive+0xb0c>)
 80108e8:	685b      	ldr	r3, [r3, #4]
 80108ea:	891b      	ldrh	r3, [r3, #8]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d006      	beq.n	80108fe <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80108f0:	4b49      	ldr	r3, [pc, #292]	; (8010a18 <tcp_receive+0xb0c>)
 80108f2:	685b      	ldr	r3, [r3, #4]
 80108f4:	4a4d      	ldr	r2, [pc, #308]	; (8010a2c <tcp_receive+0xb20>)
 80108f6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80108f8:	4b47      	ldr	r3, [pc, #284]	; (8010a18 <tcp_receive+0xb0c>)
 80108fa:	2200      	movs	r2, #0
 80108fc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80108fe:	4b46      	ldr	r3, [pc, #280]	; (8010a18 <tcp_receive+0xb0c>)
 8010900:	68db      	ldr	r3, [r3, #12]
 8010902:	899b      	ldrh	r3, [r3, #12]
 8010904:	b29b      	uxth	r3, r3
 8010906:	4618      	mov	r0, r3
 8010908:	f7fa fba6 	bl	800b058 <lwip_htons>
 801090c:	4603      	mov	r3, r0
 801090e:	b2db      	uxtb	r3, r3
 8010910:	f003 0301 	and.w	r3, r3, #1
 8010914:	2b00      	cmp	r3, #0
 8010916:	f000 80b8 	beq.w	8010a8a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801091a:	4b45      	ldr	r3, [pc, #276]	; (8010a30 <tcp_receive+0xb24>)
 801091c:	781b      	ldrb	r3, [r3, #0]
 801091e:	f043 0320 	orr.w	r3, r3, #32
 8010922:	b2da      	uxtb	r2, r3
 8010924:	4b42      	ldr	r3, [pc, #264]	; (8010a30 <tcp_receive+0xb24>)
 8010926:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8010928:	e0af      	b.n	8010a8a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801092e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010934:	68db      	ldr	r3, [r3, #12]
 8010936:	685b      	ldr	r3, [r3, #4]
 8010938:	4a36      	ldr	r2, [pc, #216]	; (8010a14 <tcp_receive+0xb08>)
 801093a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801093c:	68bb      	ldr	r3, [r7, #8]
 801093e:	891b      	ldrh	r3, [r3, #8]
 8010940:	461c      	mov	r4, r3
 8010942:	68bb      	ldr	r3, [r7, #8]
 8010944:	68db      	ldr	r3, [r3, #12]
 8010946:	899b      	ldrh	r3, [r3, #12]
 8010948:	b29b      	uxth	r3, r3
 801094a:	4618      	mov	r0, r3
 801094c:	f7fa fb84 	bl	800b058 <lwip_htons>
 8010950:	4603      	mov	r3, r0
 8010952:	b2db      	uxtb	r3, r3
 8010954:	f003 0303 	and.w	r3, r3, #3
 8010958:	2b00      	cmp	r3, #0
 801095a:	d001      	beq.n	8010960 <tcp_receive+0xa54>
 801095c:	2301      	movs	r3, #1
 801095e:	e000      	b.n	8010962 <tcp_receive+0xa56>
 8010960:	2300      	movs	r3, #0
 8010962:	191a      	adds	r2, r3, r4
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010968:	441a      	add	r2, r3
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010972:	461c      	mov	r4, r3
 8010974:	68bb      	ldr	r3, [r7, #8]
 8010976:	891b      	ldrh	r3, [r3, #8]
 8010978:	461d      	mov	r5, r3
 801097a:	68bb      	ldr	r3, [r7, #8]
 801097c:	68db      	ldr	r3, [r3, #12]
 801097e:	899b      	ldrh	r3, [r3, #12]
 8010980:	b29b      	uxth	r3, r3
 8010982:	4618      	mov	r0, r3
 8010984:	f7fa fb68 	bl	800b058 <lwip_htons>
 8010988:	4603      	mov	r3, r0
 801098a:	b2db      	uxtb	r3, r3
 801098c:	f003 0303 	and.w	r3, r3, #3
 8010990:	2b00      	cmp	r3, #0
 8010992:	d001      	beq.n	8010998 <tcp_receive+0xa8c>
 8010994:	2301      	movs	r3, #1
 8010996:	e000      	b.n	801099a <tcp_receive+0xa8e>
 8010998:	2300      	movs	r3, #0
 801099a:	442b      	add	r3, r5
 801099c:	429c      	cmp	r4, r3
 801099e:	d206      	bcs.n	80109ae <tcp_receive+0xaa2>
 80109a0:	4b1e      	ldr	r3, [pc, #120]	; (8010a1c <tcp_receive+0xb10>)
 80109a2:	f240 622c 	movw	r2, #1580	; 0x62c
 80109a6:	4923      	ldr	r1, [pc, #140]	; (8010a34 <tcp_receive+0xb28>)
 80109a8:	481e      	ldr	r0, [pc, #120]	; (8010a24 <tcp_receive+0xb18>)
 80109aa:	f007 fbf1 	bl	8018190 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80109ae:	68bb      	ldr	r3, [r7, #8]
 80109b0:	891b      	ldrh	r3, [r3, #8]
 80109b2:	461c      	mov	r4, r3
 80109b4:	68bb      	ldr	r3, [r7, #8]
 80109b6:	68db      	ldr	r3, [r3, #12]
 80109b8:	899b      	ldrh	r3, [r3, #12]
 80109ba:	b29b      	uxth	r3, r3
 80109bc:	4618      	mov	r0, r3
 80109be:	f7fa fb4b 	bl	800b058 <lwip_htons>
 80109c2:	4603      	mov	r3, r0
 80109c4:	b2db      	uxtb	r3, r3
 80109c6:	f003 0303 	and.w	r3, r3, #3
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d001      	beq.n	80109d2 <tcp_receive+0xac6>
 80109ce:	2301      	movs	r3, #1
 80109d0:	e000      	b.n	80109d4 <tcp_receive+0xac8>
 80109d2:	2300      	movs	r3, #0
 80109d4:	1919      	adds	r1, r3, r4
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80109da:	b28b      	uxth	r3, r1
 80109dc:	1ad3      	subs	r3, r2, r3
 80109de:	b29a      	uxth	r2, r3
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80109e4:	6878      	ldr	r0, [r7, #4]
 80109e6:	f7fc fe19 	bl	800d61c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80109ea:	68bb      	ldr	r3, [r7, #8]
 80109ec:	685b      	ldr	r3, [r3, #4]
 80109ee:	891b      	ldrh	r3, [r3, #8]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d028      	beq.n	8010a46 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80109f4:	4b0d      	ldr	r3, [pc, #52]	; (8010a2c <tcp_receive+0xb20>)
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d01d      	beq.n	8010a38 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80109fc:	4b0b      	ldr	r3, [pc, #44]	; (8010a2c <tcp_receive+0xb20>)
 80109fe:	681a      	ldr	r2, [r3, #0]
 8010a00:	68bb      	ldr	r3, [r7, #8]
 8010a02:	685b      	ldr	r3, [r3, #4]
 8010a04:	4619      	mov	r1, r3
 8010a06:	4610      	mov	r0, r2
 8010a08:	f7fb ff60 	bl	800c8cc <pbuf_cat>
 8010a0c:	e018      	b.n	8010a40 <tcp_receive+0xb34>
 8010a0e:	bf00      	nop
 8010a10:	20008c82 	.word	0x20008c82
 8010a14:	20008c78 	.word	0x20008c78
 8010a18:	20008c58 	.word	0x20008c58
 8010a1c:	0801b518 	.word	0x0801b518
 8010a20:	0801b8f8 	.word	0x0801b8f8
 8010a24:	0801b564 	.word	0x0801b564
 8010a28:	0801b934 	.word	0x0801b934
 8010a2c:	20008c88 	.word	0x20008c88
 8010a30:	20008c85 	.word	0x20008c85
 8010a34:	0801b954 	.word	0x0801b954
            } else {
              recv_data = cseg->p;
 8010a38:	68bb      	ldr	r3, [r7, #8]
 8010a3a:	685b      	ldr	r3, [r3, #4]
 8010a3c:	4a70      	ldr	r2, [pc, #448]	; (8010c00 <tcp_receive+0xcf4>)
 8010a3e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8010a40:	68bb      	ldr	r3, [r7, #8]
 8010a42:	2200      	movs	r2, #0
 8010a44:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010a46:	68bb      	ldr	r3, [r7, #8]
 8010a48:	68db      	ldr	r3, [r3, #12]
 8010a4a:	899b      	ldrh	r3, [r3, #12]
 8010a4c:	b29b      	uxth	r3, r3
 8010a4e:	4618      	mov	r0, r3
 8010a50:	f7fa fb02 	bl	800b058 <lwip_htons>
 8010a54:	4603      	mov	r3, r0
 8010a56:	b2db      	uxtb	r3, r3
 8010a58:	f003 0301 	and.w	r3, r3, #1
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d00d      	beq.n	8010a7c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8010a60:	4b68      	ldr	r3, [pc, #416]	; (8010c04 <tcp_receive+0xcf8>)
 8010a62:	781b      	ldrb	r3, [r3, #0]
 8010a64:	f043 0320 	orr.w	r3, r3, #32
 8010a68:	b2da      	uxtb	r2, r3
 8010a6a:	4b66      	ldr	r3, [pc, #408]	; (8010c04 <tcp_receive+0xcf8>)
 8010a6c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	7d1b      	ldrb	r3, [r3, #20]
 8010a72:	2b04      	cmp	r3, #4
 8010a74:	d102      	bne.n	8010a7c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	2207      	movs	r2, #7
 8010a7a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8010a7c:	68bb      	ldr	r3, [r7, #8]
 8010a7e:	681a      	ldr	r2, [r3, #0]
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8010a84:	68b8      	ldr	r0, [r7, #8]
 8010a86:	f7fd faeb 	bl	800e060 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d008      	beq.n	8010aa4 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010a96:	68db      	ldr	r3, [r3, #12]
 8010a98:	685a      	ldr	r2, [r3, #4]
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8010a9e:	429a      	cmp	r2, r3
 8010aa0:	f43f af43 	beq.w	801092a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	8b5b      	ldrh	r3, [r3, #26]
 8010aa8:	f003 0301 	and.w	r3, r3, #1
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d00e      	beq.n	8010ace <tcp_receive+0xbc2>
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	8b5b      	ldrh	r3, [r3, #26]
 8010ab4:	f023 0301 	bic.w	r3, r3, #1
 8010ab8:	b29a      	uxth	r2, r3
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	835a      	strh	r2, [r3, #26]
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	8b5b      	ldrh	r3, [r3, #26]
 8010ac2:	f043 0302 	orr.w	r3, r3, #2
 8010ac6:	b29a      	uxth	r2, r3
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010acc:	e188      	b.n	8010de0 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	8b5b      	ldrh	r3, [r3, #26]
 8010ad2:	f043 0301 	orr.w	r3, r3, #1
 8010ad6:	b29a      	uxth	r2, r3
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010adc:	e180      	b.n	8010de0 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d106      	bne.n	8010af4 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8010ae6:	4848      	ldr	r0, [pc, #288]	; (8010c08 <tcp_receive+0xcfc>)
 8010ae8:	f7fd faf0 	bl	800e0cc <tcp_seg_copy>
 8010aec:	4602      	mov	r2, r0
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	675a      	str	r2, [r3, #116]	; 0x74
 8010af2:	e16d      	b.n	8010dd0 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8010af4:	2300      	movs	r3, #0
 8010af6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010afc:	63bb      	str	r3, [r7, #56]	; 0x38
 8010afe:	e157      	b.n	8010db0 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8010b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b02:	68db      	ldr	r3, [r3, #12]
 8010b04:	685a      	ldr	r2, [r3, #4]
 8010b06:	4b41      	ldr	r3, [pc, #260]	; (8010c0c <tcp_receive+0xd00>)
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	429a      	cmp	r2, r3
 8010b0c:	d11d      	bne.n	8010b4a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8010b0e:	4b3e      	ldr	r3, [pc, #248]	; (8010c08 <tcp_receive+0xcfc>)
 8010b10:	891a      	ldrh	r2, [r3, #8]
 8010b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b14:	891b      	ldrh	r3, [r3, #8]
 8010b16:	429a      	cmp	r2, r3
 8010b18:	f240 814f 	bls.w	8010dba <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010b1c:	483a      	ldr	r0, [pc, #232]	; (8010c08 <tcp_receive+0xcfc>)
 8010b1e:	f7fd fad5 	bl	800e0cc <tcp_seg_copy>
 8010b22:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8010b24:	697b      	ldr	r3, [r7, #20]
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	f000 8149 	beq.w	8010dbe <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8010b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d003      	beq.n	8010b3a <tcp_receive+0xc2e>
                    prev->next = cseg;
 8010b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b34:	697a      	ldr	r2, [r7, #20]
 8010b36:	601a      	str	r2, [r3, #0]
 8010b38:	e002      	b.n	8010b40 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	697a      	ldr	r2, [r7, #20]
 8010b3e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8010b40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010b42:	6978      	ldr	r0, [r7, #20]
 8010b44:	f7ff f8de 	bl	800fd04 <tcp_oos_insert_segment>
                }
                break;
 8010b48:	e139      	b.n	8010dbe <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8010b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d117      	bne.n	8010b80 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8010b50:	4b2e      	ldr	r3, [pc, #184]	; (8010c0c <tcp_receive+0xd00>)
 8010b52:	681a      	ldr	r2, [r3, #0]
 8010b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b56:	68db      	ldr	r3, [r3, #12]
 8010b58:	685b      	ldr	r3, [r3, #4]
 8010b5a:	1ad3      	subs	r3, r2, r3
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	da57      	bge.n	8010c10 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010b60:	4829      	ldr	r0, [pc, #164]	; (8010c08 <tcp_receive+0xcfc>)
 8010b62:	f7fd fab3 	bl	800e0cc <tcp_seg_copy>
 8010b66:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8010b68:	69bb      	ldr	r3, [r7, #24]
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	f000 8129 	beq.w	8010dc2 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	69ba      	ldr	r2, [r7, #24]
 8010b74:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8010b76:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010b78:	69b8      	ldr	r0, [r7, #24]
 8010b7a:	f7ff f8c3 	bl	800fd04 <tcp_oos_insert_segment>
                  }
                  break;
 8010b7e:	e120      	b.n	8010dc2 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8010b80:	4b22      	ldr	r3, [pc, #136]	; (8010c0c <tcp_receive+0xd00>)
 8010b82:	681a      	ldr	r2, [r3, #0]
 8010b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b86:	68db      	ldr	r3, [r3, #12]
 8010b88:	685b      	ldr	r3, [r3, #4]
 8010b8a:	1ad3      	subs	r3, r2, r3
 8010b8c:	3b01      	subs	r3, #1
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	db3e      	blt.n	8010c10 <tcp_receive+0xd04>
 8010b92:	4b1e      	ldr	r3, [pc, #120]	; (8010c0c <tcp_receive+0xd00>)
 8010b94:	681a      	ldr	r2, [r3, #0]
 8010b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b98:	68db      	ldr	r3, [r3, #12]
 8010b9a:	685b      	ldr	r3, [r3, #4]
 8010b9c:	1ad3      	subs	r3, r2, r3
 8010b9e:	3301      	adds	r3, #1
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	dc35      	bgt.n	8010c10 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010ba4:	4818      	ldr	r0, [pc, #96]	; (8010c08 <tcp_receive+0xcfc>)
 8010ba6:	f7fd fa91 	bl	800e0cc <tcp_seg_copy>
 8010baa:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8010bac:	69fb      	ldr	r3, [r7, #28]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	f000 8109 	beq.w	8010dc6 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8010bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bb6:	68db      	ldr	r3, [r3, #12]
 8010bb8:	685b      	ldr	r3, [r3, #4]
 8010bba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010bbc:	8912      	ldrh	r2, [r2, #8]
 8010bbe:	441a      	add	r2, r3
 8010bc0:	4b12      	ldr	r3, [pc, #72]	; (8010c0c <tcp_receive+0xd00>)
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	1ad3      	subs	r3, r2, r3
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	dd12      	ble.n	8010bf0 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8010bca:	4b10      	ldr	r3, [pc, #64]	; (8010c0c <tcp_receive+0xd00>)
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	b29a      	uxth	r2, r3
 8010bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bd2:	68db      	ldr	r3, [r3, #12]
 8010bd4:	685b      	ldr	r3, [r3, #4]
 8010bd6:	b29b      	uxth	r3, r3
 8010bd8:	1ad3      	subs	r3, r2, r3
 8010bda:	b29a      	uxth	r2, r3
 8010bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bde:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8010be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010be2:	685a      	ldr	r2, [r3, #4]
 8010be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010be6:	891b      	ldrh	r3, [r3, #8]
 8010be8:	4619      	mov	r1, r3
 8010bea:	4610      	mov	r0, r2
 8010bec:	f7fb fc1a 	bl	800c424 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8010bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bf2:	69fa      	ldr	r2, [r7, #28]
 8010bf4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8010bf6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010bf8:	69f8      	ldr	r0, [r7, #28]
 8010bfa:	f7ff f883 	bl	800fd04 <tcp_oos_insert_segment>
                  }
                  break;
 8010bfe:	e0e2      	b.n	8010dc6 <tcp_receive+0xeba>
 8010c00:	20008c88 	.word	0x20008c88
 8010c04:	20008c85 	.word	0x20008c85
 8010c08:	20008c58 	.word	0x20008c58
 8010c0c:	20008c78 	.word	0x20008c78
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8010c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c12:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8010c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	f040 80c6 	bne.w	8010daa <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8010c1e:	4b80      	ldr	r3, [pc, #512]	; (8010e20 <tcp_receive+0xf14>)
 8010c20:	681a      	ldr	r2, [r3, #0]
 8010c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c24:	68db      	ldr	r3, [r3, #12]
 8010c26:	685b      	ldr	r3, [r3, #4]
 8010c28:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	f340 80bd 	ble.w	8010daa <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c32:	68db      	ldr	r3, [r3, #12]
 8010c34:	899b      	ldrh	r3, [r3, #12]
 8010c36:	b29b      	uxth	r3, r3
 8010c38:	4618      	mov	r0, r3
 8010c3a:	f7fa fa0d 	bl	800b058 <lwip_htons>
 8010c3e:	4603      	mov	r3, r0
 8010c40:	b2db      	uxtb	r3, r3
 8010c42:	f003 0301 	and.w	r3, r3, #1
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	f040 80bf 	bne.w	8010dca <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8010c4c:	4875      	ldr	r0, [pc, #468]	; (8010e24 <tcp_receive+0xf18>)
 8010c4e:	f7fd fa3d 	bl	800e0cc <tcp_seg_copy>
 8010c52:	4602      	mov	r2, r0
 8010c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c56:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8010c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	f000 80b6 	beq.w	8010dce <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8010c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c64:	68db      	ldr	r3, [r3, #12]
 8010c66:	685b      	ldr	r3, [r3, #4]
 8010c68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010c6a:	8912      	ldrh	r2, [r2, #8]
 8010c6c:	441a      	add	r2, r3
 8010c6e:	4b6c      	ldr	r3, [pc, #432]	; (8010e20 <tcp_receive+0xf14>)
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	1ad3      	subs	r3, r2, r3
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	dd12      	ble.n	8010c9e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8010c78:	4b69      	ldr	r3, [pc, #420]	; (8010e20 <tcp_receive+0xf14>)
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	b29a      	uxth	r2, r3
 8010c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c80:	68db      	ldr	r3, [r3, #12]
 8010c82:	685b      	ldr	r3, [r3, #4]
 8010c84:	b29b      	uxth	r3, r3
 8010c86:	1ad3      	subs	r3, r2, r3
 8010c88:	b29a      	uxth	r2, r3
 8010c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c8c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8010c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c90:	685a      	ldr	r2, [r3, #4]
 8010c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c94:	891b      	ldrh	r3, [r3, #8]
 8010c96:	4619      	mov	r1, r3
 8010c98:	4610      	mov	r0, r2
 8010c9a:	f7fb fbc3 	bl	800c424 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8010c9e:	4b62      	ldr	r3, [pc, #392]	; (8010e28 <tcp_receive+0xf1c>)
 8010ca0:	881b      	ldrh	r3, [r3, #0]
 8010ca2:	461a      	mov	r2, r3
 8010ca4:	4b5e      	ldr	r3, [pc, #376]	; (8010e20 <tcp_receive+0xf14>)
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	441a      	add	r2, r3
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cae:	6879      	ldr	r1, [r7, #4]
 8010cb0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010cb2:	440b      	add	r3, r1
 8010cb4:	1ad3      	subs	r3, r2, r3
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	f340 8089 	ble.w	8010dce <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8010cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	68db      	ldr	r3, [r3, #12]
 8010cc2:	899b      	ldrh	r3, [r3, #12]
 8010cc4:	b29b      	uxth	r3, r3
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	f7fa f9c6 	bl	800b058 <lwip_htons>
 8010ccc:	4603      	mov	r3, r0
 8010cce:	b2db      	uxtb	r3, r3
 8010cd0:	f003 0301 	and.w	r3, r3, #1
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d022      	beq.n	8010d1e <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8010cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	68db      	ldr	r3, [r3, #12]
 8010cde:	899b      	ldrh	r3, [r3, #12]
 8010ce0:	b29b      	uxth	r3, r3
 8010ce2:	b21b      	sxth	r3, r3
 8010ce4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010ce8:	b21c      	sxth	r4, r3
 8010cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	68db      	ldr	r3, [r3, #12]
 8010cf0:	899b      	ldrh	r3, [r3, #12]
 8010cf2:	b29b      	uxth	r3, r3
 8010cf4:	4618      	mov	r0, r3
 8010cf6:	f7fa f9af 	bl	800b058 <lwip_htons>
 8010cfa:	4603      	mov	r3, r0
 8010cfc:	b2db      	uxtb	r3, r3
 8010cfe:	b29b      	uxth	r3, r3
 8010d00:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010d04:	b29b      	uxth	r3, r3
 8010d06:	4618      	mov	r0, r3
 8010d08:	f7fa f9a6 	bl	800b058 <lwip_htons>
 8010d0c:	4603      	mov	r3, r0
 8010d0e:	b21b      	sxth	r3, r3
 8010d10:	4323      	orrs	r3, r4
 8010d12:	b21a      	sxth	r2, r3
 8010d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	68db      	ldr	r3, [r3, #12]
 8010d1a:	b292      	uxth	r2, r2
 8010d1c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d22:	b29a      	uxth	r2, r3
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010d28:	4413      	add	r3, r2
 8010d2a:	b299      	uxth	r1, r3
 8010d2c:	4b3c      	ldr	r3, [pc, #240]	; (8010e20 <tcp_receive+0xf14>)
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	b29a      	uxth	r2, r3
 8010d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	1a8a      	subs	r2, r1, r2
 8010d38:	b292      	uxth	r2, r2
 8010d3a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8010d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	685a      	ldr	r2, [r3, #4]
 8010d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	891b      	ldrh	r3, [r3, #8]
 8010d48:	4619      	mov	r1, r3
 8010d4a:	4610      	mov	r0, r2
 8010d4c:	f7fb fb6a 	bl	800c424 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8010d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	891c      	ldrh	r4, [r3, #8]
 8010d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	68db      	ldr	r3, [r3, #12]
 8010d5c:	899b      	ldrh	r3, [r3, #12]
 8010d5e:	b29b      	uxth	r3, r3
 8010d60:	4618      	mov	r0, r3
 8010d62:	f7fa f979 	bl	800b058 <lwip_htons>
 8010d66:	4603      	mov	r3, r0
 8010d68:	b2db      	uxtb	r3, r3
 8010d6a:	f003 0303 	and.w	r3, r3, #3
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d001      	beq.n	8010d76 <tcp_receive+0xe6a>
 8010d72:	2301      	movs	r3, #1
 8010d74:	e000      	b.n	8010d78 <tcp_receive+0xe6c>
 8010d76:	2300      	movs	r3, #0
 8010d78:	4423      	add	r3, r4
 8010d7a:	b29a      	uxth	r2, r3
 8010d7c:	4b2a      	ldr	r3, [pc, #168]	; (8010e28 <tcp_receive+0xf1c>)
 8010d7e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010d80:	4b29      	ldr	r3, [pc, #164]	; (8010e28 <tcp_receive+0xf1c>)
 8010d82:	881b      	ldrh	r3, [r3, #0]
 8010d84:	461a      	mov	r2, r3
 8010d86:	4b26      	ldr	r3, [pc, #152]	; (8010e20 <tcp_receive+0xf14>)
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	441a      	add	r2, r3
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d90:	6879      	ldr	r1, [r7, #4]
 8010d92:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010d94:	440b      	add	r3, r1
 8010d96:	429a      	cmp	r2, r3
 8010d98:	d019      	beq.n	8010dce <tcp_receive+0xec2>
 8010d9a:	4b24      	ldr	r3, [pc, #144]	; (8010e2c <tcp_receive+0xf20>)
 8010d9c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8010da0:	4923      	ldr	r1, [pc, #140]	; (8010e30 <tcp_receive+0xf24>)
 8010da2:	4824      	ldr	r0, [pc, #144]	; (8010e34 <tcp_receive+0xf28>)
 8010da4:	f007 f9f4 	bl	8018190 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8010da8:	e011      	b.n	8010dce <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	63bb      	str	r3, [r7, #56]	; 0x38
 8010db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	f47f aea4 	bne.w	8010b00 <tcp_receive+0xbf4>
 8010db8:	e00a      	b.n	8010dd0 <tcp_receive+0xec4>
                break;
 8010dba:	bf00      	nop
 8010dbc:	e008      	b.n	8010dd0 <tcp_receive+0xec4>
                break;
 8010dbe:	bf00      	nop
 8010dc0:	e006      	b.n	8010dd0 <tcp_receive+0xec4>
                  break;
 8010dc2:	bf00      	nop
 8010dc4:	e004      	b.n	8010dd0 <tcp_receive+0xec4>
                  break;
 8010dc6:	bf00      	nop
 8010dc8:	e002      	b.n	8010dd0 <tcp_receive+0xec4>
                  break;
 8010dca:	bf00      	nop
 8010dcc:	e000      	b.n	8010dd0 <tcp_receive+0xec4>
                break;
 8010dce:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8010dd0:	6878      	ldr	r0, [r7, #4]
 8010dd2:	f001 fe9b 	bl	8012b0c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8010dd6:	e003      	b.n	8010de0 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8010dd8:	6878      	ldr	r0, [r7, #4]
 8010dda:	f001 fe97 	bl	8012b0c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010dde:	e01a      	b.n	8010e16 <tcp_receive+0xf0a>
 8010de0:	e019      	b.n	8010e16 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8010de2:	4b0f      	ldr	r3, [pc, #60]	; (8010e20 <tcp_receive+0xf14>)
 8010de4:	681a      	ldr	r2, [r3, #0]
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010dea:	1ad3      	subs	r3, r2, r3
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	db0a      	blt.n	8010e06 <tcp_receive+0xefa>
 8010df0:	4b0b      	ldr	r3, [pc, #44]	; (8010e20 <tcp_receive+0xf14>)
 8010df2:	681a      	ldr	r2, [r3, #0]
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010df8:	6879      	ldr	r1, [r7, #4]
 8010dfa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010dfc:	440b      	add	r3, r1
 8010dfe:	1ad3      	subs	r3, r2, r3
 8010e00:	3301      	adds	r3, #1
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	dd07      	ble.n	8010e16 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	8b5b      	ldrh	r3, [r3, #26]
 8010e0a:	f043 0302 	orr.w	r3, r3, #2
 8010e0e:	b29a      	uxth	r2, r3
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8010e14:	e7ff      	b.n	8010e16 <tcp_receive+0xf0a>
 8010e16:	bf00      	nop
 8010e18:	3750      	adds	r7, #80	; 0x50
 8010e1a:	46bd      	mov	sp, r7
 8010e1c:	bdb0      	pop	{r4, r5, r7, pc}
 8010e1e:	bf00      	nop
 8010e20:	20008c78 	.word	0x20008c78
 8010e24:	20008c58 	.word	0x20008c58
 8010e28:	20008c82 	.word	0x20008c82
 8010e2c:	0801b518 	.word	0x0801b518
 8010e30:	0801b8c0 	.word	0x0801b8c0
 8010e34:	0801b564 	.word	0x0801b564

08010e38 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8010e38:	b480      	push	{r7}
 8010e3a:	b083      	sub	sp, #12
 8010e3c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8010e3e:	4b15      	ldr	r3, [pc, #84]	; (8010e94 <tcp_get_next_optbyte+0x5c>)
 8010e40:	881b      	ldrh	r3, [r3, #0]
 8010e42:	1c5a      	adds	r2, r3, #1
 8010e44:	b291      	uxth	r1, r2
 8010e46:	4a13      	ldr	r2, [pc, #76]	; (8010e94 <tcp_get_next_optbyte+0x5c>)
 8010e48:	8011      	strh	r1, [r2, #0]
 8010e4a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8010e4c:	4b12      	ldr	r3, [pc, #72]	; (8010e98 <tcp_get_next_optbyte+0x60>)
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d004      	beq.n	8010e5e <tcp_get_next_optbyte+0x26>
 8010e54:	4b11      	ldr	r3, [pc, #68]	; (8010e9c <tcp_get_next_optbyte+0x64>)
 8010e56:	881b      	ldrh	r3, [r3, #0]
 8010e58:	88fa      	ldrh	r2, [r7, #6]
 8010e5a:	429a      	cmp	r2, r3
 8010e5c:	d208      	bcs.n	8010e70 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8010e5e:	4b10      	ldr	r3, [pc, #64]	; (8010ea0 <tcp_get_next_optbyte+0x68>)
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	3314      	adds	r3, #20
 8010e64:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8010e66:	88fb      	ldrh	r3, [r7, #6]
 8010e68:	683a      	ldr	r2, [r7, #0]
 8010e6a:	4413      	add	r3, r2
 8010e6c:	781b      	ldrb	r3, [r3, #0]
 8010e6e:	e00b      	b.n	8010e88 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8010e70:	88fb      	ldrh	r3, [r7, #6]
 8010e72:	b2da      	uxtb	r2, r3
 8010e74:	4b09      	ldr	r3, [pc, #36]	; (8010e9c <tcp_get_next_optbyte+0x64>)
 8010e76:	881b      	ldrh	r3, [r3, #0]
 8010e78:	b2db      	uxtb	r3, r3
 8010e7a:	1ad3      	subs	r3, r2, r3
 8010e7c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8010e7e:	4b06      	ldr	r3, [pc, #24]	; (8010e98 <tcp_get_next_optbyte+0x60>)
 8010e80:	681a      	ldr	r2, [r3, #0]
 8010e82:	797b      	ldrb	r3, [r7, #5]
 8010e84:	4413      	add	r3, r2
 8010e86:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010e88:	4618      	mov	r0, r3
 8010e8a:	370c      	adds	r7, #12
 8010e8c:	46bd      	mov	sp, r7
 8010e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e92:	4770      	bx	lr
 8010e94:	20008c74 	.word	0x20008c74
 8010e98:	20008c70 	.word	0x20008c70
 8010e9c:	20008c6e 	.word	0x20008c6e
 8010ea0:	20008c68 	.word	0x20008c68

08010ea4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8010ea4:	b580      	push	{r7, lr}
 8010ea6:	b084      	sub	sp, #16
 8010ea8:	af00      	add	r7, sp, #0
 8010eaa:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d106      	bne.n	8010ec0 <tcp_parseopt+0x1c>
 8010eb2:	4b31      	ldr	r3, [pc, #196]	; (8010f78 <tcp_parseopt+0xd4>)
 8010eb4:	f240 727d 	movw	r2, #1917	; 0x77d
 8010eb8:	4930      	ldr	r1, [pc, #192]	; (8010f7c <tcp_parseopt+0xd8>)
 8010eba:	4831      	ldr	r0, [pc, #196]	; (8010f80 <tcp_parseopt+0xdc>)
 8010ebc:	f007 f968 	bl	8018190 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8010ec0:	4b30      	ldr	r3, [pc, #192]	; (8010f84 <tcp_parseopt+0xe0>)
 8010ec2:	881b      	ldrh	r3, [r3, #0]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d053      	beq.n	8010f70 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010ec8:	4b2f      	ldr	r3, [pc, #188]	; (8010f88 <tcp_parseopt+0xe4>)
 8010eca:	2200      	movs	r2, #0
 8010ecc:	801a      	strh	r2, [r3, #0]
 8010ece:	e043      	b.n	8010f58 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 8010ed0:	f7ff ffb2 	bl	8010e38 <tcp_get_next_optbyte>
 8010ed4:	4603      	mov	r3, r0
 8010ed6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8010ed8:	7bfb      	ldrb	r3, [r7, #15]
 8010eda:	2b01      	cmp	r3, #1
 8010edc:	d03c      	beq.n	8010f58 <tcp_parseopt+0xb4>
 8010ede:	2b02      	cmp	r3, #2
 8010ee0:	d002      	beq.n	8010ee8 <tcp_parseopt+0x44>
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d03f      	beq.n	8010f66 <tcp_parseopt+0xc2>
 8010ee6:	e026      	b.n	8010f36 <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8010ee8:	f7ff ffa6 	bl	8010e38 <tcp_get_next_optbyte>
 8010eec:	4603      	mov	r3, r0
 8010eee:	2b04      	cmp	r3, #4
 8010ef0:	d13b      	bne.n	8010f6a <tcp_parseopt+0xc6>
 8010ef2:	4b25      	ldr	r3, [pc, #148]	; (8010f88 <tcp_parseopt+0xe4>)
 8010ef4:	881b      	ldrh	r3, [r3, #0]
 8010ef6:	3302      	adds	r3, #2
 8010ef8:	4a22      	ldr	r2, [pc, #136]	; (8010f84 <tcp_parseopt+0xe0>)
 8010efa:	8812      	ldrh	r2, [r2, #0]
 8010efc:	4293      	cmp	r3, r2
 8010efe:	dc34      	bgt.n	8010f6a <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8010f00:	f7ff ff9a 	bl	8010e38 <tcp_get_next_optbyte>
 8010f04:	4603      	mov	r3, r0
 8010f06:	b29b      	uxth	r3, r3
 8010f08:	021b      	lsls	r3, r3, #8
 8010f0a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8010f0c:	f7ff ff94 	bl	8010e38 <tcp_get_next_optbyte>
 8010f10:	4603      	mov	r3, r0
 8010f12:	b29a      	uxth	r2, r3
 8010f14:	89bb      	ldrh	r3, [r7, #12]
 8010f16:	4313      	orrs	r3, r2
 8010f18:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8010f1a:	89bb      	ldrh	r3, [r7, #12]
 8010f1c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010f20:	d804      	bhi.n	8010f2c <tcp_parseopt+0x88>
 8010f22:	89bb      	ldrh	r3, [r7, #12]
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d001      	beq.n	8010f2c <tcp_parseopt+0x88>
 8010f28:	89ba      	ldrh	r2, [r7, #12]
 8010f2a:	e001      	b.n	8010f30 <tcp_parseopt+0x8c>
 8010f2c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8010f34:	e010      	b.n	8010f58 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8010f36:	f7ff ff7f 	bl	8010e38 <tcp_get_next_optbyte>
 8010f3a:	4603      	mov	r3, r0
 8010f3c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8010f3e:	7afb      	ldrb	r3, [r7, #11]
 8010f40:	2b01      	cmp	r3, #1
 8010f42:	d914      	bls.n	8010f6e <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8010f44:	7afb      	ldrb	r3, [r7, #11]
 8010f46:	b29a      	uxth	r2, r3
 8010f48:	4b0f      	ldr	r3, [pc, #60]	; (8010f88 <tcp_parseopt+0xe4>)
 8010f4a:	881b      	ldrh	r3, [r3, #0]
 8010f4c:	4413      	add	r3, r2
 8010f4e:	b29b      	uxth	r3, r3
 8010f50:	3b02      	subs	r3, #2
 8010f52:	b29a      	uxth	r2, r3
 8010f54:	4b0c      	ldr	r3, [pc, #48]	; (8010f88 <tcp_parseopt+0xe4>)
 8010f56:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010f58:	4b0b      	ldr	r3, [pc, #44]	; (8010f88 <tcp_parseopt+0xe4>)
 8010f5a:	881a      	ldrh	r2, [r3, #0]
 8010f5c:	4b09      	ldr	r3, [pc, #36]	; (8010f84 <tcp_parseopt+0xe0>)
 8010f5e:	881b      	ldrh	r3, [r3, #0]
 8010f60:	429a      	cmp	r2, r3
 8010f62:	d3b5      	bcc.n	8010ed0 <tcp_parseopt+0x2c>
 8010f64:	e004      	b.n	8010f70 <tcp_parseopt+0xcc>
          return;
 8010f66:	bf00      	nop
 8010f68:	e002      	b.n	8010f70 <tcp_parseopt+0xcc>
            return;
 8010f6a:	bf00      	nop
 8010f6c:	e000      	b.n	8010f70 <tcp_parseopt+0xcc>
            return;
 8010f6e:	bf00      	nop
      }
    }
  }
}
 8010f70:	3710      	adds	r7, #16
 8010f72:	46bd      	mov	sp, r7
 8010f74:	bd80      	pop	{r7, pc}
 8010f76:	bf00      	nop
 8010f78:	0801b518 	.word	0x0801b518
 8010f7c:	0801b97c 	.word	0x0801b97c
 8010f80:	0801b564 	.word	0x0801b564
 8010f84:	20008c6c 	.word	0x20008c6c
 8010f88:	20008c74 	.word	0x20008c74

08010f8c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8010f8c:	b480      	push	{r7}
 8010f8e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8010f90:	4b05      	ldr	r3, [pc, #20]	; (8010fa8 <tcp_trigger_input_pcb_close+0x1c>)
 8010f92:	781b      	ldrb	r3, [r3, #0]
 8010f94:	f043 0310 	orr.w	r3, r3, #16
 8010f98:	b2da      	uxtb	r2, r3
 8010f9a:	4b03      	ldr	r3, [pc, #12]	; (8010fa8 <tcp_trigger_input_pcb_close+0x1c>)
 8010f9c:	701a      	strb	r2, [r3, #0]
}
 8010f9e:	bf00      	nop
 8010fa0:	46bd      	mov	sp, r7
 8010fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fa6:	4770      	bx	lr
 8010fa8:	20008c85 	.word	0x20008c85

08010fac <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8010fac:	b580      	push	{r7, lr}
 8010fae:	b084      	sub	sp, #16
 8010fb0:	af00      	add	r7, sp, #0
 8010fb2:	60f8      	str	r0, [r7, #12]
 8010fb4:	60b9      	str	r1, [r7, #8]
 8010fb6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d00a      	beq.n	8010fd4 <tcp_route+0x28>
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	7a1b      	ldrb	r3, [r3, #8]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d006      	beq.n	8010fd4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	7a1b      	ldrb	r3, [r3, #8]
 8010fca:	4618      	mov	r0, r3
 8010fcc:	f7fb f826 	bl	800c01c <netif_get_by_index>
 8010fd0:	4603      	mov	r3, r0
 8010fd2:	e003      	b.n	8010fdc <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8010fd4:	6878      	ldr	r0, [r7, #4]
 8010fd6:	f005 fc7b 	bl	80168d0 <ip4_route>
 8010fda:	4603      	mov	r3, r0
  }
}
 8010fdc:	4618      	mov	r0, r3
 8010fde:	3710      	adds	r7, #16
 8010fe0:	46bd      	mov	sp, r7
 8010fe2:	bd80      	pop	{r7, pc}

08010fe4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8010fe4:	b590      	push	{r4, r7, lr}
 8010fe6:	b087      	sub	sp, #28
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	60f8      	str	r0, [r7, #12]
 8010fec:	60b9      	str	r1, [r7, #8]
 8010fee:	603b      	str	r3, [r7, #0]
 8010ff0:	4613      	mov	r3, r2
 8010ff2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d105      	bne.n	8011006 <tcp_create_segment+0x22>
 8010ffa:	4b44      	ldr	r3, [pc, #272]	; (801110c <tcp_create_segment+0x128>)
 8010ffc:	22a3      	movs	r2, #163	; 0xa3
 8010ffe:	4944      	ldr	r1, [pc, #272]	; (8011110 <tcp_create_segment+0x12c>)
 8011000:	4844      	ldr	r0, [pc, #272]	; (8011114 <tcp_create_segment+0x130>)
 8011002:	f007 f8c5 	bl	8018190 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011006:	68bb      	ldr	r3, [r7, #8]
 8011008:	2b00      	cmp	r3, #0
 801100a:	d105      	bne.n	8011018 <tcp_create_segment+0x34>
 801100c:	4b3f      	ldr	r3, [pc, #252]	; (801110c <tcp_create_segment+0x128>)
 801100e:	22a4      	movs	r2, #164	; 0xa4
 8011010:	4941      	ldr	r1, [pc, #260]	; (8011118 <tcp_create_segment+0x134>)
 8011012:	4840      	ldr	r0, [pc, #256]	; (8011114 <tcp_create_segment+0x130>)
 8011014:	f007 f8bc 	bl	8018190 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011018:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801101c:	009b      	lsls	r3, r3, #2
 801101e:	b2db      	uxtb	r3, r3
 8011020:	f003 0304 	and.w	r3, r3, #4
 8011024:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011026:	2003      	movs	r0, #3
 8011028:	f7fa fd02 	bl	800ba30 <memp_malloc>
 801102c:	6138      	str	r0, [r7, #16]
 801102e:	693b      	ldr	r3, [r7, #16]
 8011030:	2b00      	cmp	r3, #0
 8011032:	d104      	bne.n	801103e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011034:	68b8      	ldr	r0, [r7, #8]
 8011036:	f7fb fb7b 	bl	800c730 <pbuf_free>
    return NULL;
 801103a:	2300      	movs	r3, #0
 801103c:	e061      	b.n	8011102 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801103e:	693b      	ldr	r3, [r7, #16]
 8011040:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011044:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011046:	693b      	ldr	r3, [r7, #16]
 8011048:	2200      	movs	r2, #0
 801104a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801104c:	693b      	ldr	r3, [r7, #16]
 801104e:	68ba      	ldr	r2, [r7, #8]
 8011050:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011052:	68bb      	ldr	r3, [r7, #8]
 8011054:	891a      	ldrh	r2, [r3, #8]
 8011056:	7dfb      	ldrb	r3, [r7, #23]
 8011058:	b29b      	uxth	r3, r3
 801105a:	429a      	cmp	r2, r3
 801105c:	d205      	bcs.n	801106a <tcp_create_segment+0x86>
 801105e:	4b2b      	ldr	r3, [pc, #172]	; (801110c <tcp_create_segment+0x128>)
 8011060:	22b0      	movs	r2, #176	; 0xb0
 8011062:	492e      	ldr	r1, [pc, #184]	; (801111c <tcp_create_segment+0x138>)
 8011064:	482b      	ldr	r0, [pc, #172]	; (8011114 <tcp_create_segment+0x130>)
 8011066:	f007 f893 	bl	8018190 <iprintf>
  seg->len = p->tot_len - optlen;
 801106a:	68bb      	ldr	r3, [r7, #8]
 801106c:	891a      	ldrh	r2, [r3, #8]
 801106e:	7dfb      	ldrb	r3, [r7, #23]
 8011070:	b29b      	uxth	r3, r3
 8011072:	1ad3      	subs	r3, r2, r3
 8011074:	b29a      	uxth	r2, r3
 8011076:	693b      	ldr	r3, [r7, #16]
 8011078:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801107a:	2114      	movs	r1, #20
 801107c:	68b8      	ldr	r0, [r7, #8]
 801107e:	f7fb fac1 	bl	800c604 <pbuf_add_header>
 8011082:	4603      	mov	r3, r0
 8011084:	2b00      	cmp	r3, #0
 8011086:	d004      	beq.n	8011092 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011088:	6938      	ldr	r0, [r7, #16]
 801108a:	f7fc ffe9 	bl	800e060 <tcp_seg_free>
    return NULL;
 801108e:	2300      	movs	r3, #0
 8011090:	e037      	b.n	8011102 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8011092:	693b      	ldr	r3, [r7, #16]
 8011094:	685b      	ldr	r3, [r3, #4]
 8011096:	685a      	ldr	r2, [r3, #4]
 8011098:	693b      	ldr	r3, [r7, #16]
 801109a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	8ada      	ldrh	r2, [r3, #22]
 80110a0:	693b      	ldr	r3, [r7, #16]
 80110a2:	68dc      	ldr	r4, [r3, #12]
 80110a4:	4610      	mov	r0, r2
 80110a6:	f7f9 ffd7 	bl	800b058 <lwip_htons>
 80110aa:	4603      	mov	r3, r0
 80110ac:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	8b1a      	ldrh	r2, [r3, #24]
 80110b2:	693b      	ldr	r3, [r7, #16]
 80110b4:	68dc      	ldr	r4, [r3, #12]
 80110b6:	4610      	mov	r0, r2
 80110b8:	f7f9 ffce 	bl	800b058 <lwip_htons>
 80110bc:	4603      	mov	r3, r0
 80110be:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80110c0:	693b      	ldr	r3, [r7, #16]
 80110c2:	68dc      	ldr	r4, [r3, #12]
 80110c4:	6838      	ldr	r0, [r7, #0]
 80110c6:	f7f9 ffdc 	bl	800b082 <lwip_htonl>
 80110ca:	4603      	mov	r3, r0
 80110cc:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80110ce:	7dfb      	ldrb	r3, [r7, #23]
 80110d0:	089b      	lsrs	r3, r3, #2
 80110d2:	b2db      	uxtb	r3, r3
 80110d4:	b29b      	uxth	r3, r3
 80110d6:	3305      	adds	r3, #5
 80110d8:	b29b      	uxth	r3, r3
 80110da:	031b      	lsls	r3, r3, #12
 80110dc:	b29a      	uxth	r2, r3
 80110de:	79fb      	ldrb	r3, [r7, #7]
 80110e0:	b29b      	uxth	r3, r3
 80110e2:	4313      	orrs	r3, r2
 80110e4:	b29a      	uxth	r2, r3
 80110e6:	693b      	ldr	r3, [r7, #16]
 80110e8:	68dc      	ldr	r4, [r3, #12]
 80110ea:	4610      	mov	r0, r2
 80110ec:	f7f9 ffb4 	bl	800b058 <lwip_htons>
 80110f0:	4603      	mov	r3, r0
 80110f2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80110f4:	693b      	ldr	r3, [r7, #16]
 80110f6:	68db      	ldr	r3, [r3, #12]
 80110f8:	2200      	movs	r2, #0
 80110fa:	749a      	strb	r2, [r3, #18]
 80110fc:	2200      	movs	r2, #0
 80110fe:	74da      	strb	r2, [r3, #19]
  return seg;
 8011100:	693b      	ldr	r3, [r7, #16]
}
 8011102:	4618      	mov	r0, r3
 8011104:	371c      	adds	r7, #28
 8011106:	46bd      	mov	sp, r7
 8011108:	bd90      	pop	{r4, r7, pc}
 801110a:	bf00      	nop
 801110c:	0801b998 	.word	0x0801b998
 8011110:	0801b9cc 	.word	0x0801b9cc
 8011114:	0801b9ec 	.word	0x0801b9ec
 8011118:	0801ba14 	.word	0x0801ba14
 801111c:	0801ba38 	.word	0x0801ba38

08011120 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8011120:	b580      	push	{r7, lr}
 8011122:	b086      	sub	sp, #24
 8011124:	af00      	add	r7, sp, #0
 8011126:	607b      	str	r3, [r7, #4]
 8011128:	4603      	mov	r3, r0
 801112a:	73fb      	strb	r3, [r7, #15]
 801112c:	460b      	mov	r3, r1
 801112e:	81bb      	strh	r3, [r7, #12]
 8011130:	4613      	mov	r3, r2
 8011132:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8011134:	89bb      	ldrh	r3, [r7, #12]
 8011136:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d105      	bne.n	801114a <tcp_pbuf_prealloc+0x2a>
 801113e:	4b30      	ldr	r3, [pc, #192]	; (8011200 <tcp_pbuf_prealloc+0xe0>)
 8011140:	22e8      	movs	r2, #232	; 0xe8
 8011142:	4930      	ldr	r1, [pc, #192]	; (8011204 <tcp_pbuf_prealloc+0xe4>)
 8011144:	4830      	ldr	r0, [pc, #192]	; (8011208 <tcp_pbuf_prealloc+0xe8>)
 8011146:	f007 f823 	bl	8018190 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801114a:	6a3b      	ldr	r3, [r7, #32]
 801114c:	2b00      	cmp	r3, #0
 801114e:	d105      	bne.n	801115c <tcp_pbuf_prealloc+0x3c>
 8011150:	4b2b      	ldr	r3, [pc, #172]	; (8011200 <tcp_pbuf_prealloc+0xe0>)
 8011152:	22e9      	movs	r2, #233	; 0xe9
 8011154:	492d      	ldr	r1, [pc, #180]	; (801120c <tcp_pbuf_prealloc+0xec>)
 8011156:	482c      	ldr	r0, [pc, #176]	; (8011208 <tcp_pbuf_prealloc+0xe8>)
 8011158:	f007 f81a 	bl	8018190 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801115c:	89ba      	ldrh	r2, [r7, #12]
 801115e:	897b      	ldrh	r3, [r7, #10]
 8011160:	429a      	cmp	r2, r3
 8011162:	d221      	bcs.n	80111a8 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011164:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011168:	f003 0302 	and.w	r3, r3, #2
 801116c:	2b00      	cmp	r3, #0
 801116e:	d111      	bne.n	8011194 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8011170:	6a3b      	ldr	r3, [r7, #32]
 8011172:	8b5b      	ldrh	r3, [r3, #26]
 8011174:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011178:	2b00      	cmp	r3, #0
 801117a:	d115      	bne.n	80111a8 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801117c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011180:	2b00      	cmp	r3, #0
 8011182:	d007      	beq.n	8011194 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8011184:	6a3b      	ldr	r3, [r7, #32]
 8011186:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8011188:	2b00      	cmp	r3, #0
 801118a:	d103      	bne.n	8011194 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801118c:	6a3b      	ldr	r3, [r7, #32]
 801118e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8011190:	2b00      	cmp	r3, #0
 8011192:	d009      	beq.n	80111a8 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8011194:	89bb      	ldrh	r3, [r7, #12]
 8011196:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801119a:	f023 0203 	bic.w	r2, r3, #3
 801119e:	897b      	ldrh	r3, [r7, #10]
 80111a0:	4293      	cmp	r3, r2
 80111a2:	bf28      	it	cs
 80111a4:	4613      	movcs	r3, r2
 80111a6:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80111a8:	8af9      	ldrh	r1, [r7, #22]
 80111aa:	7bfb      	ldrb	r3, [r7, #15]
 80111ac:	f44f 7220 	mov.w	r2, #640	; 0x280
 80111b0:	4618      	mov	r0, r3
 80111b2:	f7fa ffdd 	bl	800c170 <pbuf_alloc>
 80111b6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80111b8:	693b      	ldr	r3, [r7, #16]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d101      	bne.n	80111c2 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80111be:	2300      	movs	r3, #0
 80111c0:	e019      	b.n	80111f6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80111c2:	693b      	ldr	r3, [r7, #16]
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d006      	beq.n	80111d8 <tcp_pbuf_prealloc+0xb8>
 80111ca:	4b0d      	ldr	r3, [pc, #52]	; (8011200 <tcp_pbuf_prealloc+0xe0>)
 80111cc:	f240 120b 	movw	r2, #267	; 0x10b
 80111d0:	490f      	ldr	r1, [pc, #60]	; (8011210 <tcp_pbuf_prealloc+0xf0>)
 80111d2:	480d      	ldr	r0, [pc, #52]	; (8011208 <tcp_pbuf_prealloc+0xe8>)
 80111d4:	f006 ffdc 	bl	8018190 <iprintf>
  *oversize = p->len - length;
 80111d8:	693b      	ldr	r3, [r7, #16]
 80111da:	895a      	ldrh	r2, [r3, #10]
 80111dc:	89bb      	ldrh	r3, [r7, #12]
 80111de:	1ad3      	subs	r3, r2, r3
 80111e0:	b29a      	uxth	r2, r3
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80111e6:	693b      	ldr	r3, [r7, #16]
 80111e8:	89ba      	ldrh	r2, [r7, #12]
 80111ea:	811a      	strh	r2, [r3, #8]
 80111ec:	693b      	ldr	r3, [r7, #16]
 80111ee:	891a      	ldrh	r2, [r3, #8]
 80111f0:	693b      	ldr	r3, [r7, #16]
 80111f2:	815a      	strh	r2, [r3, #10]
  return p;
 80111f4:	693b      	ldr	r3, [r7, #16]
}
 80111f6:	4618      	mov	r0, r3
 80111f8:	3718      	adds	r7, #24
 80111fa:	46bd      	mov	sp, r7
 80111fc:	bd80      	pop	{r7, pc}
 80111fe:	bf00      	nop
 8011200:	0801b998 	.word	0x0801b998
 8011204:	0801ba50 	.word	0x0801ba50
 8011208:	0801b9ec 	.word	0x0801b9ec
 801120c:	0801ba74 	.word	0x0801ba74
 8011210:	0801ba94 	.word	0x0801ba94

08011214 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8011214:	b580      	push	{r7, lr}
 8011216:	b082      	sub	sp, #8
 8011218:	af00      	add	r7, sp, #0
 801121a:	6078      	str	r0, [r7, #4]
 801121c:	460b      	mov	r3, r1
 801121e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	2b00      	cmp	r3, #0
 8011224:	d106      	bne.n	8011234 <tcp_write_checks+0x20>
 8011226:	4b33      	ldr	r3, [pc, #204]	; (80112f4 <tcp_write_checks+0xe0>)
 8011228:	f240 1233 	movw	r2, #307	; 0x133
 801122c:	4932      	ldr	r1, [pc, #200]	; (80112f8 <tcp_write_checks+0xe4>)
 801122e:	4833      	ldr	r0, [pc, #204]	; (80112fc <tcp_write_checks+0xe8>)
 8011230:	f006 ffae 	bl	8018190 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	7d1b      	ldrb	r3, [r3, #20]
 8011238:	2b04      	cmp	r3, #4
 801123a:	d00e      	beq.n	801125a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8011240:	2b07      	cmp	r3, #7
 8011242:	d00a      	beq.n	801125a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8011248:	2b02      	cmp	r3, #2
 801124a:	d006      	beq.n	801125a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8011250:	2b03      	cmp	r3, #3
 8011252:	d002      	beq.n	801125a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8011254:	f06f 030a 	mvn.w	r3, #10
 8011258:	e048      	b.n	80112ec <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801125a:	887b      	ldrh	r3, [r7, #2]
 801125c:	2b00      	cmp	r3, #0
 801125e:	d101      	bne.n	8011264 <tcp_write_checks+0x50>
    return ERR_OK;
 8011260:	2300      	movs	r3, #0
 8011262:	e043      	b.n	80112ec <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801126a:	887a      	ldrh	r2, [r7, #2]
 801126c:	429a      	cmp	r2, r3
 801126e:	d909      	bls.n	8011284 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	8b5b      	ldrh	r3, [r3, #26]
 8011274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011278:	b29a      	uxth	r2, r3
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801127e:	f04f 33ff 	mov.w	r3, #4294967295
 8011282:	e033      	b.n	80112ec <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801128a:	2b08      	cmp	r3, #8
 801128c:	d909      	bls.n	80112a2 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	8b5b      	ldrh	r3, [r3, #26]
 8011292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011296:	b29a      	uxth	r2, r3
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801129c:	f04f 33ff 	mov.w	r3, #4294967295
 80112a0:	e024      	b.n	80112ec <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d00f      	beq.n	80112cc <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d11a      	bne.n	80112ea <tcp_write_checks+0xd6>
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d116      	bne.n	80112ea <tcp_write_checks+0xd6>
 80112bc:	4b0d      	ldr	r3, [pc, #52]	; (80112f4 <tcp_write_checks+0xe0>)
 80112be:	f44f 72ab 	mov.w	r2, #342	; 0x156
 80112c2:	490f      	ldr	r1, [pc, #60]	; (8011300 <tcp_write_checks+0xec>)
 80112c4:	480d      	ldr	r0, [pc, #52]	; (80112fc <tcp_write_checks+0xe8>)
 80112c6:	f006 ff63 	bl	8018190 <iprintf>
 80112ca:	e00e      	b.n	80112ea <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d103      	bne.n	80112dc <tcp_write_checks+0xc8>
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d006      	beq.n	80112ea <tcp_write_checks+0xd6>
 80112dc:	4b05      	ldr	r3, [pc, #20]	; (80112f4 <tcp_write_checks+0xe0>)
 80112de:	f240 1259 	movw	r2, #345	; 0x159
 80112e2:	4908      	ldr	r1, [pc, #32]	; (8011304 <tcp_write_checks+0xf0>)
 80112e4:	4805      	ldr	r0, [pc, #20]	; (80112fc <tcp_write_checks+0xe8>)
 80112e6:	f006 ff53 	bl	8018190 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80112ea:	2300      	movs	r3, #0
}
 80112ec:	4618      	mov	r0, r3
 80112ee:	3708      	adds	r7, #8
 80112f0:	46bd      	mov	sp, r7
 80112f2:	bd80      	pop	{r7, pc}
 80112f4:	0801b998 	.word	0x0801b998
 80112f8:	0801baa8 	.word	0x0801baa8
 80112fc:	0801b9ec 	.word	0x0801b9ec
 8011300:	0801bac8 	.word	0x0801bac8
 8011304:	0801bb04 	.word	0x0801bb04

08011308 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8011308:	b590      	push	{r4, r7, lr}
 801130a:	b09b      	sub	sp, #108	; 0x6c
 801130c:	af04      	add	r7, sp, #16
 801130e:	60f8      	str	r0, [r7, #12]
 8011310:	60b9      	str	r1, [r7, #8]
 8011312:	4611      	mov	r1, r2
 8011314:	461a      	mov	r2, r3
 8011316:	460b      	mov	r3, r1
 8011318:	80fb      	strh	r3, [r7, #6]
 801131a:	4613      	mov	r3, r2
 801131c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801131e:	2300      	movs	r3, #0
 8011320:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8011322:	2300      	movs	r3, #0
 8011324:	653b      	str	r3, [r7, #80]	; 0x50
 8011326:	2300      	movs	r3, #0
 8011328:	64fb      	str	r3, [r7, #76]	; 0x4c
 801132a:	2300      	movs	r3, #0
 801132c:	64bb      	str	r3, [r7, #72]	; 0x48
 801132e:	2300      	movs	r3, #0
 8011330:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8011332:	2300      	movs	r3, #0
 8011334:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8011338:	2300      	movs	r3, #0
 801133a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801133e:	2300      	movs	r3, #0
 8011340:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8011342:	2300      	movs	r3, #0
 8011344:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8011346:	2300      	movs	r3, #0
 8011348:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	2b00      	cmp	r3, #0
 801134e:	d109      	bne.n	8011364 <tcp_write+0x5c>
 8011350:	4ba5      	ldr	r3, [pc, #660]	; (80115e8 <tcp_write+0x2e0>)
 8011352:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8011356:	49a5      	ldr	r1, [pc, #660]	; (80115ec <tcp_write+0x2e4>)
 8011358:	48a5      	ldr	r0, [pc, #660]	; (80115f0 <tcp_write+0x2e8>)
 801135a:	f006 ff19 	bl	8018190 <iprintf>
 801135e:	f06f 030f 	mvn.w	r3, #15
 8011362:	e32c      	b.n	80119be <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801136a:	085b      	lsrs	r3, r3, #1
 801136c:	b29a      	uxth	r2, r3
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011372:	4293      	cmp	r3, r2
 8011374:	bf28      	it	cs
 8011376:	4613      	movcs	r3, r2
 8011378:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801137a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801137c:	2b00      	cmp	r3, #0
 801137e:	d102      	bne.n	8011386 <tcp_write+0x7e>
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011384:	e000      	b.n	8011388 <tcp_write+0x80>
 8011386:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011388:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801138a:	68bb      	ldr	r3, [r7, #8]
 801138c:	2b00      	cmp	r3, #0
 801138e:	d109      	bne.n	80113a4 <tcp_write+0x9c>
 8011390:	4b95      	ldr	r3, [pc, #596]	; (80115e8 <tcp_write+0x2e0>)
 8011392:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8011396:	4997      	ldr	r1, [pc, #604]	; (80115f4 <tcp_write+0x2ec>)
 8011398:	4895      	ldr	r0, [pc, #596]	; (80115f0 <tcp_write+0x2e8>)
 801139a:	f006 fef9 	bl	8018190 <iprintf>
 801139e:	f06f 030f 	mvn.w	r3, #15
 80113a2:	e30c      	b.n	80119be <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80113a4:	88fb      	ldrh	r3, [r7, #6]
 80113a6:	4619      	mov	r1, r3
 80113a8:	68f8      	ldr	r0, [r7, #12]
 80113aa:	f7ff ff33 	bl	8011214 <tcp_write_checks>
 80113ae:	4603      	mov	r3, r0
 80113b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80113b4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d002      	beq.n	80113c2 <tcp_write+0xba>
    return err;
 80113bc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80113c0:	e2fd      	b.n	80119be <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80113c8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80113cc:	2300      	movs	r3, #0
 80113ce:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	f000 80f7 	beq.w	80115ca <tcp_write+0x2c2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113e0:	653b      	str	r3, [r7, #80]	; 0x50
 80113e2:	e002      	b.n	80113ea <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80113e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80113ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d1f8      	bne.n	80113e4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80113f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113f4:	7a9b      	ldrb	r3, [r3, #10]
 80113f6:	009b      	lsls	r3, r3, #2
 80113f8:	b29b      	uxth	r3, r3
 80113fa:	f003 0304 	and.w	r3, r3, #4
 80113fe:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8011400:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011402:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011404:	891b      	ldrh	r3, [r3, #8]
 8011406:	4619      	mov	r1, r3
 8011408:	8c3b      	ldrh	r3, [r7, #32]
 801140a:	440b      	add	r3, r1
 801140c:	429a      	cmp	r2, r3
 801140e:	da06      	bge.n	801141e <tcp_write+0x116>
 8011410:	4b75      	ldr	r3, [pc, #468]	; (80115e8 <tcp_write+0x2e0>)
 8011412:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8011416:	4978      	ldr	r1, [pc, #480]	; (80115f8 <tcp_write+0x2f0>)
 8011418:	4875      	ldr	r0, [pc, #468]	; (80115f0 <tcp_write+0x2e8>)
 801141a:	f006 feb9 	bl	8018190 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801141e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011420:	891a      	ldrh	r2, [r3, #8]
 8011422:	8c3b      	ldrh	r3, [r7, #32]
 8011424:	4413      	add	r3, r2
 8011426:	b29b      	uxth	r3, r3
 8011428:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801142a:	1ad3      	subs	r3, r2, r3
 801142c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011434:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8011436:	8a7b      	ldrh	r3, [r7, #18]
 8011438:	2b00      	cmp	r3, #0
 801143a:	d027      	beq.n	801148c <tcp_write+0x184>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801143c:	8a7b      	ldrh	r3, [r7, #18]
 801143e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011440:	429a      	cmp	r2, r3
 8011442:	d206      	bcs.n	8011452 <tcp_write+0x14a>
 8011444:	4b68      	ldr	r3, [pc, #416]	; (80115e8 <tcp_write+0x2e0>)
 8011446:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801144a:	496c      	ldr	r1, [pc, #432]	; (80115fc <tcp_write+0x2f4>)
 801144c:	4868      	ldr	r0, [pc, #416]	; (80115f0 <tcp_write+0x2e8>)
 801144e:	f006 fe9f 	bl	8018190 <iprintf>
      seg = last_unsent;
 8011452:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011454:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8011456:	8a7b      	ldrh	r3, [r7, #18]
 8011458:	88fa      	ldrh	r2, [r7, #6]
 801145a:	429a      	cmp	r2, r3
 801145c:	d901      	bls.n	8011462 <tcp_write+0x15a>
 801145e:	8a7b      	ldrh	r3, [r7, #18]
 8011460:	e000      	b.n	8011464 <tcp_write+0x15c>
 8011462:	88fb      	ldrh	r3, [r7, #6]
 8011464:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011466:	4293      	cmp	r3, r2
 8011468:	bfa8      	it	ge
 801146a:	4613      	movge	r3, r2
 801146c:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801146e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011472:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011474:	4413      	add	r3, r2
 8011476:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801147a:	8a7a      	ldrh	r2, [r7, #18]
 801147c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801147e:	1ad3      	subs	r3, r2, r3
 8011480:	b29b      	uxth	r3, r3
 8011482:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8011484:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011486:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011488:	1ad3      	subs	r3, r2, r3
 801148a:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801148c:	8a7b      	ldrh	r3, [r7, #18]
 801148e:	2b00      	cmp	r3, #0
 8011490:	d00b      	beq.n	80114aa <tcp_write+0x1a2>
 8011492:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011496:	88fb      	ldrh	r3, [r7, #6]
 8011498:	429a      	cmp	r2, r3
 801149a:	d006      	beq.n	80114aa <tcp_write+0x1a2>
 801149c:	4b52      	ldr	r3, [pc, #328]	; (80115e8 <tcp_write+0x2e0>)
 801149e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80114a2:	4957      	ldr	r1, [pc, #348]	; (8011600 <tcp_write+0x2f8>)
 80114a4:	4852      	ldr	r0, [pc, #328]	; (80115f0 <tcp_write+0x2e8>)
 80114a6:	f006 fe73 	bl	8018190 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80114aa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80114ae:	88fb      	ldrh	r3, [r7, #6]
 80114b0:	429a      	cmp	r2, r3
 80114b2:	f080 8168 	bcs.w	8011786 <tcp_write+0x47e>
 80114b6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	f000 8164 	beq.w	8011786 <tcp_write+0x47e>
 80114be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80114c0:	891b      	ldrh	r3, [r3, #8]
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	f000 815f 	beq.w	8011786 <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80114c8:	88fa      	ldrh	r2, [r7, #6]
 80114ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80114ce:	1ad2      	subs	r2, r2, r3
 80114d0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80114d2:	4293      	cmp	r3, r2
 80114d4:	bfa8      	it	ge
 80114d6:	4613      	movge	r3, r2
 80114d8:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80114da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80114dc:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80114de:	797b      	ldrb	r3, [r7, #5]
 80114e0:	f003 0301 	and.w	r3, r3, #1
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d027      	beq.n	8011538 <tcp_write+0x230>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80114e8:	f107 0012 	add.w	r0, r7, #18
 80114ec:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80114ee:	8bf9      	ldrh	r1, [r7, #30]
 80114f0:	2301      	movs	r3, #1
 80114f2:	9302      	str	r3, [sp, #8]
 80114f4:	797b      	ldrb	r3, [r7, #5]
 80114f6:	9301      	str	r3, [sp, #4]
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	9300      	str	r3, [sp, #0]
 80114fc:	4603      	mov	r3, r0
 80114fe:	2000      	movs	r0, #0
 8011500:	f7ff fe0e 	bl	8011120 <tcp_pbuf_prealloc>
 8011504:	6578      	str	r0, [r7, #84]	; 0x54
 8011506:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011508:	2b00      	cmp	r3, #0
 801150a:	f000 8226 	beq.w	801195a <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801150e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011510:	6858      	ldr	r0, [r3, #4]
 8011512:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011516:	68ba      	ldr	r2, [r7, #8]
 8011518:	4413      	add	r3, r2
 801151a:	8bfa      	ldrh	r2, [r7, #30]
 801151c:	4619      	mov	r1, r3
 801151e:	f006 fe0a 	bl	8018136 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8011522:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011524:	f7fb f992 	bl	800c84c <pbuf_clen>
 8011528:	4603      	mov	r3, r0
 801152a:	461a      	mov	r2, r3
 801152c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011530:	4413      	add	r3, r2
 8011532:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8011536:	e041      	b.n	80115bc <tcp_write+0x2b4>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8011538:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801153a:	685b      	ldr	r3, [r3, #4]
 801153c:	637b      	str	r3, [r7, #52]	; 0x34
 801153e:	e002      	b.n	8011546 <tcp_write+0x23e>
 8011540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	637b      	str	r3, [r7, #52]	; 0x34
 8011546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	2b00      	cmp	r3, #0
 801154c:	d1f8      	bne.n	8011540 <tcp_write+0x238>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801154e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011550:	7b1b      	ldrb	r3, [r3, #12]
 8011552:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8011556:	2b00      	cmp	r3, #0
 8011558:	d115      	bne.n	8011586 <tcp_write+0x27e>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801155a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801155c:	685b      	ldr	r3, [r3, #4]
 801155e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011560:	8952      	ldrh	r2, [r2, #10]
 8011562:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011564:	68ba      	ldr	r2, [r7, #8]
 8011566:	429a      	cmp	r2, r3
 8011568:	d10d      	bne.n	8011586 <tcp_write+0x27e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801156a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801156e:	2b00      	cmp	r3, #0
 8011570:	d006      	beq.n	8011580 <tcp_write+0x278>
 8011572:	4b1d      	ldr	r3, [pc, #116]	; (80115e8 <tcp_write+0x2e0>)
 8011574:	f240 2231 	movw	r2, #561	; 0x231
 8011578:	4922      	ldr	r1, [pc, #136]	; (8011604 <tcp_write+0x2fc>)
 801157a:	481d      	ldr	r0, [pc, #116]	; (80115f0 <tcp_write+0x2e8>)
 801157c:	f006 fe08 	bl	8018190 <iprintf>
          extendlen = seglen;
 8011580:	8bfb      	ldrh	r3, [r7, #30]
 8011582:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8011584:	e01a      	b.n	80115bc <tcp_write+0x2b4>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8011586:	8bfb      	ldrh	r3, [r7, #30]
 8011588:	2201      	movs	r2, #1
 801158a:	4619      	mov	r1, r3
 801158c:	2000      	movs	r0, #0
 801158e:	f7fa fdef 	bl	800c170 <pbuf_alloc>
 8011592:	6578      	str	r0, [r7, #84]	; 0x54
 8011594:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011596:	2b00      	cmp	r3, #0
 8011598:	f000 81e1 	beq.w	801195e <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801159c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80115a0:	68ba      	ldr	r2, [r7, #8]
 80115a2:	441a      	add	r2, r3
 80115a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80115a6:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80115a8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80115aa:	f7fb f94f 	bl	800c84c <pbuf_clen>
 80115ae:	4603      	mov	r3, r0
 80115b0:	461a      	mov	r2, r3
 80115b2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80115b6:	4413      	add	r3, r2
 80115b8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80115bc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80115c0:	8bfb      	ldrh	r3, [r7, #30]
 80115c2:	4413      	add	r3, r2
 80115c4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80115c8:	e0dd      	b.n	8011786 <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	f000 80d8 	beq.w	8011786 <tcp_write+0x47e>
 80115d6:	4b04      	ldr	r3, [pc, #16]	; (80115e8 <tcp_write+0x2e0>)
 80115d8:	f240 224b 	movw	r2, #587	; 0x24b
 80115dc:	490a      	ldr	r1, [pc, #40]	; (8011608 <tcp_write+0x300>)
 80115de:	4804      	ldr	r0, [pc, #16]	; (80115f0 <tcp_write+0x2e8>)
 80115e0:	f006 fdd6 	bl	8018190 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80115e4:	e0cf      	b.n	8011786 <tcp_write+0x47e>
 80115e6:	bf00      	nop
 80115e8:	0801b998 	.word	0x0801b998
 80115ec:	0801bb38 	.word	0x0801bb38
 80115f0:	0801b9ec 	.word	0x0801b9ec
 80115f4:	0801bb50 	.word	0x0801bb50
 80115f8:	0801bb84 	.word	0x0801bb84
 80115fc:	0801bb9c 	.word	0x0801bb9c
 8011600:	0801bbbc 	.word	0x0801bbbc
 8011604:	0801bbdc 	.word	0x0801bbdc
 8011608:	0801bc08 	.word	0x0801bc08
    struct pbuf *p;
    u16_t left = len - pos;
 801160c:	88fa      	ldrh	r2, [r7, #6]
 801160e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011612:	1ad3      	subs	r3, r2, r3
 8011614:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8011616:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801161a:	b29b      	uxth	r3, r3
 801161c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801161e:	1ad3      	subs	r3, r2, r3
 8011620:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8011622:	8b7a      	ldrh	r2, [r7, #26]
 8011624:	8bbb      	ldrh	r3, [r7, #28]
 8011626:	4293      	cmp	r3, r2
 8011628:	bf28      	it	cs
 801162a:	4613      	movcs	r3, r2
 801162c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801162e:	797b      	ldrb	r3, [r7, #5]
 8011630:	f003 0301 	and.w	r3, r3, #1
 8011634:	2b00      	cmp	r3, #0
 8011636:	d036      	beq.n	80116a6 <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8011638:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801163c:	b29a      	uxth	r2, r3
 801163e:	8b3b      	ldrh	r3, [r7, #24]
 8011640:	4413      	add	r3, r2
 8011642:	b299      	uxth	r1, r3
 8011644:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011646:	2b00      	cmp	r3, #0
 8011648:	bf0c      	ite	eq
 801164a:	2301      	moveq	r3, #1
 801164c:	2300      	movne	r3, #0
 801164e:	b2db      	uxtb	r3, r3
 8011650:	f107 0012 	add.w	r0, r7, #18
 8011654:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011656:	9302      	str	r3, [sp, #8]
 8011658:	797b      	ldrb	r3, [r7, #5]
 801165a:	9301      	str	r3, [sp, #4]
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	9300      	str	r3, [sp, #0]
 8011660:	4603      	mov	r3, r0
 8011662:	2036      	movs	r0, #54	; 0x36
 8011664:	f7ff fd5c 	bl	8011120 <tcp_pbuf_prealloc>
 8011668:	6338      	str	r0, [r7, #48]	; 0x30
 801166a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801166c:	2b00      	cmp	r3, #0
 801166e:	f000 8178 	beq.w	8011962 <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8011672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011674:	895b      	ldrh	r3, [r3, #10]
 8011676:	8b3a      	ldrh	r2, [r7, #24]
 8011678:	429a      	cmp	r2, r3
 801167a:	d906      	bls.n	801168a <tcp_write+0x382>
 801167c:	4b8c      	ldr	r3, [pc, #560]	; (80118b0 <tcp_write+0x5a8>)
 801167e:	f240 2267 	movw	r2, #615	; 0x267
 8011682:	498c      	ldr	r1, [pc, #560]	; (80118b4 <tcp_write+0x5ac>)
 8011684:	488c      	ldr	r0, [pc, #560]	; (80118b8 <tcp_write+0x5b0>)
 8011686:	f006 fd83 	bl	8018190 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801168a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801168c:	685a      	ldr	r2, [r3, #4]
 801168e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011692:	18d0      	adds	r0, r2, r3
 8011694:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011698:	68ba      	ldr	r2, [r7, #8]
 801169a:	4413      	add	r3, r2
 801169c:	8b3a      	ldrh	r2, [r7, #24]
 801169e:	4619      	mov	r1, r3
 80116a0:	f006 fd49 	bl	8018136 <memcpy>
 80116a4:	e02f      	b.n	8011706 <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80116a6:	8a7b      	ldrh	r3, [r7, #18]
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d006      	beq.n	80116ba <tcp_write+0x3b2>
 80116ac:	4b80      	ldr	r3, [pc, #512]	; (80118b0 <tcp_write+0x5a8>)
 80116ae:	f240 2271 	movw	r2, #625	; 0x271
 80116b2:	4982      	ldr	r1, [pc, #520]	; (80118bc <tcp_write+0x5b4>)
 80116b4:	4880      	ldr	r0, [pc, #512]	; (80118b8 <tcp_write+0x5b0>)
 80116b6:	f006 fd6b 	bl	8018190 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80116ba:	8b3b      	ldrh	r3, [r7, #24]
 80116bc:	2201      	movs	r2, #1
 80116be:	4619      	mov	r1, r3
 80116c0:	2036      	movs	r0, #54	; 0x36
 80116c2:	f7fa fd55 	bl	800c170 <pbuf_alloc>
 80116c6:	6178      	str	r0, [r7, #20]
 80116c8:	697b      	ldr	r3, [r7, #20]
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	f000 814b 	beq.w	8011966 <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80116d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80116d4:	68ba      	ldr	r2, [r7, #8]
 80116d6:	441a      	add	r2, r3
 80116d8:	697b      	ldr	r3, [r7, #20]
 80116da:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80116dc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80116e0:	b29b      	uxth	r3, r3
 80116e2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80116e6:	4619      	mov	r1, r3
 80116e8:	2036      	movs	r0, #54	; 0x36
 80116ea:	f7fa fd41 	bl	800c170 <pbuf_alloc>
 80116ee:	6338      	str	r0, [r7, #48]	; 0x30
 80116f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d103      	bne.n	80116fe <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80116f6:	6978      	ldr	r0, [r7, #20]
 80116f8:	f7fb f81a 	bl	800c730 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80116fc:	e136      	b.n	801196c <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80116fe:	6979      	ldr	r1, [r7, #20]
 8011700:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011702:	f7fb f8e3 	bl	800c8cc <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8011706:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011708:	f7fb f8a0 	bl	800c84c <pbuf_clen>
 801170c:	4603      	mov	r3, r0
 801170e:	461a      	mov	r2, r3
 8011710:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011714:	4413      	add	r3, r2
 8011716:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801171a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801171e:	2b09      	cmp	r3, #9
 8011720:	d903      	bls.n	801172a <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8011722:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011724:	f7fb f804 	bl	800c730 <pbuf_free>
      goto memerr;
 8011728:	e120      	b.n	801196c <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801172e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011732:	441a      	add	r2, r3
 8011734:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011738:	9300      	str	r3, [sp, #0]
 801173a:	4613      	mov	r3, r2
 801173c:	2200      	movs	r2, #0
 801173e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011740:	68f8      	ldr	r0, [r7, #12]
 8011742:	f7ff fc4f 	bl	8010fe4 <tcp_create_segment>
 8011746:	64f8      	str	r0, [r7, #76]	; 0x4c
 8011748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801174a:	2b00      	cmp	r3, #0
 801174c:	f000 810d 	beq.w	801196a <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8011750:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011752:	2b00      	cmp	r3, #0
 8011754:	d102      	bne.n	801175c <tcp_write+0x454>
      queue = seg;
 8011756:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011758:	647b      	str	r3, [r7, #68]	; 0x44
 801175a:	e00c      	b.n	8011776 <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801175c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801175e:	2b00      	cmp	r3, #0
 8011760:	d106      	bne.n	8011770 <tcp_write+0x468>
 8011762:	4b53      	ldr	r3, [pc, #332]	; (80118b0 <tcp_write+0x5a8>)
 8011764:	f240 22ab 	movw	r2, #683	; 0x2ab
 8011768:	4955      	ldr	r1, [pc, #340]	; (80118c0 <tcp_write+0x5b8>)
 801176a:	4853      	ldr	r0, [pc, #332]	; (80118b8 <tcp_write+0x5b0>)
 801176c:	f006 fd10 	bl	8018190 <iprintf>
      prev_seg->next = seg;
 8011770:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011772:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011774:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8011776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011778:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801177a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801177e:	8b3b      	ldrh	r3, [r7, #24]
 8011780:	4413      	add	r3, r2
 8011782:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8011786:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801178a:	88fb      	ldrh	r3, [r7, #6]
 801178c:	429a      	cmp	r2, r3
 801178e:	f4ff af3d 	bcc.w	801160c <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8011792:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011794:	2b00      	cmp	r3, #0
 8011796:	d02c      	beq.n	80117f2 <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8011798:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801179a:	685b      	ldr	r3, [r3, #4]
 801179c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801179e:	e01e      	b.n	80117de <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 80117a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117a2:	891a      	ldrh	r2, [r3, #8]
 80117a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80117a6:	4413      	add	r3, r2
 80117a8:	b29a      	uxth	r2, r3
 80117aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117ac:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80117ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d110      	bne.n	80117d8 <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80117b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117b8:	685b      	ldr	r3, [r3, #4]
 80117ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80117bc:	8952      	ldrh	r2, [r2, #10]
 80117be:	4413      	add	r3, r2
 80117c0:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80117c2:	68b9      	ldr	r1, [r7, #8]
 80117c4:	4618      	mov	r0, r3
 80117c6:	f006 fcb6 	bl	8018136 <memcpy>
        p->len += oversize_used;
 80117ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117cc:	895a      	ldrh	r2, [r3, #10]
 80117ce:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80117d0:	4413      	add	r3, r2
 80117d2:	b29a      	uxth	r2, r3
 80117d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117d6:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80117d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80117de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d1dd      	bne.n	80117a0 <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 80117e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80117e6:	891a      	ldrh	r2, [r3, #8]
 80117e8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80117ea:	4413      	add	r3, r2
 80117ec:	b29a      	uxth	r2, r3
 80117ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80117f0:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80117f2:	8a7a      	ldrh	r2, [r7, #18]
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80117fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d018      	beq.n	8011832 <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8011800:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011802:	2b00      	cmp	r3, #0
 8011804:	d106      	bne.n	8011814 <tcp_write+0x50c>
 8011806:	4b2a      	ldr	r3, [pc, #168]	; (80118b0 <tcp_write+0x5a8>)
 8011808:	f240 22e1 	movw	r2, #737	; 0x2e1
 801180c:	492d      	ldr	r1, [pc, #180]	; (80118c4 <tcp_write+0x5bc>)
 801180e:	482a      	ldr	r0, [pc, #168]	; (80118b8 <tcp_write+0x5b0>)
 8011810:	f006 fcbe 	bl	8018190 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8011814:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011816:	685b      	ldr	r3, [r3, #4]
 8011818:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801181a:	4618      	mov	r0, r3
 801181c:	f7fb f856 	bl	800c8cc <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8011820:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011822:	891a      	ldrh	r2, [r3, #8]
 8011824:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011826:	891b      	ldrh	r3, [r3, #8]
 8011828:	4413      	add	r3, r2
 801182a:	b29a      	uxth	r2, r3
 801182c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801182e:	811a      	strh	r2, [r3, #8]
 8011830:	e037      	b.n	80118a2 <tcp_write+0x59a>
  } else if (extendlen > 0) {
 8011832:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011834:	2b00      	cmp	r3, #0
 8011836:	d034      	beq.n	80118a2 <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8011838:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801183a:	2b00      	cmp	r3, #0
 801183c:	d003      	beq.n	8011846 <tcp_write+0x53e>
 801183e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011840:	685b      	ldr	r3, [r3, #4]
 8011842:	2b00      	cmp	r3, #0
 8011844:	d106      	bne.n	8011854 <tcp_write+0x54c>
 8011846:	4b1a      	ldr	r3, [pc, #104]	; (80118b0 <tcp_write+0x5a8>)
 8011848:	f240 22e7 	movw	r2, #743	; 0x2e7
 801184c:	491e      	ldr	r1, [pc, #120]	; (80118c8 <tcp_write+0x5c0>)
 801184e:	481a      	ldr	r0, [pc, #104]	; (80118b8 <tcp_write+0x5b0>)
 8011850:	f006 fc9e 	bl	8018190 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011854:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011856:	685b      	ldr	r3, [r3, #4]
 8011858:	62bb      	str	r3, [r7, #40]	; 0x28
 801185a:	e009      	b.n	8011870 <tcp_write+0x568>
      p->tot_len += extendlen;
 801185c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801185e:	891a      	ldrh	r2, [r3, #8]
 8011860:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011862:	4413      	add	r3, r2
 8011864:	b29a      	uxth	r2, r3
 8011866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011868:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801186a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	62bb      	str	r3, [r7, #40]	; 0x28
 8011870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	2b00      	cmp	r3, #0
 8011876:	d1f1      	bne.n	801185c <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 8011878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801187a:	891a      	ldrh	r2, [r3, #8]
 801187c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801187e:	4413      	add	r3, r2
 8011880:	b29a      	uxth	r2, r3
 8011882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011884:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8011886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011888:	895a      	ldrh	r2, [r3, #10]
 801188a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801188c:	4413      	add	r3, r2
 801188e:	b29a      	uxth	r2, r3
 8011890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011892:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8011894:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011896:	891a      	ldrh	r2, [r3, #8]
 8011898:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801189a:	4413      	add	r3, r2
 801189c:	b29a      	uxth	r2, r3
 801189e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118a0:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80118a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d111      	bne.n	80118cc <tcp_write+0x5c4>
    pcb->unsent = queue;
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80118ac:	66da      	str	r2, [r3, #108]	; 0x6c
 80118ae:	e010      	b.n	80118d2 <tcp_write+0x5ca>
 80118b0:	0801b998 	.word	0x0801b998
 80118b4:	0801bc38 	.word	0x0801bc38
 80118b8:	0801b9ec 	.word	0x0801b9ec
 80118bc:	0801bc78 	.word	0x0801bc78
 80118c0:	0801bc88 	.word	0x0801bc88
 80118c4:	0801bc9c 	.word	0x0801bc9c
 80118c8:	0801bcd4 	.word	0x0801bcd4
  } else {
    last_unsent->next = queue;
 80118cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80118d0:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80118d6:	88fb      	ldrh	r3, [r7, #6]
 80118d8:	441a      	add	r2, r3
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 80118de:	68fb      	ldr	r3, [r7, #12]
 80118e0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80118e4:	88fb      	ldrh	r3, [r7, #6]
 80118e6:	1ad3      	subs	r3, r2, r3
 80118e8:	b29a      	uxth	r2, r3
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80118f6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011900:	2b00      	cmp	r3, #0
 8011902:	d00e      	beq.n	8011922 <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011908:	2b00      	cmp	r3, #0
 801190a:	d10a      	bne.n	8011922 <tcp_write+0x61a>
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011910:	2b00      	cmp	r3, #0
 8011912:	d106      	bne.n	8011922 <tcp_write+0x61a>
 8011914:	4b2c      	ldr	r3, [pc, #176]	; (80119c8 <tcp_write+0x6c0>)
 8011916:	f240 3213 	movw	r2, #787	; 0x313
 801191a:	492c      	ldr	r1, [pc, #176]	; (80119cc <tcp_write+0x6c4>)
 801191c:	482c      	ldr	r0, [pc, #176]	; (80119d0 <tcp_write+0x6c8>)
 801191e:	f006 fc37 	bl	8018190 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8011922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011924:	2b00      	cmp	r3, #0
 8011926:	d016      	beq.n	8011956 <tcp_write+0x64e>
 8011928:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801192a:	68db      	ldr	r3, [r3, #12]
 801192c:	2b00      	cmp	r3, #0
 801192e:	d012      	beq.n	8011956 <tcp_write+0x64e>
 8011930:	797b      	ldrb	r3, [r7, #5]
 8011932:	f003 0302 	and.w	r3, r3, #2
 8011936:	2b00      	cmp	r3, #0
 8011938:	d10d      	bne.n	8011956 <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801193a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801193c:	68db      	ldr	r3, [r3, #12]
 801193e:	899b      	ldrh	r3, [r3, #12]
 8011940:	b29c      	uxth	r4, r3
 8011942:	2008      	movs	r0, #8
 8011944:	f7f9 fb88 	bl	800b058 <lwip_htons>
 8011948:	4603      	mov	r3, r0
 801194a:	461a      	mov	r2, r3
 801194c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801194e:	68db      	ldr	r3, [r3, #12]
 8011950:	4322      	orrs	r2, r4
 8011952:	b292      	uxth	r2, r2
 8011954:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8011956:	2300      	movs	r3, #0
 8011958:	e031      	b.n	80119be <tcp_write+0x6b6>
          goto memerr;
 801195a:	bf00      	nop
 801195c:	e006      	b.n	801196c <tcp_write+0x664>
            goto memerr;
 801195e:	bf00      	nop
 8011960:	e004      	b.n	801196c <tcp_write+0x664>
        goto memerr;
 8011962:	bf00      	nop
 8011964:	e002      	b.n	801196c <tcp_write+0x664>
        goto memerr;
 8011966:	bf00      	nop
 8011968:	e000      	b.n	801196c <tcp_write+0x664>
      goto memerr;
 801196a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	8b5b      	ldrh	r3, [r3, #26]
 8011970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011974:	b29a      	uxth	r2, r3
 8011976:	68fb      	ldr	r3, [r7, #12]
 8011978:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801197a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801197c:	2b00      	cmp	r3, #0
 801197e:	d002      	beq.n	8011986 <tcp_write+0x67e>
    pbuf_free(concat_p);
 8011980:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011982:	f7fa fed5 	bl	800c730 <pbuf_free>
  }
  if (queue != NULL) {
 8011986:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011988:	2b00      	cmp	r3, #0
 801198a:	d002      	beq.n	8011992 <tcp_write+0x68a>
    tcp_segs_free(queue);
 801198c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801198e:	f7fc fb53 	bl	800e038 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8011992:	68fb      	ldr	r3, [r7, #12]
 8011994:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011998:	2b00      	cmp	r3, #0
 801199a:	d00e      	beq.n	80119ba <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d10a      	bne.n	80119ba <tcp_write+0x6b2>
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d106      	bne.n	80119ba <tcp_write+0x6b2>
 80119ac:	4b06      	ldr	r3, [pc, #24]	; (80119c8 <tcp_write+0x6c0>)
 80119ae:	f44f 724a 	mov.w	r2, #808	; 0x328
 80119b2:	4906      	ldr	r1, [pc, #24]	; (80119cc <tcp_write+0x6c4>)
 80119b4:	4806      	ldr	r0, [pc, #24]	; (80119d0 <tcp_write+0x6c8>)
 80119b6:	f006 fbeb 	bl	8018190 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80119ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80119be:	4618      	mov	r0, r3
 80119c0:	375c      	adds	r7, #92	; 0x5c
 80119c2:	46bd      	mov	sp, r7
 80119c4:	bd90      	pop	{r4, r7, pc}
 80119c6:	bf00      	nop
 80119c8:	0801b998 	.word	0x0801b998
 80119cc:	0801bd0c 	.word	0x0801bd0c
 80119d0:	0801b9ec 	.word	0x0801b9ec

080119d4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80119d4:	b590      	push	{r4, r7, lr}
 80119d6:	b08b      	sub	sp, #44	; 0x2c
 80119d8:	af02      	add	r7, sp, #8
 80119da:	6078      	str	r0, [r7, #4]
 80119dc:	460b      	mov	r3, r1
 80119de:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80119e0:	2300      	movs	r3, #0
 80119e2:	61fb      	str	r3, [r7, #28]
 80119e4:	2300      	movs	r3, #0
 80119e6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80119e8:	2300      	movs	r3, #0
 80119ea:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d106      	bne.n	8011a00 <tcp_split_unsent_seg+0x2c>
 80119f2:	4b95      	ldr	r3, [pc, #596]	; (8011c48 <tcp_split_unsent_seg+0x274>)
 80119f4:	f240 324b 	movw	r2, #843	; 0x34b
 80119f8:	4994      	ldr	r1, [pc, #592]	; (8011c4c <tcp_split_unsent_seg+0x278>)
 80119fa:	4895      	ldr	r0, [pc, #596]	; (8011c50 <tcp_split_unsent_seg+0x27c>)
 80119fc:	f006 fbc8 	bl	8018190 <iprintf>

  useg = pcb->unsent;
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a04:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8011a06:	697b      	ldr	r3, [r7, #20]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d102      	bne.n	8011a12 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8011a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8011a10:	e116      	b.n	8011c40 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8011a12:	887b      	ldrh	r3, [r7, #2]
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d109      	bne.n	8011a2c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8011a18:	4b8b      	ldr	r3, [pc, #556]	; (8011c48 <tcp_split_unsent_seg+0x274>)
 8011a1a:	f240 3253 	movw	r2, #851	; 0x353
 8011a1e:	498d      	ldr	r1, [pc, #564]	; (8011c54 <tcp_split_unsent_seg+0x280>)
 8011a20:	488b      	ldr	r0, [pc, #556]	; (8011c50 <tcp_split_unsent_seg+0x27c>)
 8011a22:	f006 fbb5 	bl	8018190 <iprintf>
    return ERR_VAL;
 8011a26:	f06f 0305 	mvn.w	r3, #5
 8011a2a:	e109      	b.n	8011c40 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8011a2c:	697b      	ldr	r3, [r7, #20]
 8011a2e:	891b      	ldrh	r3, [r3, #8]
 8011a30:	887a      	ldrh	r2, [r7, #2]
 8011a32:	429a      	cmp	r2, r3
 8011a34:	d301      	bcc.n	8011a3a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8011a36:	2300      	movs	r3, #0
 8011a38:	e102      	b.n	8011c40 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a3e:	887a      	ldrh	r2, [r7, #2]
 8011a40:	429a      	cmp	r2, r3
 8011a42:	d906      	bls.n	8011a52 <tcp_split_unsent_seg+0x7e>
 8011a44:	4b80      	ldr	r3, [pc, #512]	; (8011c48 <tcp_split_unsent_seg+0x274>)
 8011a46:	f240 325b 	movw	r2, #859	; 0x35b
 8011a4a:	4983      	ldr	r1, [pc, #524]	; (8011c58 <tcp_split_unsent_seg+0x284>)
 8011a4c:	4880      	ldr	r0, [pc, #512]	; (8011c50 <tcp_split_unsent_seg+0x27c>)
 8011a4e:	f006 fb9f 	bl	8018190 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8011a52:	697b      	ldr	r3, [r7, #20]
 8011a54:	891b      	ldrh	r3, [r3, #8]
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d106      	bne.n	8011a68 <tcp_split_unsent_seg+0x94>
 8011a5a:	4b7b      	ldr	r3, [pc, #492]	; (8011c48 <tcp_split_unsent_seg+0x274>)
 8011a5c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8011a60:	497e      	ldr	r1, [pc, #504]	; (8011c5c <tcp_split_unsent_seg+0x288>)
 8011a62:	487b      	ldr	r0, [pc, #492]	; (8011c50 <tcp_split_unsent_seg+0x27c>)
 8011a64:	f006 fb94 	bl	8018190 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8011a68:	697b      	ldr	r3, [r7, #20]
 8011a6a:	7a9b      	ldrb	r3, [r3, #10]
 8011a6c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011a6e:	7bfb      	ldrb	r3, [r7, #15]
 8011a70:	009b      	lsls	r3, r3, #2
 8011a72:	b2db      	uxtb	r3, r3
 8011a74:	f003 0304 	and.w	r3, r3, #4
 8011a78:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8011a7a:	697b      	ldr	r3, [r7, #20]
 8011a7c:	891a      	ldrh	r2, [r3, #8]
 8011a7e:	887b      	ldrh	r3, [r7, #2]
 8011a80:	1ad3      	subs	r3, r2, r3
 8011a82:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8011a84:	7bbb      	ldrb	r3, [r7, #14]
 8011a86:	b29a      	uxth	r2, r3
 8011a88:	89bb      	ldrh	r3, [r7, #12]
 8011a8a:	4413      	add	r3, r2
 8011a8c:	b29b      	uxth	r3, r3
 8011a8e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011a92:	4619      	mov	r1, r3
 8011a94:	2036      	movs	r0, #54	; 0x36
 8011a96:	f7fa fb6b 	bl	800c170 <pbuf_alloc>
 8011a9a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011a9c:	693b      	ldr	r3, [r7, #16]
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	f000 80b7 	beq.w	8011c12 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8011aa4:	697b      	ldr	r3, [r7, #20]
 8011aa6:	685b      	ldr	r3, [r3, #4]
 8011aa8:	891a      	ldrh	r2, [r3, #8]
 8011aaa:	697b      	ldr	r3, [r7, #20]
 8011aac:	891b      	ldrh	r3, [r3, #8]
 8011aae:	1ad3      	subs	r3, r2, r3
 8011ab0:	b29a      	uxth	r2, r3
 8011ab2:	887b      	ldrh	r3, [r7, #2]
 8011ab4:	4413      	add	r3, r2
 8011ab6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8011ab8:	697b      	ldr	r3, [r7, #20]
 8011aba:	6858      	ldr	r0, [r3, #4]
 8011abc:	693b      	ldr	r3, [r7, #16]
 8011abe:	685a      	ldr	r2, [r3, #4]
 8011ac0:	7bbb      	ldrb	r3, [r7, #14]
 8011ac2:	18d1      	adds	r1, r2, r3
 8011ac4:	897b      	ldrh	r3, [r7, #10]
 8011ac6:	89ba      	ldrh	r2, [r7, #12]
 8011ac8:	f7fb f838 	bl	800cb3c <pbuf_copy_partial>
 8011acc:	4603      	mov	r3, r0
 8011ace:	461a      	mov	r2, r3
 8011ad0:	89bb      	ldrh	r3, [r7, #12]
 8011ad2:	4293      	cmp	r3, r2
 8011ad4:	f040 809f 	bne.w	8011c16 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8011ad8:	697b      	ldr	r3, [r7, #20]
 8011ada:	68db      	ldr	r3, [r3, #12]
 8011adc:	899b      	ldrh	r3, [r3, #12]
 8011ade:	b29b      	uxth	r3, r3
 8011ae0:	4618      	mov	r0, r3
 8011ae2:	f7f9 fab9 	bl	800b058 <lwip_htons>
 8011ae6:	4603      	mov	r3, r0
 8011ae8:	b2db      	uxtb	r3, r3
 8011aea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011aee:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8011af0:	2300      	movs	r3, #0
 8011af2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8011af4:	7efb      	ldrb	r3, [r7, #27]
 8011af6:	f003 0308 	and.w	r3, r3, #8
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d007      	beq.n	8011b0e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8011afe:	7efb      	ldrb	r3, [r7, #27]
 8011b00:	f023 0308 	bic.w	r3, r3, #8
 8011b04:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8011b06:	7ebb      	ldrb	r3, [r7, #26]
 8011b08:	f043 0308 	orr.w	r3, r3, #8
 8011b0c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8011b0e:	7efb      	ldrb	r3, [r7, #27]
 8011b10:	f003 0301 	and.w	r3, r3, #1
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d007      	beq.n	8011b28 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8011b18:	7efb      	ldrb	r3, [r7, #27]
 8011b1a:	f023 0301 	bic.w	r3, r3, #1
 8011b1e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8011b20:	7ebb      	ldrb	r3, [r7, #26]
 8011b22:	f043 0301 	orr.w	r3, r3, #1
 8011b26:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8011b28:	697b      	ldr	r3, [r7, #20]
 8011b2a:	68db      	ldr	r3, [r3, #12]
 8011b2c:	685b      	ldr	r3, [r3, #4]
 8011b2e:	4618      	mov	r0, r3
 8011b30:	f7f9 faa7 	bl	800b082 <lwip_htonl>
 8011b34:	4602      	mov	r2, r0
 8011b36:	887b      	ldrh	r3, [r7, #2]
 8011b38:	18d1      	adds	r1, r2, r3
 8011b3a:	7eba      	ldrb	r2, [r7, #26]
 8011b3c:	7bfb      	ldrb	r3, [r7, #15]
 8011b3e:	9300      	str	r3, [sp, #0]
 8011b40:	460b      	mov	r3, r1
 8011b42:	6939      	ldr	r1, [r7, #16]
 8011b44:	6878      	ldr	r0, [r7, #4]
 8011b46:	f7ff fa4d 	bl	8010fe4 <tcp_create_segment>
 8011b4a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8011b4c:	69fb      	ldr	r3, [r7, #28]
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d063      	beq.n	8011c1a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8011b52:	697b      	ldr	r3, [r7, #20]
 8011b54:	685b      	ldr	r3, [r3, #4]
 8011b56:	4618      	mov	r0, r3
 8011b58:	f7fa fe78 	bl	800c84c <pbuf_clen>
 8011b5c:	4603      	mov	r3, r0
 8011b5e:	461a      	mov	r2, r3
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011b66:	1a9b      	subs	r3, r3, r2
 8011b68:	b29a      	uxth	r2, r3
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8011b70:	697b      	ldr	r3, [r7, #20]
 8011b72:	6858      	ldr	r0, [r3, #4]
 8011b74:	697b      	ldr	r3, [r7, #20]
 8011b76:	685b      	ldr	r3, [r3, #4]
 8011b78:	891a      	ldrh	r2, [r3, #8]
 8011b7a:	89bb      	ldrh	r3, [r7, #12]
 8011b7c:	1ad3      	subs	r3, r2, r3
 8011b7e:	b29b      	uxth	r3, r3
 8011b80:	4619      	mov	r1, r3
 8011b82:	f7fa fc4f 	bl	800c424 <pbuf_realloc>
  useg->len -= remainder;
 8011b86:	697b      	ldr	r3, [r7, #20]
 8011b88:	891a      	ldrh	r2, [r3, #8]
 8011b8a:	89bb      	ldrh	r3, [r7, #12]
 8011b8c:	1ad3      	subs	r3, r2, r3
 8011b8e:	b29a      	uxth	r2, r3
 8011b90:	697b      	ldr	r3, [r7, #20]
 8011b92:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8011b94:	697b      	ldr	r3, [r7, #20]
 8011b96:	68db      	ldr	r3, [r3, #12]
 8011b98:	899b      	ldrh	r3, [r3, #12]
 8011b9a:	b29c      	uxth	r4, r3
 8011b9c:	7efb      	ldrb	r3, [r7, #27]
 8011b9e:	b29b      	uxth	r3, r3
 8011ba0:	4618      	mov	r0, r3
 8011ba2:	f7f9 fa59 	bl	800b058 <lwip_htons>
 8011ba6:	4603      	mov	r3, r0
 8011ba8:	461a      	mov	r2, r3
 8011baa:	697b      	ldr	r3, [r7, #20]
 8011bac:	68db      	ldr	r3, [r3, #12]
 8011bae:	4322      	orrs	r2, r4
 8011bb0:	b292      	uxth	r2, r2
 8011bb2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8011bb4:	697b      	ldr	r3, [r7, #20]
 8011bb6:	685b      	ldr	r3, [r3, #4]
 8011bb8:	4618      	mov	r0, r3
 8011bba:	f7fa fe47 	bl	800c84c <pbuf_clen>
 8011bbe:	4603      	mov	r3, r0
 8011bc0:	461a      	mov	r2, r3
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011bc8:	4413      	add	r3, r2
 8011bca:	b29a      	uxth	r2, r3
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011bd2:	69fb      	ldr	r3, [r7, #28]
 8011bd4:	685b      	ldr	r3, [r3, #4]
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	f7fa fe38 	bl	800c84c <pbuf_clen>
 8011bdc:	4603      	mov	r3, r0
 8011bde:	461a      	mov	r2, r3
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011be6:	4413      	add	r3, r2
 8011be8:	b29a      	uxth	r2, r3
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8011bf0:	697b      	ldr	r3, [r7, #20]
 8011bf2:	681a      	ldr	r2, [r3, #0]
 8011bf4:	69fb      	ldr	r3, [r7, #28]
 8011bf6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8011bf8:	697b      	ldr	r3, [r7, #20]
 8011bfa:	69fa      	ldr	r2, [r7, #28]
 8011bfc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8011bfe:	69fb      	ldr	r3, [r7, #28]
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d103      	bne.n	8011c0e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	2200      	movs	r2, #0
 8011c0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8011c0e:	2300      	movs	r3, #0
 8011c10:	e016      	b.n	8011c40 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8011c12:	bf00      	nop
 8011c14:	e002      	b.n	8011c1c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011c16:	bf00      	nop
 8011c18:	e000      	b.n	8011c1c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011c1a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8011c1c:	69fb      	ldr	r3, [r7, #28]
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d006      	beq.n	8011c30 <tcp_split_unsent_seg+0x25c>
 8011c22:	4b09      	ldr	r3, [pc, #36]	; (8011c48 <tcp_split_unsent_seg+0x274>)
 8011c24:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8011c28:	490d      	ldr	r1, [pc, #52]	; (8011c60 <tcp_split_unsent_seg+0x28c>)
 8011c2a:	4809      	ldr	r0, [pc, #36]	; (8011c50 <tcp_split_unsent_seg+0x27c>)
 8011c2c:	f006 fab0 	bl	8018190 <iprintf>
  if (p != NULL) {
 8011c30:	693b      	ldr	r3, [r7, #16]
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d002      	beq.n	8011c3c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8011c36:	6938      	ldr	r0, [r7, #16]
 8011c38:	f7fa fd7a 	bl	800c730 <pbuf_free>
  }

  return ERR_MEM;
 8011c3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011c40:	4618      	mov	r0, r3
 8011c42:	3724      	adds	r7, #36	; 0x24
 8011c44:	46bd      	mov	sp, r7
 8011c46:	bd90      	pop	{r4, r7, pc}
 8011c48:	0801b998 	.word	0x0801b998
 8011c4c:	0801bd2c 	.word	0x0801bd2c
 8011c50:	0801b9ec 	.word	0x0801b9ec
 8011c54:	0801bd50 	.word	0x0801bd50
 8011c58:	0801bd74 	.word	0x0801bd74
 8011c5c:	0801bd84 	.word	0x0801bd84
 8011c60:	0801bd94 	.word	0x0801bd94

08011c64 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8011c64:	b590      	push	{r4, r7, lr}
 8011c66:	b085      	sub	sp, #20
 8011c68:	af00      	add	r7, sp, #0
 8011c6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d106      	bne.n	8011c80 <tcp_send_fin+0x1c>
 8011c72:	4b21      	ldr	r3, [pc, #132]	; (8011cf8 <tcp_send_fin+0x94>)
 8011c74:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8011c78:	4920      	ldr	r1, [pc, #128]	; (8011cfc <tcp_send_fin+0x98>)
 8011c7a:	4821      	ldr	r0, [pc, #132]	; (8011d00 <tcp_send_fin+0x9c>)
 8011c7c:	f006 fa88 	bl	8018190 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d02e      	beq.n	8011ce6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c8c:	60fb      	str	r3, [r7, #12]
 8011c8e:	e002      	b.n	8011c96 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8011c90:	68fb      	ldr	r3, [r7, #12]
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d1f8      	bne.n	8011c90 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	68db      	ldr	r3, [r3, #12]
 8011ca2:	899b      	ldrh	r3, [r3, #12]
 8011ca4:	b29b      	uxth	r3, r3
 8011ca6:	4618      	mov	r0, r3
 8011ca8:	f7f9 f9d6 	bl	800b058 <lwip_htons>
 8011cac:	4603      	mov	r3, r0
 8011cae:	b2db      	uxtb	r3, r3
 8011cb0:	f003 0307 	and.w	r3, r3, #7
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d116      	bne.n	8011ce6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	68db      	ldr	r3, [r3, #12]
 8011cbc:	899b      	ldrh	r3, [r3, #12]
 8011cbe:	b29c      	uxth	r4, r3
 8011cc0:	2001      	movs	r0, #1
 8011cc2:	f7f9 f9c9 	bl	800b058 <lwip_htons>
 8011cc6:	4603      	mov	r3, r0
 8011cc8:	461a      	mov	r2, r3
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	68db      	ldr	r3, [r3, #12]
 8011cce:	4322      	orrs	r2, r4
 8011cd0:	b292      	uxth	r2, r2
 8011cd2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	8b5b      	ldrh	r3, [r3, #26]
 8011cd8:	f043 0320 	orr.w	r3, r3, #32
 8011cdc:	b29a      	uxth	r2, r3
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8011ce2:	2300      	movs	r3, #0
 8011ce4:	e004      	b.n	8011cf0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8011ce6:	2101      	movs	r1, #1
 8011ce8:	6878      	ldr	r0, [r7, #4]
 8011cea:	f000 f80b 	bl	8011d04 <tcp_enqueue_flags>
 8011cee:	4603      	mov	r3, r0
}
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	3714      	adds	r7, #20
 8011cf4:	46bd      	mov	sp, r7
 8011cf6:	bd90      	pop	{r4, r7, pc}
 8011cf8:	0801b998 	.word	0x0801b998
 8011cfc:	0801bda0 	.word	0x0801bda0
 8011d00:	0801b9ec 	.word	0x0801b9ec

08011d04 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8011d04:	b580      	push	{r7, lr}
 8011d06:	b08a      	sub	sp, #40	; 0x28
 8011d08:	af02      	add	r7, sp, #8
 8011d0a:	6078      	str	r0, [r7, #4]
 8011d0c:	460b      	mov	r3, r1
 8011d0e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011d10:	2300      	movs	r3, #0
 8011d12:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8011d14:	2300      	movs	r3, #0
 8011d16:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011d18:	78fb      	ldrb	r3, [r7, #3]
 8011d1a:	f003 0303 	and.w	r3, r3, #3
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d106      	bne.n	8011d30 <tcp_enqueue_flags+0x2c>
 8011d22:	4b67      	ldr	r3, [pc, #412]	; (8011ec0 <tcp_enqueue_flags+0x1bc>)
 8011d24:	f240 4212 	movw	r2, #1042	; 0x412
 8011d28:	4966      	ldr	r1, [pc, #408]	; (8011ec4 <tcp_enqueue_flags+0x1c0>)
 8011d2a:	4867      	ldr	r0, [pc, #412]	; (8011ec8 <tcp_enqueue_flags+0x1c4>)
 8011d2c:	f006 fa30 	bl	8018190 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d106      	bne.n	8011d44 <tcp_enqueue_flags+0x40>
 8011d36:	4b62      	ldr	r3, [pc, #392]	; (8011ec0 <tcp_enqueue_flags+0x1bc>)
 8011d38:	f240 4213 	movw	r2, #1043	; 0x413
 8011d3c:	4963      	ldr	r1, [pc, #396]	; (8011ecc <tcp_enqueue_flags+0x1c8>)
 8011d3e:	4862      	ldr	r0, [pc, #392]	; (8011ec8 <tcp_enqueue_flags+0x1c4>)
 8011d40:	f006 fa26 	bl	8018190 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8011d44:	78fb      	ldrb	r3, [r7, #3]
 8011d46:	f003 0302 	and.w	r3, r3, #2
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d001      	beq.n	8011d52 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8011d4e:	2301      	movs	r3, #1
 8011d50:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011d52:	7ffb      	ldrb	r3, [r7, #31]
 8011d54:	009b      	lsls	r3, r3, #2
 8011d56:	b2db      	uxtb	r3, r3
 8011d58:	f003 0304 	and.w	r3, r3, #4
 8011d5c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011d5e:	7dfb      	ldrb	r3, [r7, #23]
 8011d60:	b29b      	uxth	r3, r3
 8011d62:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011d66:	4619      	mov	r1, r3
 8011d68:	2036      	movs	r0, #54	; 0x36
 8011d6a:	f7fa fa01 	bl	800c170 <pbuf_alloc>
 8011d6e:	6138      	str	r0, [r7, #16]
 8011d70:	693b      	ldr	r3, [r7, #16]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d109      	bne.n	8011d8a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	8b5b      	ldrh	r3, [r3, #26]
 8011d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011d7e:	b29a      	uxth	r2, r3
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011d84:	f04f 33ff 	mov.w	r3, #4294967295
 8011d88:	e095      	b.n	8011eb6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8011d8a:	693b      	ldr	r3, [r7, #16]
 8011d8c:	895a      	ldrh	r2, [r3, #10]
 8011d8e:	7dfb      	ldrb	r3, [r7, #23]
 8011d90:	b29b      	uxth	r3, r3
 8011d92:	429a      	cmp	r2, r3
 8011d94:	d206      	bcs.n	8011da4 <tcp_enqueue_flags+0xa0>
 8011d96:	4b4a      	ldr	r3, [pc, #296]	; (8011ec0 <tcp_enqueue_flags+0x1bc>)
 8011d98:	f240 423a 	movw	r2, #1082	; 0x43a
 8011d9c:	494c      	ldr	r1, [pc, #304]	; (8011ed0 <tcp_enqueue_flags+0x1cc>)
 8011d9e:	484a      	ldr	r0, [pc, #296]	; (8011ec8 <tcp_enqueue_flags+0x1c4>)
 8011da0:	f006 f9f6 	bl	8018190 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8011da8:	78fa      	ldrb	r2, [r7, #3]
 8011daa:	7ffb      	ldrb	r3, [r7, #31]
 8011dac:	9300      	str	r3, [sp, #0]
 8011dae:	460b      	mov	r3, r1
 8011db0:	6939      	ldr	r1, [r7, #16]
 8011db2:	6878      	ldr	r0, [r7, #4]
 8011db4:	f7ff f916 	bl	8010fe4 <tcp_create_segment>
 8011db8:	60f8      	str	r0, [r7, #12]
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d109      	bne.n	8011dd4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	8b5b      	ldrh	r3, [r3, #26]
 8011dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011dc8:	b29a      	uxth	r2, r3
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011dce:	f04f 33ff 	mov.w	r3, #4294967295
 8011dd2:	e070      	b.n	8011eb6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	68db      	ldr	r3, [r3, #12]
 8011dd8:	f003 0303 	and.w	r3, r3, #3
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d006      	beq.n	8011dee <tcp_enqueue_flags+0xea>
 8011de0:	4b37      	ldr	r3, [pc, #220]	; (8011ec0 <tcp_enqueue_flags+0x1bc>)
 8011de2:	f240 4242 	movw	r2, #1090	; 0x442
 8011de6:	493b      	ldr	r1, [pc, #236]	; (8011ed4 <tcp_enqueue_flags+0x1d0>)
 8011de8:	4837      	ldr	r0, [pc, #220]	; (8011ec8 <tcp_enqueue_flags+0x1c4>)
 8011dea:	f006 f9d1 	bl	8018190 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	891b      	ldrh	r3, [r3, #8]
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d006      	beq.n	8011e04 <tcp_enqueue_flags+0x100>
 8011df6:	4b32      	ldr	r3, [pc, #200]	; (8011ec0 <tcp_enqueue_flags+0x1bc>)
 8011df8:	f240 4243 	movw	r2, #1091	; 0x443
 8011dfc:	4936      	ldr	r1, [pc, #216]	; (8011ed8 <tcp_enqueue_flags+0x1d4>)
 8011dfe:	4832      	ldr	r0, [pc, #200]	; (8011ec8 <tcp_enqueue_flags+0x1c4>)
 8011e00:	f006 f9c6 	bl	8018190 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d103      	bne.n	8011e14 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	68fa      	ldr	r2, [r7, #12]
 8011e10:	66da      	str	r2, [r3, #108]	; 0x6c
 8011e12:	e00d      	b.n	8011e30 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e18:	61bb      	str	r3, [r7, #24]
 8011e1a:	e002      	b.n	8011e22 <tcp_enqueue_flags+0x11e>
 8011e1c:	69bb      	ldr	r3, [r7, #24]
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	61bb      	str	r3, [r7, #24]
 8011e22:	69bb      	ldr	r3, [r7, #24]
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d1f8      	bne.n	8011e1c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8011e2a:	69bb      	ldr	r3, [r7, #24]
 8011e2c:	68fa      	ldr	r2, [r7, #12]
 8011e2e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	2200      	movs	r2, #0
 8011e34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8011e38:	78fb      	ldrb	r3, [r7, #3]
 8011e3a:	f003 0302 	and.w	r3, r3, #2
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d104      	bne.n	8011e4c <tcp_enqueue_flags+0x148>
 8011e42:	78fb      	ldrb	r3, [r7, #3]
 8011e44:	f003 0301 	and.w	r3, r3, #1
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d004      	beq.n	8011e56 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011e50:	1c5a      	adds	r2, r3, #1
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8011e56:	78fb      	ldrb	r3, [r7, #3]
 8011e58:	f003 0301 	and.w	r3, r3, #1
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d006      	beq.n	8011e6e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	8b5b      	ldrh	r3, [r3, #26]
 8011e64:	f043 0320 	orr.w	r3, r3, #32
 8011e68:	b29a      	uxth	r2, r3
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	685b      	ldr	r3, [r3, #4]
 8011e72:	4618      	mov	r0, r3
 8011e74:	f7fa fcea 	bl	800c84c <pbuf_clen>
 8011e78:	4603      	mov	r3, r0
 8011e7a:	461a      	mov	r2, r3
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011e82:	4413      	add	r3, r2
 8011e84:	b29a      	uxth	r2, r3
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d00e      	beq.n	8011eb4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d10a      	bne.n	8011eb4 <tcp_enqueue_flags+0x1b0>
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d106      	bne.n	8011eb4 <tcp_enqueue_flags+0x1b0>
 8011ea6:	4b06      	ldr	r3, [pc, #24]	; (8011ec0 <tcp_enqueue_flags+0x1bc>)
 8011ea8:	f240 4266 	movw	r2, #1126	; 0x466
 8011eac:	490b      	ldr	r1, [pc, #44]	; (8011edc <tcp_enqueue_flags+0x1d8>)
 8011eae:	4806      	ldr	r0, [pc, #24]	; (8011ec8 <tcp_enqueue_flags+0x1c4>)
 8011eb0:	f006 f96e 	bl	8018190 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8011eb4:	2300      	movs	r3, #0
}
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	3720      	adds	r7, #32
 8011eba:	46bd      	mov	sp, r7
 8011ebc:	bd80      	pop	{r7, pc}
 8011ebe:	bf00      	nop
 8011ec0:	0801b998 	.word	0x0801b998
 8011ec4:	0801bdbc 	.word	0x0801bdbc
 8011ec8:	0801b9ec 	.word	0x0801b9ec
 8011ecc:	0801be14 	.word	0x0801be14
 8011ed0:	0801be34 	.word	0x0801be34
 8011ed4:	0801be70 	.word	0x0801be70
 8011ed8:	0801be88 	.word	0x0801be88
 8011edc:	0801beb4 	.word	0x0801beb4

08011ee0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011ee0:	b5b0      	push	{r4, r5, r7, lr}
 8011ee2:	b08a      	sub	sp, #40	; 0x28
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d106      	bne.n	8011efc <tcp_output+0x1c>
 8011eee:	4ba0      	ldr	r3, [pc, #640]	; (8012170 <tcp_output+0x290>)
 8011ef0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8011ef4:	499f      	ldr	r1, [pc, #636]	; (8012174 <tcp_output+0x294>)
 8011ef6:	48a0      	ldr	r0, [pc, #640]	; (8012178 <tcp_output+0x298>)
 8011ef8:	f006 f94a 	bl	8018190 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	7d1b      	ldrb	r3, [r3, #20]
 8011f00:	2b01      	cmp	r3, #1
 8011f02:	d106      	bne.n	8011f12 <tcp_output+0x32>
 8011f04:	4b9a      	ldr	r3, [pc, #616]	; (8012170 <tcp_output+0x290>)
 8011f06:	f240 42e4 	movw	r2, #1252	; 0x4e4
 8011f0a:	499c      	ldr	r1, [pc, #624]	; (801217c <tcp_output+0x29c>)
 8011f0c:	489a      	ldr	r0, [pc, #616]	; (8012178 <tcp_output+0x298>)
 8011f0e:	f006 f93f 	bl	8018190 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8011f12:	4b9b      	ldr	r3, [pc, #620]	; (8012180 <tcp_output+0x2a0>)
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	687a      	ldr	r2, [r7, #4]
 8011f18:	429a      	cmp	r2, r3
 8011f1a:	d101      	bne.n	8011f20 <tcp_output+0x40>
    return ERR_OK;
 8011f1c:	2300      	movs	r3, #0
 8011f1e:	e1d2      	b.n	80122c6 <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011f2c:	429a      	cmp	r2, r3
 8011f2e:	d203      	bcs.n	8011f38 <tcp_output+0x58>
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011f36:	e002      	b.n	8011f3e <tcp_output+0x5e>
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011f3e:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f44:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8011f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d10b      	bne.n	8011f64 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	8b5b      	ldrh	r3, [r3, #26]
 8011f50:	f003 0302 	and.w	r3, r3, #2
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	f000 81a9 	beq.w	80122ac <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 8011f5a:	6878      	ldr	r0, [r7, #4]
 8011f5c:	f000 fdd6 	bl	8012b0c <tcp_send_empty_ack>
 8011f60:	4603      	mov	r3, r0
 8011f62:	e1b0      	b.n	80122c6 <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8011f64:	6879      	ldr	r1, [r7, #4]
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	3304      	adds	r3, #4
 8011f6a:	461a      	mov	r2, r3
 8011f6c:	6878      	ldr	r0, [r7, #4]
 8011f6e:	f7ff f81d 	bl	8010fac <tcp_route>
 8011f72:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8011f74:	697b      	ldr	r3, [r7, #20]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d102      	bne.n	8011f80 <tcp_output+0xa0>
    return ERR_RTE;
 8011f7a:	f06f 0303 	mvn.w	r3, #3
 8011f7e:	e1a2      	b.n	80122c6 <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d003      	beq.n	8011f8e <tcp_output+0xae>
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d111      	bne.n	8011fb2 <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8011f8e:	697b      	ldr	r3, [r7, #20]
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d002      	beq.n	8011f9a <tcp_output+0xba>
 8011f94:	697b      	ldr	r3, [r7, #20]
 8011f96:	3304      	adds	r3, #4
 8011f98:	e000      	b.n	8011f9c <tcp_output+0xbc>
 8011f9a:	2300      	movs	r3, #0
 8011f9c:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8011f9e:	693b      	ldr	r3, [r7, #16]
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d102      	bne.n	8011faa <tcp_output+0xca>
      return ERR_RTE;
 8011fa4:	f06f 0303 	mvn.w	r3, #3
 8011fa8:	e18d      	b.n	80122c6 <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011faa:	693b      	ldr	r3, [r7, #16]
 8011fac:	681a      	ldr	r2, [r3, #0]
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8011fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fb4:	68db      	ldr	r3, [r3, #12]
 8011fb6:	685b      	ldr	r3, [r3, #4]
 8011fb8:	4618      	mov	r0, r3
 8011fba:	f7f9 f862 	bl	800b082 <lwip_htonl>
 8011fbe:	4602      	mov	r2, r0
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011fc4:	1ad3      	subs	r3, r2, r3
 8011fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011fc8:	8912      	ldrh	r2, [r2, #8]
 8011fca:	4413      	add	r3, r2
 8011fcc:	69ba      	ldr	r2, [r7, #24]
 8011fce:	429a      	cmp	r2, r3
 8011fd0:	d227      	bcs.n	8012022 <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011fd8:	461a      	mov	r2, r3
 8011fda:	69bb      	ldr	r3, [r7, #24]
 8011fdc:	4293      	cmp	r3, r2
 8011fde:	d114      	bne.n	801200a <tcp_output+0x12a>
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d110      	bne.n	801200a <tcp_output+0x12a>
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d10b      	bne.n	801200a <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	2200      	movs	r2, #0
 8011ff6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	2201      	movs	r2, #1
 8011ffe:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	2200      	movs	r2, #0
 8012006:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	8b5b      	ldrh	r3, [r3, #26]
 801200e:	f003 0302 	and.w	r3, r3, #2
 8012012:	2b00      	cmp	r3, #0
 8012014:	f000 814c 	beq.w	80122b0 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 8012018:	6878      	ldr	r0, [r7, #4]
 801201a:	f000 fd77 	bl	8012b0c <tcp_send_empty_ack>
 801201e:	4603      	mov	r3, r0
 8012020:	e151      	b.n	80122c6 <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	2200      	movs	r2, #0
 8012026:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801202e:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012030:	6a3b      	ldr	r3, [r7, #32]
 8012032:	2b00      	cmp	r3, #0
 8012034:	f000 811b 	beq.w	801226e <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 8012038:	e002      	b.n	8012040 <tcp_output+0x160>
 801203a:	6a3b      	ldr	r3, [r7, #32]
 801203c:	681b      	ldr	r3, [r3, #0]
 801203e:	623b      	str	r3, [r7, #32]
 8012040:	6a3b      	ldr	r3, [r7, #32]
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	2b00      	cmp	r3, #0
 8012046:	d1f8      	bne.n	801203a <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8012048:	e111      	b.n	801226e <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801204c:	68db      	ldr	r3, [r3, #12]
 801204e:	899b      	ldrh	r3, [r3, #12]
 8012050:	b29b      	uxth	r3, r3
 8012052:	4618      	mov	r0, r3
 8012054:	f7f9 f800 	bl	800b058 <lwip_htons>
 8012058:	4603      	mov	r3, r0
 801205a:	b2db      	uxtb	r3, r3
 801205c:	f003 0304 	and.w	r3, r3, #4
 8012060:	2b00      	cmp	r3, #0
 8012062:	d006      	beq.n	8012072 <tcp_output+0x192>
 8012064:	4b42      	ldr	r3, [pc, #264]	; (8012170 <tcp_output+0x290>)
 8012066:	f240 5237 	movw	r2, #1335	; 0x537
 801206a:	4946      	ldr	r1, [pc, #280]	; (8012184 <tcp_output+0x2a4>)
 801206c:	4842      	ldr	r0, [pc, #264]	; (8012178 <tcp_output+0x298>)
 801206e:	f006 f88f 	bl	8018190 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012076:	2b00      	cmp	r3, #0
 8012078:	d01f      	beq.n	80120ba <tcp_output+0x1da>
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	8b5b      	ldrh	r3, [r3, #26]
 801207e:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8012082:	2b00      	cmp	r3, #0
 8012084:	d119      	bne.n	80120ba <tcp_output+0x1da>
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801208a:	2b00      	cmp	r3, #0
 801208c:	d00b      	beq.n	80120a6 <tcp_output+0x1c6>
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	2b00      	cmp	r3, #0
 8012096:	d110      	bne.n	80120ba <tcp_output+0x1da>
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801209c:	891a      	ldrh	r2, [r3, #8]
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80120a2:	429a      	cmp	r2, r3
 80120a4:	d209      	bcs.n	80120ba <tcp_output+0x1da>
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d004      	beq.n	80120ba <tcp_output+0x1da>
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80120b6:	2b08      	cmp	r3, #8
 80120b8:	d901      	bls.n	80120be <tcp_output+0x1de>
 80120ba:	2301      	movs	r3, #1
 80120bc:	e000      	b.n	80120c0 <tcp_output+0x1e0>
 80120be:	2300      	movs	r3, #0
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d106      	bne.n	80120d2 <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	8b5b      	ldrh	r3, [r3, #26]
 80120c8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	f000 80e3 	beq.w	8012298 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	7d1b      	ldrb	r3, [r3, #20]
 80120d6:	2b02      	cmp	r3, #2
 80120d8:	d00d      	beq.n	80120f6 <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80120da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120dc:	68db      	ldr	r3, [r3, #12]
 80120de:	899b      	ldrh	r3, [r3, #12]
 80120e0:	b29c      	uxth	r4, r3
 80120e2:	2010      	movs	r0, #16
 80120e4:	f7f8 ffb8 	bl	800b058 <lwip_htons>
 80120e8:	4603      	mov	r3, r0
 80120ea:	461a      	mov	r2, r3
 80120ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120ee:	68db      	ldr	r3, [r3, #12]
 80120f0:	4322      	orrs	r2, r4
 80120f2:	b292      	uxth	r2, r2
 80120f4:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80120f6:	697a      	ldr	r2, [r7, #20]
 80120f8:	6879      	ldr	r1, [r7, #4]
 80120fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80120fc:	f000 f908 	bl	8012310 <tcp_output_segment>
 8012100:	4603      	mov	r3, r0
 8012102:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012104:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012108:	2b00      	cmp	r3, #0
 801210a:	d009      	beq.n	8012120 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	8b5b      	ldrh	r3, [r3, #26]
 8012110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012114:	b29a      	uxth	r2, r3
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	835a      	strh	r2, [r3, #26]
      return err;
 801211a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801211e:	e0d2      	b.n	80122c6 <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012122:	681a      	ldr	r2, [r3, #0]
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	7d1b      	ldrb	r3, [r3, #20]
 801212c:	2b02      	cmp	r3, #2
 801212e:	d006      	beq.n	801213e <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	8b5b      	ldrh	r3, [r3, #26]
 8012134:	f023 0303 	bic.w	r3, r3, #3
 8012138:	b29a      	uxth	r2, r3
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012140:	68db      	ldr	r3, [r3, #12]
 8012142:	685b      	ldr	r3, [r3, #4]
 8012144:	4618      	mov	r0, r3
 8012146:	f7f8 ff9c 	bl	800b082 <lwip_htonl>
 801214a:	4604      	mov	r4, r0
 801214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801214e:	891b      	ldrh	r3, [r3, #8]
 8012150:	461d      	mov	r5, r3
 8012152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012154:	68db      	ldr	r3, [r3, #12]
 8012156:	899b      	ldrh	r3, [r3, #12]
 8012158:	b29b      	uxth	r3, r3
 801215a:	4618      	mov	r0, r3
 801215c:	f7f8 ff7c 	bl	800b058 <lwip_htons>
 8012160:	4603      	mov	r3, r0
 8012162:	b2db      	uxtb	r3, r3
 8012164:	f003 0303 	and.w	r3, r3, #3
 8012168:	2b00      	cmp	r3, #0
 801216a:	d00d      	beq.n	8012188 <tcp_output+0x2a8>
 801216c:	2301      	movs	r3, #1
 801216e:	e00c      	b.n	801218a <tcp_output+0x2aa>
 8012170:	0801b998 	.word	0x0801b998
 8012174:	0801bedc 	.word	0x0801bedc
 8012178:	0801b9ec 	.word	0x0801b9ec
 801217c:	0801bef4 	.word	0x0801bef4
 8012180:	2000faec 	.word	0x2000faec
 8012184:	0801bf1c 	.word	0x0801bf1c
 8012188:	2300      	movs	r3, #0
 801218a:	442b      	add	r3, r5
 801218c:	4423      	add	r3, r4
 801218e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012194:	68bb      	ldr	r3, [r7, #8]
 8012196:	1ad3      	subs	r3, r2, r3
 8012198:	2b00      	cmp	r3, #0
 801219a:	da02      	bge.n	80121a2 <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	68ba      	ldr	r2, [r7, #8]
 80121a0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80121a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121a4:	891b      	ldrh	r3, [r3, #8]
 80121a6:	461c      	mov	r4, r3
 80121a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121aa:	68db      	ldr	r3, [r3, #12]
 80121ac:	899b      	ldrh	r3, [r3, #12]
 80121ae:	b29b      	uxth	r3, r3
 80121b0:	4618      	mov	r0, r3
 80121b2:	f7f8 ff51 	bl	800b058 <lwip_htons>
 80121b6:	4603      	mov	r3, r0
 80121b8:	b2db      	uxtb	r3, r3
 80121ba:	f003 0303 	and.w	r3, r3, #3
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d001      	beq.n	80121c6 <tcp_output+0x2e6>
 80121c2:	2301      	movs	r3, #1
 80121c4:	e000      	b.n	80121c8 <tcp_output+0x2e8>
 80121c6:	2300      	movs	r3, #0
 80121c8:	4423      	add	r3, r4
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d049      	beq.n	8012262 <tcp_output+0x382>
      seg->next = NULL;
 80121ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121d0:	2200      	movs	r2, #0
 80121d2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d105      	bne.n	80121e8 <tcp_output+0x308>
        pcb->unacked = seg;
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80121e0:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80121e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121e4:	623b      	str	r3, [r7, #32]
 80121e6:	e03f      	b.n	8012268 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80121e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121ea:	68db      	ldr	r3, [r3, #12]
 80121ec:	685b      	ldr	r3, [r3, #4]
 80121ee:	4618      	mov	r0, r3
 80121f0:	f7f8 ff47 	bl	800b082 <lwip_htonl>
 80121f4:	4604      	mov	r4, r0
 80121f6:	6a3b      	ldr	r3, [r7, #32]
 80121f8:	68db      	ldr	r3, [r3, #12]
 80121fa:	685b      	ldr	r3, [r3, #4]
 80121fc:	4618      	mov	r0, r3
 80121fe:	f7f8 ff40 	bl	800b082 <lwip_htonl>
 8012202:	4603      	mov	r3, r0
 8012204:	1ae3      	subs	r3, r4, r3
 8012206:	2b00      	cmp	r3, #0
 8012208:	da24      	bge.n	8012254 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	3370      	adds	r3, #112	; 0x70
 801220e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012210:	e002      	b.n	8012218 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012212:	69fb      	ldr	r3, [r7, #28]
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012218:	69fb      	ldr	r3, [r7, #28]
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	2b00      	cmp	r3, #0
 801221e:	d011      	beq.n	8012244 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012220:	69fb      	ldr	r3, [r7, #28]
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	68db      	ldr	r3, [r3, #12]
 8012226:	685b      	ldr	r3, [r3, #4]
 8012228:	4618      	mov	r0, r3
 801222a:	f7f8 ff2a 	bl	800b082 <lwip_htonl>
 801222e:	4604      	mov	r4, r0
 8012230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012232:	68db      	ldr	r3, [r3, #12]
 8012234:	685b      	ldr	r3, [r3, #4]
 8012236:	4618      	mov	r0, r3
 8012238:	f7f8 ff23 	bl	800b082 <lwip_htonl>
 801223c:	4603      	mov	r3, r0
 801223e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012240:	2b00      	cmp	r3, #0
 8012242:	dbe6      	blt.n	8012212 <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 8012244:	69fb      	ldr	r3, [r7, #28]
 8012246:	681a      	ldr	r2, [r3, #0]
 8012248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801224a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801224c:	69fb      	ldr	r3, [r7, #28]
 801224e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012250:	601a      	str	r2, [r3, #0]
 8012252:	e009      	b.n	8012268 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012254:	6a3b      	ldr	r3, [r7, #32]
 8012256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012258:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801225a:	6a3b      	ldr	r3, [r7, #32]
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	623b      	str	r3, [r7, #32]
 8012260:	e002      	b.n	8012268 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012262:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012264:	f7fb fefc 	bl	800e060 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801226c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012270:	2b00      	cmp	r3, #0
 8012272:	d012      	beq.n	801229a <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012276:	68db      	ldr	r3, [r3, #12]
 8012278:	685b      	ldr	r3, [r3, #4]
 801227a:	4618      	mov	r0, r3
 801227c:	f7f8 ff01 	bl	800b082 <lwip_htonl>
 8012280:	4602      	mov	r2, r0
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012286:	1ad3      	subs	r3, r2, r3
 8012288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801228a:	8912      	ldrh	r2, [r2, #8]
 801228c:	4413      	add	r3, r2
  while (seg != NULL &&
 801228e:	69ba      	ldr	r2, [r7, #24]
 8012290:	429a      	cmp	r2, r3
 8012292:	f4bf aeda 	bcs.w	801204a <tcp_output+0x16a>
 8012296:	e000      	b.n	801229a <tcp_output+0x3ba>
      break;
 8012298:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d108      	bne.n	80122b4 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	2200      	movs	r2, #0
 80122a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80122aa:	e004      	b.n	80122b6 <tcp_output+0x3d6>
    goto output_done;
 80122ac:	bf00      	nop
 80122ae:	e002      	b.n	80122b6 <tcp_output+0x3d6>
    goto output_done;
 80122b0:	bf00      	nop
 80122b2:	e000      	b.n	80122b6 <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80122b4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	8b5b      	ldrh	r3, [r3, #26]
 80122ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80122be:	b29a      	uxth	r2, r3
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80122c4:	2300      	movs	r3, #0
}
 80122c6:	4618      	mov	r0, r3
 80122c8:	3728      	adds	r7, #40	; 0x28
 80122ca:	46bd      	mov	sp, r7
 80122cc:	bdb0      	pop	{r4, r5, r7, pc}
 80122ce:	bf00      	nop

080122d0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80122d0:	b580      	push	{r7, lr}
 80122d2:	b082      	sub	sp, #8
 80122d4:	af00      	add	r7, sp, #0
 80122d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d106      	bne.n	80122ec <tcp_output_segment_busy+0x1c>
 80122de:	4b09      	ldr	r3, [pc, #36]	; (8012304 <tcp_output_segment_busy+0x34>)
 80122e0:	f240 529a 	movw	r2, #1434	; 0x59a
 80122e4:	4908      	ldr	r1, [pc, #32]	; (8012308 <tcp_output_segment_busy+0x38>)
 80122e6:	4809      	ldr	r0, [pc, #36]	; (801230c <tcp_output_segment_busy+0x3c>)
 80122e8:	f005 ff52 	bl	8018190 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	685b      	ldr	r3, [r3, #4]
 80122f0:	7b9b      	ldrb	r3, [r3, #14]
 80122f2:	2b01      	cmp	r3, #1
 80122f4:	d001      	beq.n	80122fa <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80122f6:	2301      	movs	r3, #1
 80122f8:	e000      	b.n	80122fc <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80122fa:	2300      	movs	r3, #0
}
 80122fc:	4618      	mov	r0, r3
 80122fe:	3708      	adds	r7, #8
 8012300:	46bd      	mov	sp, r7
 8012302:	bd80      	pop	{r7, pc}
 8012304:	0801b998 	.word	0x0801b998
 8012308:	0801bf34 	.word	0x0801bf34
 801230c:	0801b9ec 	.word	0x0801b9ec

08012310 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012310:	b5b0      	push	{r4, r5, r7, lr}
 8012312:	b08c      	sub	sp, #48	; 0x30
 8012314:	af04      	add	r7, sp, #16
 8012316:	60f8      	str	r0, [r7, #12]
 8012318:	60b9      	str	r1, [r7, #8]
 801231a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	2b00      	cmp	r3, #0
 8012320:	d106      	bne.n	8012330 <tcp_output_segment+0x20>
 8012322:	4b64      	ldr	r3, [pc, #400]	; (80124b4 <tcp_output_segment+0x1a4>)
 8012324:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8012328:	4963      	ldr	r1, [pc, #396]	; (80124b8 <tcp_output_segment+0x1a8>)
 801232a:	4864      	ldr	r0, [pc, #400]	; (80124bc <tcp_output_segment+0x1ac>)
 801232c:	f005 ff30 	bl	8018190 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012330:	68bb      	ldr	r3, [r7, #8]
 8012332:	2b00      	cmp	r3, #0
 8012334:	d106      	bne.n	8012344 <tcp_output_segment+0x34>
 8012336:	4b5f      	ldr	r3, [pc, #380]	; (80124b4 <tcp_output_segment+0x1a4>)
 8012338:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801233c:	4960      	ldr	r1, [pc, #384]	; (80124c0 <tcp_output_segment+0x1b0>)
 801233e:	485f      	ldr	r0, [pc, #380]	; (80124bc <tcp_output_segment+0x1ac>)
 8012340:	f005 ff26 	bl	8018190 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	2b00      	cmp	r3, #0
 8012348:	d106      	bne.n	8012358 <tcp_output_segment+0x48>
 801234a:	4b5a      	ldr	r3, [pc, #360]	; (80124b4 <tcp_output_segment+0x1a4>)
 801234c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8012350:	495c      	ldr	r1, [pc, #368]	; (80124c4 <tcp_output_segment+0x1b4>)
 8012352:	485a      	ldr	r0, [pc, #360]	; (80124bc <tcp_output_segment+0x1ac>)
 8012354:	f005 ff1c 	bl	8018190 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012358:	68f8      	ldr	r0, [r7, #12]
 801235a:	f7ff ffb9 	bl	80122d0 <tcp_output_segment_busy>
 801235e:	4603      	mov	r3, r0
 8012360:	2b00      	cmp	r3, #0
 8012362:	d001      	beq.n	8012368 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012364:	2300      	movs	r3, #0
 8012366:	e0a0      	b.n	80124aa <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012368:	68bb      	ldr	r3, [r7, #8]
 801236a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	68dc      	ldr	r4, [r3, #12]
 8012370:	4610      	mov	r0, r2
 8012372:	f7f8 fe86 	bl	800b082 <lwip_htonl>
 8012376:	4603      	mov	r3, r0
 8012378:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801237a:	68bb      	ldr	r3, [r7, #8]
 801237c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	68dc      	ldr	r4, [r3, #12]
 8012382:	4610      	mov	r0, r2
 8012384:	f7f8 fe68 	bl	800b058 <lwip_htons>
 8012388:	4603      	mov	r3, r0
 801238a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801238c:	68bb      	ldr	r3, [r7, #8]
 801238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012390:	68ba      	ldr	r2, [r7, #8]
 8012392:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012394:	441a      	add	r2, r3
 8012396:	68bb      	ldr	r3, [r7, #8]
 8012398:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801239a:	68fb      	ldr	r3, [r7, #12]
 801239c:	68db      	ldr	r3, [r3, #12]
 801239e:	3314      	adds	r3, #20
 80123a0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	7a9b      	ldrb	r3, [r3, #10]
 80123a6:	f003 0301 	and.w	r3, r3, #1
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d015      	beq.n	80123da <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80123ae:	68bb      	ldr	r3, [r7, #8]
 80123b0:	3304      	adds	r3, #4
 80123b2:	461a      	mov	r2, r3
 80123b4:	6879      	ldr	r1, [r7, #4]
 80123b6:	f44f 7006 	mov.w	r0, #536	; 0x218
 80123ba:	f7fc fa33 	bl	800e824 <tcp_eff_send_mss_netif>
 80123be:	4603      	mov	r3, r0
 80123c0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80123c2:	8b7b      	ldrh	r3, [r7, #26]
 80123c4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80123c8:	4618      	mov	r0, r3
 80123ca:	f7f8 fe5a 	bl	800b082 <lwip_htonl>
 80123ce:	4602      	mov	r2, r0
 80123d0:	69fb      	ldr	r3, [r7, #28]
 80123d2:	601a      	str	r2, [r3, #0]
    opts += 1;
 80123d4:	69fb      	ldr	r3, [r7, #28]
 80123d6:	3304      	adds	r3, #4
 80123d8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80123da:	68bb      	ldr	r3, [r7, #8]
 80123dc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	da02      	bge.n	80123ea <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80123e4:	68bb      	ldr	r3, [r7, #8]
 80123e6:	2200      	movs	r2, #0
 80123e8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80123ea:	68bb      	ldr	r3, [r7, #8]
 80123ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d10c      	bne.n	801240c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80123f2:	4b35      	ldr	r3, [pc, #212]	; (80124c8 <tcp_output_segment+0x1b8>)
 80123f4:	681a      	ldr	r2, [r3, #0]
 80123f6:	68bb      	ldr	r3, [r7, #8]
 80123f8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	68db      	ldr	r3, [r3, #12]
 80123fe:	685b      	ldr	r3, [r3, #4]
 8012400:	4618      	mov	r0, r3
 8012402:	f7f8 fe3e 	bl	800b082 <lwip_htonl>
 8012406:	4602      	mov	r2, r0
 8012408:	68bb      	ldr	r3, [r7, #8]
 801240a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801240c:	68fb      	ldr	r3, [r7, #12]
 801240e:	68db      	ldr	r3, [r3, #12]
 8012410:	461a      	mov	r2, r3
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	685b      	ldr	r3, [r3, #4]
 8012416:	685b      	ldr	r3, [r3, #4]
 8012418:	1ad3      	subs	r3, r2, r3
 801241a:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	685b      	ldr	r3, [r3, #4]
 8012420:	8959      	ldrh	r1, [r3, #10]
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	685b      	ldr	r3, [r3, #4]
 8012426:	8b3a      	ldrh	r2, [r7, #24]
 8012428:	1a8a      	subs	r2, r1, r2
 801242a:	b292      	uxth	r2, r2
 801242c:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	685b      	ldr	r3, [r3, #4]
 8012432:	8919      	ldrh	r1, [r3, #8]
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	685b      	ldr	r3, [r3, #4]
 8012438:	8b3a      	ldrh	r2, [r7, #24]
 801243a:	1a8a      	subs	r2, r1, r2
 801243c:	b292      	uxth	r2, r2
 801243e:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012440:	68fb      	ldr	r3, [r7, #12]
 8012442:	685b      	ldr	r3, [r3, #4]
 8012444:	68fa      	ldr	r2, [r7, #12]
 8012446:	68d2      	ldr	r2, [r2, #12]
 8012448:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	68db      	ldr	r3, [r3, #12]
 801244e:	2200      	movs	r2, #0
 8012450:	741a      	strb	r2, [r3, #16]
 8012452:	2200      	movs	r2, #0
 8012454:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012456:	68fb      	ldr	r3, [r7, #12]
 8012458:	68db      	ldr	r3, [r3, #12]
 801245a:	f103 0214 	add.w	r2, r3, #20
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	7a9b      	ldrb	r3, [r3, #10]
 8012462:	009b      	lsls	r3, r3, #2
 8012464:	f003 0304 	and.w	r3, r3, #4
 8012468:	4413      	add	r3, r2
 801246a:	69fa      	ldr	r2, [r7, #28]
 801246c:	429a      	cmp	r2, r3
 801246e:	d006      	beq.n	801247e <tcp_output_segment+0x16e>
 8012470:	4b10      	ldr	r3, [pc, #64]	; (80124b4 <tcp_output_segment+0x1a4>)
 8012472:	f240 621c 	movw	r2, #1564	; 0x61c
 8012476:	4915      	ldr	r1, [pc, #84]	; (80124cc <tcp_output_segment+0x1bc>)
 8012478:	4810      	ldr	r0, [pc, #64]	; (80124bc <tcp_output_segment+0x1ac>)
 801247a:	f005 fe89 	bl	8018190 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	6858      	ldr	r0, [r3, #4]
 8012482:	68b9      	ldr	r1, [r7, #8]
 8012484:	68bb      	ldr	r3, [r7, #8]
 8012486:	1d1c      	adds	r4, r3, #4
 8012488:	68bb      	ldr	r3, [r7, #8]
 801248a:	7add      	ldrb	r5, [r3, #11]
 801248c:	68bb      	ldr	r3, [r7, #8]
 801248e:	7a9b      	ldrb	r3, [r3, #10]
 8012490:	687a      	ldr	r2, [r7, #4]
 8012492:	9202      	str	r2, [sp, #8]
 8012494:	2206      	movs	r2, #6
 8012496:	9201      	str	r2, [sp, #4]
 8012498:	9300      	str	r3, [sp, #0]
 801249a:	462b      	mov	r3, r5
 801249c:	4622      	mov	r2, r4
 801249e:	f004 fbf1 	bl	8016c84 <ip4_output_if>
 80124a2:	4603      	mov	r3, r0
 80124a4:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80124a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80124aa:	4618      	mov	r0, r3
 80124ac:	3720      	adds	r7, #32
 80124ae:	46bd      	mov	sp, r7
 80124b0:	bdb0      	pop	{r4, r5, r7, pc}
 80124b2:	bf00      	nop
 80124b4:	0801b998 	.word	0x0801b998
 80124b8:	0801bf5c 	.word	0x0801bf5c
 80124bc:	0801b9ec 	.word	0x0801b9ec
 80124c0:	0801bf7c 	.word	0x0801bf7c
 80124c4:	0801bf9c 	.word	0x0801bf9c
 80124c8:	2000fadc 	.word	0x2000fadc
 80124cc:	0801bfc0 	.word	0x0801bfc0

080124d0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80124d0:	b5b0      	push	{r4, r5, r7, lr}
 80124d2:	b084      	sub	sp, #16
 80124d4:	af00      	add	r7, sp, #0
 80124d6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d106      	bne.n	80124ec <tcp_rexmit_rto_prepare+0x1c>
 80124de:	4b31      	ldr	r3, [pc, #196]	; (80125a4 <tcp_rexmit_rto_prepare+0xd4>)
 80124e0:	f240 6263 	movw	r2, #1635	; 0x663
 80124e4:	4930      	ldr	r1, [pc, #192]	; (80125a8 <tcp_rexmit_rto_prepare+0xd8>)
 80124e6:	4831      	ldr	r0, [pc, #196]	; (80125ac <tcp_rexmit_rto_prepare+0xdc>)
 80124e8:	f005 fe52 	bl	8018190 <iprintf>

  if (pcb->unacked == NULL) {
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d102      	bne.n	80124fa <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80124f4:	f06f 0305 	mvn.w	r3, #5
 80124f8:	e050      	b.n	801259c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80124fe:	60fb      	str	r3, [r7, #12]
 8012500:	e00b      	b.n	801251a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8012502:	68f8      	ldr	r0, [r7, #12]
 8012504:	f7ff fee4 	bl	80122d0 <tcp_output_segment_busy>
 8012508:	4603      	mov	r3, r0
 801250a:	2b00      	cmp	r3, #0
 801250c:	d002      	beq.n	8012514 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801250e:	f06f 0305 	mvn.w	r3, #5
 8012512:	e043      	b.n	801259c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	60fb      	str	r3, [r7, #12]
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	2b00      	cmp	r3, #0
 8012520:	d1ef      	bne.n	8012502 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8012522:	68f8      	ldr	r0, [r7, #12]
 8012524:	f7ff fed4 	bl	80122d0 <tcp_output_segment_busy>
 8012528:	4603      	mov	r3, r0
 801252a:	2b00      	cmp	r3, #0
 801252c:	d002      	beq.n	8012534 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801252e:	f06f 0305 	mvn.w	r3, #5
 8012532:	e033      	b.n	801259c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	2200      	movs	r2, #0
 8012548:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	8b5b      	ldrh	r3, [r3, #26]
 801254e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012552:	b29a      	uxth	r2, r3
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	68db      	ldr	r3, [r3, #12]
 801255c:	685b      	ldr	r3, [r3, #4]
 801255e:	4618      	mov	r0, r3
 8012560:	f7f8 fd8f 	bl	800b082 <lwip_htonl>
 8012564:	4604      	mov	r4, r0
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	891b      	ldrh	r3, [r3, #8]
 801256a:	461d      	mov	r5, r3
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	68db      	ldr	r3, [r3, #12]
 8012570:	899b      	ldrh	r3, [r3, #12]
 8012572:	b29b      	uxth	r3, r3
 8012574:	4618      	mov	r0, r3
 8012576:	f7f8 fd6f 	bl	800b058 <lwip_htons>
 801257a:	4603      	mov	r3, r0
 801257c:	b2db      	uxtb	r3, r3
 801257e:	f003 0303 	and.w	r3, r3, #3
 8012582:	2b00      	cmp	r3, #0
 8012584:	d001      	beq.n	801258a <tcp_rexmit_rto_prepare+0xba>
 8012586:	2301      	movs	r3, #1
 8012588:	e000      	b.n	801258c <tcp_rexmit_rto_prepare+0xbc>
 801258a:	2300      	movs	r3, #0
 801258c:	442b      	add	r3, r5
 801258e:	18e2      	adds	r2, r4, r3
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	2200      	movs	r2, #0
 8012598:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801259a:	2300      	movs	r3, #0
}
 801259c:	4618      	mov	r0, r3
 801259e:	3710      	adds	r7, #16
 80125a0:	46bd      	mov	sp, r7
 80125a2:	bdb0      	pop	{r4, r5, r7, pc}
 80125a4:	0801b998 	.word	0x0801b998
 80125a8:	0801bfd4 	.word	0x0801bfd4
 80125ac:	0801b9ec 	.word	0x0801b9ec

080125b0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80125b0:	b580      	push	{r7, lr}
 80125b2:	b082      	sub	sp, #8
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d106      	bne.n	80125cc <tcp_rexmit_rto_commit+0x1c>
 80125be:	4b0d      	ldr	r3, [pc, #52]	; (80125f4 <tcp_rexmit_rto_commit+0x44>)
 80125c0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80125c4:	490c      	ldr	r1, [pc, #48]	; (80125f8 <tcp_rexmit_rto_commit+0x48>)
 80125c6:	480d      	ldr	r0, [pc, #52]	; (80125fc <tcp_rexmit_rto_commit+0x4c>)
 80125c8:	f005 fde2 	bl	8018190 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80125d2:	2bff      	cmp	r3, #255	; 0xff
 80125d4:	d007      	beq.n	80125e6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80125dc:	3301      	adds	r3, #1
 80125de:	b2da      	uxtb	r2, r3
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80125e6:	6878      	ldr	r0, [r7, #4]
 80125e8:	f7ff fc7a 	bl	8011ee0 <tcp_output>
}
 80125ec:	bf00      	nop
 80125ee:	3708      	adds	r7, #8
 80125f0:	46bd      	mov	sp, r7
 80125f2:	bd80      	pop	{r7, pc}
 80125f4:	0801b998 	.word	0x0801b998
 80125f8:	0801bff8 	.word	0x0801bff8
 80125fc:	0801b9ec 	.word	0x0801b9ec

08012600 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012600:	b580      	push	{r7, lr}
 8012602:	b082      	sub	sp, #8
 8012604:	af00      	add	r7, sp, #0
 8012606:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	2b00      	cmp	r3, #0
 801260c:	d106      	bne.n	801261c <tcp_rexmit_rto+0x1c>
 801260e:	4b0a      	ldr	r3, [pc, #40]	; (8012638 <tcp_rexmit_rto+0x38>)
 8012610:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8012614:	4909      	ldr	r1, [pc, #36]	; (801263c <tcp_rexmit_rto+0x3c>)
 8012616:	480a      	ldr	r0, [pc, #40]	; (8012640 <tcp_rexmit_rto+0x40>)
 8012618:	f005 fdba 	bl	8018190 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801261c:	6878      	ldr	r0, [r7, #4]
 801261e:	f7ff ff57 	bl	80124d0 <tcp_rexmit_rto_prepare>
 8012622:	4603      	mov	r3, r0
 8012624:	2b00      	cmp	r3, #0
 8012626:	d102      	bne.n	801262e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8012628:	6878      	ldr	r0, [r7, #4]
 801262a:	f7ff ffc1 	bl	80125b0 <tcp_rexmit_rto_commit>
  }
}
 801262e:	bf00      	nop
 8012630:	3708      	adds	r7, #8
 8012632:	46bd      	mov	sp, r7
 8012634:	bd80      	pop	{r7, pc}
 8012636:	bf00      	nop
 8012638:	0801b998 	.word	0x0801b998
 801263c:	0801c01c 	.word	0x0801c01c
 8012640:	0801b9ec 	.word	0x0801b9ec

08012644 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012644:	b590      	push	{r4, r7, lr}
 8012646:	b085      	sub	sp, #20
 8012648:	af00      	add	r7, sp, #0
 801264a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	2b00      	cmp	r3, #0
 8012650:	d106      	bne.n	8012660 <tcp_rexmit+0x1c>
 8012652:	4b2f      	ldr	r3, [pc, #188]	; (8012710 <tcp_rexmit+0xcc>)
 8012654:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8012658:	492e      	ldr	r1, [pc, #184]	; (8012714 <tcp_rexmit+0xd0>)
 801265a:	482f      	ldr	r0, [pc, #188]	; (8012718 <tcp_rexmit+0xd4>)
 801265c:	f005 fd98 	bl	8018190 <iprintf>

  if (pcb->unacked == NULL) {
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012664:	2b00      	cmp	r3, #0
 8012666:	d102      	bne.n	801266e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8012668:	f06f 0305 	mvn.w	r3, #5
 801266c:	e04c      	b.n	8012708 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012672:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012674:	68b8      	ldr	r0, [r7, #8]
 8012676:	f7ff fe2b 	bl	80122d0 <tcp_output_segment_busy>
 801267a:	4603      	mov	r3, r0
 801267c:	2b00      	cmp	r3, #0
 801267e:	d002      	beq.n	8012686 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012680:	f06f 0305 	mvn.w	r3, #5
 8012684:	e040      	b.n	8012708 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8012686:	68bb      	ldr	r3, [r7, #8]
 8012688:	681a      	ldr	r2, [r3, #0]
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	336c      	adds	r3, #108	; 0x6c
 8012692:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012694:	e002      	b.n	801269c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d011      	beq.n	80126c8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	68db      	ldr	r3, [r3, #12]
 80126aa:	685b      	ldr	r3, [r3, #4]
 80126ac:	4618      	mov	r0, r3
 80126ae:	f7f8 fce8 	bl	800b082 <lwip_htonl>
 80126b2:	4604      	mov	r4, r0
 80126b4:	68bb      	ldr	r3, [r7, #8]
 80126b6:	68db      	ldr	r3, [r3, #12]
 80126b8:	685b      	ldr	r3, [r3, #4]
 80126ba:	4618      	mov	r0, r3
 80126bc:	f7f8 fce1 	bl	800b082 <lwip_htonl>
 80126c0:	4603      	mov	r3, r0
 80126c2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	dbe6      	blt.n	8012696 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	681a      	ldr	r2, [r3, #0]
 80126cc:	68bb      	ldr	r3, [r7, #8]
 80126ce:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	68ba      	ldr	r2, [r7, #8]
 80126d4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80126d6:	68bb      	ldr	r3, [r7, #8]
 80126d8:	681b      	ldr	r3, [r3, #0]
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d103      	bne.n	80126e6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	2200      	movs	r2, #0
 80126e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80126ec:	2bff      	cmp	r3, #255	; 0xff
 80126ee:	d007      	beq.n	8012700 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80126f6:	3301      	adds	r3, #1
 80126f8:	b2da      	uxtb	r2, r3
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	2200      	movs	r2, #0
 8012704:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8012706:	2300      	movs	r3, #0
}
 8012708:	4618      	mov	r0, r3
 801270a:	3714      	adds	r7, #20
 801270c:	46bd      	mov	sp, r7
 801270e:	bd90      	pop	{r4, r7, pc}
 8012710:	0801b998 	.word	0x0801b998
 8012714:	0801c038 	.word	0x0801c038
 8012718:	0801b9ec 	.word	0x0801b9ec

0801271c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801271c:	b580      	push	{r7, lr}
 801271e:	b082      	sub	sp, #8
 8012720:	af00      	add	r7, sp, #0
 8012722:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	2b00      	cmp	r3, #0
 8012728:	d106      	bne.n	8012738 <tcp_rexmit_fast+0x1c>
 801272a:	4b2e      	ldr	r3, [pc, #184]	; (80127e4 <tcp_rexmit_fast+0xc8>)
 801272c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8012730:	492d      	ldr	r1, [pc, #180]	; (80127e8 <tcp_rexmit_fast+0xcc>)
 8012732:	482e      	ldr	r0, [pc, #184]	; (80127ec <tcp_rexmit_fast+0xd0>)
 8012734:	f005 fd2c 	bl	8018190 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801273c:	2b00      	cmp	r3, #0
 801273e:	d04d      	beq.n	80127dc <tcp_rexmit_fast+0xc0>
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	8b5b      	ldrh	r3, [r3, #26]
 8012744:	f003 0304 	and.w	r3, r3, #4
 8012748:	2b00      	cmp	r3, #0
 801274a:	d147      	bne.n	80127dc <tcp_rexmit_fast+0xc0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801274c:	6878      	ldr	r0, [r7, #4]
 801274e:	f7ff ff79 	bl	8012644 <tcp_rexmit>
 8012752:	4603      	mov	r3, r0
 8012754:	2b00      	cmp	r3, #0
 8012756:	d141      	bne.n	80127dc <tcp_rexmit_fast+0xc0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012764:	429a      	cmp	r2, r3
 8012766:	d207      	bcs.n	8012778 <tcp_rexmit_fast+0x5c>
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801276e:	0fda      	lsrs	r2, r3, #31
 8012770:	4413      	add	r3, r2
 8012772:	105b      	asrs	r3, r3, #1
 8012774:	b29b      	uxth	r3, r3
 8012776:	e006      	b.n	8012786 <tcp_rexmit_fast+0x6a>
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801277e:	0fda      	lsrs	r2, r3, #31
 8012780:	4413      	add	r3, r2
 8012782:	105b      	asrs	r3, r3, #1
 8012784:	b29b      	uxth	r3, r3
 8012786:	687a      	ldr	r2, [r7, #4]
 8012788:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012792:	461a      	mov	r2, r3
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012798:	005b      	lsls	r3, r3, #1
 801279a:	429a      	cmp	r2, r3
 801279c:	d206      	bcs.n	80127ac <tcp_rexmit_fast+0x90>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80127a2:	005b      	lsls	r3, r3, #1
 80127a4:	b29a      	uxth	r2, r3
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80127b6:	4619      	mov	r1, r3
 80127b8:	0049      	lsls	r1, r1, #1
 80127ba:	440b      	add	r3, r1
 80127bc:	b29b      	uxth	r3, r3
 80127be:	4413      	add	r3, r2
 80127c0:	b29a      	uxth	r2, r3
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	8b5b      	ldrh	r3, [r3, #26]
 80127cc:	f043 0304 	orr.w	r3, r3, #4
 80127d0:	b29a      	uxth	r2, r3
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	2200      	movs	r2, #0
 80127da:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80127dc:	bf00      	nop
 80127de:	3708      	adds	r7, #8
 80127e0:	46bd      	mov	sp, r7
 80127e2:	bd80      	pop	{r7, pc}
 80127e4:	0801b998 	.word	0x0801b998
 80127e8:	0801c050 	.word	0x0801c050
 80127ec:	0801b9ec 	.word	0x0801b9ec

080127f0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80127f0:	b580      	push	{r7, lr}
 80127f2:	b086      	sub	sp, #24
 80127f4:	af00      	add	r7, sp, #0
 80127f6:	60f8      	str	r0, [r7, #12]
 80127f8:	607b      	str	r3, [r7, #4]
 80127fa:	460b      	mov	r3, r1
 80127fc:	817b      	strh	r3, [r7, #10]
 80127fe:	4613      	mov	r3, r2
 8012800:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8012802:	897a      	ldrh	r2, [r7, #10]
 8012804:	893b      	ldrh	r3, [r7, #8]
 8012806:	4413      	add	r3, r2
 8012808:	b29b      	uxth	r3, r3
 801280a:	3314      	adds	r3, #20
 801280c:	b29b      	uxth	r3, r3
 801280e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012812:	4619      	mov	r1, r3
 8012814:	2022      	movs	r0, #34	; 0x22
 8012816:	f7f9 fcab 	bl	800c170 <pbuf_alloc>
 801281a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801281c:	697b      	ldr	r3, [r7, #20]
 801281e:	2b00      	cmp	r3, #0
 8012820:	d04e      	beq.n	80128c0 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8012822:	697b      	ldr	r3, [r7, #20]
 8012824:	895b      	ldrh	r3, [r3, #10]
 8012826:	461a      	mov	r2, r3
 8012828:	897b      	ldrh	r3, [r7, #10]
 801282a:	3314      	adds	r3, #20
 801282c:	429a      	cmp	r2, r3
 801282e:	da06      	bge.n	801283e <tcp_output_alloc_header_common+0x4e>
 8012830:	4b26      	ldr	r3, [pc, #152]	; (80128cc <tcp_output_alloc_header_common+0xdc>)
 8012832:	f240 7224 	movw	r2, #1828	; 0x724
 8012836:	4926      	ldr	r1, [pc, #152]	; (80128d0 <tcp_output_alloc_header_common+0xe0>)
 8012838:	4826      	ldr	r0, [pc, #152]	; (80128d4 <tcp_output_alloc_header_common+0xe4>)
 801283a:	f005 fca9 	bl	8018190 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801283e:	697b      	ldr	r3, [r7, #20]
 8012840:	685b      	ldr	r3, [r3, #4]
 8012842:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8012844:	8c3b      	ldrh	r3, [r7, #32]
 8012846:	4618      	mov	r0, r3
 8012848:	f7f8 fc06 	bl	800b058 <lwip_htons>
 801284c:	4603      	mov	r3, r0
 801284e:	461a      	mov	r2, r3
 8012850:	693b      	ldr	r3, [r7, #16]
 8012852:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8012854:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012856:	4618      	mov	r0, r3
 8012858:	f7f8 fbfe 	bl	800b058 <lwip_htons>
 801285c:	4603      	mov	r3, r0
 801285e:	461a      	mov	r2, r3
 8012860:	693b      	ldr	r3, [r7, #16]
 8012862:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8012864:	693b      	ldr	r3, [r7, #16]
 8012866:	687a      	ldr	r2, [r7, #4]
 8012868:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801286a:	68f8      	ldr	r0, [r7, #12]
 801286c:	f7f8 fc09 	bl	800b082 <lwip_htonl>
 8012870:	4602      	mov	r2, r0
 8012872:	693b      	ldr	r3, [r7, #16]
 8012874:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8012876:	897b      	ldrh	r3, [r7, #10]
 8012878:	089b      	lsrs	r3, r3, #2
 801287a:	b29b      	uxth	r3, r3
 801287c:	3305      	adds	r3, #5
 801287e:	b29b      	uxth	r3, r3
 8012880:	031b      	lsls	r3, r3, #12
 8012882:	b29a      	uxth	r2, r3
 8012884:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012888:	b29b      	uxth	r3, r3
 801288a:	4313      	orrs	r3, r2
 801288c:	b29b      	uxth	r3, r3
 801288e:	4618      	mov	r0, r3
 8012890:	f7f8 fbe2 	bl	800b058 <lwip_htons>
 8012894:	4603      	mov	r3, r0
 8012896:	461a      	mov	r2, r3
 8012898:	693b      	ldr	r3, [r7, #16]
 801289a:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801289c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801289e:	4618      	mov	r0, r3
 80128a0:	f7f8 fbda 	bl	800b058 <lwip_htons>
 80128a4:	4603      	mov	r3, r0
 80128a6:	461a      	mov	r2, r3
 80128a8:	693b      	ldr	r3, [r7, #16]
 80128aa:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80128ac:	693b      	ldr	r3, [r7, #16]
 80128ae:	2200      	movs	r2, #0
 80128b0:	741a      	strb	r2, [r3, #16]
 80128b2:	2200      	movs	r2, #0
 80128b4:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80128b6:	693b      	ldr	r3, [r7, #16]
 80128b8:	2200      	movs	r2, #0
 80128ba:	749a      	strb	r2, [r3, #18]
 80128bc:	2200      	movs	r2, #0
 80128be:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80128c0:	697b      	ldr	r3, [r7, #20]
}
 80128c2:	4618      	mov	r0, r3
 80128c4:	3718      	adds	r7, #24
 80128c6:	46bd      	mov	sp, r7
 80128c8:	bd80      	pop	{r7, pc}
 80128ca:	bf00      	nop
 80128cc:	0801b998 	.word	0x0801b998
 80128d0:	0801c070 	.word	0x0801c070
 80128d4:	0801b9ec 	.word	0x0801b9ec

080128d8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80128d8:	b5b0      	push	{r4, r5, r7, lr}
 80128da:	b08a      	sub	sp, #40	; 0x28
 80128dc:	af04      	add	r7, sp, #16
 80128de:	60f8      	str	r0, [r7, #12]
 80128e0:	607b      	str	r3, [r7, #4]
 80128e2:	460b      	mov	r3, r1
 80128e4:	817b      	strh	r3, [r7, #10]
 80128e6:	4613      	mov	r3, r2
 80128e8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d106      	bne.n	80128fe <tcp_output_alloc_header+0x26>
 80128f0:	4b15      	ldr	r3, [pc, #84]	; (8012948 <tcp_output_alloc_header+0x70>)
 80128f2:	f240 7242 	movw	r2, #1858	; 0x742
 80128f6:	4915      	ldr	r1, [pc, #84]	; (801294c <tcp_output_alloc_header+0x74>)
 80128f8:	4815      	ldr	r0, [pc, #84]	; (8012950 <tcp_output_alloc_header+0x78>)
 80128fa:	f005 fc49 	bl	8018190 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80128fe:	68fb      	ldr	r3, [r7, #12]
 8012900:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012902:	68fb      	ldr	r3, [r7, #12]
 8012904:	8adb      	ldrh	r3, [r3, #22]
 8012906:	68fa      	ldr	r2, [r7, #12]
 8012908:	8b12      	ldrh	r2, [r2, #24]
 801290a:	68f9      	ldr	r1, [r7, #12]
 801290c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801290e:	893d      	ldrh	r5, [r7, #8]
 8012910:	897c      	ldrh	r4, [r7, #10]
 8012912:	9103      	str	r1, [sp, #12]
 8012914:	2110      	movs	r1, #16
 8012916:	9102      	str	r1, [sp, #8]
 8012918:	9201      	str	r2, [sp, #4]
 801291a:	9300      	str	r3, [sp, #0]
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	462a      	mov	r2, r5
 8012920:	4621      	mov	r1, r4
 8012922:	f7ff ff65 	bl	80127f0 <tcp_output_alloc_header_common>
 8012926:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8012928:	697b      	ldr	r3, [r7, #20]
 801292a:	2b00      	cmp	r3, #0
 801292c:	d006      	beq.n	801293c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012932:	68fa      	ldr	r2, [r7, #12]
 8012934:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012936:	441a      	add	r2, r3
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801293c:	697b      	ldr	r3, [r7, #20]
}
 801293e:	4618      	mov	r0, r3
 8012940:	3718      	adds	r7, #24
 8012942:	46bd      	mov	sp, r7
 8012944:	bdb0      	pop	{r4, r5, r7, pc}
 8012946:	bf00      	nop
 8012948:	0801b998 	.word	0x0801b998
 801294c:	0801c0a0 	.word	0x0801c0a0
 8012950:	0801b9ec 	.word	0x0801b9ec

08012954 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8012954:	b580      	push	{r7, lr}
 8012956:	b088      	sub	sp, #32
 8012958:	af00      	add	r7, sp, #0
 801295a:	60f8      	str	r0, [r7, #12]
 801295c:	60b9      	str	r1, [r7, #8]
 801295e:	4611      	mov	r1, r2
 8012960:	461a      	mov	r2, r3
 8012962:	460b      	mov	r3, r1
 8012964:	71fb      	strb	r3, [r7, #7]
 8012966:	4613      	mov	r3, r2
 8012968:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801296a:	2300      	movs	r3, #0
 801296c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801296e:	68bb      	ldr	r3, [r7, #8]
 8012970:	2b00      	cmp	r3, #0
 8012972:	d106      	bne.n	8012982 <tcp_output_fill_options+0x2e>
 8012974:	4b13      	ldr	r3, [pc, #76]	; (80129c4 <tcp_output_fill_options+0x70>)
 8012976:	f240 7256 	movw	r2, #1878	; 0x756
 801297a:	4913      	ldr	r1, [pc, #76]	; (80129c8 <tcp_output_fill_options+0x74>)
 801297c:	4813      	ldr	r0, [pc, #76]	; (80129cc <tcp_output_fill_options+0x78>)
 801297e:	f005 fc07 	bl	8018190 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8012982:	68bb      	ldr	r3, [r7, #8]
 8012984:	685b      	ldr	r3, [r3, #4]
 8012986:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8012988:	69bb      	ldr	r3, [r7, #24]
 801298a:	3314      	adds	r3, #20
 801298c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801298e:	69bb      	ldr	r3, [r7, #24]
 8012990:	f103 0214 	add.w	r2, r3, #20
 8012994:	8bfb      	ldrh	r3, [r7, #30]
 8012996:	009b      	lsls	r3, r3, #2
 8012998:	4619      	mov	r1, r3
 801299a:	79fb      	ldrb	r3, [r7, #7]
 801299c:	009b      	lsls	r3, r3, #2
 801299e:	f003 0304 	and.w	r3, r3, #4
 80129a2:	440b      	add	r3, r1
 80129a4:	4413      	add	r3, r2
 80129a6:	697a      	ldr	r2, [r7, #20]
 80129a8:	429a      	cmp	r2, r3
 80129aa:	d006      	beq.n	80129ba <tcp_output_fill_options+0x66>
 80129ac:	4b05      	ldr	r3, [pc, #20]	; (80129c4 <tcp_output_fill_options+0x70>)
 80129ae:	f240 7275 	movw	r2, #1909	; 0x775
 80129b2:	4907      	ldr	r1, [pc, #28]	; (80129d0 <tcp_output_fill_options+0x7c>)
 80129b4:	4805      	ldr	r0, [pc, #20]	; (80129cc <tcp_output_fill_options+0x78>)
 80129b6:	f005 fbeb 	bl	8018190 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80129ba:	bf00      	nop
 80129bc:	3720      	adds	r7, #32
 80129be:	46bd      	mov	sp, r7
 80129c0:	bd80      	pop	{r7, pc}
 80129c2:	bf00      	nop
 80129c4:	0801b998 	.word	0x0801b998
 80129c8:	0801c0c8 	.word	0x0801c0c8
 80129cc:	0801b9ec 	.word	0x0801b9ec
 80129d0:	0801bfc0 	.word	0x0801bfc0

080129d4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80129d4:	b580      	push	{r7, lr}
 80129d6:	b08a      	sub	sp, #40	; 0x28
 80129d8:	af04      	add	r7, sp, #16
 80129da:	60f8      	str	r0, [r7, #12]
 80129dc:	60b9      	str	r1, [r7, #8]
 80129de:	607a      	str	r2, [r7, #4]
 80129e0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80129e2:	68bb      	ldr	r3, [r7, #8]
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d106      	bne.n	80129f6 <tcp_output_control_segment+0x22>
 80129e8:	4b1c      	ldr	r3, [pc, #112]	; (8012a5c <tcp_output_control_segment+0x88>)
 80129ea:	f240 7287 	movw	r2, #1927	; 0x787
 80129ee:	491c      	ldr	r1, [pc, #112]	; (8012a60 <tcp_output_control_segment+0x8c>)
 80129f0:	481c      	ldr	r0, [pc, #112]	; (8012a64 <tcp_output_control_segment+0x90>)
 80129f2:	f005 fbcd 	bl	8018190 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80129f6:	683a      	ldr	r2, [r7, #0]
 80129f8:	6879      	ldr	r1, [r7, #4]
 80129fa:	68f8      	ldr	r0, [r7, #12]
 80129fc:	f7fe fad6 	bl	8010fac <tcp_route>
 8012a00:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8012a02:	693b      	ldr	r3, [r7, #16]
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d102      	bne.n	8012a0e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8012a08:	23fc      	movs	r3, #252	; 0xfc
 8012a0a:	75fb      	strb	r3, [r7, #23]
 8012a0c:	e01c      	b.n	8012a48 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d006      	beq.n	8012a22 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	7adb      	ldrb	r3, [r3, #11]
 8012a18:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8012a1a:	68fb      	ldr	r3, [r7, #12]
 8012a1c:	7a9b      	ldrb	r3, [r3, #10]
 8012a1e:	757b      	strb	r3, [r7, #21]
 8012a20:	e003      	b.n	8012a2a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8012a22:	23ff      	movs	r3, #255	; 0xff
 8012a24:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8012a26:	2300      	movs	r3, #0
 8012a28:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8012a2a:	7dba      	ldrb	r2, [r7, #22]
 8012a2c:	693b      	ldr	r3, [r7, #16]
 8012a2e:	9302      	str	r3, [sp, #8]
 8012a30:	2306      	movs	r3, #6
 8012a32:	9301      	str	r3, [sp, #4]
 8012a34:	7d7b      	ldrb	r3, [r7, #21]
 8012a36:	9300      	str	r3, [sp, #0]
 8012a38:	4613      	mov	r3, r2
 8012a3a:	683a      	ldr	r2, [r7, #0]
 8012a3c:	6879      	ldr	r1, [r7, #4]
 8012a3e:	68b8      	ldr	r0, [r7, #8]
 8012a40:	f004 f920 	bl	8016c84 <ip4_output_if>
 8012a44:	4603      	mov	r3, r0
 8012a46:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8012a48:	68b8      	ldr	r0, [r7, #8]
 8012a4a:	f7f9 fe71 	bl	800c730 <pbuf_free>
  return err;
 8012a4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012a52:	4618      	mov	r0, r3
 8012a54:	3718      	adds	r7, #24
 8012a56:	46bd      	mov	sp, r7
 8012a58:	bd80      	pop	{r7, pc}
 8012a5a:	bf00      	nop
 8012a5c:	0801b998 	.word	0x0801b998
 8012a60:	0801c0f0 	.word	0x0801c0f0
 8012a64:	0801b9ec 	.word	0x0801b9ec

08012a68 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8012a68:	b590      	push	{r4, r7, lr}
 8012a6a:	b08b      	sub	sp, #44	; 0x2c
 8012a6c:	af04      	add	r7, sp, #16
 8012a6e:	60f8      	str	r0, [r7, #12]
 8012a70:	60b9      	str	r1, [r7, #8]
 8012a72:	607a      	str	r2, [r7, #4]
 8012a74:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8012a76:	683b      	ldr	r3, [r7, #0]
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d106      	bne.n	8012a8a <tcp_rst+0x22>
 8012a7c:	4b1f      	ldr	r3, [pc, #124]	; (8012afc <tcp_rst+0x94>)
 8012a7e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8012a82:	491f      	ldr	r1, [pc, #124]	; (8012b00 <tcp_rst+0x98>)
 8012a84:	481f      	ldr	r0, [pc, #124]	; (8012b04 <tcp_rst+0x9c>)
 8012a86:	f005 fb83 	bl	8018190 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8012a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d106      	bne.n	8012a9e <tcp_rst+0x36>
 8012a90:	4b1a      	ldr	r3, [pc, #104]	; (8012afc <tcp_rst+0x94>)
 8012a92:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8012a96:	491c      	ldr	r1, [pc, #112]	; (8012b08 <tcp_rst+0xa0>)
 8012a98:	481a      	ldr	r0, [pc, #104]	; (8012b04 <tcp_rst+0x9c>)
 8012a9a:	f005 fb79 	bl	8018190 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012a9e:	2300      	movs	r3, #0
 8012aa0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8012aa2:	f246 0308 	movw	r3, #24584	; 0x6008
 8012aa6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8012aa8:	7dfb      	ldrb	r3, [r7, #23]
 8012aaa:	b29c      	uxth	r4, r3
 8012aac:	68b8      	ldr	r0, [r7, #8]
 8012aae:	f7f8 fae8 	bl	800b082 <lwip_htonl>
 8012ab2:	4602      	mov	r2, r0
 8012ab4:	8abb      	ldrh	r3, [r7, #20]
 8012ab6:	9303      	str	r3, [sp, #12]
 8012ab8:	2314      	movs	r3, #20
 8012aba:	9302      	str	r3, [sp, #8]
 8012abc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8012abe:	9301      	str	r3, [sp, #4]
 8012ac0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012ac2:	9300      	str	r3, [sp, #0]
 8012ac4:	4613      	mov	r3, r2
 8012ac6:	2200      	movs	r2, #0
 8012ac8:	4621      	mov	r1, r4
 8012aca:	6878      	ldr	r0, [r7, #4]
 8012acc:	f7ff fe90 	bl	80127f0 <tcp_output_alloc_header_common>
 8012ad0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8012ad2:	693b      	ldr	r3, [r7, #16]
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d00c      	beq.n	8012af2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012ad8:	7dfb      	ldrb	r3, [r7, #23]
 8012ada:	2200      	movs	r2, #0
 8012adc:	6939      	ldr	r1, [r7, #16]
 8012ade:	68f8      	ldr	r0, [r7, #12]
 8012ae0:	f7ff ff38 	bl	8012954 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8012ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ae6:	683a      	ldr	r2, [r7, #0]
 8012ae8:	6939      	ldr	r1, [r7, #16]
 8012aea:	68f8      	ldr	r0, [r7, #12]
 8012aec:	f7ff ff72 	bl	80129d4 <tcp_output_control_segment>
 8012af0:	e000      	b.n	8012af4 <tcp_rst+0x8c>
    return;
 8012af2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8012af4:	371c      	adds	r7, #28
 8012af6:	46bd      	mov	sp, r7
 8012af8:	bd90      	pop	{r4, r7, pc}
 8012afa:	bf00      	nop
 8012afc:	0801b998 	.word	0x0801b998
 8012b00:	0801c11c 	.word	0x0801c11c
 8012b04:	0801b9ec 	.word	0x0801b9ec
 8012b08:	0801c138 	.word	0x0801c138

08012b0c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8012b0c:	b590      	push	{r4, r7, lr}
 8012b0e:	b087      	sub	sp, #28
 8012b10:	af00      	add	r7, sp, #0
 8012b12:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8012b14:	2300      	movs	r3, #0
 8012b16:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8012b18:	2300      	movs	r3, #0
 8012b1a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d106      	bne.n	8012b30 <tcp_send_empty_ack+0x24>
 8012b22:	4b28      	ldr	r3, [pc, #160]	; (8012bc4 <tcp_send_empty_ack+0xb8>)
 8012b24:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8012b28:	4927      	ldr	r1, [pc, #156]	; (8012bc8 <tcp_send_empty_ack+0xbc>)
 8012b2a:	4828      	ldr	r0, [pc, #160]	; (8012bcc <tcp_send_empty_ack+0xc0>)
 8012b2c:	f005 fb30 	bl	8018190 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012b30:	7dfb      	ldrb	r3, [r7, #23]
 8012b32:	009b      	lsls	r3, r3, #2
 8012b34:	b2db      	uxtb	r3, r3
 8012b36:	f003 0304 	and.w	r3, r3, #4
 8012b3a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8012b3c:	7d7b      	ldrb	r3, [r7, #21]
 8012b3e:	b29c      	uxth	r4, r3
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012b44:	4618      	mov	r0, r3
 8012b46:	f7f8 fa9c 	bl	800b082 <lwip_htonl>
 8012b4a:	4603      	mov	r3, r0
 8012b4c:	2200      	movs	r2, #0
 8012b4e:	4621      	mov	r1, r4
 8012b50:	6878      	ldr	r0, [r7, #4]
 8012b52:	f7ff fec1 	bl	80128d8 <tcp_output_alloc_header>
 8012b56:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012b58:	693b      	ldr	r3, [r7, #16]
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d109      	bne.n	8012b72 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	8b5b      	ldrh	r3, [r3, #26]
 8012b62:	f043 0303 	orr.w	r3, r3, #3
 8012b66:	b29a      	uxth	r2, r3
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8012b6c:	f06f 0301 	mvn.w	r3, #1
 8012b70:	e023      	b.n	8012bba <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8012b72:	7dbb      	ldrb	r3, [r7, #22]
 8012b74:	7dfa      	ldrb	r2, [r7, #23]
 8012b76:	6939      	ldr	r1, [r7, #16]
 8012b78:	6878      	ldr	r0, [r7, #4]
 8012b7a:	f7ff feeb 	bl	8012954 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012b7e:	687a      	ldr	r2, [r7, #4]
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	3304      	adds	r3, #4
 8012b84:	6939      	ldr	r1, [r7, #16]
 8012b86:	6878      	ldr	r0, [r7, #4]
 8012b88:	f7ff ff24 	bl	80129d4 <tcp_output_control_segment>
 8012b8c:	4603      	mov	r3, r0
 8012b8e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8012b90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d007      	beq.n	8012ba8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	8b5b      	ldrh	r3, [r3, #26]
 8012b9c:	f043 0303 	orr.w	r3, r3, #3
 8012ba0:	b29a      	uxth	r2, r3
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	835a      	strh	r2, [r3, #26]
 8012ba6:	e006      	b.n	8012bb6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	8b5b      	ldrh	r3, [r3, #26]
 8012bac:	f023 0303 	bic.w	r3, r3, #3
 8012bb0:	b29a      	uxth	r2, r3
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8012bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012bba:	4618      	mov	r0, r3
 8012bbc:	371c      	adds	r7, #28
 8012bbe:	46bd      	mov	sp, r7
 8012bc0:	bd90      	pop	{r4, r7, pc}
 8012bc2:	bf00      	nop
 8012bc4:	0801b998 	.word	0x0801b998
 8012bc8:	0801c154 	.word	0x0801c154
 8012bcc:	0801b9ec 	.word	0x0801b9ec

08012bd0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8012bd0:	b590      	push	{r4, r7, lr}
 8012bd2:	b087      	sub	sp, #28
 8012bd4:	af00      	add	r7, sp, #0
 8012bd6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012bd8:	2300      	movs	r3, #0
 8012bda:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d106      	bne.n	8012bf0 <tcp_keepalive+0x20>
 8012be2:	4b18      	ldr	r3, [pc, #96]	; (8012c44 <tcp_keepalive+0x74>)
 8012be4:	f640 0224 	movw	r2, #2084	; 0x824
 8012be8:	4917      	ldr	r1, [pc, #92]	; (8012c48 <tcp_keepalive+0x78>)
 8012bea:	4818      	ldr	r0, [pc, #96]	; (8012c4c <tcp_keepalive+0x7c>)
 8012bec:	f005 fad0 	bl	8018190 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8012bf0:	7dfb      	ldrb	r3, [r7, #23]
 8012bf2:	b29c      	uxth	r4, r3
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012bf8:	3b01      	subs	r3, #1
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	f7f8 fa41 	bl	800b082 <lwip_htonl>
 8012c00:	4603      	mov	r3, r0
 8012c02:	2200      	movs	r2, #0
 8012c04:	4621      	mov	r1, r4
 8012c06:	6878      	ldr	r0, [r7, #4]
 8012c08:	f7ff fe66 	bl	80128d8 <tcp_output_alloc_header>
 8012c0c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012c0e:	693b      	ldr	r3, [r7, #16]
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d102      	bne.n	8012c1a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8012c14:	f04f 33ff 	mov.w	r3, #4294967295
 8012c18:	e010      	b.n	8012c3c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012c1a:	7dfb      	ldrb	r3, [r7, #23]
 8012c1c:	2200      	movs	r2, #0
 8012c1e:	6939      	ldr	r1, [r7, #16]
 8012c20:	6878      	ldr	r0, [r7, #4]
 8012c22:	f7ff fe97 	bl	8012954 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012c26:	687a      	ldr	r2, [r7, #4]
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	3304      	adds	r3, #4
 8012c2c:	6939      	ldr	r1, [r7, #16]
 8012c2e:	6878      	ldr	r0, [r7, #4]
 8012c30:	f7ff fed0 	bl	80129d4 <tcp_output_control_segment>
 8012c34:	4603      	mov	r3, r0
 8012c36:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012c38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012c3c:	4618      	mov	r0, r3
 8012c3e:	371c      	adds	r7, #28
 8012c40:	46bd      	mov	sp, r7
 8012c42:	bd90      	pop	{r4, r7, pc}
 8012c44:	0801b998 	.word	0x0801b998
 8012c48:	0801c174 	.word	0x0801c174
 8012c4c:	0801b9ec 	.word	0x0801b9ec

08012c50 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012c50:	b590      	push	{r4, r7, lr}
 8012c52:	b08b      	sub	sp, #44	; 0x2c
 8012c54:	af00      	add	r7, sp, #0
 8012c56:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012c58:	2300      	movs	r3, #0
 8012c5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d106      	bne.n	8012c72 <tcp_zero_window_probe+0x22>
 8012c64:	4b4c      	ldr	r3, [pc, #304]	; (8012d98 <tcp_zero_window_probe+0x148>)
 8012c66:	f640 024f 	movw	r2, #2127	; 0x84f
 8012c6a:	494c      	ldr	r1, [pc, #304]	; (8012d9c <tcp_zero_window_probe+0x14c>)
 8012c6c:	484c      	ldr	r0, [pc, #304]	; (8012da0 <tcp_zero_window_probe+0x150>)
 8012c6e:	f005 fa8f 	bl	8018190 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c76:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8012c78:	6a3b      	ldr	r3, [r7, #32]
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d101      	bne.n	8012c82 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8012c7e:	2300      	movs	r3, #0
 8012c80:	e086      	b.n	8012d90 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012c88:	2bff      	cmp	r3, #255	; 0xff
 8012c8a:	d007      	beq.n	8012c9c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012c92:	3301      	adds	r3, #1
 8012c94:	b2da      	uxtb	r2, r3
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8012c9c:	6a3b      	ldr	r3, [r7, #32]
 8012c9e:	68db      	ldr	r3, [r3, #12]
 8012ca0:	899b      	ldrh	r3, [r3, #12]
 8012ca2:	b29b      	uxth	r3, r3
 8012ca4:	4618      	mov	r0, r3
 8012ca6:	f7f8 f9d7 	bl	800b058 <lwip_htons>
 8012caa:	4603      	mov	r3, r0
 8012cac:	b2db      	uxtb	r3, r3
 8012cae:	f003 0301 	and.w	r3, r3, #1
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d005      	beq.n	8012cc2 <tcp_zero_window_probe+0x72>
 8012cb6:	6a3b      	ldr	r3, [r7, #32]
 8012cb8:	891b      	ldrh	r3, [r3, #8]
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d101      	bne.n	8012cc2 <tcp_zero_window_probe+0x72>
 8012cbe:	2301      	movs	r3, #1
 8012cc0:	e000      	b.n	8012cc4 <tcp_zero_window_probe+0x74>
 8012cc2:	2300      	movs	r3, #0
 8012cc4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8012cc6:	7ffb      	ldrb	r3, [r7, #31]
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	bf0c      	ite	eq
 8012ccc:	2301      	moveq	r3, #1
 8012cce:	2300      	movne	r3, #0
 8012cd0:	b2db      	uxtb	r3, r3
 8012cd2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8012cd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012cd8:	b299      	uxth	r1, r3
 8012cda:	6a3b      	ldr	r3, [r7, #32]
 8012cdc:	68db      	ldr	r3, [r3, #12]
 8012cde:	685b      	ldr	r3, [r3, #4]
 8012ce0:	8bba      	ldrh	r2, [r7, #28]
 8012ce2:	6878      	ldr	r0, [r7, #4]
 8012ce4:	f7ff fdf8 	bl	80128d8 <tcp_output_alloc_header>
 8012ce8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8012cea:	69bb      	ldr	r3, [r7, #24]
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d102      	bne.n	8012cf6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8012cf4:	e04c      	b.n	8012d90 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8012cf6:	69bb      	ldr	r3, [r7, #24]
 8012cf8:	685b      	ldr	r3, [r3, #4]
 8012cfa:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012cfc:	7ffb      	ldrb	r3, [r7, #31]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d011      	beq.n	8012d26 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8012d02:	697b      	ldr	r3, [r7, #20]
 8012d04:	899b      	ldrh	r3, [r3, #12]
 8012d06:	b29b      	uxth	r3, r3
 8012d08:	b21b      	sxth	r3, r3
 8012d0a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012d0e:	b21c      	sxth	r4, r3
 8012d10:	2011      	movs	r0, #17
 8012d12:	f7f8 f9a1 	bl	800b058 <lwip_htons>
 8012d16:	4603      	mov	r3, r0
 8012d18:	b21b      	sxth	r3, r3
 8012d1a:	4323      	orrs	r3, r4
 8012d1c:	b21b      	sxth	r3, r3
 8012d1e:	b29a      	uxth	r2, r3
 8012d20:	697b      	ldr	r3, [r7, #20]
 8012d22:	819a      	strh	r2, [r3, #12]
 8012d24:	e010      	b.n	8012d48 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8012d26:	69bb      	ldr	r3, [r7, #24]
 8012d28:	685b      	ldr	r3, [r3, #4]
 8012d2a:	3314      	adds	r3, #20
 8012d2c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8012d2e:	6a3b      	ldr	r3, [r7, #32]
 8012d30:	6858      	ldr	r0, [r3, #4]
 8012d32:	6a3b      	ldr	r3, [r7, #32]
 8012d34:	685b      	ldr	r3, [r3, #4]
 8012d36:	891a      	ldrh	r2, [r3, #8]
 8012d38:	6a3b      	ldr	r3, [r7, #32]
 8012d3a:	891b      	ldrh	r3, [r3, #8]
 8012d3c:	1ad3      	subs	r3, r2, r3
 8012d3e:	b29b      	uxth	r3, r3
 8012d40:	2201      	movs	r2, #1
 8012d42:	6939      	ldr	r1, [r7, #16]
 8012d44:	f7f9 fefa 	bl	800cb3c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8012d48:	6a3b      	ldr	r3, [r7, #32]
 8012d4a:	68db      	ldr	r3, [r3, #12]
 8012d4c:	685b      	ldr	r3, [r3, #4]
 8012d4e:	4618      	mov	r0, r3
 8012d50:	f7f8 f997 	bl	800b082 <lwip_htonl>
 8012d54:	4603      	mov	r3, r0
 8012d56:	3301      	adds	r3, #1
 8012d58:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	1ad3      	subs	r3, r2, r3
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	da02      	bge.n	8012d6c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	68fa      	ldr	r2, [r7, #12]
 8012d6a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012d6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012d70:	2200      	movs	r2, #0
 8012d72:	69b9      	ldr	r1, [r7, #24]
 8012d74:	6878      	ldr	r0, [r7, #4]
 8012d76:	f7ff fded 	bl	8012954 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012d7a:	687a      	ldr	r2, [r7, #4]
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	3304      	adds	r3, #4
 8012d80:	69b9      	ldr	r1, [r7, #24]
 8012d82:	6878      	ldr	r0, [r7, #4]
 8012d84:	f7ff fe26 	bl	80129d4 <tcp_output_control_segment>
 8012d88:	4603      	mov	r3, r0
 8012d8a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012d8c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012d90:	4618      	mov	r0, r3
 8012d92:	372c      	adds	r7, #44	; 0x2c
 8012d94:	46bd      	mov	sp, r7
 8012d96:	bd90      	pop	{r4, r7, pc}
 8012d98:	0801b998 	.word	0x0801b998
 8012d9c:	0801c190 	.word	0x0801c190
 8012da0:	0801b9ec 	.word	0x0801b9ec

08012da4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8012da4:	b580      	push	{r7, lr}
 8012da6:	b082      	sub	sp, #8
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8012dac:	f7f9 ffb4 	bl	800cd18 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8012db0:	4b0a      	ldr	r3, [pc, #40]	; (8012ddc <tcpip_tcp_timer+0x38>)
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d103      	bne.n	8012dc0 <tcpip_tcp_timer+0x1c>
 8012db8:	4b09      	ldr	r3, [pc, #36]	; (8012de0 <tcpip_tcp_timer+0x3c>)
 8012dba:	681b      	ldr	r3, [r3, #0]
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d005      	beq.n	8012dcc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012dc0:	2200      	movs	r2, #0
 8012dc2:	4908      	ldr	r1, [pc, #32]	; (8012de4 <tcpip_tcp_timer+0x40>)
 8012dc4:	20fa      	movs	r0, #250	; 0xfa
 8012dc6:	f000 f8f1 	bl	8012fac <sys_timeout>
 8012dca:	e002      	b.n	8012dd2 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8012dcc:	4b06      	ldr	r3, [pc, #24]	; (8012de8 <tcpip_tcp_timer+0x44>)
 8012dce:	2200      	movs	r2, #0
 8012dd0:	601a      	str	r2, [r3, #0]
  }
}
 8012dd2:	bf00      	nop
 8012dd4:	3708      	adds	r7, #8
 8012dd6:	46bd      	mov	sp, r7
 8012dd8:	bd80      	pop	{r7, pc}
 8012dda:	bf00      	nop
 8012ddc:	2000fad8 	.word	0x2000fad8
 8012de0:	2000fae8 	.word	0x2000fae8
 8012de4:	08012da5 	.word	0x08012da5
 8012de8:	20008c94 	.word	0x20008c94

08012dec <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012dec:	b580      	push	{r7, lr}
 8012dee:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012df0:	4b0a      	ldr	r3, [pc, #40]	; (8012e1c <tcp_timer_needed+0x30>)
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d10f      	bne.n	8012e18 <tcp_timer_needed+0x2c>
 8012df8:	4b09      	ldr	r3, [pc, #36]	; (8012e20 <tcp_timer_needed+0x34>)
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d103      	bne.n	8012e08 <tcp_timer_needed+0x1c>
 8012e00:	4b08      	ldr	r3, [pc, #32]	; (8012e24 <tcp_timer_needed+0x38>)
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d007      	beq.n	8012e18 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8012e08:	4b04      	ldr	r3, [pc, #16]	; (8012e1c <tcp_timer_needed+0x30>)
 8012e0a:	2201      	movs	r2, #1
 8012e0c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012e0e:	2200      	movs	r2, #0
 8012e10:	4905      	ldr	r1, [pc, #20]	; (8012e28 <tcp_timer_needed+0x3c>)
 8012e12:	20fa      	movs	r0, #250	; 0xfa
 8012e14:	f000 f8ca 	bl	8012fac <sys_timeout>
  }
}
 8012e18:	bf00      	nop
 8012e1a:	bd80      	pop	{r7, pc}
 8012e1c:	20008c94 	.word	0x20008c94
 8012e20:	2000fad8 	.word	0x2000fad8
 8012e24:	2000fae8 	.word	0x2000fae8
 8012e28:	08012da5 	.word	0x08012da5

08012e2c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8012e2c:	b580      	push	{r7, lr}
 8012e2e:	b086      	sub	sp, #24
 8012e30:	af00      	add	r7, sp, #0
 8012e32:	60f8      	str	r0, [r7, #12]
 8012e34:	60b9      	str	r1, [r7, #8]
 8012e36:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012e38:	200a      	movs	r0, #10
 8012e3a:	f7f8 fdf9 	bl	800ba30 <memp_malloc>
 8012e3e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8012e40:	693b      	ldr	r3, [r7, #16]
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d109      	bne.n	8012e5a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8012e46:	693b      	ldr	r3, [r7, #16]
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d151      	bne.n	8012ef0 <sys_timeout_abs+0xc4>
 8012e4c:	4b2a      	ldr	r3, [pc, #168]	; (8012ef8 <sys_timeout_abs+0xcc>)
 8012e4e:	22be      	movs	r2, #190	; 0xbe
 8012e50:	492a      	ldr	r1, [pc, #168]	; (8012efc <sys_timeout_abs+0xd0>)
 8012e52:	482b      	ldr	r0, [pc, #172]	; (8012f00 <sys_timeout_abs+0xd4>)
 8012e54:	f005 f99c 	bl	8018190 <iprintf>
    return;
 8012e58:	e04a      	b.n	8012ef0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8012e5a:	693b      	ldr	r3, [r7, #16]
 8012e5c:	2200      	movs	r2, #0
 8012e5e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012e60:	693b      	ldr	r3, [r7, #16]
 8012e62:	68ba      	ldr	r2, [r7, #8]
 8012e64:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8012e66:	693b      	ldr	r3, [r7, #16]
 8012e68:	687a      	ldr	r2, [r7, #4]
 8012e6a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8012e6c:	693b      	ldr	r3, [r7, #16]
 8012e6e:	68fa      	ldr	r2, [r7, #12]
 8012e70:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8012e72:	4b24      	ldr	r3, [pc, #144]	; (8012f04 <sys_timeout_abs+0xd8>)
 8012e74:	681b      	ldr	r3, [r3, #0]
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d103      	bne.n	8012e82 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8012e7a:	4a22      	ldr	r2, [pc, #136]	; (8012f04 <sys_timeout_abs+0xd8>)
 8012e7c:	693b      	ldr	r3, [r7, #16]
 8012e7e:	6013      	str	r3, [r2, #0]
    return;
 8012e80:	e037      	b.n	8012ef2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8012e82:	693b      	ldr	r3, [r7, #16]
 8012e84:	685a      	ldr	r2, [r3, #4]
 8012e86:	4b1f      	ldr	r3, [pc, #124]	; (8012f04 <sys_timeout_abs+0xd8>)
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	685b      	ldr	r3, [r3, #4]
 8012e8c:	1ad3      	subs	r3, r2, r3
 8012e8e:	0fdb      	lsrs	r3, r3, #31
 8012e90:	f003 0301 	and.w	r3, r3, #1
 8012e94:	b2db      	uxtb	r3, r3
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d007      	beq.n	8012eaa <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8012e9a:	4b1a      	ldr	r3, [pc, #104]	; (8012f04 <sys_timeout_abs+0xd8>)
 8012e9c:	681a      	ldr	r2, [r3, #0]
 8012e9e:	693b      	ldr	r3, [r7, #16]
 8012ea0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8012ea2:	4a18      	ldr	r2, [pc, #96]	; (8012f04 <sys_timeout_abs+0xd8>)
 8012ea4:	693b      	ldr	r3, [r7, #16]
 8012ea6:	6013      	str	r3, [r2, #0]
 8012ea8:	e023      	b.n	8012ef2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8012eaa:	4b16      	ldr	r3, [pc, #88]	; (8012f04 <sys_timeout_abs+0xd8>)
 8012eac:	681b      	ldr	r3, [r3, #0]
 8012eae:	617b      	str	r3, [r7, #20]
 8012eb0:	e01a      	b.n	8012ee8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8012eb2:	697b      	ldr	r3, [r7, #20]
 8012eb4:	681b      	ldr	r3, [r3, #0]
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d00b      	beq.n	8012ed2 <sys_timeout_abs+0xa6>
 8012eba:	693b      	ldr	r3, [r7, #16]
 8012ebc:	685a      	ldr	r2, [r3, #4]
 8012ebe:	697b      	ldr	r3, [r7, #20]
 8012ec0:	681b      	ldr	r3, [r3, #0]
 8012ec2:	685b      	ldr	r3, [r3, #4]
 8012ec4:	1ad3      	subs	r3, r2, r3
 8012ec6:	0fdb      	lsrs	r3, r3, #31
 8012ec8:	f003 0301 	and.w	r3, r3, #1
 8012ecc:	b2db      	uxtb	r3, r3
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d007      	beq.n	8012ee2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8012ed2:	697b      	ldr	r3, [r7, #20]
 8012ed4:	681a      	ldr	r2, [r3, #0]
 8012ed6:	693b      	ldr	r3, [r7, #16]
 8012ed8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8012eda:	697b      	ldr	r3, [r7, #20]
 8012edc:	693a      	ldr	r2, [r7, #16]
 8012ede:	601a      	str	r2, [r3, #0]
        break;
 8012ee0:	e007      	b.n	8012ef2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8012ee2:	697b      	ldr	r3, [r7, #20]
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	617b      	str	r3, [r7, #20]
 8012ee8:	697b      	ldr	r3, [r7, #20]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d1e1      	bne.n	8012eb2 <sys_timeout_abs+0x86>
 8012eee:	e000      	b.n	8012ef2 <sys_timeout_abs+0xc6>
    return;
 8012ef0:	bf00      	nop
      }
    }
  }
}
 8012ef2:	3718      	adds	r7, #24
 8012ef4:	46bd      	mov	sp, r7
 8012ef6:	bd80      	pop	{r7, pc}
 8012ef8:	0801c1b4 	.word	0x0801c1b4
 8012efc:	0801c1e8 	.word	0x0801c1e8
 8012f00:	0801c228 	.word	0x0801c228
 8012f04:	20008c8c 	.word	0x20008c8c

08012f08 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8012f08:	b580      	push	{r7, lr}
 8012f0a:	b086      	sub	sp, #24
 8012f0c:	af00      	add	r7, sp, #0
 8012f0e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8012f14:	697b      	ldr	r3, [r7, #20]
 8012f16:	685b      	ldr	r3, [r3, #4]
 8012f18:	4798      	blx	r3

  now = sys_now();
 8012f1a:	f7f1 ff39 	bl	8004d90 <sys_now>
 8012f1e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8012f20:	697b      	ldr	r3, [r7, #20]
 8012f22:	681a      	ldr	r2, [r3, #0]
 8012f24:	4b0f      	ldr	r3, [pc, #60]	; (8012f64 <lwip_cyclic_timer+0x5c>)
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	4413      	add	r3, r2
 8012f2a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8012f2c:	68fa      	ldr	r2, [r7, #12]
 8012f2e:	693b      	ldr	r3, [r7, #16]
 8012f30:	1ad3      	subs	r3, r2, r3
 8012f32:	0fdb      	lsrs	r3, r3, #31
 8012f34:	f003 0301 	and.w	r3, r3, #1
 8012f38:	b2db      	uxtb	r3, r3
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d009      	beq.n	8012f52 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8012f3e:	697b      	ldr	r3, [r7, #20]
 8012f40:	681a      	ldr	r2, [r3, #0]
 8012f42:	693b      	ldr	r3, [r7, #16]
 8012f44:	4413      	add	r3, r2
 8012f46:	687a      	ldr	r2, [r7, #4]
 8012f48:	4907      	ldr	r1, [pc, #28]	; (8012f68 <lwip_cyclic_timer+0x60>)
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	f7ff ff6e 	bl	8012e2c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8012f50:	e004      	b.n	8012f5c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8012f52:	687a      	ldr	r2, [r7, #4]
 8012f54:	4904      	ldr	r1, [pc, #16]	; (8012f68 <lwip_cyclic_timer+0x60>)
 8012f56:	68f8      	ldr	r0, [r7, #12]
 8012f58:	f7ff ff68 	bl	8012e2c <sys_timeout_abs>
}
 8012f5c:	bf00      	nop
 8012f5e:	3718      	adds	r7, #24
 8012f60:	46bd      	mov	sp, r7
 8012f62:	bd80      	pop	{r7, pc}
 8012f64:	20008c90 	.word	0x20008c90
 8012f68:	08012f09 	.word	0x08012f09

08012f6c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8012f6c:	b580      	push	{r7, lr}
 8012f6e:	b082      	sub	sp, #8
 8012f70:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012f72:	2301      	movs	r3, #1
 8012f74:	607b      	str	r3, [r7, #4]
 8012f76:	e00e      	b.n	8012f96 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8012f78:	4a0a      	ldr	r2, [pc, #40]	; (8012fa4 <sys_timeouts_init+0x38>)
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	00db      	lsls	r3, r3, #3
 8012f84:	4a07      	ldr	r2, [pc, #28]	; (8012fa4 <sys_timeouts_init+0x38>)
 8012f86:	4413      	add	r3, r2
 8012f88:	461a      	mov	r2, r3
 8012f8a:	4907      	ldr	r1, [pc, #28]	; (8012fa8 <sys_timeouts_init+0x3c>)
 8012f8c:	f000 f80e 	bl	8012fac <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	3301      	adds	r3, #1
 8012f94:	607b      	str	r3, [r7, #4]
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	2b04      	cmp	r3, #4
 8012f9a:	d9ed      	bls.n	8012f78 <sys_timeouts_init+0xc>
  }
}
 8012f9c:	bf00      	nop
 8012f9e:	3708      	adds	r7, #8
 8012fa0:	46bd      	mov	sp, r7
 8012fa2:	bd80      	pop	{r7, pc}
 8012fa4:	0802854c 	.word	0x0802854c
 8012fa8:	08012f09 	.word	0x08012f09

08012fac <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8012fac:	b580      	push	{r7, lr}
 8012fae:	b086      	sub	sp, #24
 8012fb0:	af00      	add	r7, sp, #0
 8012fb2:	60f8      	str	r0, [r7, #12]
 8012fb4:	60b9      	str	r1, [r7, #8]
 8012fb6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012fbe:	d306      	bcc.n	8012fce <sys_timeout+0x22>
 8012fc0:	4b0a      	ldr	r3, [pc, #40]	; (8012fec <sys_timeout+0x40>)
 8012fc2:	f240 1229 	movw	r2, #297	; 0x129
 8012fc6:	490a      	ldr	r1, [pc, #40]	; (8012ff0 <sys_timeout+0x44>)
 8012fc8:	480a      	ldr	r0, [pc, #40]	; (8012ff4 <sys_timeout+0x48>)
 8012fca:	f005 f8e1 	bl	8018190 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8012fce:	f7f1 fedf 	bl	8004d90 <sys_now>
 8012fd2:	4602      	mov	r2, r0
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	4413      	add	r3, r2
 8012fd8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8012fda:	687a      	ldr	r2, [r7, #4]
 8012fdc:	68b9      	ldr	r1, [r7, #8]
 8012fde:	6978      	ldr	r0, [r7, #20]
 8012fe0:	f7ff ff24 	bl	8012e2c <sys_timeout_abs>
#endif
}
 8012fe4:	bf00      	nop
 8012fe6:	3718      	adds	r7, #24
 8012fe8:	46bd      	mov	sp, r7
 8012fea:	bd80      	pop	{r7, pc}
 8012fec:	0801c1b4 	.word	0x0801c1b4
 8012ff0:	0801c250 	.word	0x0801c250
 8012ff4:	0801c228 	.word	0x0801c228

08012ff8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8012ff8:	b580      	push	{r7, lr}
 8012ffa:	b084      	sub	sp, #16
 8012ffc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8012ffe:	f7f1 fec7 	bl	8004d90 <sys_now>
 8013002:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8013004:	4b17      	ldr	r3, [pc, #92]	; (8013064 <sys_check_timeouts+0x6c>)
 8013006:	681b      	ldr	r3, [r3, #0]
 8013008:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801300a:	68bb      	ldr	r3, [r7, #8]
 801300c:	2b00      	cmp	r3, #0
 801300e:	d022      	beq.n	8013056 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013010:	68bb      	ldr	r3, [r7, #8]
 8013012:	685b      	ldr	r3, [r3, #4]
 8013014:	68fa      	ldr	r2, [r7, #12]
 8013016:	1ad3      	subs	r3, r2, r3
 8013018:	0fdb      	lsrs	r3, r3, #31
 801301a:	f003 0301 	and.w	r3, r3, #1
 801301e:	b2db      	uxtb	r3, r3
 8013020:	2b00      	cmp	r3, #0
 8013022:	d11a      	bne.n	801305a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013024:	68bb      	ldr	r3, [r7, #8]
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	4a0e      	ldr	r2, [pc, #56]	; (8013064 <sys_check_timeouts+0x6c>)
 801302a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801302c:	68bb      	ldr	r3, [r7, #8]
 801302e:	689b      	ldr	r3, [r3, #8]
 8013030:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8013032:	68bb      	ldr	r3, [r7, #8]
 8013034:	68db      	ldr	r3, [r3, #12]
 8013036:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8013038:	68bb      	ldr	r3, [r7, #8]
 801303a:	685b      	ldr	r3, [r3, #4]
 801303c:	4a0a      	ldr	r2, [pc, #40]	; (8013068 <sys_check_timeouts+0x70>)
 801303e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8013040:	68b9      	ldr	r1, [r7, #8]
 8013042:	200a      	movs	r0, #10
 8013044:	f7f8 fd46 	bl	800bad4 <memp_free>
    if (handler != NULL) {
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	2b00      	cmp	r3, #0
 801304c:	d0da      	beq.n	8013004 <sys_check_timeouts+0xc>
      handler(arg);
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	6838      	ldr	r0, [r7, #0]
 8013052:	4798      	blx	r3
  do {
 8013054:	e7d6      	b.n	8013004 <sys_check_timeouts+0xc>
      return;
 8013056:	bf00      	nop
 8013058:	e000      	b.n	801305c <sys_check_timeouts+0x64>
      return;
 801305a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801305c:	3710      	adds	r7, #16
 801305e:	46bd      	mov	sp, r7
 8013060:	bd80      	pop	{r7, pc}
 8013062:	bf00      	nop
 8013064:	20008c8c 	.word	0x20008c8c
 8013068:	20008c90 	.word	0x20008c90

0801306c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801306c:	b580      	push	{r7, lr}
 801306e:	b082      	sub	sp, #8
 8013070:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8013072:	4b16      	ldr	r3, [pc, #88]	; (80130cc <sys_timeouts_sleeptime+0x60>)
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	2b00      	cmp	r3, #0
 8013078:	d102      	bne.n	8013080 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801307a:	f04f 33ff 	mov.w	r3, #4294967295
 801307e:	e020      	b.n	80130c2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8013080:	f7f1 fe86 	bl	8004d90 <sys_now>
 8013084:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8013086:	4b11      	ldr	r3, [pc, #68]	; (80130cc <sys_timeouts_sleeptime+0x60>)
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	685a      	ldr	r2, [r3, #4]
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	1ad3      	subs	r3, r2, r3
 8013090:	0fdb      	lsrs	r3, r3, #31
 8013092:	f003 0301 	and.w	r3, r3, #1
 8013096:	b2db      	uxtb	r3, r3
 8013098:	2b00      	cmp	r3, #0
 801309a:	d001      	beq.n	80130a0 <sys_timeouts_sleeptime+0x34>
    return 0;
 801309c:	2300      	movs	r3, #0
 801309e:	e010      	b.n	80130c2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80130a0:	4b0a      	ldr	r3, [pc, #40]	; (80130cc <sys_timeouts_sleeptime+0x60>)
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	685a      	ldr	r2, [r3, #4]
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	1ad3      	subs	r3, r2, r3
 80130aa:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80130ac:	683b      	ldr	r3, [r7, #0]
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	da06      	bge.n	80130c0 <sys_timeouts_sleeptime+0x54>
 80130b2:	4b07      	ldr	r3, [pc, #28]	; (80130d0 <sys_timeouts_sleeptime+0x64>)
 80130b4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80130b8:	4906      	ldr	r1, [pc, #24]	; (80130d4 <sys_timeouts_sleeptime+0x68>)
 80130ba:	4807      	ldr	r0, [pc, #28]	; (80130d8 <sys_timeouts_sleeptime+0x6c>)
 80130bc:	f005 f868 	bl	8018190 <iprintf>
    return ret;
 80130c0:	683b      	ldr	r3, [r7, #0]
  }
}
 80130c2:	4618      	mov	r0, r3
 80130c4:	3708      	adds	r7, #8
 80130c6:	46bd      	mov	sp, r7
 80130c8:	bd80      	pop	{r7, pc}
 80130ca:	bf00      	nop
 80130cc:	20008c8c 	.word	0x20008c8c
 80130d0:	0801c1b4 	.word	0x0801c1b4
 80130d4:	0801c288 	.word	0x0801c288
 80130d8:	0801c228 	.word	0x0801c228

080130dc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80130dc:	b580      	push	{r7, lr}
 80130de:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80130e0:	f005 f86e 	bl	80181c0 <rand>
 80130e4:	4603      	mov	r3, r0
 80130e6:	b29b      	uxth	r3, r3
 80130e8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80130ec:	b29b      	uxth	r3, r3
 80130ee:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80130f2:	b29a      	uxth	r2, r3
 80130f4:	4b01      	ldr	r3, [pc, #4]	; (80130fc <udp_init+0x20>)
 80130f6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80130f8:	bf00      	nop
 80130fa:	bd80      	pop	{r7, pc}
 80130fc:	20000018 	.word	0x20000018

08013100 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8013100:	b480      	push	{r7}
 8013102:	b083      	sub	sp, #12
 8013104:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8013106:	2300      	movs	r3, #0
 8013108:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801310a:	4b17      	ldr	r3, [pc, #92]	; (8013168 <udp_new_port+0x68>)
 801310c:	881b      	ldrh	r3, [r3, #0]
 801310e:	1c5a      	adds	r2, r3, #1
 8013110:	b291      	uxth	r1, r2
 8013112:	4a15      	ldr	r2, [pc, #84]	; (8013168 <udp_new_port+0x68>)
 8013114:	8011      	strh	r1, [r2, #0]
 8013116:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801311a:	4293      	cmp	r3, r2
 801311c:	d103      	bne.n	8013126 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801311e:	4b12      	ldr	r3, [pc, #72]	; (8013168 <udp_new_port+0x68>)
 8013120:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8013124:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013126:	4b11      	ldr	r3, [pc, #68]	; (801316c <udp_new_port+0x6c>)
 8013128:	681b      	ldr	r3, [r3, #0]
 801312a:	603b      	str	r3, [r7, #0]
 801312c:	e011      	b.n	8013152 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801312e:	683b      	ldr	r3, [r7, #0]
 8013130:	8a5a      	ldrh	r2, [r3, #18]
 8013132:	4b0d      	ldr	r3, [pc, #52]	; (8013168 <udp_new_port+0x68>)
 8013134:	881b      	ldrh	r3, [r3, #0]
 8013136:	429a      	cmp	r2, r3
 8013138:	d108      	bne.n	801314c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801313a:	88fb      	ldrh	r3, [r7, #6]
 801313c:	3301      	adds	r3, #1
 801313e:	80fb      	strh	r3, [r7, #6]
 8013140:	88fb      	ldrh	r3, [r7, #6]
 8013142:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013146:	d3e0      	bcc.n	801310a <udp_new_port+0xa>
        return 0;
 8013148:	2300      	movs	r3, #0
 801314a:	e007      	b.n	801315c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801314c:	683b      	ldr	r3, [r7, #0]
 801314e:	68db      	ldr	r3, [r3, #12]
 8013150:	603b      	str	r3, [r7, #0]
 8013152:	683b      	ldr	r3, [r7, #0]
 8013154:	2b00      	cmp	r3, #0
 8013156:	d1ea      	bne.n	801312e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8013158:	4b03      	ldr	r3, [pc, #12]	; (8013168 <udp_new_port+0x68>)
 801315a:	881b      	ldrh	r3, [r3, #0]
}
 801315c:	4618      	mov	r0, r3
 801315e:	370c      	adds	r7, #12
 8013160:	46bd      	mov	sp, r7
 8013162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013166:	4770      	bx	lr
 8013168:	20000018 	.word	0x20000018
 801316c:	2000faf0 	.word	0x2000faf0

08013170 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8013170:	b580      	push	{r7, lr}
 8013172:	b084      	sub	sp, #16
 8013174:	af00      	add	r7, sp, #0
 8013176:	60f8      	str	r0, [r7, #12]
 8013178:	60b9      	str	r1, [r7, #8]
 801317a:	4613      	mov	r3, r2
 801317c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	2b00      	cmp	r3, #0
 8013182:	d105      	bne.n	8013190 <udp_input_local_match+0x20>
 8013184:	4b27      	ldr	r3, [pc, #156]	; (8013224 <udp_input_local_match+0xb4>)
 8013186:	2287      	movs	r2, #135	; 0x87
 8013188:	4927      	ldr	r1, [pc, #156]	; (8013228 <udp_input_local_match+0xb8>)
 801318a:	4828      	ldr	r0, [pc, #160]	; (801322c <udp_input_local_match+0xbc>)
 801318c:	f005 f800 	bl	8018190 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013190:	68bb      	ldr	r3, [r7, #8]
 8013192:	2b00      	cmp	r3, #0
 8013194:	d105      	bne.n	80131a2 <udp_input_local_match+0x32>
 8013196:	4b23      	ldr	r3, [pc, #140]	; (8013224 <udp_input_local_match+0xb4>)
 8013198:	2288      	movs	r2, #136	; 0x88
 801319a:	4925      	ldr	r1, [pc, #148]	; (8013230 <udp_input_local_match+0xc0>)
 801319c:	4823      	ldr	r0, [pc, #140]	; (801322c <udp_input_local_match+0xbc>)
 801319e:	f004 fff7 	bl	8018190 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	7a1b      	ldrb	r3, [r3, #8]
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d00b      	beq.n	80131c2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	7a1a      	ldrb	r2, [r3, #8]
 80131ae:	4b21      	ldr	r3, [pc, #132]	; (8013234 <udp_input_local_match+0xc4>)
 80131b0:	685b      	ldr	r3, [r3, #4]
 80131b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80131b6:	3301      	adds	r3, #1
 80131b8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80131ba:	429a      	cmp	r2, r3
 80131bc:	d001      	beq.n	80131c2 <udp_input_local_match+0x52>
    return 0;
 80131be:	2300      	movs	r3, #0
 80131c0:	e02b      	b.n	801321a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80131c2:	79fb      	ldrb	r3, [r7, #7]
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d018      	beq.n	80131fa <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d013      	beq.n	80131f6 <udp_input_local_match+0x86>
 80131ce:	68fb      	ldr	r3, [r7, #12]
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d00f      	beq.n	80131f6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80131d6:	4b17      	ldr	r3, [pc, #92]	; (8013234 <udp_input_local_match+0xc4>)
 80131d8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80131da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131de:	d00a      	beq.n	80131f6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80131e0:	68fb      	ldr	r3, [r7, #12]
 80131e2:	681a      	ldr	r2, [r3, #0]
 80131e4:	4b13      	ldr	r3, [pc, #76]	; (8013234 <udp_input_local_match+0xc4>)
 80131e6:	695b      	ldr	r3, [r3, #20]
 80131e8:	405a      	eors	r2, r3
 80131ea:	68bb      	ldr	r3, [r7, #8]
 80131ec:	3308      	adds	r3, #8
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d110      	bne.n	8013218 <udp_input_local_match+0xa8>
          return 1;
 80131f6:	2301      	movs	r3, #1
 80131f8:	e00f      	b.n	801321a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d009      	beq.n	8013214 <udp_input_local_match+0xa4>
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	681b      	ldr	r3, [r3, #0]
 8013204:	2b00      	cmp	r3, #0
 8013206:	d005      	beq.n	8013214 <udp_input_local_match+0xa4>
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	681a      	ldr	r2, [r3, #0]
 801320c:	4b09      	ldr	r3, [pc, #36]	; (8013234 <udp_input_local_match+0xc4>)
 801320e:	695b      	ldr	r3, [r3, #20]
 8013210:	429a      	cmp	r2, r3
 8013212:	d101      	bne.n	8013218 <udp_input_local_match+0xa8>
        return 1;
 8013214:	2301      	movs	r3, #1
 8013216:	e000      	b.n	801321a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013218:	2300      	movs	r3, #0
}
 801321a:	4618      	mov	r0, r3
 801321c:	3710      	adds	r7, #16
 801321e:	46bd      	mov	sp, r7
 8013220:	bd80      	pop	{r7, pc}
 8013222:	bf00      	nop
 8013224:	0801c29c 	.word	0x0801c29c
 8013228:	0801c2cc 	.word	0x0801c2cc
 801322c:	0801c2f0 	.word	0x0801c2f0
 8013230:	0801c318 	.word	0x0801c318
 8013234:	2000c3a4 	.word	0x2000c3a4

08013238 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013238:	b590      	push	{r4, r7, lr}
 801323a:	b08d      	sub	sp, #52	; 0x34
 801323c:	af02      	add	r7, sp, #8
 801323e:	6078      	str	r0, [r7, #4]
 8013240:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013242:	2300      	movs	r3, #0
 8013244:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	2b00      	cmp	r3, #0
 801324a:	d105      	bne.n	8013258 <udp_input+0x20>
 801324c:	4b7c      	ldr	r3, [pc, #496]	; (8013440 <udp_input+0x208>)
 801324e:	22cf      	movs	r2, #207	; 0xcf
 8013250:	497c      	ldr	r1, [pc, #496]	; (8013444 <udp_input+0x20c>)
 8013252:	487d      	ldr	r0, [pc, #500]	; (8013448 <udp_input+0x210>)
 8013254:	f004 ff9c 	bl	8018190 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013258:	683b      	ldr	r3, [r7, #0]
 801325a:	2b00      	cmp	r3, #0
 801325c:	d105      	bne.n	801326a <udp_input+0x32>
 801325e:	4b78      	ldr	r3, [pc, #480]	; (8013440 <udp_input+0x208>)
 8013260:	22d0      	movs	r2, #208	; 0xd0
 8013262:	497a      	ldr	r1, [pc, #488]	; (801344c <udp_input+0x214>)
 8013264:	4878      	ldr	r0, [pc, #480]	; (8013448 <udp_input+0x210>)
 8013266:	f004 ff93 	bl	8018190 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	895b      	ldrh	r3, [r3, #10]
 801326e:	2b07      	cmp	r3, #7
 8013270:	d803      	bhi.n	801327a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013272:	6878      	ldr	r0, [r7, #4]
 8013274:	f7f9 fa5c 	bl	800c730 <pbuf_free>
    goto end;
 8013278:	e0de      	b.n	8013438 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	685b      	ldr	r3, [r3, #4]
 801327e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013280:	4b73      	ldr	r3, [pc, #460]	; (8013450 <udp_input+0x218>)
 8013282:	695a      	ldr	r2, [r3, #20]
 8013284:	4b72      	ldr	r3, [pc, #456]	; (8013450 <udp_input+0x218>)
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	4619      	mov	r1, r3
 801328a:	4610      	mov	r0, r2
 801328c:	f003 fdd2 	bl	8016e34 <ip4_addr_isbroadcast_u32>
 8013290:	4603      	mov	r3, r0
 8013292:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013294:	697b      	ldr	r3, [r7, #20]
 8013296:	881b      	ldrh	r3, [r3, #0]
 8013298:	b29b      	uxth	r3, r3
 801329a:	4618      	mov	r0, r3
 801329c:	f7f7 fedc 	bl	800b058 <lwip_htons>
 80132a0:	4603      	mov	r3, r0
 80132a2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80132a4:	697b      	ldr	r3, [r7, #20]
 80132a6:	885b      	ldrh	r3, [r3, #2]
 80132a8:	b29b      	uxth	r3, r3
 80132aa:	4618      	mov	r0, r3
 80132ac:	f7f7 fed4 	bl	800b058 <lwip_htons>
 80132b0:	4603      	mov	r3, r0
 80132b2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80132b4:	2300      	movs	r3, #0
 80132b6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80132b8:	2300      	movs	r3, #0
 80132ba:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80132bc:	2300      	movs	r3, #0
 80132be:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80132c0:	4b64      	ldr	r3, [pc, #400]	; (8013454 <udp_input+0x21c>)
 80132c2:	681b      	ldr	r3, [r3, #0]
 80132c4:	627b      	str	r3, [r7, #36]	; 0x24
 80132c6:	e054      	b.n	8013372 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80132c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132ca:	8a5b      	ldrh	r3, [r3, #18]
 80132cc:	89fa      	ldrh	r2, [r7, #14]
 80132ce:	429a      	cmp	r2, r3
 80132d0:	d14a      	bne.n	8013368 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80132d2:	7cfb      	ldrb	r3, [r7, #19]
 80132d4:	461a      	mov	r2, r3
 80132d6:	6839      	ldr	r1, [r7, #0]
 80132d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80132da:	f7ff ff49 	bl	8013170 <udp_input_local_match>
 80132de:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d041      	beq.n	8013368 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80132e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132e6:	7c1b      	ldrb	r3, [r3, #16]
 80132e8:	f003 0304 	and.w	r3, r3, #4
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d11d      	bne.n	801332c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80132f0:	69fb      	ldr	r3, [r7, #28]
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d102      	bne.n	80132fc <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80132f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132f8:	61fb      	str	r3, [r7, #28]
 80132fa:	e017      	b.n	801332c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80132fc:	7cfb      	ldrb	r3, [r7, #19]
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d014      	beq.n	801332c <udp_input+0xf4>
 8013302:	4b53      	ldr	r3, [pc, #332]	; (8013450 <udp_input+0x218>)
 8013304:	695b      	ldr	r3, [r3, #20]
 8013306:	f1b3 3fff 	cmp.w	r3, #4294967295
 801330a:	d10f      	bne.n	801332c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801330c:	69fb      	ldr	r3, [r7, #28]
 801330e:	681a      	ldr	r2, [r3, #0]
 8013310:	683b      	ldr	r3, [r7, #0]
 8013312:	3304      	adds	r3, #4
 8013314:	681b      	ldr	r3, [r3, #0]
 8013316:	429a      	cmp	r2, r3
 8013318:	d008      	beq.n	801332c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801331a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801331c:	681a      	ldr	r2, [r3, #0]
 801331e:	683b      	ldr	r3, [r7, #0]
 8013320:	3304      	adds	r3, #4
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	429a      	cmp	r2, r3
 8013326:	d101      	bne.n	801332c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801332a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801332c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801332e:	8a9b      	ldrh	r3, [r3, #20]
 8013330:	8a3a      	ldrh	r2, [r7, #16]
 8013332:	429a      	cmp	r2, r3
 8013334:	d118      	bne.n	8013368 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013338:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801333a:	2b00      	cmp	r3, #0
 801333c:	d005      	beq.n	801334a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801333e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013340:	685a      	ldr	r2, [r3, #4]
 8013342:	4b43      	ldr	r3, [pc, #268]	; (8013450 <udp_input+0x218>)
 8013344:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013346:	429a      	cmp	r2, r3
 8013348:	d10e      	bne.n	8013368 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801334a:	6a3b      	ldr	r3, [r7, #32]
 801334c:	2b00      	cmp	r3, #0
 801334e:	d014      	beq.n	801337a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013352:	68da      	ldr	r2, [r3, #12]
 8013354:	6a3b      	ldr	r3, [r7, #32]
 8013356:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013358:	4b3e      	ldr	r3, [pc, #248]	; (8013454 <udp_input+0x21c>)
 801335a:	681a      	ldr	r2, [r3, #0]
 801335c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801335e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013360:	4a3c      	ldr	r2, [pc, #240]	; (8013454 <udp_input+0x21c>)
 8013362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013364:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013366:	e008      	b.n	801337a <udp_input+0x142>
      }
    }

    prev = pcb;
 8013368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801336a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801336e:	68db      	ldr	r3, [r3, #12]
 8013370:	627b      	str	r3, [r7, #36]	; 0x24
 8013372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013374:	2b00      	cmp	r3, #0
 8013376:	d1a7      	bne.n	80132c8 <udp_input+0x90>
 8013378:	e000      	b.n	801337c <udp_input+0x144>
        break;
 801337a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801337e:	2b00      	cmp	r3, #0
 8013380:	d101      	bne.n	8013386 <udp_input+0x14e>
    pcb = uncon_pcb;
 8013382:	69fb      	ldr	r3, [r7, #28]
 8013384:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013388:	2b00      	cmp	r3, #0
 801338a:	d002      	beq.n	8013392 <udp_input+0x15a>
    for_us = 1;
 801338c:	2301      	movs	r3, #1
 801338e:	76fb      	strb	r3, [r7, #27]
 8013390:	e00a      	b.n	80133a8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013392:	683b      	ldr	r3, [r7, #0]
 8013394:	3304      	adds	r3, #4
 8013396:	681a      	ldr	r2, [r3, #0]
 8013398:	4b2d      	ldr	r3, [pc, #180]	; (8013450 <udp_input+0x218>)
 801339a:	695b      	ldr	r3, [r3, #20]
 801339c:	429a      	cmp	r2, r3
 801339e:	bf0c      	ite	eq
 80133a0:	2301      	moveq	r3, #1
 80133a2:	2300      	movne	r3, #0
 80133a4:	b2db      	uxtb	r3, r3
 80133a6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80133a8:	7efb      	ldrb	r3, [r7, #27]
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d041      	beq.n	8013432 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80133ae:	2108      	movs	r1, #8
 80133b0:	6878      	ldr	r0, [r7, #4]
 80133b2:	f7f9 f937 	bl	800c624 <pbuf_remove_header>
 80133b6:	4603      	mov	r3, r0
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d00a      	beq.n	80133d2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80133bc:	4b20      	ldr	r3, [pc, #128]	; (8013440 <udp_input+0x208>)
 80133be:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80133c2:	4925      	ldr	r1, [pc, #148]	; (8013458 <udp_input+0x220>)
 80133c4:	4820      	ldr	r0, [pc, #128]	; (8013448 <udp_input+0x210>)
 80133c6:	f004 fee3 	bl	8018190 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80133ca:	6878      	ldr	r0, [r7, #4]
 80133cc:	f7f9 f9b0 	bl	800c730 <pbuf_free>
      goto end;
 80133d0:	e032      	b.n	8013438 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80133d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d012      	beq.n	80133fe <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80133d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133da:	699b      	ldr	r3, [r3, #24]
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d00a      	beq.n	80133f6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80133e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133e2:	699c      	ldr	r4, [r3, #24]
 80133e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133e6:	69d8      	ldr	r0, [r3, #28]
 80133e8:	8a3b      	ldrh	r3, [r7, #16]
 80133ea:	9300      	str	r3, [sp, #0]
 80133ec:	4b1b      	ldr	r3, [pc, #108]	; (801345c <udp_input+0x224>)
 80133ee:	687a      	ldr	r2, [r7, #4]
 80133f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80133f2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80133f4:	e021      	b.n	801343a <udp_input+0x202>
        pbuf_free(p);
 80133f6:	6878      	ldr	r0, [r7, #4]
 80133f8:	f7f9 f99a 	bl	800c730 <pbuf_free>
        goto end;
 80133fc:	e01c      	b.n	8013438 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80133fe:	7cfb      	ldrb	r3, [r7, #19]
 8013400:	2b00      	cmp	r3, #0
 8013402:	d112      	bne.n	801342a <udp_input+0x1f2>
 8013404:	4b12      	ldr	r3, [pc, #72]	; (8013450 <udp_input+0x218>)
 8013406:	695b      	ldr	r3, [r3, #20]
 8013408:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801340c:	2be0      	cmp	r3, #224	; 0xe0
 801340e:	d00c      	beq.n	801342a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013410:	4b0f      	ldr	r3, [pc, #60]	; (8013450 <udp_input+0x218>)
 8013412:	899b      	ldrh	r3, [r3, #12]
 8013414:	3308      	adds	r3, #8
 8013416:	b29b      	uxth	r3, r3
 8013418:	b21b      	sxth	r3, r3
 801341a:	4619      	mov	r1, r3
 801341c:	6878      	ldr	r0, [r7, #4]
 801341e:	f7f9 f974 	bl	800c70a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013422:	2103      	movs	r1, #3
 8013424:	6878      	ldr	r0, [r7, #4]
 8013426:	f003 f9c9 	bl	80167bc <icmp_dest_unreach>
      pbuf_free(p);
 801342a:	6878      	ldr	r0, [r7, #4]
 801342c:	f7f9 f980 	bl	800c730 <pbuf_free>
  return;
 8013430:	e003      	b.n	801343a <udp_input+0x202>
    pbuf_free(p);
 8013432:	6878      	ldr	r0, [r7, #4]
 8013434:	f7f9 f97c 	bl	800c730 <pbuf_free>
  return;
 8013438:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801343a:	372c      	adds	r7, #44	; 0x2c
 801343c:	46bd      	mov	sp, r7
 801343e:	bd90      	pop	{r4, r7, pc}
 8013440:	0801c29c 	.word	0x0801c29c
 8013444:	0801c340 	.word	0x0801c340
 8013448:	0801c2f0 	.word	0x0801c2f0
 801344c:	0801c358 	.word	0x0801c358
 8013450:	2000c3a4 	.word	0x2000c3a4
 8013454:	2000faf0 	.word	0x2000faf0
 8013458:	0801c374 	.word	0x0801c374
 801345c:	2000c3b4 	.word	0x2000c3b4

08013460 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8013460:	b580      	push	{r7, lr}
 8013462:	b088      	sub	sp, #32
 8013464:	af02      	add	r7, sp, #8
 8013466:	60f8      	str	r0, [r7, #12]
 8013468:	60b9      	str	r1, [r7, #8]
 801346a:	607a      	str	r2, [r7, #4]
 801346c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	2b00      	cmp	r3, #0
 8013472:	d109      	bne.n	8013488 <udp_sendto_if+0x28>
 8013474:	4b2e      	ldr	r3, [pc, #184]	; (8013530 <udp_sendto_if+0xd0>)
 8013476:	f44f 7220 	mov.w	r2, #640	; 0x280
 801347a:	492e      	ldr	r1, [pc, #184]	; (8013534 <udp_sendto_if+0xd4>)
 801347c:	482e      	ldr	r0, [pc, #184]	; (8013538 <udp_sendto_if+0xd8>)
 801347e:	f004 fe87 	bl	8018190 <iprintf>
 8013482:	f06f 030f 	mvn.w	r3, #15
 8013486:	e04f      	b.n	8013528 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8013488:	68bb      	ldr	r3, [r7, #8]
 801348a:	2b00      	cmp	r3, #0
 801348c:	d109      	bne.n	80134a2 <udp_sendto_if+0x42>
 801348e:	4b28      	ldr	r3, [pc, #160]	; (8013530 <udp_sendto_if+0xd0>)
 8013490:	f240 2281 	movw	r2, #641	; 0x281
 8013494:	4929      	ldr	r1, [pc, #164]	; (801353c <udp_sendto_if+0xdc>)
 8013496:	4828      	ldr	r0, [pc, #160]	; (8013538 <udp_sendto_if+0xd8>)
 8013498:	f004 fe7a 	bl	8018190 <iprintf>
 801349c:	f06f 030f 	mvn.w	r3, #15
 80134a0:	e042      	b.n	8013528 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d109      	bne.n	80134bc <udp_sendto_if+0x5c>
 80134a8:	4b21      	ldr	r3, [pc, #132]	; (8013530 <udp_sendto_if+0xd0>)
 80134aa:	f240 2282 	movw	r2, #642	; 0x282
 80134ae:	4924      	ldr	r1, [pc, #144]	; (8013540 <udp_sendto_if+0xe0>)
 80134b0:	4821      	ldr	r0, [pc, #132]	; (8013538 <udp_sendto_if+0xd8>)
 80134b2:	f004 fe6d 	bl	8018190 <iprintf>
 80134b6:	f06f 030f 	mvn.w	r3, #15
 80134ba:	e035      	b.n	8013528 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80134bc:	6a3b      	ldr	r3, [r7, #32]
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d109      	bne.n	80134d6 <udp_sendto_if+0x76>
 80134c2:	4b1b      	ldr	r3, [pc, #108]	; (8013530 <udp_sendto_if+0xd0>)
 80134c4:	f240 2283 	movw	r2, #643	; 0x283
 80134c8:	491e      	ldr	r1, [pc, #120]	; (8013544 <udp_sendto_if+0xe4>)
 80134ca:	481b      	ldr	r0, [pc, #108]	; (8013538 <udp_sendto_if+0xd8>)
 80134cc:	f004 fe60 	bl	8018190 <iprintf>
 80134d0:	f06f 030f 	mvn.w	r3, #15
 80134d4:	e028      	b.n	8013528 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80134d6:	68fb      	ldr	r3, [r7, #12]
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d009      	beq.n	80134f0 <udp_sendto_if+0x90>
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d005      	beq.n	80134f0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	681b      	ldr	r3, [r3, #0]
 80134e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80134ec:	2be0      	cmp	r3, #224	; 0xe0
 80134ee:	d103      	bne.n	80134f8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80134f0:	6a3b      	ldr	r3, [r7, #32]
 80134f2:	3304      	adds	r3, #4
 80134f4:	617b      	str	r3, [r7, #20]
 80134f6:	e00b      	b.n	8013510 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	681a      	ldr	r2, [r3, #0]
 80134fc:	6a3b      	ldr	r3, [r7, #32]
 80134fe:	3304      	adds	r3, #4
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	429a      	cmp	r2, r3
 8013504:	d002      	beq.n	801350c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8013506:	f06f 0303 	mvn.w	r3, #3
 801350a:	e00d      	b.n	8013528 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8013510:	887a      	ldrh	r2, [r7, #2]
 8013512:	697b      	ldr	r3, [r7, #20]
 8013514:	9301      	str	r3, [sp, #4]
 8013516:	6a3b      	ldr	r3, [r7, #32]
 8013518:	9300      	str	r3, [sp, #0]
 801351a:	4613      	mov	r3, r2
 801351c:	687a      	ldr	r2, [r7, #4]
 801351e:	68b9      	ldr	r1, [r7, #8]
 8013520:	68f8      	ldr	r0, [r7, #12]
 8013522:	f000 f811 	bl	8013548 <udp_sendto_if_src>
 8013526:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8013528:	4618      	mov	r0, r3
 801352a:	3718      	adds	r7, #24
 801352c:	46bd      	mov	sp, r7
 801352e:	bd80      	pop	{r7, pc}
 8013530:	0801c29c 	.word	0x0801c29c
 8013534:	0801c410 	.word	0x0801c410
 8013538:	0801c2f0 	.word	0x0801c2f0
 801353c:	0801c42c 	.word	0x0801c42c
 8013540:	0801c448 	.word	0x0801c448
 8013544:	0801c468 	.word	0x0801c468

08013548 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8013548:	b580      	push	{r7, lr}
 801354a:	b08c      	sub	sp, #48	; 0x30
 801354c:	af04      	add	r7, sp, #16
 801354e:	60f8      	str	r0, [r7, #12]
 8013550:	60b9      	str	r1, [r7, #8]
 8013552:	607a      	str	r2, [r7, #4]
 8013554:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	2b00      	cmp	r3, #0
 801355a:	d109      	bne.n	8013570 <udp_sendto_if_src+0x28>
 801355c:	4b65      	ldr	r3, [pc, #404]	; (80136f4 <udp_sendto_if_src+0x1ac>)
 801355e:	f240 22d1 	movw	r2, #721	; 0x2d1
 8013562:	4965      	ldr	r1, [pc, #404]	; (80136f8 <udp_sendto_if_src+0x1b0>)
 8013564:	4865      	ldr	r0, [pc, #404]	; (80136fc <udp_sendto_if_src+0x1b4>)
 8013566:	f004 fe13 	bl	8018190 <iprintf>
 801356a:	f06f 030f 	mvn.w	r3, #15
 801356e:	e0bc      	b.n	80136ea <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8013570:	68bb      	ldr	r3, [r7, #8]
 8013572:	2b00      	cmp	r3, #0
 8013574:	d109      	bne.n	801358a <udp_sendto_if_src+0x42>
 8013576:	4b5f      	ldr	r3, [pc, #380]	; (80136f4 <udp_sendto_if_src+0x1ac>)
 8013578:	f240 22d2 	movw	r2, #722	; 0x2d2
 801357c:	4960      	ldr	r1, [pc, #384]	; (8013700 <udp_sendto_if_src+0x1b8>)
 801357e:	485f      	ldr	r0, [pc, #380]	; (80136fc <udp_sendto_if_src+0x1b4>)
 8013580:	f004 fe06 	bl	8018190 <iprintf>
 8013584:	f06f 030f 	mvn.w	r3, #15
 8013588:	e0af      	b.n	80136ea <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	2b00      	cmp	r3, #0
 801358e:	d109      	bne.n	80135a4 <udp_sendto_if_src+0x5c>
 8013590:	4b58      	ldr	r3, [pc, #352]	; (80136f4 <udp_sendto_if_src+0x1ac>)
 8013592:	f240 22d3 	movw	r2, #723	; 0x2d3
 8013596:	495b      	ldr	r1, [pc, #364]	; (8013704 <udp_sendto_if_src+0x1bc>)
 8013598:	4858      	ldr	r0, [pc, #352]	; (80136fc <udp_sendto_if_src+0x1b4>)
 801359a:	f004 fdf9 	bl	8018190 <iprintf>
 801359e:	f06f 030f 	mvn.w	r3, #15
 80135a2:	e0a2      	b.n	80136ea <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80135a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d109      	bne.n	80135be <udp_sendto_if_src+0x76>
 80135aa:	4b52      	ldr	r3, [pc, #328]	; (80136f4 <udp_sendto_if_src+0x1ac>)
 80135ac:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80135b0:	4955      	ldr	r1, [pc, #340]	; (8013708 <udp_sendto_if_src+0x1c0>)
 80135b2:	4852      	ldr	r0, [pc, #328]	; (80136fc <udp_sendto_if_src+0x1b4>)
 80135b4:	f004 fdec 	bl	8018190 <iprintf>
 80135b8:	f06f 030f 	mvn.w	r3, #15
 80135bc:	e095      	b.n	80136ea <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80135be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d109      	bne.n	80135d8 <udp_sendto_if_src+0x90>
 80135c4:	4b4b      	ldr	r3, [pc, #300]	; (80136f4 <udp_sendto_if_src+0x1ac>)
 80135c6:	f240 22d5 	movw	r2, #725	; 0x2d5
 80135ca:	4950      	ldr	r1, [pc, #320]	; (801370c <udp_sendto_if_src+0x1c4>)
 80135cc:	484b      	ldr	r0, [pc, #300]	; (80136fc <udp_sendto_if_src+0x1b4>)
 80135ce:	f004 fddf 	bl	8018190 <iprintf>
 80135d2:	f06f 030f 	mvn.w	r3, #15
 80135d6:	e088      	b.n	80136ea <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	8a5b      	ldrh	r3, [r3, #18]
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d10f      	bne.n	8013600 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80135e0:	68f9      	ldr	r1, [r7, #12]
 80135e2:	68fb      	ldr	r3, [r7, #12]
 80135e4:	8a5b      	ldrh	r3, [r3, #18]
 80135e6:	461a      	mov	r2, r3
 80135e8:	68f8      	ldr	r0, [r7, #12]
 80135ea:	f000 f893 	bl	8013714 <udp_bind>
 80135ee:	4603      	mov	r3, r0
 80135f0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80135f2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d002      	beq.n	8013600 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80135fa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80135fe:	e074      	b.n	80136ea <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8013600:	68bb      	ldr	r3, [r7, #8]
 8013602:	891b      	ldrh	r3, [r3, #8]
 8013604:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8013608:	4293      	cmp	r3, r2
 801360a:	d902      	bls.n	8013612 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801360c:	f04f 33ff 	mov.w	r3, #4294967295
 8013610:	e06b      	b.n	80136ea <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8013612:	2108      	movs	r1, #8
 8013614:	68b8      	ldr	r0, [r7, #8]
 8013616:	f7f8 fff5 	bl	800c604 <pbuf_add_header>
 801361a:	4603      	mov	r3, r0
 801361c:	2b00      	cmp	r3, #0
 801361e:	d015      	beq.n	801364c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8013620:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013624:	2108      	movs	r1, #8
 8013626:	2022      	movs	r0, #34	; 0x22
 8013628:	f7f8 fda2 	bl	800c170 <pbuf_alloc>
 801362c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801362e:	69fb      	ldr	r3, [r7, #28]
 8013630:	2b00      	cmp	r3, #0
 8013632:	d102      	bne.n	801363a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8013634:	f04f 33ff 	mov.w	r3, #4294967295
 8013638:	e057      	b.n	80136ea <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801363a:	68bb      	ldr	r3, [r7, #8]
 801363c:	891b      	ldrh	r3, [r3, #8]
 801363e:	2b00      	cmp	r3, #0
 8013640:	d006      	beq.n	8013650 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8013642:	68b9      	ldr	r1, [r7, #8]
 8013644:	69f8      	ldr	r0, [r7, #28]
 8013646:	f7f9 f997 	bl	800c978 <pbuf_chain>
 801364a:	e001      	b.n	8013650 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801364c:	68bb      	ldr	r3, [r7, #8]
 801364e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8013650:	69fb      	ldr	r3, [r7, #28]
 8013652:	895b      	ldrh	r3, [r3, #10]
 8013654:	2b07      	cmp	r3, #7
 8013656:	d806      	bhi.n	8013666 <udp_sendto_if_src+0x11e>
 8013658:	4b26      	ldr	r3, [pc, #152]	; (80136f4 <udp_sendto_if_src+0x1ac>)
 801365a:	f240 320e 	movw	r2, #782	; 0x30e
 801365e:	492c      	ldr	r1, [pc, #176]	; (8013710 <udp_sendto_if_src+0x1c8>)
 8013660:	4826      	ldr	r0, [pc, #152]	; (80136fc <udp_sendto_if_src+0x1b4>)
 8013662:	f004 fd95 	bl	8018190 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8013666:	69fb      	ldr	r3, [r7, #28]
 8013668:	685b      	ldr	r3, [r3, #4]
 801366a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	8a5b      	ldrh	r3, [r3, #18]
 8013670:	4618      	mov	r0, r3
 8013672:	f7f7 fcf1 	bl	800b058 <lwip_htons>
 8013676:	4603      	mov	r3, r0
 8013678:	461a      	mov	r2, r3
 801367a:	697b      	ldr	r3, [r7, #20]
 801367c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801367e:	887b      	ldrh	r3, [r7, #2]
 8013680:	4618      	mov	r0, r3
 8013682:	f7f7 fce9 	bl	800b058 <lwip_htons>
 8013686:	4603      	mov	r3, r0
 8013688:	461a      	mov	r2, r3
 801368a:	697b      	ldr	r3, [r7, #20]
 801368c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801368e:	697b      	ldr	r3, [r7, #20]
 8013690:	2200      	movs	r2, #0
 8013692:	719a      	strb	r2, [r3, #6]
 8013694:	2200      	movs	r2, #0
 8013696:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8013698:	69fb      	ldr	r3, [r7, #28]
 801369a:	891b      	ldrh	r3, [r3, #8]
 801369c:	4618      	mov	r0, r3
 801369e:	f7f7 fcdb 	bl	800b058 <lwip_htons>
 80136a2:	4603      	mov	r3, r0
 80136a4:	461a      	mov	r2, r3
 80136a6:	697b      	ldr	r3, [r7, #20]
 80136a8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80136aa:	2311      	movs	r3, #17
 80136ac:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80136ae:	68fb      	ldr	r3, [r7, #12]
 80136b0:	7adb      	ldrb	r3, [r3, #11]
 80136b2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80136b4:	68fb      	ldr	r3, [r7, #12]
 80136b6:	7a9b      	ldrb	r3, [r3, #10]
 80136b8:	7cb9      	ldrb	r1, [r7, #18]
 80136ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80136bc:	9202      	str	r2, [sp, #8]
 80136be:	7cfa      	ldrb	r2, [r7, #19]
 80136c0:	9201      	str	r2, [sp, #4]
 80136c2:	9300      	str	r3, [sp, #0]
 80136c4:	460b      	mov	r3, r1
 80136c6:	687a      	ldr	r2, [r7, #4]
 80136c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80136ca:	69f8      	ldr	r0, [r7, #28]
 80136cc:	f003 fb04 	bl	8016cd8 <ip4_output_if_src>
 80136d0:	4603      	mov	r3, r0
 80136d2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80136d4:	69fa      	ldr	r2, [r7, #28]
 80136d6:	68bb      	ldr	r3, [r7, #8]
 80136d8:	429a      	cmp	r2, r3
 80136da:	d004      	beq.n	80136e6 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80136dc:	69f8      	ldr	r0, [r7, #28]
 80136de:	f7f9 f827 	bl	800c730 <pbuf_free>
    q = NULL;
 80136e2:	2300      	movs	r3, #0
 80136e4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80136e6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80136ea:	4618      	mov	r0, r3
 80136ec:	3720      	adds	r7, #32
 80136ee:	46bd      	mov	sp, r7
 80136f0:	bd80      	pop	{r7, pc}
 80136f2:	bf00      	nop
 80136f4:	0801c29c 	.word	0x0801c29c
 80136f8:	0801c488 	.word	0x0801c488
 80136fc:	0801c2f0 	.word	0x0801c2f0
 8013700:	0801c4a8 	.word	0x0801c4a8
 8013704:	0801c4c8 	.word	0x0801c4c8
 8013708:	0801c4ec 	.word	0x0801c4ec
 801370c:	0801c510 	.word	0x0801c510
 8013710:	0801c534 	.word	0x0801c534

08013714 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013714:	b580      	push	{r7, lr}
 8013716:	b086      	sub	sp, #24
 8013718:	af00      	add	r7, sp, #0
 801371a:	60f8      	str	r0, [r7, #12]
 801371c:	60b9      	str	r1, [r7, #8]
 801371e:	4613      	mov	r3, r2
 8013720:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013722:	68bb      	ldr	r3, [r7, #8]
 8013724:	2b00      	cmp	r3, #0
 8013726:	d101      	bne.n	801372c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013728:	4b39      	ldr	r3, [pc, #228]	; (8013810 <udp_bind+0xfc>)
 801372a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	2b00      	cmp	r3, #0
 8013730:	d109      	bne.n	8013746 <udp_bind+0x32>
 8013732:	4b38      	ldr	r3, [pc, #224]	; (8013814 <udp_bind+0x100>)
 8013734:	f240 32b7 	movw	r2, #951	; 0x3b7
 8013738:	4937      	ldr	r1, [pc, #220]	; (8013818 <udp_bind+0x104>)
 801373a:	4838      	ldr	r0, [pc, #224]	; (801381c <udp_bind+0x108>)
 801373c:	f004 fd28 	bl	8018190 <iprintf>
 8013740:	f06f 030f 	mvn.w	r3, #15
 8013744:	e060      	b.n	8013808 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8013746:	2300      	movs	r3, #0
 8013748:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801374a:	4b35      	ldr	r3, [pc, #212]	; (8013820 <udp_bind+0x10c>)
 801374c:	681b      	ldr	r3, [r3, #0]
 801374e:	617b      	str	r3, [r7, #20]
 8013750:	e009      	b.n	8013766 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8013752:	68fa      	ldr	r2, [r7, #12]
 8013754:	697b      	ldr	r3, [r7, #20]
 8013756:	429a      	cmp	r2, r3
 8013758:	d102      	bne.n	8013760 <udp_bind+0x4c>
      rebind = 1;
 801375a:	2301      	movs	r3, #1
 801375c:	74fb      	strb	r3, [r7, #19]
      break;
 801375e:	e005      	b.n	801376c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013760:	697b      	ldr	r3, [r7, #20]
 8013762:	68db      	ldr	r3, [r3, #12]
 8013764:	617b      	str	r3, [r7, #20]
 8013766:	697b      	ldr	r3, [r7, #20]
 8013768:	2b00      	cmp	r3, #0
 801376a:	d1f2      	bne.n	8013752 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801376c:	88fb      	ldrh	r3, [r7, #6]
 801376e:	2b00      	cmp	r3, #0
 8013770:	d109      	bne.n	8013786 <udp_bind+0x72>
    port = udp_new_port();
 8013772:	f7ff fcc5 	bl	8013100 <udp_new_port>
 8013776:	4603      	mov	r3, r0
 8013778:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801377a:	88fb      	ldrh	r3, [r7, #6]
 801377c:	2b00      	cmp	r3, #0
 801377e:	d12c      	bne.n	80137da <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8013780:	f06f 0307 	mvn.w	r3, #7
 8013784:	e040      	b.n	8013808 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013786:	4b26      	ldr	r3, [pc, #152]	; (8013820 <udp_bind+0x10c>)
 8013788:	681b      	ldr	r3, [r3, #0]
 801378a:	617b      	str	r3, [r7, #20]
 801378c:	e022      	b.n	80137d4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801378e:	68fa      	ldr	r2, [r7, #12]
 8013790:	697b      	ldr	r3, [r7, #20]
 8013792:	429a      	cmp	r2, r3
 8013794:	d01b      	beq.n	80137ce <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8013796:	697b      	ldr	r3, [r7, #20]
 8013798:	8a5b      	ldrh	r3, [r3, #18]
 801379a:	88fa      	ldrh	r2, [r7, #6]
 801379c:	429a      	cmp	r2, r3
 801379e:	d116      	bne.n	80137ce <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80137a0:	697b      	ldr	r3, [r7, #20]
 80137a2:	681a      	ldr	r2, [r3, #0]
 80137a4:	68bb      	ldr	r3, [r7, #8]
 80137a6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80137a8:	429a      	cmp	r2, r3
 80137aa:	d00d      	beq.n	80137c8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80137ac:	68bb      	ldr	r3, [r7, #8]
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d00a      	beq.n	80137c8 <udp_bind+0xb4>
 80137b2:	68bb      	ldr	r3, [r7, #8]
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d006      	beq.n	80137c8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80137ba:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d003      	beq.n	80137c8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80137c0:	697b      	ldr	r3, [r7, #20]
 80137c2:	681b      	ldr	r3, [r3, #0]
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d102      	bne.n	80137ce <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80137c8:	f06f 0307 	mvn.w	r3, #7
 80137cc:	e01c      	b.n	8013808 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80137ce:	697b      	ldr	r3, [r7, #20]
 80137d0:	68db      	ldr	r3, [r3, #12]
 80137d2:	617b      	str	r3, [r7, #20]
 80137d4:	697b      	ldr	r3, [r7, #20]
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d1d9      	bne.n	801378e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80137da:	68bb      	ldr	r3, [r7, #8]
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d002      	beq.n	80137e6 <udp_bind+0xd2>
 80137e0:	68bb      	ldr	r3, [r7, #8]
 80137e2:	681b      	ldr	r3, [r3, #0]
 80137e4:	e000      	b.n	80137e8 <udp_bind+0xd4>
 80137e6:	2300      	movs	r3, #0
 80137e8:	68fa      	ldr	r2, [r7, #12]
 80137ea:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80137ec:	68fb      	ldr	r3, [r7, #12]
 80137ee:	88fa      	ldrh	r2, [r7, #6]
 80137f0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80137f2:	7cfb      	ldrb	r3, [r7, #19]
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d106      	bne.n	8013806 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80137f8:	4b09      	ldr	r3, [pc, #36]	; (8013820 <udp_bind+0x10c>)
 80137fa:	681a      	ldr	r2, [r3, #0]
 80137fc:	68fb      	ldr	r3, [r7, #12]
 80137fe:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8013800:	4a07      	ldr	r2, [pc, #28]	; (8013820 <udp_bind+0x10c>)
 8013802:	68fb      	ldr	r3, [r7, #12]
 8013804:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8013806:	2300      	movs	r3, #0
}
 8013808:	4618      	mov	r0, r3
 801380a:	3718      	adds	r7, #24
 801380c:	46bd      	mov	sp, r7
 801380e:	bd80      	pop	{r7, pc}
 8013810:	08028574 	.word	0x08028574
 8013814:	0801c29c 	.word	0x0801c29c
 8013818:	0801c564 	.word	0x0801c564
 801381c:	0801c2f0 	.word	0x0801c2f0
 8013820:	2000faf0 	.word	0x2000faf0

08013824 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013824:	b580      	push	{r7, lr}
 8013826:	b086      	sub	sp, #24
 8013828:	af00      	add	r7, sp, #0
 801382a:	60f8      	str	r0, [r7, #12]
 801382c:	60b9      	str	r1, [r7, #8]
 801382e:	4613      	mov	r3, r2
 8013830:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8013832:	68fb      	ldr	r3, [r7, #12]
 8013834:	2b00      	cmp	r3, #0
 8013836:	d109      	bne.n	801384c <udp_connect+0x28>
 8013838:	4b2c      	ldr	r3, [pc, #176]	; (80138ec <udp_connect+0xc8>)
 801383a:	f240 4235 	movw	r2, #1077	; 0x435
 801383e:	492c      	ldr	r1, [pc, #176]	; (80138f0 <udp_connect+0xcc>)
 8013840:	482c      	ldr	r0, [pc, #176]	; (80138f4 <udp_connect+0xd0>)
 8013842:	f004 fca5 	bl	8018190 <iprintf>
 8013846:	f06f 030f 	mvn.w	r3, #15
 801384a:	e04b      	b.n	80138e4 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801384c:	68bb      	ldr	r3, [r7, #8]
 801384e:	2b00      	cmp	r3, #0
 8013850:	d109      	bne.n	8013866 <udp_connect+0x42>
 8013852:	4b26      	ldr	r3, [pc, #152]	; (80138ec <udp_connect+0xc8>)
 8013854:	f240 4236 	movw	r2, #1078	; 0x436
 8013858:	4927      	ldr	r1, [pc, #156]	; (80138f8 <udp_connect+0xd4>)
 801385a:	4826      	ldr	r0, [pc, #152]	; (80138f4 <udp_connect+0xd0>)
 801385c:	f004 fc98 	bl	8018190 <iprintf>
 8013860:	f06f 030f 	mvn.w	r3, #15
 8013864:	e03e      	b.n	80138e4 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	8a5b      	ldrh	r3, [r3, #18]
 801386a:	2b00      	cmp	r3, #0
 801386c:	d10f      	bne.n	801388e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801386e:	68f9      	ldr	r1, [r7, #12]
 8013870:	68fb      	ldr	r3, [r7, #12]
 8013872:	8a5b      	ldrh	r3, [r3, #18]
 8013874:	461a      	mov	r2, r3
 8013876:	68f8      	ldr	r0, [r7, #12]
 8013878:	f7ff ff4c 	bl	8013714 <udp_bind>
 801387c:	4603      	mov	r3, r0
 801387e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8013880:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013884:	2b00      	cmp	r3, #0
 8013886:	d002      	beq.n	801388e <udp_connect+0x6a>
      return err;
 8013888:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801388c:	e02a      	b.n	80138e4 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801388e:	68bb      	ldr	r3, [r7, #8]
 8013890:	2b00      	cmp	r3, #0
 8013892:	d002      	beq.n	801389a <udp_connect+0x76>
 8013894:	68bb      	ldr	r3, [r7, #8]
 8013896:	681b      	ldr	r3, [r3, #0]
 8013898:	e000      	b.n	801389c <udp_connect+0x78>
 801389a:	2300      	movs	r3, #0
 801389c:	68fa      	ldr	r2, [r7, #12]
 801389e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80138a0:	68fb      	ldr	r3, [r7, #12]
 80138a2:	88fa      	ldrh	r2, [r7, #6]
 80138a4:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80138a6:	68fb      	ldr	r3, [r7, #12]
 80138a8:	7c1b      	ldrb	r3, [r3, #16]
 80138aa:	f043 0304 	orr.w	r3, r3, #4
 80138ae:	b2da      	uxtb	r2, r3
 80138b0:	68fb      	ldr	r3, [r7, #12]
 80138b2:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80138b4:	4b11      	ldr	r3, [pc, #68]	; (80138fc <udp_connect+0xd8>)
 80138b6:	681b      	ldr	r3, [r3, #0]
 80138b8:	617b      	str	r3, [r7, #20]
 80138ba:	e008      	b.n	80138ce <udp_connect+0xaa>
    if (pcb == ipcb) {
 80138bc:	68fa      	ldr	r2, [r7, #12]
 80138be:	697b      	ldr	r3, [r7, #20]
 80138c0:	429a      	cmp	r2, r3
 80138c2:	d101      	bne.n	80138c8 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80138c4:	2300      	movs	r3, #0
 80138c6:	e00d      	b.n	80138e4 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80138c8:	697b      	ldr	r3, [r7, #20]
 80138ca:	68db      	ldr	r3, [r3, #12]
 80138cc:	617b      	str	r3, [r7, #20]
 80138ce:	697b      	ldr	r3, [r7, #20]
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d1f3      	bne.n	80138bc <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80138d4:	4b09      	ldr	r3, [pc, #36]	; (80138fc <udp_connect+0xd8>)
 80138d6:	681a      	ldr	r2, [r3, #0]
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80138dc:	4a07      	ldr	r2, [pc, #28]	; (80138fc <udp_connect+0xd8>)
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80138e2:	2300      	movs	r3, #0
}
 80138e4:	4618      	mov	r0, r3
 80138e6:	3718      	adds	r7, #24
 80138e8:	46bd      	mov	sp, r7
 80138ea:	bd80      	pop	{r7, pc}
 80138ec:	0801c29c 	.word	0x0801c29c
 80138f0:	0801c57c 	.word	0x0801c57c
 80138f4:	0801c2f0 	.word	0x0801c2f0
 80138f8:	0801c598 	.word	0x0801c598
 80138fc:	2000faf0 	.word	0x2000faf0

08013900 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8013900:	b580      	push	{r7, lr}
 8013902:	b084      	sub	sp, #16
 8013904:	af00      	add	r7, sp, #0
 8013906:	60f8      	str	r0, [r7, #12]
 8013908:	60b9      	str	r1, [r7, #8]
 801390a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801390c:	68fb      	ldr	r3, [r7, #12]
 801390e:	2b00      	cmp	r3, #0
 8013910:	d107      	bne.n	8013922 <udp_recv+0x22>
 8013912:	4b08      	ldr	r3, [pc, #32]	; (8013934 <udp_recv+0x34>)
 8013914:	f240 428a 	movw	r2, #1162	; 0x48a
 8013918:	4907      	ldr	r1, [pc, #28]	; (8013938 <udp_recv+0x38>)
 801391a:	4808      	ldr	r0, [pc, #32]	; (801393c <udp_recv+0x3c>)
 801391c:	f004 fc38 	bl	8018190 <iprintf>
 8013920:	e005      	b.n	801392e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	68ba      	ldr	r2, [r7, #8]
 8013926:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8013928:	68fb      	ldr	r3, [r7, #12]
 801392a:	687a      	ldr	r2, [r7, #4]
 801392c:	61da      	str	r2, [r3, #28]
}
 801392e:	3710      	adds	r7, #16
 8013930:	46bd      	mov	sp, r7
 8013932:	bd80      	pop	{r7, pc}
 8013934:	0801c29c 	.word	0x0801c29c
 8013938:	0801c5d0 	.word	0x0801c5d0
 801393c:	0801c2f0 	.word	0x0801c2f0

08013940 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8013940:	b580      	push	{r7, lr}
 8013942:	b084      	sub	sp, #16
 8013944:	af00      	add	r7, sp, #0
 8013946:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	2b00      	cmp	r3, #0
 801394c:	d107      	bne.n	801395e <udp_remove+0x1e>
 801394e:	4b19      	ldr	r3, [pc, #100]	; (80139b4 <udp_remove+0x74>)
 8013950:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8013954:	4918      	ldr	r1, [pc, #96]	; (80139b8 <udp_remove+0x78>)
 8013956:	4819      	ldr	r0, [pc, #100]	; (80139bc <udp_remove+0x7c>)
 8013958:	f004 fc1a 	bl	8018190 <iprintf>
 801395c:	e026      	b.n	80139ac <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801395e:	4b18      	ldr	r3, [pc, #96]	; (80139c0 <udp_remove+0x80>)
 8013960:	681b      	ldr	r3, [r3, #0]
 8013962:	687a      	ldr	r2, [r7, #4]
 8013964:	429a      	cmp	r2, r3
 8013966:	d105      	bne.n	8013974 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8013968:	4b15      	ldr	r3, [pc, #84]	; (80139c0 <udp_remove+0x80>)
 801396a:	681b      	ldr	r3, [r3, #0]
 801396c:	68db      	ldr	r3, [r3, #12]
 801396e:	4a14      	ldr	r2, [pc, #80]	; (80139c0 <udp_remove+0x80>)
 8013970:	6013      	str	r3, [r2, #0]
 8013972:	e017      	b.n	80139a4 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013974:	4b12      	ldr	r3, [pc, #72]	; (80139c0 <udp_remove+0x80>)
 8013976:	681b      	ldr	r3, [r3, #0]
 8013978:	60fb      	str	r3, [r7, #12]
 801397a:	e010      	b.n	801399e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	68db      	ldr	r3, [r3, #12]
 8013980:	2b00      	cmp	r3, #0
 8013982:	d009      	beq.n	8013998 <udp_remove+0x58>
 8013984:	68fb      	ldr	r3, [r7, #12]
 8013986:	68db      	ldr	r3, [r3, #12]
 8013988:	687a      	ldr	r2, [r7, #4]
 801398a:	429a      	cmp	r2, r3
 801398c:	d104      	bne.n	8013998 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	68da      	ldr	r2, [r3, #12]
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	60da      	str	r2, [r3, #12]
        break;
 8013996:	e005      	b.n	80139a4 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013998:	68fb      	ldr	r3, [r7, #12]
 801399a:	68db      	ldr	r3, [r3, #12]
 801399c:	60fb      	str	r3, [r7, #12]
 801399e:	68fb      	ldr	r3, [r7, #12]
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d1eb      	bne.n	801397c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80139a4:	6879      	ldr	r1, [r7, #4]
 80139a6:	2000      	movs	r0, #0
 80139a8:	f7f8 f894 	bl	800bad4 <memp_free>
}
 80139ac:	3710      	adds	r7, #16
 80139ae:	46bd      	mov	sp, r7
 80139b0:	bd80      	pop	{r7, pc}
 80139b2:	bf00      	nop
 80139b4:	0801c29c 	.word	0x0801c29c
 80139b8:	0801c5e8 	.word	0x0801c5e8
 80139bc:	0801c2f0 	.word	0x0801c2f0
 80139c0:	2000faf0 	.word	0x2000faf0

080139c4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80139c4:	b580      	push	{r7, lr}
 80139c6:	b082      	sub	sp, #8
 80139c8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80139ca:	2000      	movs	r0, #0
 80139cc:	f7f8 f830 	bl	800ba30 <memp_malloc>
 80139d0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d007      	beq.n	80139e8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80139d8:	2220      	movs	r2, #32
 80139da:	2100      	movs	r1, #0
 80139dc:	6878      	ldr	r0, [r7, #4]
 80139de:	f004 fbce 	bl	801817e <memset>
    pcb->ttl = UDP_TTL;
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	22ff      	movs	r2, #255	; 0xff
 80139e6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80139e8:	687b      	ldr	r3, [r7, #4]
}
 80139ea:	4618      	mov	r0, r3
 80139ec:	3708      	adds	r7, #8
 80139ee:	46bd      	mov	sp, r7
 80139f0:	bd80      	pop	{r7, pc}

080139f2 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80139f2:	b580      	push	{r7, lr}
 80139f4:	b084      	sub	sp, #16
 80139f6:	af00      	add	r7, sp, #0
 80139f8:	4603      	mov	r3, r0
 80139fa:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80139fc:	f7ff ffe2 	bl	80139c4 <udp_new>
 8013a00:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8013a02:	68fb      	ldr	r3, [r7, #12]
}
 8013a04:	4618      	mov	r0, r3
 8013a06:	3710      	adds	r7, #16
 8013a08:	46bd      	mov	sp, r7
 8013a0a:	bd80      	pop	{r7, pc}

08013a0c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013a0c:	b480      	push	{r7}
 8013a0e:	b085      	sub	sp, #20
 8013a10:	af00      	add	r7, sp, #0
 8013a12:	6078      	str	r0, [r7, #4]
 8013a14:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d01e      	beq.n	8013a5a <udp_netif_ip_addr_changed+0x4e>
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	681b      	ldr	r3, [r3, #0]
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d01a      	beq.n	8013a5a <udp_netif_ip_addr_changed+0x4e>
 8013a24:	683b      	ldr	r3, [r7, #0]
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d017      	beq.n	8013a5a <udp_netif_ip_addr_changed+0x4e>
 8013a2a:	683b      	ldr	r3, [r7, #0]
 8013a2c:	681b      	ldr	r3, [r3, #0]
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d013      	beq.n	8013a5a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013a32:	4b0d      	ldr	r3, [pc, #52]	; (8013a68 <udp_netif_ip_addr_changed+0x5c>)
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	60fb      	str	r3, [r7, #12]
 8013a38:	e00c      	b.n	8013a54 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	681a      	ldr	r2, [r3, #0]
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	681b      	ldr	r3, [r3, #0]
 8013a42:	429a      	cmp	r2, r3
 8013a44:	d103      	bne.n	8013a4e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8013a46:	683b      	ldr	r3, [r7, #0]
 8013a48:	681a      	ldr	r2, [r3, #0]
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	68db      	ldr	r3, [r3, #12]
 8013a52:	60fb      	str	r3, [r7, #12]
 8013a54:	68fb      	ldr	r3, [r7, #12]
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d1ef      	bne.n	8013a3a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8013a5a:	bf00      	nop
 8013a5c:	3714      	adds	r7, #20
 8013a5e:	46bd      	mov	sp, r7
 8013a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a64:	4770      	bx	lr
 8013a66:	bf00      	nop
 8013a68:	2000faf0 	.word	0x2000faf0

08013a6c <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8013a6c:	b580      	push	{r7, lr}
 8013a6e:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8013a70:	4b20      	ldr	r3, [pc, #128]	; (8013af4 <dhcp_inc_pcb_refcount+0x88>)
 8013a72:	781b      	ldrb	r3, [r3, #0]
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d133      	bne.n	8013ae0 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8013a78:	4b1f      	ldr	r3, [pc, #124]	; (8013af8 <dhcp_inc_pcb_refcount+0x8c>)
 8013a7a:	681b      	ldr	r3, [r3, #0]
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d005      	beq.n	8013a8c <dhcp_inc_pcb_refcount+0x20>
 8013a80:	4b1e      	ldr	r3, [pc, #120]	; (8013afc <dhcp_inc_pcb_refcount+0x90>)
 8013a82:	22e5      	movs	r2, #229	; 0xe5
 8013a84:	491e      	ldr	r1, [pc, #120]	; (8013b00 <dhcp_inc_pcb_refcount+0x94>)
 8013a86:	481f      	ldr	r0, [pc, #124]	; (8013b04 <dhcp_inc_pcb_refcount+0x98>)
 8013a88:	f004 fb82 	bl	8018190 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8013a8c:	f7ff ff9a 	bl	80139c4 <udp_new>
 8013a90:	4602      	mov	r2, r0
 8013a92:	4b19      	ldr	r3, [pc, #100]	; (8013af8 <dhcp_inc_pcb_refcount+0x8c>)
 8013a94:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 8013a96:	4b18      	ldr	r3, [pc, #96]	; (8013af8 <dhcp_inc_pcb_refcount+0x8c>)
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d102      	bne.n	8013aa4 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8013a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8013aa2:	e024      	b.n	8013aee <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8013aa4:	4b14      	ldr	r3, [pc, #80]	; (8013af8 <dhcp_inc_pcb_refcount+0x8c>)
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	7a5a      	ldrb	r2, [r3, #9]
 8013aaa:	4b13      	ldr	r3, [pc, #76]	; (8013af8 <dhcp_inc_pcb_refcount+0x8c>)
 8013aac:	681b      	ldr	r3, [r3, #0]
 8013aae:	f042 0220 	orr.w	r2, r2, #32
 8013ab2:	b2d2      	uxtb	r2, r2
 8013ab4:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8013ab6:	4b10      	ldr	r3, [pc, #64]	; (8013af8 <dhcp_inc_pcb_refcount+0x8c>)
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	2244      	movs	r2, #68	; 0x44
 8013abc:	4912      	ldr	r1, [pc, #72]	; (8013b08 <dhcp_inc_pcb_refcount+0x9c>)
 8013abe:	4618      	mov	r0, r3
 8013ac0:	f7ff fe28 	bl	8013714 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8013ac4:	4b0c      	ldr	r3, [pc, #48]	; (8013af8 <dhcp_inc_pcb_refcount+0x8c>)
 8013ac6:	681b      	ldr	r3, [r3, #0]
 8013ac8:	2243      	movs	r2, #67	; 0x43
 8013aca:	490f      	ldr	r1, [pc, #60]	; (8013b08 <dhcp_inc_pcb_refcount+0x9c>)
 8013acc:	4618      	mov	r0, r3
 8013ace:	f7ff fea9 	bl	8013824 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8013ad2:	4b09      	ldr	r3, [pc, #36]	; (8013af8 <dhcp_inc_pcb_refcount+0x8c>)
 8013ad4:	681b      	ldr	r3, [r3, #0]
 8013ad6:	2200      	movs	r2, #0
 8013ad8:	490c      	ldr	r1, [pc, #48]	; (8013b0c <dhcp_inc_pcb_refcount+0xa0>)
 8013ada:	4618      	mov	r0, r3
 8013adc:	f7ff ff10 	bl	8013900 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8013ae0:	4b04      	ldr	r3, [pc, #16]	; (8013af4 <dhcp_inc_pcb_refcount+0x88>)
 8013ae2:	781b      	ldrb	r3, [r3, #0]
 8013ae4:	3301      	adds	r3, #1
 8013ae6:	b2da      	uxtb	r2, r3
 8013ae8:	4b02      	ldr	r3, [pc, #8]	; (8013af4 <dhcp_inc_pcb_refcount+0x88>)
 8013aea:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8013aec:	2300      	movs	r3, #0
}
 8013aee:	4618      	mov	r0, r3
 8013af0:	bd80      	pop	{r7, pc}
 8013af2:	bf00      	nop
 8013af4:	20008c9c 	.word	0x20008c9c
 8013af8:	20008c98 	.word	0x20008c98
 8013afc:	0801c600 	.word	0x0801c600
 8013b00:	0801c638 	.word	0x0801c638
 8013b04:	0801c660 	.word	0x0801c660
 8013b08:	08028574 	.word	0x08028574
 8013b0c:	08015329 	.word	0x08015329

08013b10 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8013b10:	b580      	push	{r7, lr}
 8013b12:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8013b14:	4b0e      	ldr	r3, [pc, #56]	; (8013b50 <dhcp_dec_pcb_refcount+0x40>)
 8013b16:	781b      	ldrb	r3, [r3, #0]
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d105      	bne.n	8013b28 <dhcp_dec_pcb_refcount+0x18>
 8013b1c:	4b0d      	ldr	r3, [pc, #52]	; (8013b54 <dhcp_dec_pcb_refcount+0x44>)
 8013b1e:	22ff      	movs	r2, #255	; 0xff
 8013b20:	490d      	ldr	r1, [pc, #52]	; (8013b58 <dhcp_dec_pcb_refcount+0x48>)
 8013b22:	480e      	ldr	r0, [pc, #56]	; (8013b5c <dhcp_dec_pcb_refcount+0x4c>)
 8013b24:	f004 fb34 	bl	8018190 <iprintf>
  dhcp_pcb_refcount--;
 8013b28:	4b09      	ldr	r3, [pc, #36]	; (8013b50 <dhcp_dec_pcb_refcount+0x40>)
 8013b2a:	781b      	ldrb	r3, [r3, #0]
 8013b2c:	3b01      	subs	r3, #1
 8013b2e:	b2da      	uxtb	r2, r3
 8013b30:	4b07      	ldr	r3, [pc, #28]	; (8013b50 <dhcp_dec_pcb_refcount+0x40>)
 8013b32:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8013b34:	4b06      	ldr	r3, [pc, #24]	; (8013b50 <dhcp_dec_pcb_refcount+0x40>)
 8013b36:	781b      	ldrb	r3, [r3, #0]
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	d107      	bne.n	8013b4c <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8013b3c:	4b08      	ldr	r3, [pc, #32]	; (8013b60 <dhcp_dec_pcb_refcount+0x50>)
 8013b3e:	681b      	ldr	r3, [r3, #0]
 8013b40:	4618      	mov	r0, r3
 8013b42:	f7ff fefd 	bl	8013940 <udp_remove>
    dhcp_pcb = NULL;
 8013b46:	4b06      	ldr	r3, [pc, #24]	; (8013b60 <dhcp_dec_pcb_refcount+0x50>)
 8013b48:	2200      	movs	r2, #0
 8013b4a:	601a      	str	r2, [r3, #0]
  }
}
 8013b4c:	bf00      	nop
 8013b4e:	bd80      	pop	{r7, pc}
 8013b50:	20008c9c 	.word	0x20008c9c
 8013b54:	0801c600 	.word	0x0801c600
 8013b58:	0801c688 	.word	0x0801c688
 8013b5c:	0801c660 	.word	0x0801c660
 8013b60:	20008c98 	.word	0x20008c98

08013b64 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8013b64:	b580      	push	{r7, lr}
 8013b66:	b084      	sub	sp, #16
 8013b68:	af00      	add	r7, sp, #0
 8013b6a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	6a1b      	ldr	r3, [r3, #32]
 8013b70:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8013b72:	210c      	movs	r1, #12
 8013b74:	68f8      	ldr	r0, [r7, #12]
 8013b76:	f001 f819 	bl	8014bac <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8013b7a:	4b06      	ldr	r3, [pc, #24]	; (8013b94 <dhcp_handle_nak+0x30>)
 8013b7c:	4a05      	ldr	r2, [pc, #20]	; (8013b94 <dhcp_handle_nak+0x30>)
 8013b7e:	4905      	ldr	r1, [pc, #20]	; (8013b94 <dhcp_handle_nak+0x30>)
 8013b80:	6878      	ldr	r0, [r7, #4]
 8013b82:	f7f8 f945 	bl	800be10 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8013b86:	6878      	ldr	r0, [r7, #4]
 8013b88:	f000 fc0c 	bl	80143a4 <dhcp_discover>
}
 8013b8c:	bf00      	nop
 8013b8e:	3710      	adds	r7, #16
 8013b90:	46bd      	mov	sp, r7
 8013b92:	bd80      	pop	{r7, pc}
 8013b94:	08028574 	.word	0x08028574

08013b98 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8013b98:	b580      	push	{r7, lr}
 8013b9a:	b084      	sub	sp, #16
 8013b9c:	af00      	add	r7, sp, #0
 8013b9e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	6a1b      	ldr	r3, [r3, #32]
 8013ba4:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8013ba6:	2108      	movs	r1, #8
 8013ba8:	68f8      	ldr	r0, [r7, #12]
 8013baa:	f000 ffff 	bl	8014bac <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8013bae:	68fb      	ldr	r3, [r7, #12]
 8013bb0:	331c      	adds	r3, #28
 8013bb2:	2200      	movs	r2, #0
 8013bb4:	4619      	mov	r1, r3
 8013bb6:	6878      	ldr	r0, [r7, #4]
 8013bb8:	f002 fafe 	bl	80161b8 <etharp_query>
 8013bbc:	4603      	mov	r3, r0
 8013bbe:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	799b      	ldrb	r3, [r3, #6]
 8013bc4:	2bff      	cmp	r3, #255	; 0xff
 8013bc6:	d005      	beq.n	8013bd4 <dhcp_check+0x3c>
    dhcp->tries++;
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	799b      	ldrb	r3, [r3, #6]
 8013bcc:	3301      	adds	r3, #1
 8013bce:	b2da      	uxtb	r2, r3
 8013bd0:	68fb      	ldr	r3, [r7, #12]
 8013bd2:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8013bd4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8013bd8:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013bda:	893b      	ldrh	r3, [r7, #8]
 8013bdc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013be0:	4a06      	ldr	r2, [pc, #24]	; (8013bfc <dhcp_check+0x64>)
 8013be2:	fb82 1203 	smull	r1, r2, r2, r3
 8013be6:	1152      	asrs	r2, r2, #5
 8013be8:	17db      	asrs	r3, r3, #31
 8013bea:	1ad3      	subs	r3, r2, r3
 8013bec:	b29a      	uxth	r2, r3
 8013bee:	68fb      	ldr	r3, [r7, #12]
 8013bf0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8013bf2:	bf00      	nop
 8013bf4:	3710      	adds	r7, #16
 8013bf6:	46bd      	mov	sp, r7
 8013bf8:	bd80      	pop	{r7, pc}
 8013bfa:	bf00      	nop
 8013bfc:	10624dd3 	.word	0x10624dd3

08013c00 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8013c00:	b580      	push	{r7, lr}
 8013c02:	b084      	sub	sp, #16
 8013c04:	af00      	add	r7, sp, #0
 8013c06:	6078      	str	r0, [r7, #4]
 8013c08:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	6a1b      	ldr	r3, [r3, #32]
 8013c0e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8013c10:	4b0c      	ldr	r3, [pc, #48]	; (8013c44 <dhcp_handle_offer+0x44>)
 8013c12:	789b      	ldrb	r3, [r3, #2]
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d011      	beq.n	8013c3c <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8013c18:	68fb      	ldr	r3, [r7, #12]
 8013c1a:	2200      	movs	r2, #0
 8013c1c:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8013c1e:	4b0a      	ldr	r3, [pc, #40]	; (8013c48 <dhcp_handle_offer+0x48>)
 8013c20:	689b      	ldr	r3, [r3, #8]
 8013c22:	4618      	mov	r0, r3
 8013c24:	f7f7 fa2d 	bl	800b082 <lwip_htonl>
 8013c28:	4602      	mov	r2, r0
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8013c2e:	683b      	ldr	r3, [r7, #0]
 8013c30:	691a      	ldr	r2, [r3, #16]
 8013c32:	68fb      	ldr	r3, [r7, #12]
 8013c34:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8013c36:	6878      	ldr	r0, [r7, #4]
 8013c38:	f000 f808 	bl	8013c4c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8013c3c:	bf00      	nop
 8013c3e:	3710      	adds	r7, #16
 8013c40:	46bd      	mov	sp, r7
 8013c42:	bd80      	pop	{r7, pc}
 8013c44:	2000faf4 	.word	0x2000faf4
 8013c48:	2000fafc 	.word	0x2000fafc

08013c4c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8013c4c:	b5b0      	push	{r4, r5, r7, lr}
 8013c4e:	b08a      	sub	sp, #40	; 0x28
 8013c50:	af02      	add	r7, sp, #8
 8013c52:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d109      	bne.n	8013c6e <dhcp_select+0x22>
 8013c5a:	4b71      	ldr	r3, [pc, #452]	; (8013e20 <dhcp_select+0x1d4>)
 8013c5c:	f240 1277 	movw	r2, #375	; 0x177
 8013c60:	4970      	ldr	r1, [pc, #448]	; (8013e24 <dhcp_select+0x1d8>)
 8013c62:	4871      	ldr	r0, [pc, #452]	; (8013e28 <dhcp_select+0x1dc>)
 8013c64:	f004 fa94 	bl	8018190 <iprintf>
 8013c68:	f06f 030f 	mvn.w	r3, #15
 8013c6c:	e0d3      	b.n	8013e16 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	6a1b      	ldr	r3, [r3, #32]
 8013c72:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8013c74:	69bb      	ldr	r3, [r7, #24]
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d109      	bne.n	8013c8e <dhcp_select+0x42>
 8013c7a:	4b69      	ldr	r3, [pc, #420]	; (8013e20 <dhcp_select+0x1d4>)
 8013c7c:	f240 1279 	movw	r2, #377	; 0x179
 8013c80:	496a      	ldr	r1, [pc, #424]	; (8013e2c <dhcp_select+0x1e0>)
 8013c82:	4869      	ldr	r0, [pc, #420]	; (8013e28 <dhcp_select+0x1dc>)
 8013c84:	f004 fa84 	bl	8018190 <iprintf>
 8013c88:	f06f 0305 	mvn.w	r3, #5
 8013c8c:	e0c3      	b.n	8013e16 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8013c8e:	2101      	movs	r1, #1
 8013c90:	69b8      	ldr	r0, [r7, #24]
 8013c92:	f000 ff8b 	bl	8014bac <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8013c96:	f107 030c 	add.w	r3, r7, #12
 8013c9a:	2203      	movs	r2, #3
 8013c9c:	69b9      	ldr	r1, [r7, #24]
 8013c9e:	6878      	ldr	r0, [r7, #4]
 8013ca0:	f001 fc0e 	bl	80154c0 <dhcp_create_msg>
 8013ca4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013ca6:	697b      	ldr	r3, [r7, #20]
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	f000 8085 	beq.w	8013db8 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013cae:	697b      	ldr	r3, [r7, #20]
 8013cb0:	685b      	ldr	r3, [r3, #4]
 8013cb2:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013cb4:	89b8      	ldrh	r0, [r7, #12]
 8013cb6:	693b      	ldr	r3, [r7, #16]
 8013cb8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013cbc:	2302      	movs	r3, #2
 8013cbe:	2239      	movs	r2, #57	; 0x39
 8013cc0:	f000 ff8e 	bl	8014be0 <dhcp_option>
 8013cc4:	4603      	mov	r3, r0
 8013cc6:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8013cc8:	89b8      	ldrh	r0, [r7, #12]
 8013cca:	693b      	ldr	r3, [r7, #16]
 8013ccc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013cd4:	461a      	mov	r2, r3
 8013cd6:	f000 ffdd 	bl	8014c94 <dhcp_option_short>
 8013cda:	4603      	mov	r3, r0
 8013cdc:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8013cde:	89b8      	ldrh	r0, [r7, #12]
 8013ce0:	693b      	ldr	r3, [r7, #16]
 8013ce2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013ce6:	2304      	movs	r3, #4
 8013ce8:	2232      	movs	r2, #50	; 0x32
 8013cea:	f000 ff79 	bl	8014be0 <dhcp_option>
 8013cee:	4603      	mov	r3, r0
 8013cf0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8013cf2:	89bc      	ldrh	r4, [r7, #12]
 8013cf4:	693b      	ldr	r3, [r7, #16]
 8013cf6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013cfa:	69bb      	ldr	r3, [r7, #24]
 8013cfc:	69db      	ldr	r3, [r3, #28]
 8013cfe:	4618      	mov	r0, r3
 8013d00:	f7f7 f9bf 	bl	800b082 <lwip_htonl>
 8013d04:	4603      	mov	r3, r0
 8013d06:	461a      	mov	r2, r3
 8013d08:	4629      	mov	r1, r5
 8013d0a:	4620      	mov	r0, r4
 8013d0c:	f000 fff4 	bl	8014cf8 <dhcp_option_long>
 8013d10:	4603      	mov	r3, r0
 8013d12:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8013d14:	89b8      	ldrh	r0, [r7, #12]
 8013d16:	693b      	ldr	r3, [r7, #16]
 8013d18:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013d1c:	2304      	movs	r3, #4
 8013d1e:	2236      	movs	r2, #54	; 0x36
 8013d20:	f000 ff5e 	bl	8014be0 <dhcp_option>
 8013d24:	4603      	mov	r3, r0
 8013d26:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8013d28:	89bc      	ldrh	r4, [r7, #12]
 8013d2a:	693b      	ldr	r3, [r7, #16]
 8013d2c:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013d30:	69bb      	ldr	r3, [r7, #24]
 8013d32:	699b      	ldr	r3, [r3, #24]
 8013d34:	4618      	mov	r0, r3
 8013d36:	f7f7 f9a4 	bl	800b082 <lwip_htonl>
 8013d3a:	4603      	mov	r3, r0
 8013d3c:	461a      	mov	r2, r3
 8013d3e:	4629      	mov	r1, r5
 8013d40:	4620      	mov	r0, r4
 8013d42:	f000 ffd9 	bl	8014cf8 <dhcp_option_long>
 8013d46:	4603      	mov	r3, r0
 8013d48:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013d4a:	89b8      	ldrh	r0, [r7, #12]
 8013d4c:	693b      	ldr	r3, [r7, #16]
 8013d4e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013d52:	2303      	movs	r3, #3
 8013d54:	2237      	movs	r2, #55	; 0x37
 8013d56:	f000 ff43 	bl	8014be0 <dhcp_option>
 8013d5a:	4603      	mov	r3, r0
 8013d5c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013d5e:	2300      	movs	r3, #0
 8013d60:	77bb      	strb	r3, [r7, #30]
 8013d62:	e00e      	b.n	8013d82 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013d64:	89b8      	ldrh	r0, [r7, #12]
 8013d66:	693b      	ldr	r3, [r7, #16]
 8013d68:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013d6c:	7fbb      	ldrb	r3, [r7, #30]
 8013d6e:	4a30      	ldr	r2, [pc, #192]	; (8013e30 <dhcp_select+0x1e4>)
 8013d70:	5cd3      	ldrb	r3, [r2, r3]
 8013d72:	461a      	mov	r2, r3
 8013d74:	f000 ff68 	bl	8014c48 <dhcp_option_byte>
 8013d78:	4603      	mov	r3, r0
 8013d7a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013d7c:	7fbb      	ldrb	r3, [r7, #30]
 8013d7e:	3301      	adds	r3, #1
 8013d80:	77bb      	strb	r3, [r7, #30]
 8013d82:	7fbb      	ldrb	r3, [r7, #30]
 8013d84:	2b02      	cmp	r3, #2
 8013d86:	d9ed      	bls.n	8013d64 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013d88:	89b8      	ldrh	r0, [r7, #12]
 8013d8a:	693b      	ldr	r3, [r7, #16]
 8013d8c:	33f0      	adds	r3, #240	; 0xf0
 8013d8e:	697a      	ldr	r2, [r7, #20]
 8013d90:	4619      	mov	r1, r3
 8013d92:	f001 fc6b 	bl	801566c <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8013d96:	4b27      	ldr	r3, [pc, #156]	; (8013e34 <dhcp_select+0x1e8>)
 8013d98:	6818      	ldr	r0, [r3, #0]
 8013d9a:	4b27      	ldr	r3, [pc, #156]	; (8013e38 <dhcp_select+0x1ec>)
 8013d9c:	9301      	str	r3, [sp, #4]
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	9300      	str	r3, [sp, #0]
 8013da2:	2343      	movs	r3, #67	; 0x43
 8013da4:	4a25      	ldr	r2, [pc, #148]	; (8013e3c <dhcp_select+0x1f0>)
 8013da6:	6979      	ldr	r1, [r7, #20]
 8013da8:	f7ff fbce 	bl	8013548 <udp_sendto_if_src>
 8013dac:	4603      	mov	r3, r0
 8013dae:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013db0:	6978      	ldr	r0, [r7, #20]
 8013db2:	f7f8 fcbd 	bl	800c730 <pbuf_free>
 8013db6:	e001      	b.n	8013dbc <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013db8:	23ff      	movs	r3, #255	; 0xff
 8013dba:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013dbc:	69bb      	ldr	r3, [r7, #24]
 8013dbe:	799b      	ldrb	r3, [r3, #6]
 8013dc0:	2bff      	cmp	r3, #255	; 0xff
 8013dc2:	d005      	beq.n	8013dd0 <dhcp_select+0x184>
    dhcp->tries++;
 8013dc4:	69bb      	ldr	r3, [r7, #24]
 8013dc6:	799b      	ldrb	r3, [r3, #6]
 8013dc8:	3301      	adds	r3, #1
 8013dca:	b2da      	uxtb	r2, r3
 8013dcc:	69bb      	ldr	r3, [r7, #24]
 8013dce:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8013dd0:	69bb      	ldr	r3, [r7, #24]
 8013dd2:	799b      	ldrb	r3, [r3, #6]
 8013dd4:	2b05      	cmp	r3, #5
 8013dd6:	d80d      	bhi.n	8013df4 <dhcp_select+0x1a8>
 8013dd8:	69bb      	ldr	r3, [r7, #24]
 8013dda:	799b      	ldrb	r3, [r3, #6]
 8013ddc:	461a      	mov	r2, r3
 8013dde:	2301      	movs	r3, #1
 8013de0:	4093      	lsls	r3, r2
 8013de2:	b29b      	uxth	r3, r3
 8013de4:	461a      	mov	r2, r3
 8013de6:	0152      	lsls	r2, r2, #5
 8013de8:	1ad2      	subs	r2, r2, r3
 8013dea:	0092      	lsls	r2, r2, #2
 8013dec:	4413      	add	r3, r2
 8013dee:	00db      	lsls	r3, r3, #3
 8013df0:	b29b      	uxth	r3, r3
 8013df2:	e001      	b.n	8013df8 <dhcp_select+0x1ac>
 8013df4:	f64e 2360 	movw	r3, #60000	; 0xea60
 8013df8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013dfa:	89fb      	ldrh	r3, [r7, #14]
 8013dfc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013e00:	4a0f      	ldr	r2, [pc, #60]	; (8013e40 <dhcp_select+0x1f4>)
 8013e02:	fb82 1203 	smull	r1, r2, r2, r3
 8013e06:	1152      	asrs	r2, r2, #5
 8013e08:	17db      	asrs	r3, r3, #31
 8013e0a:	1ad3      	subs	r3, r2, r3
 8013e0c:	b29a      	uxth	r2, r3
 8013e0e:	69bb      	ldr	r3, [r7, #24]
 8013e10:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013e12:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013e16:	4618      	mov	r0, r3
 8013e18:	3720      	adds	r7, #32
 8013e1a:	46bd      	mov	sp, r7
 8013e1c:	bdb0      	pop	{r4, r5, r7, pc}
 8013e1e:	bf00      	nop
 8013e20:	0801c600 	.word	0x0801c600
 8013e24:	0801c6ac 	.word	0x0801c6ac
 8013e28:	0801c660 	.word	0x0801c660
 8013e2c:	0801c6c8 	.word	0x0801c6c8
 8013e30:	2000001c 	.word	0x2000001c
 8013e34:	20008c98 	.word	0x20008c98
 8013e38:	08028574 	.word	0x08028574
 8013e3c:	08028578 	.word	0x08028578
 8013e40:	10624dd3 	.word	0x10624dd3

08013e44 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8013e44:	b580      	push	{r7, lr}
 8013e46:	b082      	sub	sp, #8
 8013e48:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8013e4a:	4b27      	ldr	r3, [pc, #156]	; (8013ee8 <dhcp_coarse_tmr+0xa4>)
 8013e4c:	681b      	ldr	r3, [r3, #0]
 8013e4e:	607b      	str	r3, [r7, #4]
 8013e50:	e042      	b.n	8013ed8 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	6a1b      	ldr	r3, [r3, #32]
 8013e56:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8013e58:	683b      	ldr	r3, [r7, #0]
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d039      	beq.n	8013ed2 <dhcp_coarse_tmr+0x8e>
 8013e5e:	683b      	ldr	r3, [r7, #0]
 8013e60:	795b      	ldrb	r3, [r3, #5]
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d035      	beq.n	8013ed2 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8013e66:	683b      	ldr	r3, [r7, #0]
 8013e68:	8a9b      	ldrh	r3, [r3, #20]
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d012      	beq.n	8013e94 <dhcp_coarse_tmr+0x50>
 8013e6e:	683b      	ldr	r3, [r7, #0]
 8013e70:	8a5b      	ldrh	r3, [r3, #18]
 8013e72:	3301      	adds	r3, #1
 8013e74:	b29a      	uxth	r2, r3
 8013e76:	683b      	ldr	r3, [r7, #0]
 8013e78:	825a      	strh	r2, [r3, #18]
 8013e7a:	683b      	ldr	r3, [r7, #0]
 8013e7c:	8a5a      	ldrh	r2, [r3, #18]
 8013e7e:	683b      	ldr	r3, [r7, #0]
 8013e80:	8a9b      	ldrh	r3, [r3, #20]
 8013e82:	429a      	cmp	r2, r3
 8013e84:	d106      	bne.n	8013e94 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8013e86:	6878      	ldr	r0, [r7, #4]
 8013e88:	f000 fdf6 	bl	8014a78 <dhcp_release_and_stop>
        dhcp_start(netif);
 8013e8c:	6878      	ldr	r0, [r7, #4]
 8013e8e:	f000 f969 	bl	8014164 <dhcp_start>
 8013e92:	e01e      	b.n	8013ed2 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8013e94:	683b      	ldr	r3, [r7, #0]
 8013e96:	8a1b      	ldrh	r3, [r3, #16]
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d00b      	beq.n	8013eb4 <dhcp_coarse_tmr+0x70>
 8013e9c:	683b      	ldr	r3, [r7, #0]
 8013e9e:	8a1b      	ldrh	r3, [r3, #16]
 8013ea0:	1e5a      	subs	r2, r3, #1
 8013ea2:	b291      	uxth	r1, r2
 8013ea4:	683a      	ldr	r2, [r7, #0]
 8013ea6:	8211      	strh	r1, [r2, #16]
 8013ea8:	2b01      	cmp	r3, #1
 8013eaa:	d103      	bne.n	8013eb4 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8013eac:	6878      	ldr	r0, [r7, #4]
 8013eae:	f000 f8c6 	bl	801403e <dhcp_t2_timeout>
 8013eb2:	e00e      	b.n	8013ed2 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8013eb4:	683b      	ldr	r3, [r7, #0]
 8013eb6:	89db      	ldrh	r3, [r3, #14]
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d00a      	beq.n	8013ed2 <dhcp_coarse_tmr+0x8e>
 8013ebc:	683b      	ldr	r3, [r7, #0]
 8013ebe:	89db      	ldrh	r3, [r3, #14]
 8013ec0:	1e5a      	subs	r2, r3, #1
 8013ec2:	b291      	uxth	r1, r2
 8013ec4:	683a      	ldr	r2, [r7, #0]
 8013ec6:	81d1      	strh	r1, [r2, #14]
 8013ec8:	2b01      	cmp	r3, #1
 8013eca:	d102      	bne.n	8013ed2 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8013ecc:	6878      	ldr	r0, [r7, #4]
 8013ece:	f000 f888 	bl	8013fe2 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	681b      	ldr	r3, [r3, #0]
 8013ed6:	607b      	str	r3, [r7, #4]
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d1b9      	bne.n	8013e52 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8013ede:	bf00      	nop
 8013ee0:	3708      	adds	r7, #8
 8013ee2:	46bd      	mov	sp, r7
 8013ee4:	bd80      	pop	{r7, pc}
 8013ee6:	bf00      	nop
 8013ee8:	2000fac8 	.word	0x2000fac8

08013eec <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8013eec:	b580      	push	{r7, lr}
 8013eee:	b082      	sub	sp, #8
 8013ef0:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8013ef2:	4b16      	ldr	r3, [pc, #88]	; (8013f4c <dhcp_fine_tmr+0x60>)
 8013ef4:	681b      	ldr	r3, [r3, #0]
 8013ef6:	607b      	str	r3, [r7, #4]
 8013ef8:	e020      	b.n	8013f3c <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	6a1b      	ldr	r3, [r3, #32]
 8013efe:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8013f00:	683b      	ldr	r3, [r7, #0]
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d017      	beq.n	8013f36 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8013f06:	683b      	ldr	r3, [r7, #0]
 8013f08:	891b      	ldrh	r3, [r3, #8]
 8013f0a:	2b01      	cmp	r3, #1
 8013f0c:	d906      	bls.n	8013f1c <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8013f0e:	683b      	ldr	r3, [r7, #0]
 8013f10:	891b      	ldrh	r3, [r3, #8]
 8013f12:	3b01      	subs	r3, #1
 8013f14:	b29a      	uxth	r2, r3
 8013f16:	683b      	ldr	r3, [r7, #0]
 8013f18:	811a      	strh	r2, [r3, #8]
 8013f1a:	e00c      	b.n	8013f36 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8013f1c:	683b      	ldr	r3, [r7, #0]
 8013f1e:	891b      	ldrh	r3, [r3, #8]
 8013f20:	2b01      	cmp	r3, #1
 8013f22:	d108      	bne.n	8013f36 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8013f24:	683b      	ldr	r3, [r7, #0]
 8013f26:	891b      	ldrh	r3, [r3, #8]
 8013f28:	3b01      	subs	r3, #1
 8013f2a:	b29a      	uxth	r2, r3
 8013f2c:	683b      	ldr	r3, [r7, #0]
 8013f2e:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8013f30:	6878      	ldr	r0, [r7, #4]
 8013f32:	f000 f80d 	bl	8013f50 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	681b      	ldr	r3, [r3, #0]
 8013f3a:	607b      	str	r3, [r7, #4]
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d1db      	bne.n	8013efa <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8013f42:	bf00      	nop
 8013f44:	3708      	adds	r7, #8
 8013f46:	46bd      	mov	sp, r7
 8013f48:	bd80      	pop	{r7, pc}
 8013f4a:	bf00      	nop
 8013f4c:	2000fac8 	.word	0x2000fac8

08013f50 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8013f50:	b580      	push	{r7, lr}
 8013f52:	b084      	sub	sp, #16
 8013f54:	af00      	add	r7, sp, #0
 8013f56:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	6a1b      	ldr	r3, [r3, #32]
 8013f5c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	795b      	ldrb	r3, [r3, #5]
 8013f62:	2b0c      	cmp	r3, #12
 8013f64:	d003      	beq.n	8013f6e <dhcp_timeout+0x1e>
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	795b      	ldrb	r3, [r3, #5]
 8013f6a:	2b06      	cmp	r3, #6
 8013f6c:	d103      	bne.n	8013f76 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8013f6e:	6878      	ldr	r0, [r7, #4]
 8013f70:	f000 fa18 	bl	80143a4 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8013f74:	e031      	b.n	8013fda <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	795b      	ldrb	r3, [r3, #5]
 8013f7a:	2b01      	cmp	r3, #1
 8013f7c:	d10e      	bne.n	8013f9c <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8013f7e:	68fb      	ldr	r3, [r7, #12]
 8013f80:	799b      	ldrb	r3, [r3, #6]
 8013f82:	2b05      	cmp	r3, #5
 8013f84:	d803      	bhi.n	8013f8e <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8013f86:	6878      	ldr	r0, [r7, #4]
 8013f88:	f7ff fe60 	bl	8013c4c <dhcp_select>
}
 8013f8c:	e025      	b.n	8013fda <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8013f8e:	6878      	ldr	r0, [r7, #4]
 8013f90:	f000 fd72 	bl	8014a78 <dhcp_release_and_stop>
      dhcp_start(netif);
 8013f94:	6878      	ldr	r0, [r7, #4]
 8013f96:	f000 f8e5 	bl	8014164 <dhcp_start>
}
 8013f9a:	e01e      	b.n	8013fda <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8013f9c:	68fb      	ldr	r3, [r7, #12]
 8013f9e:	795b      	ldrb	r3, [r3, #5]
 8013fa0:	2b08      	cmp	r3, #8
 8013fa2:	d10b      	bne.n	8013fbc <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	799b      	ldrb	r3, [r3, #6]
 8013fa8:	2b01      	cmp	r3, #1
 8013faa:	d803      	bhi.n	8013fb4 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8013fac:	6878      	ldr	r0, [r7, #4]
 8013fae:	f7ff fdf3 	bl	8013b98 <dhcp_check>
}
 8013fb2:	e012      	b.n	8013fda <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8013fb4:	6878      	ldr	r0, [r7, #4]
 8013fb6:	f000 fa97 	bl	80144e8 <dhcp_bind>
}
 8013fba:	e00e      	b.n	8013fda <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8013fbc:	68fb      	ldr	r3, [r7, #12]
 8013fbe:	795b      	ldrb	r3, [r3, #5]
 8013fc0:	2b03      	cmp	r3, #3
 8013fc2:	d10a      	bne.n	8013fda <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	799b      	ldrb	r3, [r3, #6]
 8013fc8:	2b01      	cmp	r3, #1
 8013fca:	d803      	bhi.n	8013fd4 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8013fcc:	6878      	ldr	r0, [r7, #4]
 8013fce:	f000 fc9d 	bl	801490c <dhcp_reboot>
}
 8013fd2:	e002      	b.n	8013fda <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8013fd4:	6878      	ldr	r0, [r7, #4]
 8013fd6:	f000 f9e5 	bl	80143a4 <dhcp_discover>
}
 8013fda:	bf00      	nop
 8013fdc:	3710      	adds	r7, #16
 8013fde:	46bd      	mov	sp, r7
 8013fe0:	bd80      	pop	{r7, pc}

08013fe2 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8013fe2:	b580      	push	{r7, lr}
 8013fe4:	b084      	sub	sp, #16
 8013fe6:	af00      	add	r7, sp, #0
 8013fe8:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	6a1b      	ldr	r3, [r3, #32]
 8013fee:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013ff0:	68fb      	ldr	r3, [r7, #12]
 8013ff2:	795b      	ldrb	r3, [r3, #5]
 8013ff4:	2b01      	cmp	r3, #1
 8013ff6:	d007      	beq.n	8014008 <dhcp_t1_timeout+0x26>
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	795b      	ldrb	r3, [r3, #5]
 8013ffc:	2b0a      	cmp	r3, #10
 8013ffe:	d003      	beq.n	8014008 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8014000:	68fb      	ldr	r3, [r7, #12]
 8014002:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014004:	2b05      	cmp	r3, #5
 8014006:	d116      	bne.n	8014036 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8014008:	6878      	ldr	r0, [r7, #4]
 801400a:	f000 fb47 	bl	801469c <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801400e:	68fb      	ldr	r3, [r7, #12]
 8014010:	899b      	ldrh	r3, [r3, #12]
 8014012:	461a      	mov	r2, r3
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	8a5b      	ldrh	r3, [r3, #18]
 8014018:	1ad3      	subs	r3, r2, r3
 801401a:	2b01      	cmp	r3, #1
 801401c:	dd0b      	ble.n	8014036 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801401e:	68fb      	ldr	r3, [r7, #12]
 8014020:	899b      	ldrh	r3, [r3, #12]
 8014022:	461a      	mov	r2, r3
 8014024:	68fb      	ldr	r3, [r7, #12]
 8014026:	8a5b      	ldrh	r3, [r3, #18]
 8014028:	1ad3      	subs	r3, r2, r3
 801402a:	0fda      	lsrs	r2, r3, #31
 801402c:	4413      	add	r3, r2
 801402e:	105b      	asrs	r3, r3, #1
 8014030:	b29a      	uxth	r2, r3
 8014032:	68fb      	ldr	r3, [r7, #12]
 8014034:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8014036:	bf00      	nop
 8014038:	3710      	adds	r7, #16
 801403a:	46bd      	mov	sp, r7
 801403c:	bd80      	pop	{r7, pc}

0801403e <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 801403e:	b580      	push	{r7, lr}
 8014040:	b084      	sub	sp, #16
 8014042:	af00      	add	r7, sp, #0
 8014044:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	6a1b      	ldr	r3, [r3, #32]
 801404a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801404c:	68fb      	ldr	r3, [r7, #12]
 801404e:	795b      	ldrb	r3, [r3, #5]
 8014050:	2b01      	cmp	r3, #1
 8014052:	d00b      	beq.n	801406c <dhcp_t2_timeout+0x2e>
 8014054:	68fb      	ldr	r3, [r7, #12]
 8014056:	795b      	ldrb	r3, [r3, #5]
 8014058:	2b0a      	cmp	r3, #10
 801405a:	d007      	beq.n	801406c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801405c:	68fb      	ldr	r3, [r7, #12]
 801405e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014060:	2b05      	cmp	r3, #5
 8014062:	d003      	beq.n	801406c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8014064:	68fb      	ldr	r3, [r7, #12]
 8014066:	795b      	ldrb	r3, [r3, #5]
 8014068:	2b04      	cmp	r3, #4
 801406a:	d116      	bne.n	801409a <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 801406c:	6878      	ldr	r0, [r7, #4]
 801406e:	f000 fbb1 	bl	80147d4 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8014072:	68fb      	ldr	r3, [r7, #12]
 8014074:	8a9b      	ldrh	r3, [r3, #20]
 8014076:	461a      	mov	r2, r3
 8014078:	68fb      	ldr	r3, [r7, #12]
 801407a:	8a5b      	ldrh	r3, [r3, #18]
 801407c:	1ad3      	subs	r3, r2, r3
 801407e:	2b01      	cmp	r3, #1
 8014080:	dd0b      	ble.n	801409a <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	8a9b      	ldrh	r3, [r3, #20]
 8014086:	461a      	mov	r2, r3
 8014088:	68fb      	ldr	r3, [r7, #12]
 801408a:	8a5b      	ldrh	r3, [r3, #18]
 801408c:	1ad3      	subs	r3, r2, r3
 801408e:	0fda      	lsrs	r2, r3, #31
 8014090:	4413      	add	r3, r2
 8014092:	105b      	asrs	r3, r3, #1
 8014094:	b29a      	uxth	r2, r3
 8014096:	68fb      	ldr	r3, [r7, #12]
 8014098:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801409a:	bf00      	nop
 801409c:	3710      	adds	r7, #16
 801409e:	46bd      	mov	sp, r7
 80140a0:	bd80      	pop	{r7, pc}
	...

080140a4 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 80140a4:	b580      	push	{r7, lr}
 80140a6:	b084      	sub	sp, #16
 80140a8:	af00      	add	r7, sp, #0
 80140aa:	6078      	str	r0, [r7, #4]
 80140ac:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	6a1b      	ldr	r3, [r3, #32]
 80140b2:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80140b4:	68fb      	ldr	r3, [r7, #12]
 80140b6:	2200      	movs	r2, #0
 80140b8:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80140ba:	68fb      	ldr	r3, [r7, #12]
 80140bc:	2200      	movs	r2, #0
 80140be:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80140c0:	4b26      	ldr	r3, [pc, #152]	; (801415c <dhcp_handle_ack+0xb8>)
 80140c2:	78db      	ldrb	r3, [r3, #3]
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d003      	beq.n	80140d0 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80140c8:	4b25      	ldr	r3, [pc, #148]	; (8014160 <dhcp_handle_ack+0xbc>)
 80140ca:	68da      	ldr	r2, [r3, #12]
 80140cc:	68fb      	ldr	r3, [r7, #12]
 80140ce:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80140d0:	4b22      	ldr	r3, [pc, #136]	; (801415c <dhcp_handle_ack+0xb8>)
 80140d2:	791b      	ldrb	r3, [r3, #4]
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d004      	beq.n	80140e2 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 80140d8:	4b21      	ldr	r3, [pc, #132]	; (8014160 <dhcp_handle_ack+0xbc>)
 80140da:	691a      	ldr	r2, [r3, #16]
 80140dc:	68fb      	ldr	r3, [r7, #12]
 80140de:	62da      	str	r2, [r3, #44]	; 0x2c
 80140e0:	e004      	b.n	80140ec <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80140e2:	68fb      	ldr	r3, [r7, #12]
 80140e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80140e6:	085a      	lsrs	r2, r3, #1
 80140e8:	68fb      	ldr	r3, [r7, #12]
 80140ea:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80140ec:	4b1b      	ldr	r3, [pc, #108]	; (801415c <dhcp_handle_ack+0xb8>)
 80140ee:	795b      	ldrb	r3, [r3, #5]
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d004      	beq.n	80140fe <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 80140f4:	4b1a      	ldr	r3, [pc, #104]	; (8014160 <dhcp_handle_ack+0xbc>)
 80140f6:	695a      	ldr	r2, [r3, #20]
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	631a      	str	r2, [r3, #48]	; 0x30
 80140fc:	e007      	b.n	801410e <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 80140fe:	68fb      	ldr	r3, [r7, #12]
 8014100:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014102:	4613      	mov	r3, r2
 8014104:	00db      	lsls	r3, r3, #3
 8014106:	1a9b      	subs	r3, r3, r2
 8014108:	08da      	lsrs	r2, r3, #3
 801410a:	68fb      	ldr	r3, [r7, #12]
 801410c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801410e:	683b      	ldr	r3, [r7, #0]
 8014110:	691a      	ldr	r2, [r3, #16]
 8014112:	68fb      	ldr	r3, [r7, #12]
 8014114:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8014116:	4b11      	ldr	r3, [pc, #68]	; (801415c <dhcp_handle_ack+0xb8>)
 8014118:	799b      	ldrb	r3, [r3, #6]
 801411a:	2b00      	cmp	r3, #0
 801411c:	d00b      	beq.n	8014136 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801411e:	4b10      	ldr	r3, [pc, #64]	; (8014160 <dhcp_handle_ack+0xbc>)
 8014120:	699b      	ldr	r3, [r3, #24]
 8014122:	4618      	mov	r0, r3
 8014124:	f7f6 ffad 	bl	800b082 <lwip_htonl>
 8014128:	4602      	mov	r2, r0
 801412a:	68fb      	ldr	r3, [r7, #12]
 801412c:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 801412e:	68fb      	ldr	r3, [r7, #12]
 8014130:	2201      	movs	r2, #1
 8014132:	71da      	strb	r2, [r3, #7]
 8014134:	e002      	b.n	801413c <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8014136:	68fb      	ldr	r3, [r7, #12]
 8014138:	2200      	movs	r2, #0
 801413a:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801413c:	4b07      	ldr	r3, [pc, #28]	; (801415c <dhcp_handle_ack+0xb8>)
 801413e:	79db      	ldrb	r3, [r3, #7]
 8014140:	2b00      	cmp	r3, #0
 8014142:	d007      	beq.n	8014154 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8014144:	4b06      	ldr	r3, [pc, #24]	; (8014160 <dhcp_handle_ack+0xbc>)
 8014146:	69db      	ldr	r3, [r3, #28]
 8014148:	4618      	mov	r0, r3
 801414a:	f7f6 ff9a 	bl	800b082 <lwip_htonl>
 801414e:	4602      	mov	r2, r0
 8014150:	68fb      	ldr	r3, [r7, #12]
 8014152:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8014154:	bf00      	nop
 8014156:	3710      	adds	r7, #16
 8014158:	46bd      	mov	sp, r7
 801415a:	bd80      	pop	{r7, pc}
 801415c:	2000faf4 	.word	0x2000faf4
 8014160:	2000fafc 	.word	0x2000fafc

08014164 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8014164:	b580      	push	{r7, lr}
 8014166:	b084      	sub	sp, #16
 8014168:	af00      	add	r7, sp, #0
 801416a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	2b00      	cmp	r3, #0
 8014170:	d109      	bne.n	8014186 <dhcp_start+0x22>
 8014172:	4b37      	ldr	r3, [pc, #220]	; (8014250 <dhcp_start+0xec>)
 8014174:	f240 22e7 	movw	r2, #743	; 0x2e7
 8014178:	4936      	ldr	r1, [pc, #216]	; (8014254 <dhcp_start+0xf0>)
 801417a:	4837      	ldr	r0, [pc, #220]	; (8014258 <dhcp_start+0xf4>)
 801417c:	f004 f808 	bl	8018190 <iprintf>
 8014180:	f06f 030f 	mvn.w	r3, #15
 8014184:	e060      	b.n	8014248 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801418c:	f003 0301 	and.w	r3, r3, #1
 8014190:	2b00      	cmp	r3, #0
 8014192:	d109      	bne.n	80141a8 <dhcp_start+0x44>
 8014194:	4b2e      	ldr	r3, [pc, #184]	; (8014250 <dhcp_start+0xec>)
 8014196:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 801419a:	4930      	ldr	r1, [pc, #192]	; (801425c <dhcp_start+0xf8>)
 801419c:	482e      	ldr	r0, [pc, #184]	; (8014258 <dhcp_start+0xf4>)
 801419e:	f003 fff7 	bl	8018190 <iprintf>
 80141a2:	f06f 030f 	mvn.w	r3, #15
 80141a6:	e04f      	b.n	8014248 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	6a1b      	ldr	r3, [r3, #32]
 80141ac:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80141b2:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80141b6:	d202      	bcs.n	80141be <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 80141b8:	f04f 33ff 	mov.w	r3, #4294967295
 80141bc:	e044      	b.n	8014248 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 80141be:	68fb      	ldr	r3, [r7, #12]
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d10d      	bne.n	80141e0 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 80141c4:	2034      	movs	r0, #52	; 0x34
 80141c6:	f7f7 fab1 	bl	800b72c <mem_malloc>
 80141ca:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d102      	bne.n	80141d8 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 80141d2:	f04f 33ff 	mov.w	r3, #4294967295
 80141d6:	e037      	b.n	8014248 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	68fa      	ldr	r2, [r7, #12]
 80141dc:	621a      	str	r2, [r3, #32]
 80141de:	e005      	b.n	80141ec <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 80141e0:	68fb      	ldr	r3, [r7, #12]
 80141e2:	791b      	ldrb	r3, [r3, #4]
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d001      	beq.n	80141ec <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80141e8:	f7ff fc92 	bl	8013b10 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 80141ec:	2234      	movs	r2, #52	; 0x34
 80141ee:	2100      	movs	r1, #0
 80141f0:	68f8      	ldr	r0, [r7, #12]
 80141f2:	f003 ffc4 	bl	801817e <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 80141f6:	f7ff fc39 	bl	8013a6c <dhcp_inc_pcb_refcount>
 80141fa:	4603      	mov	r3, r0
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d002      	beq.n	8014206 <dhcp_start+0xa2>
    return ERR_MEM;
 8014200:	f04f 33ff 	mov.w	r3, #4294967295
 8014204:	e020      	b.n	8014248 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8014206:	68fb      	ldr	r3, [r7, #12]
 8014208:	2201      	movs	r2, #1
 801420a:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014212:	f003 0304 	and.w	r3, r3, #4
 8014216:	2b00      	cmp	r3, #0
 8014218:	d105      	bne.n	8014226 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801421a:	2102      	movs	r1, #2
 801421c:	68f8      	ldr	r0, [r7, #12]
 801421e:	f000 fcc5 	bl	8014bac <dhcp_set_state>
    return ERR_OK;
 8014222:	2300      	movs	r3, #0
 8014224:	e010      	b.n	8014248 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8014226:	6878      	ldr	r0, [r7, #4]
 8014228:	f000 f8bc 	bl	80143a4 <dhcp_discover>
 801422c:	4603      	mov	r3, r0
 801422e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8014230:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014234:	2b00      	cmp	r3, #0
 8014236:	d005      	beq.n	8014244 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8014238:	6878      	ldr	r0, [r7, #4]
 801423a:	f000 fc1d 	bl	8014a78 <dhcp_release_and_stop>
    return ERR_MEM;
 801423e:	f04f 33ff 	mov.w	r3, #4294967295
 8014242:	e001      	b.n	8014248 <dhcp_start+0xe4>
  }
  return result;
 8014244:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014248:	4618      	mov	r0, r3
 801424a:	3710      	adds	r7, #16
 801424c:	46bd      	mov	sp, r7
 801424e:	bd80      	pop	{r7, pc}
 8014250:	0801c600 	.word	0x0801c600
 8014254:	0801c6e4 	.word	0x0801c6e4
 8014258:	0801c660 	.word	0x0801c660
 801425c:	0801c728 	.word	0x0801c728

08014260 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8014260:	b580      	push	{r7, lr}
 8014262:	b084      	sub	sp, #16
 8014264:	af00      	add	r7, sp, #0
 8014266:	6078      	str	r0, [r7, #4]
 8014268:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	2b00      	cmp	r3, #0
 801426e:	d107      	bne.n	8014280 <dhcp_arp_reply+0x20>
 8014270:	4b0e      	ldr	r3, [pc, #56]	; (80142ac <dhcp_arp_reply+0x4c>)
 8014272:	f240 328b 	movw	r2, #907	; 0x38b
 8014276:	490e      	ldr	r1, [pc, #56]	; (80142b0 <dhcp_arp_reply+0x50>)
 8014278:	480e      	ldr	r0, [pc, #56]	; (80142b4 <dhcp_arp_reply+0x54>)
 801427a:	f003 ff89 	bl	8018190 <iprintf>
 801427e:	e012      	b.n	80142a6 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	6a1b      	ldr	r3, [r3, #32]
 8014284:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8014286:	68fb      	ldr	r3, [r7, #12]
 8014288:	2b00      	cmp	r3, #0
 801428a:	d00c      	beq.n	80142a6 <dhcp_arp_reply+0x46>
 801428c:	68fb      	ldr	r3, [r7, #12]
 801428e:	795b      	ldrb	r3, [r3, #5]
 8014290:	2b08      	cmp	r3, #8
 8014292:	d108      	bne.n	80142a6 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8014294:	683b      	ldr	r3, [r7, #0]
 8014296:	681a      	ldr	r2, [r3, #0]
 8014298:	68fb      	ldr	r3, [r7, #12]
 801429a:	69db      	ldr	r3, [r3, #28]
 801429c:	429a      	cmp	r2, r3
 801429e:	d102      	bne.n	80142a6 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 80142a0:	6878      	ldr	r0, [r7, #4]
 80142a2:	f000 f809 	bl	80142b8 <dhcp_decline>
    }
  }
}
 80142a6:	3710      	adds	r7, #16
 80142a8:	46bd      	mov	sp, r7
 80142aa:	bd80      	pop	{r7, pc}
 80142ac:	0801c600 	.word	0x0801c600
 80142b0:	0801c6e4 	.word	0x0801c6e4
 80142b4:	0801c660 	.word	0x0801c660

080142b8 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 80142b8:	b5b0      	push	{r4, r5, r7, lr}
 80142ba:	b08a      	sub	sp, #40	; 0x28
 80142bc:	af02      	add	r7, sp, #8
 80142be:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	6a1b      	ldr	r3, [r3, #32]
 80142c4:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80142c6:	210c      	movs	r1, #12
 80142c8:	69b8      	ldr	r0, [r7, #24]
 80142ca:	f000 fc6f 	bl	8014bac <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80142ce:	f107 030c 	add.w	r3, r7, #12
 80142d2:	2204      	movs	r2, #4
 80142d4:	69b9      	ldr	r1, [r7, #24]
 80142d6:	6878      	ldr	r0, [r7, #4]
 80142d8:	f001 f8f2 	bl	80154c0 <dhcp_create_msg>
 80142dc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80142de:	697b      	ldr	r3, [r7, #20]
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d035      	beq.n	8014350 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80142e4:	697b      	ldr	r3, [r7, #20]
 80142e6:	685b      	ldr	r3, [r3, #4]
 80142e8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80142ea:	89b8      	ldrh	r0, [r7, #12]
 80142ec:	693b      	ldr	r3, [r7, #16]
 80142ee:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80142f2:	2304      	movs	r3, #4
 80142f4:	2232      	movs	r2, #50	; 0x32
 80142f6:	f000 fc73 	bl	8014be0 <dhcp_option>
 80142fa:	4603      	mov	r3, r0
 80142fc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80142fe:	89bc      	ldrh	r4, [r7, #12]
 8014300:	693b      	ldr	r3, [r7, #16]
 8014302:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014306:	69bb      	ldr	r3, [r7, #24]
 8014308:	69db      	ldr	r3, [r3, #28]
 801430a:	4618      	mov	r0, r3
 801430c:	f7f6 feb9 	bl	800b082 <lwip_htonl>
 8014310:	4603      	mov	r3, r0
 8014312:	461a      	mov	r2, r3
 8014314:	4629      	mov	r1, r5
 8014316:	4620      	mov	r0, r4
 8014318:	f000 fcee 	bl	8014cf8 <dhcp_option_long>
 801431c:	4603      	mov	r3, r0
 801431e:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014320:	89b8      	ldrh	r0, [r7, #12]
 8014322:	693b      	ldr	r3, [r7, #16]
 8014324:	33f0      	adds	r3, #240	; 0xf0
 8014326:	697a      	ldr	r2, [r7, #20]
 8014328:	4619      	mov	r1, r3
 801432a:	f001 f99f 	bl	801566c <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801432e:	4b19      	ldr	r3, [pc, #100]	; (8014394 <dhcp_decline+0xdc>)
 8014330:	6818      	ldr	r0, [r3, #0]
 8014332:	4b19      	ldr	r3, [pc, #100]	; (8014398 <dhcp_decline+0xe0>)
 8014334:	9301      	str	r3, [sp, #4]
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	9300      	str	r3, [sp, #0]
 801433a:	2343      	movs	r3, #67	; 0x43
 801433c:	4a17      	ldr	r2, [pc, #92]	; (801439c <dhcp_decline+0xe4>)
 801433e:	6979      	ldr	r1, [r7, #20]
 8014340:	f7ff f902 	bl	8013548 <udp_sendto_if_src>
 8014344:	4603      	mov	r3, r0
 8014346:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014348:	6978      	ldr	r0, [r7, #20]
 801434a:	f7f8 f9f1 	bl	800c730 <pbuf_free>
 801434e:	e001      	b.n	8014354 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014350:	23ff      	movs	r3, #255	; 0xff
 8014352:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014354:	69bb      	ldr	r3, [r7, #24]
 8014356:	799b      	ldrb	r3, [r3, #6]
 8014358:	2bff      	cmp	r3, #255	; 0xff
 801435a:	d005      	beq.n	8014368 <dhcp_decline+0xb0>
    dhcp->tries++;
 801435c:	69bb      	ldr	r3, [r7, #24]
 801435e:	799b      	ldrb	r3, [r3, #6]
 8014360:	3301      	adds	r3, #1
 8014362:	b2da      	uxtb	r2, r3
 8014364:	69bb      	ldr	r3, [r7, #24]
 8014366:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8014368:	f242 7310 	movw	r3, #10000	; 0x2710
 801436c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801436e:	89fb      	ldrh	r3, [r7, #14]
 8014370:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014374:	4a0a      	ldr	r2, [pc, #40]	; (80143a0 <dhcp_decline+0xe8>)
 8014376:	fb82 1203 	smull	r1, r2, r2, r3
 801437a:	1152      	asrs	r2, r2, #5
 801437c:	17db      	asrs	r3, r3, #31
 801437e:	1ad3      	subs	r3, r2, r3
 8014380:	b29a      	uxth	r2, r3
 8014382:	69bb      	ldr	r3, [r7, #24]
 8014384:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014386:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801438a:	4618      	mov	r0, r3
 801438c:	3720      	adds	r7, #32
 801438e:	46bd      	mov	sp, r7
 8014390:	bdb0      	pop	{r4, r5, r7, pc}
 8014392:	bf00      	nop
 8014394:	20008c98 	.word	0x20008c98
 8014398:	08028574 	.word	0x08028574
 801439c:	08028578 	.word	0x08028578
 80143a0:	10624dd3 	.word	0x10624dd3

080143a4 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 80143a4:	b580      	push	{r7, lr}
 80143a6:	b08a      	sub	sp, #40	; 0x28
 80143a8:	af02      	add	r7, sp, #8
 80143aa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	6a1b      	ldr	r3, [r3, #32]
 80143b0:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 80143b2:	2300      	movs	r3, #0
 80143b4:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 80143b6:	69bb      	ldr	r3, [r7, #24]
 80143b8:	2200      	movs	r2, #0
 80143ba:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 80143bc:	2106      	movs	r1, #6
 80143be:	69b8      	ldr	r0, [r7, #24]
 80143c0:	f000 fbf4 	bl	8014bac <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 80143c4:	f107 0308 	add.w	r3, r7, #8
 80143c8:	2201      	movs	r2, #1
 80143ca:	69b9      	ldr	r1, [r7, #24]
 80143cc:	6878      	ldr	r0, [r7, #4]
 80143ce:	f001 f877 	bl	80154c0 <dhcp_create_msg>
 80143d2:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 80143d4:	693b      	ldr	r3, [r7, #16]
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d04b      	beq.n	8014472 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80143da:	693b      	ldr	r3, [r7, #16]
 80143dc:	685b      	ldr	r3, [r3, #4]
 80143de:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80143e0:	8938      	ldrh	r0, [r7, #8]
 80143e2:	68fb      	ldr	r3, [r7, #12]
 80143e4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80143e8:	2302      	movs	r3, #2
 80143ea:	2239      	movs	r2, #57	; 0x39
 80143ec:	f000 fbf8 	bl	8014be0 <dhcp_option>
 80143f0:	4603      	mov	r3, r0
 80143f2:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80143f4:	8938      	ldrh	r0, [r7, #8]
 80143f6:	68fb      	ldr	r3, [r7, #12]
 80143f8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014400:	461a      	mov	r2, r3
 8014402:	f000 fc47 	bl	8014c94 <dhcp_option_short>
 8014406:	4603      	mov	r3, r0
 8014408:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801440a:	8938      	ldrh	r0, [r7, #8]
 801440c:	68fb      	ldr	r3, [r7, #12]
 801440e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014412:	2303      	movs	r3, #3
 8014414:	2237      	movs	r2, #55	; 0x37
 8014416:	f000 fbe3 	bl	8014be0 <dhcp_option>
 801441a:	4603      	mov	r3, r0
 801441c:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801441e:	2300      	movs	r3, #0
 8014420:	77fb      	strb	r3, [r7, #31]
 8014422:	e00e      	b.n	8014442 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014424:	8938      	ldrh	r0, [r7, #8]
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801442c:	7ffb      	ldrb	r3, [r7, #31]
 801442e:	4a29      	ldr	r2, [pc, #164]	; (80144d4 <dhcp_discover+0x130>)
 8014430:	5cd3      	ldrb	r3, [r2, r3]
 8014432:	461a      	mov	r2, r3
 8014434:	f000 fc08 	bl	8014c48 <dhcp_option_byte>
 8014438:	4603      	mov	r3, r0
 801443a:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801443c:	7ffb      	ldrb	r3, [r7, #31]
 801443e:	3301      	adds	r3, #1
 8014440:	77fb      	strb	r3, [r7, #31]
 8014442:	7ffb      	ldrb	r3, [r7, #31]
 8014444:	2b02      	cmp	r3, #2
 8014446:	d9ed      	bls.n	8014424 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014448:	8938      	ldrh	r0, [r7, #8]
 801444a:	68fb      	ldr	r3, [r7, #12]
 801444c:	33f0      	adds	r3, #240	; 0xf0
 801444e:	693a      	ldr	r2, [r7, #16]
 8014450:	4619      	mov	r1, r3
 8014452:	f001 f90b 	bl	801566c <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8014456:	4b20      	ldr	r3, [pc, #128]	; (80144d8 <dhcp_discover+0x134>)
 8014458:	6818      	ldr	r0, [r3, #0]
 801445a:	4b20      	ldr	r3, [pc, #128]	; (80144dc <dhcp_discover+0x138>)
 801445c:	9301      	str	r3, [sp, #4]
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	9300      	str	r3, [sp, #0]
 8014462:	2343      	movs	r3, #67	; 0x43
 8014464:	4a1e      	ldr	r2, [pc, #120]	; (80144e0 <dhcp_discover+0x13c>)
 8014466:	6939      	ldr	r1, [r7, #16]
 8014468:	f7ff f86e 	bl	8013548 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 801446c:	6938      	ldr	r0, [r7, #16]
 801446e:	f7f8 f95f 	bl	800c730 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8014472:	69bb      	ldr	r3, [r7, #24]
 8014474:	799b      	ldrb	r3, [r3, #6]
 8014476:	2bff      	cmp	r3, #255	; 0xff
 8014478:	d005      	beq.n	8014486 <dhcp_discover+0xe2>
    dhcp->tries++;
 801447a:	69bb      	ldr	r3, [r7, #24]
 801447c:	799b      	ldrb	r3, [r3, #6]
 801447e:	3301      	adds	r3, #1
 8014480:	b2da      	uxtb	r2, r3
 8014482:	69bb      	ldr	r3, [r7, #24]
 8014484:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8014486:	69bb      	ldr	r3, [r7, #24]
 8014488:	799b      	ldrb	r3, [r3, #6]
 801448a:	2b05      	cmp	r3, #5
 801448c:	d80d      	bhi.n	80144aa <dhcp_discover+0x106>
 801448e:	69bb      	ldr	r3, [r7, #24]
 8014490:	799b      	ldrb	r3, [r3, #6]
 8014492:	461a      	mov	r2, r3
 8014494:	2301      	movs	r3, #1
 8014496:	4093      	lsls	r3, r2
 8014498:	b29b      	uxth	r3, r3
 801449a:	461a      	mov	r2, r3
 801449c:	0152      	lsls	r2, r2, #5
 801449e:	1ad2      	subs	r2, r2, r3
 80144a0:	0092      	lsls	r2, r2, #2
 80144a2:	4413      	add	r3, r2
 80144a4:	00db      	lsls	r3, r3, #3
 80144a6:	b29b      	uxth	r3, r3
 80144a8:	e001      	b.n	80144ae <dhcp_discover+0x10a>
 80144aa:	f64e 2360 	movw	r3, #60000	; 0xea60
 80144ae:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80144b0:	897b      	ldrh	r3, [r7, #10]
 80144b2:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80144b6:	4a0b      	ldr	r2, [pc, #44]	; (80144e4 <dhcp_discover+0x140>)
 80144b8:	fb82 1203 	smull	r1, r2, r2, r3
 80144bc:	1152      	asrs	r2, r2, #5
 80144be:	17db      	asrs	r3, r3, #31
 80144c0:	1ad3      	subs	r3, r2, r3
 80144c2:	b29a      	uxth	r2, r3
 80144c4:	69bb      	ldr	r3, [r7, #24]
 80144c6:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80144c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80144cc:	4618      	mov	r0, r3
 80144ce:	3720      	adds	r7, #32
 80144d0:	46bd      	mov	sp, r7
 80144d2:	bd80      	pop	{r7, pc}
 80144d4:	2000001c 	.word	0x2000001c
 80144d8:	20008c98 	.word	0x20008c98
 80144dc:	08028574 	.word	0x08028574
 80144e0:	08028578 	.word	0x08028578
 80144e4:	10624dd3 	.word	0x10624dd3

080144e8 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 80144e8:	b580      	push	{r7, lr}
 80144ea:	b088      	sub	sp, #32
 80144ec:	af00      	add	r7, sp, #0
 80144ee:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d107      	bne.n	8014506 <dhcp_bind+0x1e>
 80144f6:	4b64      	ldr	r3, [pc, #400]	; (8014688 <dhcp_bind+0x1a0>)
 80144f8:	f240 4215 	movw	r2, #1045	; 0x415
 80144fc:	4963      	ldr	r1, [pc, #396]	; (801468c <dhcp_bind+0x1a4>)
 80144fe:	4864      	ldr	r0, [pc, #400]	; (8014690 <dhcp_bind+0x1a8>)
 8014500:	f003 fe46 	bl	8018190 <iprintf>
 8014504:	e0bc      	b.n	8014680 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	6a1b      	ldr	r3, [r3, #32]
 801450a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801450c:	69bb      	ldr	r3, [r7, #24]
 801450e:	2b00      	cmp	r3, #0
 8014510:	d107      	bne.n	8014522 <dhcp_bind+0x3a>
 8014512:	4b5d      	ldr	r3, [pc, #372]	; (8014688 <dhcp_bind+0x1a0>)
 8014514:	f240 4217 	movw	r2, #1047	; 0x417
 8014518:	495e      	ldr	r1, [pc, #376]	; (8014694 <dhcp_bind+0x1ac>)
 801451a:	485d      	ldr	r0, [pc, #372]	; (8014690 <dhcp_bind+0x1a8>)
 801451c:	f003 fe38 	bl	8018190 <iprintf>
 8014520:	e0ae      	b.n	8014680 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8014522:	69bb      	ldr	r3, [r7, #24]
 8014524:	2200      	movs	r2, #0
 8014526:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8014528:	69bb      	ldr	r3, [r7, #24]
 801452a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801452c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014530:	d019      	beq.n	8014566 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8014532:	69bb      	ldr	r3, [r7, #24]
 8014534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014536:	331e      	adds	r3, #30
 8014538:	4a57      	ldr	r2, [pc, #348]	; (8014698 <dhcp_bind+0x1b0>)
 801453a:	fba2 2303 	umull	r2, r3, r2, r3
 801453e:	095b      	lsrs	r3, r3, #5
 8014540:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8014542:	69fb      	ldr	r3, [r7, #28]
 8014544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014548:	d302      	bcc.n	8014550 <dhcp_bind+0x68>
      timeout = 0xffff;
 801454a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801454e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8014550:	69fb      	ldr	r3, [r7, #28]
 8014552:	b29a      	uxth	r2, r3
 8014554:	69bb      	ldr	r3, [r7, #24]
 8014556:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8014558:	69bb      	ldr	r3, [r7, #24]
 801455a:	8a9b      	ldrh	r3, [r3, #20]
 801455c:	2b00      	cmp	r3, #0
 801455e:	d102      	bne.n	8014566 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8014560:	69bb      	ldr	r3, [r7, #24]
 8014562:	2201      	movs	r2, #1
 8014564:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8014566:	69bb      	ldr	r3, [r7, #24]
 8014568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801456a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801456e:	d01d      	beq.n	80145ac <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8014570:	69bb      	ldr	r3, [r7, #24]
 8014572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014574:	331e      	adds	r3, #30
 8014576:	4a48      	ldr	r2, [pc, #288]	; (8014698 <dhcp_bind+0x1b0>)
 8014578:	fba2 2303 	umull	r2, r3, r2, r3
 801457c:	095b      	lsrs	r3, r3, #5
 801457e:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8014580:	69fb      	ldr	r3, [r7, #28]
 8014582:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014586:	d302      	bcc.n	801458e <dhcp_bind+0xa6>
      timeout = 0xffff;
 8014588:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801458c:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801458e:	69fb      	ldr	r3, [r7, #28]
 8014590:	b29a      	uxth	r2, r3
 8014592:	69bb      	ldr	r3, [r7, #24]
 8014594:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8014596:	69bb      	ldr	r3, [r7, #24]
 8014598:	895b      	ldrh	r3, [r3, #10]
 801459a:	2b00      	cmp	r3, #0
 801459c:	d102      	bne.n	80145a4 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801459e:	69bb      	ldr	r3, [r7, #24]
 80145a0:	2201      	movs	r2, #1
 80145a2:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 80145a4:	69bb      	ldr	r3, [r7, #24]
 80145a6:	895a      	ldrh	r2, [r3, #10]
 80145a8:	69bb      	ldr	r3, [r7, #24]
 80145aa:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80145ac:	69bb      	ldr	r3, [r7, #24]
 80145ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80145b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80145b4:	d01d      	beq.n	80145f2 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80145b6:	69bb      	ldr	r3, [r7, #24]
 80145b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80145ba:	331e      	adds	r3, #30
 80145bc:	4a36      	ldr	r2, [pc, #216]	; (8014698 <dhcp_bind+0x1b0>)
 80145be:	fba2 2303 	umull	r2, r3, r2, r3
 80145c2:	095b      	lsrs	r3, r3, #5
 80145c4:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80145c6:	69fb      	ldr	r3, [r7, #28]
 80145c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80145cc:	d302      	bcc.n	80145d4 <dhcp_bind+0xec>
      timeout = 0xffff;
 80145ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80145d2:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 80145d4:	69fb      	ldr	r3, [r7, #28]
 80145d6:	b29a      	uxth	r2, r3
 80145d8:	69bb      	ldr	r3, [r7, #24]
 80145da:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 80145dc:	69bb      	ldr	r3, [r7, #24]
 80145de:	899b      	ldrh	r3, [r3, #12]
 80145e0:	2b00      	cmp	r3, #0
 80145e2:	d102      	bne.n	80145ea <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 80145e4:	69bb      	ldr	r3, [r7, #24]
 80145e6:	2201      	movs	r2, #1
 80145e8:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80145ea:	69bb      	ldr	r3, [r7, #24]
 80145ec:	899a      	ldrh	r2, [r3, #12]
 80145ee:	69bb      	ldr	r3, [r7, #24]
 80145f0:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80145f2:	69bb      	ldr	r3, [r7, #24]
 80145f4:	895a      	ldrh	r2, [r3, #10]
 80145f6:	69bb      	ldr	r3, [r7, #24]
 80145f8:	899b      	ldrh	r3, [r3, #12]
 80145fa:	429a      	cmp	r2, r3
 80145fc:	d306      	bcc.n	801460c <dhcp_bind+0x124>
 80145fe:	69bb      	ldr	r3, [r7, #24]
 8014600:	899b      	ldrh	r3, [r3, #12]
 8014602:	2b00      	cmp	r3, #0
 8014604:	d002      	beq.n	801460c <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8014606:	69bb      	ldr	r3, [r7, #24]
 8014608:	2200      	movs	r2, #0
 801460a:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 801460c:	69bb      	ldr	r3, [r7, #24]
 801460e:	79db      	ldrb	r3, [r3, #7]
 8014610:	2b00      	cmp	r3, #0
 8014612:	d003      	beq.n	801461c <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8014614:	69bb      	ldr	r3, [r7, #24]
 8014616:	6a1b      	ldr	r3, [r3, #32]
 8014618:	613b      	str	r3, [r7, #16]
 801461a:	e014      	b.n	8014646 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801461c:	69bb      	ldr	r3, [r7, #24]
 801461e:	331c      	adds	r3, #28
 8014620:	781b      	ldrb	r3, [r3, #0]
 8014622:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8014624:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014628:	2b00      	cmp	r3, #0
 801462a:	db02      	blt.n	8014632 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801462c:	23ff      	movs	r3, #255	; 0xff
 801462e:	613b      	str	r3, [r7, #16]
 8014630:	e009      	b.n	8014646 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8014632:	7dfb      	ldrb	r3, [r7, #23]
 8014634:	2bbf      	cmp	r3, #191	; 0xbf
 8014636:	d903      	bls.n	8014640 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8014638:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801463c:	613b      	str	r3, [r7, #16]
 801463e:	e002      	b.n	8014646 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8014640:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014644:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8014646:	69bb      	ldr	r3, [r7, #24]
 8014648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801464a:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 801464c:	68fb      	ldr	r3, [r7, #12]
 801464e:	2b00      	cmp	r3, #0
 8014650:	d108      	bne.n	8014664 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8014652:	69bb      	ldr	r3, [r7, #24]
 8014654:	69da      	ldr	r2, [r3, #28]
 8014656:	693b      	ldr	r3, [r7, #16]
 8014658:	4013      	ands	r3, r2
 801465a:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801465c:	68fb      	ldr	r3, [r7, #12]
 801465e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8014662:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8014664:	210a      	movs	r1, #10
 8014666:	69b8      	ldr	r0, [r7, #24]
 8014668:	f000 faa0 	bl	8014bac <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801466c:	69bb      	ldr	r3, [r7, #24]
 801466e:	f103 011c 	add.w	r1, r3, #28
 8014672:	f107 030c 	add.w	r3, r7, #12
 8014676:	f107 0210 	add.w	r2, r7, #16
 801467a:	6878      	ldr	r0, [r7, #4]
 801467c:	f7f7 fbc8 	bl	800be10 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8014680:	3720      	adds	r7, #32
 8014682:	46bd      	mov	sp, r7
 8014684:	bd80      	pop	{r7, pc}
 8014686:	bf00      	nop
 8014688:	0801c600 	.word	0x0801c600
 801468c:	0801c760 	.word	0x0801c760
 8014690:	0801c660 	.word	0x0801c660
 8014694:	0801c77c 	.word	0x0801c77c
 8014698:	88888889 	.word	0x88888889

0801469c <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 801469c:	b580      	push	{r7, lr}
 801469e:	b08a      	sub	sp, #40	; 0x28
 80146a0:	af02      	add	r7, sp, #8
 80146a2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	6a1b      	ldr	r3, [r3, #32]
 80146a8:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 80146aa:	2105      	movs	r1, #5
 80146ac:	69b8      	ldr	r0, [r7, #24]
 80146ae:	f000 fa7d 	bl	8014bac <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80146b2:	f107 030c 	add.w	r3, r7, #12
 80146b6:	2203      	movs	r2, #3
 80146b8:	69b9      	ldr	r1, [r7, #24]
 80146ba:	6878      	ldr	r0, [r7, #4]
 80146bc:	f000 ff00 	bl	80154c0 <dhcp_create_msg>
 80146c0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80146c2:	697b      	ldr	r3, [r7, #20]
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	d04e      	beq.n	8014766 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80146c8:	697b      	ldr	r3, [r7, #20]
 80146ca:	685b      	ldr	r3, [r3, #4]
 80146cc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80146ce:	89b8      	ldrh	r0, [r7, #12]
 80146d0:	693b      	ldr	r3, [r7, #16]
 80146d2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80146d6:	2302      	movs	r3, #2
 80146d8:	2239      	movs	r2, #57	; 0x39
 80146da:	f000 fa81 	bl	8014be0 <dhcp_option>
 80146de:	4603      	mov	r3, r0
 80146e0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80146e2:	89b8      	ldrh	r0, [r7, #12]
 80146e4:	693b      	ldr	r3, [r7, #16]
 80146e6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80146ee:	461a      	mov	r2, r3
 80146f0:	f000 fad0 	bl	8014c94 <dhcp_option_short>
 80146f4:	4603      	mov	r3, r0
 80146f6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80146f8:	89b8      	ldrh	r0, [r7, #12]
 80146fa:	693b      	ldr	r3, [r7, #16]
 80146fc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014700:	2303      	movs	r3, #3
 8014702:	2237      	movs	r2, #55	; 0x37
 8014704:	f000 fa6c 	bl	8014be0 <dhcp_option>
 8014708:	4603      	mov	r3, r0
 801470a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801470c:	2300      	movs	r3, #0
 801470e:	77bb      	strb	r3, [r7, #30]
 8014710:	e00e      	b.n	8014730 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014712:	89b8      	ldrh	r0, [r7, #12]
 8014714:	693b      	ldr	r3, [r7, #16]
 8014716:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801471a:	7fbb      	ldrb	r3, [r7, #30]
 801471c:	4a2a      	ldr	r2, [pc, #168]	; (80147c8 <dhcp_renew+0x12c>)
 801471e:	5cd3      	ldrb	r3, [r2, r3]
 8014720:	461a      	mov	r2, r3
 8014722:	f000 fa91 	bl	8014c48 <dhcp_option_byte>
 8014726:	4603      	mov	r3, r0
 8014728:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801472a:	7fbb      	ldrb	r3, [r7, #30]
 801472c:	3301      	adds	r3, #1
 801472e:	77bb      	strb	r3, [r7, #30]
 8014730:	7fbb      	ldrb	r3, [r7, #30]
 8014732:	2b02      	cmp	r3, #2
 8014734:	d9ed      	bls.n	8014712 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014736:	89b8      	ldrh	r0, [r7, #12]
 8014738:	693b      	ldr	r3, [r7, #16]
 801473a:	33f0      	adds	r3, #240	; 0xf0
 801473c:	697a      	ldr	r2, [r7, #20]
 801473e:	4619      	mov	r1, r3
 8014740:	f000 ff94 	bl	801566c <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014744:	4b21      	ldr	r3, [pc, #132]	; (80147cc <dhcp_renew+0x130>)
 8014746:	6818      	ldr	r0, [r3, #0]
 8014748:	69bb      	ldr	r3, [r7, #24]
 801474a:	f103 0218 	add.w	r2, r3, #24
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	9300      	str	r3, [sp, #0]
 8014752:	2343      	movs	r3, #67	; 0x43
 8014754:	6979      	ldr	r1, [r7, #20]
 8014756:	f7fe fe83 	bl	8013460 <udp_sendto_if>
 801475a:	4603      	mov	r3, r0
 801475c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801475e:	6978      	ldr	r0, [r7, #20]
 8014760:	f7f7 ffe6 	bl	800c730 <pbuf_free>
 8014764:	e001      	b.n	801476a <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014766:	23ff      	movs	r3, #255	; 0xff
 8014768:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801476a:	69bb      	ldr	r3, [r7, #24]
 801476c:	799b      	ldrb	r3, [r3, #6]
 801476e:	2bff      	cmp	r3, #255	; 0xff
 8014770:	d005      	beq.n	801477e <dhcp_renew+0xe2>
    dhcp->tries++;
 8014772:	69bb      	ldr	r3, [r7, #24]
 8014774:	799b      	ldrb	r3, [r3, #6]
 8014776:	3301      	adds	r3, #1
 8014778:	b2da      	uxtb	r2, r3
 801477a:	69bb      	ldr	r3, [r7, #24]
 801477c:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801477e:	69bb      	ldr	r3, [r7, #24]
 8014780:	799b      	ldrb	r3, [r3, #6]
 8014782:	2b09      	cmp	r3, #9
 8014784:	d80a      	bhi.n	801479c <dhcp_renew+0x100>
 8014786:	69bb      	ldr	r3, [r7, #24]
 8014788:	799b      	ldrb	r3, [r3, #6]
 801478a:	b29b      	uxth	r3, r3
 801478c:	461a      	mov	r2, r3
 801478e:	0152      	lsls	r2, r2, #5
 8014790:	1ad2      	subs	r2, r2, r3
 8014792:	0092      	lsls	r2, r2, #2
 8014794:	4413      	add	r3, r2
 8014796:	011b      	lsls	r3, r3, #4
 8014798:	b29b      	uxth	r3, r3
 801479a:	e001      	b.n	80147a0 <dhcp_renew+0x104>
 801479c:	f644 6320 	movw	r3, #20000	; 0x4e20
 80147a0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80147a2:	89fb      	ldrh	r3, [r7, #14]
 80147a4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80147a8:	4a09      	ldr	r2, [pc, #36]	; (80147d0 <dhcp_renew+0x134>)
 80147aa:	fb82 1203 	smull	r1, r2, r2, r3
 80147ae:	1152      	asrs	r2, r2, #5
 80147b0:	17db      	asrs	r3, r3, #31
 80147b2:	1ad3      	subs	r3, r2, r3
 80147b4:	b29a      	uxth	r2, r3
 80147b6:	69bb      	ldr	r3, [r7, #24]
 80147b8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80147ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80147be:	4618      	mov	r0, r3
 80147c0:	3720      	adds	r7, #32
 80147c2:	46bd      	mov	sp, r7
 80147c4:	bd80      	pop	{r7, pc}
 80147c6:	bf00      	nop
 80147c8:	2000001c 	.word	0x2000001c
 80147cc:	20008c98 	.word	0x20008c98
 80147d0:	10624dd3 	.word	0x10624dd3

080147d4 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 80147d4:	b580      	push	{r7, lr}
 80147d6:	b08a      	sub	sp, #40	; 0x28
 80147d8:	af02      	add	r7, sp, #8
 80147da:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	6a1b      	ldr	r3, [r3, #32]
 80147e0:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 80147e2:	2104      	movs	r1, #4
 80147e4:	69b8      	ldr	r0, [r7, #24]
 80147e6:	f000 f9e1 	bl	8014bac <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80147ea:	f107 030c 	add.w	r3, r7, #12
 80147ee:	2203      	movs	r2, #3
 80147f0:	69b9      	ldr	r1, [r7, #24]
 80147f2:	6878      	ldr	r0, [r7, #4]
 80147f4:	f000 fe64 	bl	80154c0 <dhcp_create_msg>
 80147f8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80147fa:	697b      	ldr	r3, [r7, #20]
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d04c      	beq.n	801489a <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014800:	697b      	ldr	r3, [r7, #20]
 8014802:	685b      	ldr	r3, [r3, #4]
 8014804:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014806:	89b8      	ldrh	r0, [r7, #12]
 8014808:	693b      	ldr	r3, [r7, #16]
 801480a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801480e:	2302      	movs	r3, #2
 8014810:	2239      	movs	r2, #57	; 0x39
 8014812:	f000 f9e5 	bl	8014be0 <dhcp_option>
 8014816:	4603      	mov	r3, r0
 8014818:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801481a:	89b8      	ldrh	r0, [r7, #12]
 801481c:	693b      	ldr	r3, [r7, #16]
 801481e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014826:	461a      	mov	r2, r3
 8014828:	f000 fa34 	bl	8014c94 <dhcp_option_short>
 801482c:	4603      	mov	r3, r0
 801482e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014830:	89b8      	ldrh	r0, [r7, #12]
 8014832:	693b      	ldr	r3, [r7, #16]
 8014834:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014838:	2303      	movs	r3, #3
 801483a:	2237      	movs	r2, #55	; 0x37
 801483c:	f000 f9d0 	bl	8014be0 <dhcp_option>
 8014840:	4603      	mov	r3, r0
 8014842:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014844:	2300      	movs	r3, #0
 8014846:	77bb      	strb	r3, [r7, #30]
 8014848:	e00e      	b.n	8014868 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801484a:	89b8      	ldrh	r0, [r7, #12]
 801484c:	693b      	ldr	r3, [r7, #16]
 801484e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014852:	7fbb      	ldrb	r3, [r7, #30]
 8014854:	4a29      	ldr	r2, [pc, #164]	; (80148fc <dhcp_rebind+0x128>)
 8014856:	5cd3      	ldrb	r3, [r2, r3]
 8014858:	461a      	mov	r2, r3
 801485a:	f000 f9f5 	bl	8014c48 <dhcp_option_byte>
 801485e:	4603      	mov	r3, r0
 8014860:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014862:	7fbb      	ldrb	r3, [r7, #30]
 8014864:	3301      	adds	r3, #1
 8014866:	77bb      	strb	r3, [r7, #30]
 8014868:	7fbb      	ldrb	r3, [r7, #30]
 801486a:	2b02      	cmp	r3, #2
 801486c:	d9ed      	bls.n	801484a <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801486e:	89b8      	ldrh	r0, [r7, #12]
 8014870:	693b      	ldr	r3, [r7, #16]
 8014872:	33f0      	adds	r3, #240	; 0xf0
 8014874:	697a      	ldr	r2, [r7, #20]
 8014876:	4619      	mov	r1, r3
 8014878:	f000 fef8 	bl	801566c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801487c:	4b20      	ldr	r3, [pc, #128]	; (8014900 <dhcp_rebind+0x12c>)
 801487e:	6818      	ldr	r0, [r3, #0]
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	9300      	str	r3, [sp, #0]
 8014884:	2343      	movs	r3, #67	; 0x43
 8014886:	4a1f      	ldr	r2, [pc, #124]	; (8014904 <dhcp_rebind+0x130>)
 8014888:	6979      	ldr	r1, [r7, #20]
 801488a:	f7fe fde9 	bl	8013460 <udp_sendto_if>
 801488e:	4603      	mov	r3, r0
 8014890:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014892:	6978      	ldr	r0, [r7, #20]
 8014894:	f7f7 ff4c 	bl	800c730 <pbuf_free>
 8014898:	e001      	b.n	801489e <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801489a:	23ff      	movs	r3, #255	; 0xff
 801489c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801489e:	69bb      	ldr	r3, [r7, #24]
 80148a0:	799b      	ldrb	r3, [r3, #6]
 80148a2:	2bff      	cmp	r3, #255	; 0xff
 80148a4:	d005      	beq.n	80148b2 <dhcp_rebind+0xde>
    dhcp->tries++;
 80148a6:	69bb      	ldr	r3, [r7, #24]
 80148a8:	799b      	ldrb	r3, [r3, #6]
 80148aa:	3301      	adds	r3, #1
 80148ac:	b2da      	uxtb	r2, r3
 80148ae:	69bb      	ldr	r3, [r7, #24]
 80148b0:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80148b2:	69bb      	ldr	r3, [r7, #24]
 80148b4:	799b      	ldrb	r3, [r3, #6]
 80148b6:	2b09      	cmp	r3, #9
 80148b8:	d80a      	bhi.n	80148d0 <dhcp_rebind+0xfc>
 80148ba:	69bb      	ldr	r3, [r7, #24]
 80148bc:	799b      	ldrb	r3, [r3, #6]
 80148be:	b29b      	uxth	r3, r3
 80148c0:	461a      	mov	r2, r3
 80148c2:	0152      	lsls	r2, r2, #5
 80148c4:	1ad2      	subs	r2, r2, r3
 80148c6:	0092      	lsls	r2, r2, #2
 80148c8:	4413      	add	r3, r2
 80148ca:	00db      	lsls	r3, r3, #3
 80148cc:	b29b      	uxth	r3, r3
 80148ce:	e001      	b.n	80148d4 <dhcp_rebind+0x100>
 80148d0:	f242 7310 	movw	r3, #10000	; 0x2710
 80148d4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80148d6:	89fb      	ldrh	r3, [r7, #14]
 80148d8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80148dc:	4a0a      	ldr	r2, [pc, #40]	; (8014908 <dhcp_rebind+0x134>)
 80148de:	fb82 1203 	smull	r1, r2, r2, r3
 80148e2:	1152      	asrs	r2, r2, #5
 80148e4:	17db      	asrs	r3, r3, #31
 80148e6:	1ad3      	subs	r3, r2, r3
 80148e8:	b29a      	uxth	r2, r3
 80148ea:	69bb      	ldr	r3, [r7, #24]
 80148ec:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80148ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80148f2:	4618      	mov	r0, r3
 80148f4:	3720      	adds	r7, #32
 80148f6:	46bd      	mov	sp, r7
 80148f8:	bd80      	pop	{r7, pc}
 80148fa:	bf00      	nop
 80148fc:	2000001c 	.word	0x2000001c
 8014900:	20008c98 	.word	0x20008c98
 8014904:	08028578 	.word	0x08028578
 8014908:	10624dd3 	.word	0x10624dd3

0801490c <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 801490c:	b5b0      	push	{r4, r5, r7, lr}
 801490e:	b08a      	sub	sp, #40	; 0x28
 8014910:	af02      	add	r7, sp, #8
 8014912:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	6a1b      	ldr	r3, [r3, #32]
 8014918:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801491a:	2103      	movs	r1, #3
 801491c:	69b8      	ldr	r0, [r7, #24]
 801491e:	f000 f945 	bl	8014bac <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014922:	f107 030c 	add.w	r3, r7, #12
 8014926:	2203      	movs	r2, #3
 8014928:	69b9      	ldr	r1, [r7, #24]
 801492a:	6878      	ldr	r0, [r7, #4]
 801492c:	f000 fdc8 	bl	80154c0 <dhcp_create_msg>
 8014930:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014932:	697b      	ldr	r3, [r7, #20]
 8014934:	2b00      	cmp	r3, #0
 8014936:	d066      	beq.n	8014a06 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014938:	697b      	ldr	r3, [r7, #20]
 801493a:	685b      	ldr	r3, [r3, #4]
 801493c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801493e:	89b8      	ldrh	r0, [r7, #12]
 8014940:	693b      	ldr	r3, [r7, #16]
 8014942:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014946:	2302      	movs	r3, #2
 8014948:	2239      	movs	r2, #57	; 0x39
 801494a:	f000 f949 	bl	8014be0 <dhcp_option>
 801494e:	4603      	mov	r3, r0
 8014950:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8014952:	89b8      	ldrh	r0, [r7, #12]
 8014954:	693b      	ldr	r3, [r7, #16]
 8014956:	33f0      	adds	r3, #240	; 0xf0
 8014958:	f44f 7210 	mov.w	r2, #576	; 0x240
 801495c:	4619      	mov	r1, r3
 801495e:	f000 f999 	bl	8014c94 <dhcp_option_short>
 8014962:	4603      	mov	r3, r0
 8014964:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8014966:	89b8      	ldrh	r0, [r7, #12]
 8014968:	693b      	ldr	r3, [r7, #16]
 801496a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801496e:	2304      	movs	r3, #4
 8014970:	2232      	movs	r2, #50	; 0x32
 8014972:	f000 f935 	bl	8014be0 <dhcp_option>
 8014976:	4603      	mov	r3, r0
 8014978:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801497a:	89bc      	ldrh	r4, [r7, #12]
 801497c:	693b      	ldr	r3, [r7, #16]
 801497e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014982:	69bb      	ldr	r3, [r7, #24]
 8014984:	69db      	ldr	r3, [r3, #28]
 8014986:	4618      	mov	r0, r3
 8014988:	f7f6 fb7b 	bl	800b082 <lwip_htonl>
 801498c:	4603      	mov	r3, r0
 801498e:	461a      	mov	r2, r3
 8014990:	4629      	mov	r1, r5
 8014992:	4620      	mov	r0, r4
 8014994:	f000 f9b0 	bl	8014cf8 <dhcp_option_long>
 8014998:	4603      	mov	r3, r0
 801499a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801499c:	89b8      	ldrh	r0, [r7, #12]
 801499e:	693b      	ldr	r3, [r7, #16]
 80149a0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80149a4:	2303      	movs	r3, #3
 80149a6:	2237      	movs	r2, #55	; 0x37
 80149a8:	f000 f91a 	bl	8014be0 <dhcp_option>
 80149ac:	4603      	mov	r3, r0
 80149ae:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80149b0:	2300      	movs	r3, #0
 80149b2:	77bb      	strb	r3, [r7, #30]
 80149b4:	e00e      	b.n	80149d4 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80149b6:	89b8      	ldrh	r0, [r7, #12]
 80149b8:	693b      	ldr	r3, [r7, #16]
 80149ba:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80149be:	7fbb      	ldrb	r3, [r7, #30]
 80149c0:	4a29      	ldr	r2, [pc, #164]	; (8014a68 <dhcp_reboot+0x15c>)
 80149c2:	5cd3      	ldrb	r3, [r2, r3]
 80149c4:	461a      	mov	r2, r3
 80149c6:	f000 f93f 	bl	8014c48 <dhcp_option_byte>
 80149ca:	4603      	mov	r3, r0
 80149cc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80149ce:	7fbb      	ldrb	r3, [r7, #30]
 80149d0:	3301      	adds	r3, #1
 80149d2:	77bb      	strb	r3, [r7, #30]
 80149d4:	7fbb      	ldrb	r3, [r7, #30]
 80149d6:	2b02      	cmp	r3, #2
 80149d8:	d9ed      	bls.n	80149b6 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80149da:	89b8      	ldrh	r0, [r7, #12]
 80149dc:	693b      	ldr	r3, [r7, #16]
 80149de:	33f0      	adds	r3, #240	; 0xf0
 80149e0:	697a      	ldr	r2, [r7, #20]
 80149e2:	4619      	mov	r1, r3
 80149e4:	f000 fe42 	bl	801566c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80149e8:	4b20      	ldr	r3, [pc, #128]	; (8014a6c <dhcp_reboot+0x160>)
 80149ea:	6818      	ldr	r0, [r3, #0]
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	9300      	str	r3, [sp, #0]
 80149f0:	2343      	movs	r3, #67	; 0x43
 80149f2:	4a1f      	ldr	r2, [pc, #124]	; (8014a70 <dhcp_reboot+0x164>)
 80149f4:	6979      	ldr	r1, [r7, #20]
 80149f6:	f7fe fd33 	bl	8013460 <udp_sendto_if>
 80149fa:	4603      	mov	r3, r0
 80149fc:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80149fe:	6978      	ldr	r0, [r7, #20]
 8014a00:	f7f7 fe96 	bl	800c730 <pbuf_free>
 8014a04:	e001      	b.n	8014a0a <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014a06:	23ff      	movs	r3, #255	; 0xff
 8014a08:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014a0a:	69bb      	ldr	r3, [r7, #24]
 8014a0c:	799b      	ldrb	r3, [r3, #6]
 8014a0e:	2bff      	cmp	r3, #255	; 0xff
 8014a10:	d005      	beq.n	8014a1e <dhcp_reboot+0x112>
    dhcp->tries++;
 8014a12:	69bb      	ldr	r3, [r7, #24]
 8014a14:	799b      	ldrb	r3, [r3, #6]
 8014a16:	3301      	adds	r3, #1
 8014a18:	b2da      	uxtb	r2, r3
 8014a1a:	69bb      	ldr	r3, [r7, #24]
 8014a1c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8014a1e:	69bb      	ldr	r3, [r7, #24]
 8014a20:	799b      	ldrb	r3, [r3, #6]
 8014a22:	2b09      	cmp	r3, #9
 8014a24:	d80a      	bhi.n	8014a3c <dhcp_reboot+0x130>
 8014a26:	69bb      	ldr	r3, [r7, #24]
 8014a28:	799b      	ldrb	r3, [r3, #6]
 8014a2a:	b29b      	uxth	r3, r3
 8014a2c:	461a      	mov	r2, r3
 8014a2e:	0152      	lsls	r2, r2, #5
 8014a30:	1ad2      	subs	r2, r2, r3
 8014a32:	0092      	lsls	r2, r2, #2
 8014a34:	4413      	add	r3, r2
 8014a36:	00db      	lsls	r3, r3, #3
 8014a38:	b29b      	uxth	r3, r3
 8014a3a:	e001      	b.n	8014a40 <dhcp_reboot+0x134>
 8014a3c:	f242 7310 	movw	r3, #10000	; 0x2710
 8014a40:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014a42:	89fb      	ldrh	r3, [r7, #14]
 8014a44:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014a48:	4a0a      	ldr	r2, [pc, #40]	; (8014a74 <dhcp_reboot+0x168>)
 8014a4a:	fb82 1203 	smull	r1, r2, r2, r3
 8014a4e:	1152      	asrs	r2, r2, #5
 8014a50:	17db      	asrs	r3, r3, #31
 8014a52:	1ad3      	subs	r3, r2, r3
 8014a54:	b29a      	uxth	r2, r3
 8014a56:	69bb      	ldr	r3, [r7, #24]
 8014a58:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014a5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014a5e:	4618      	mov	r0, r3
 8014a60:	3720      	adds	r7, #32
 8014a62:	46bd      	mov	sp, r7
 8014a64:	bdb0      	pop	{r4, r5, r7, pc}
 8014a66:	bf00      	nop
 8014a68:	2000001c 	.word	0x2000001c
 8014a6c:	20008c98 	.word	0x20008c98
 8014a70:	08028578 	.word	0x08028578
 8014a74:	10624dd3 	.word	0x10624dd3

08014a78 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8014a78:	b5b0      	push	{r4, r5, r7, lr}
 8014a7a:	b08a      	sub	sp, #40	; 0x28
 8014a7c:	af02      	add	r7, sp, #8
 8014a7e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	6a1b      	ldr	r3, [r3, #32]
 8014a84:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8014a86:	69fb      	ldr	r3, [r7, #28]
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	f000 8084 	beq.w	8014b96 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8014a8e:	69fb      	ldr	r3, [r7, #28]
 8014a90:	795b      	ldrb	r3, [r3, #5]
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	f000 8081 	beq.w	8014b9a <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8014a98:	69fb      	ldr	r3, [r7, #28]
 8014a9a:	699b      	ldr	r3, [r3, #24]
 8014a9c:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8014a9e:	69fb      	ldr	r3, [r7, #28]
 8014aa0:	2200      	movs	r2, #0
 8014aa2:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8014aa4:	69fb      	ldr	r3, [r7, #28]
 8014aa6:	2200      	movs	r2, #0
 8014aa8:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8014aaa:	69fb      	ldr	r3, [r7, #28]
 8014aac:	2200      	movs	r2, #0
 8014aae:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8014ab0:	69fb      	ldr	r3, [r7, #28]
 8014ab2:	2200      	movs	r2, #0
 8014ab4:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8014ab6:	69fb      	ldr	r3, [r7, #28]
 8014ab8:	2200      	movs	r2, #0
 8014aba:	631a      	str	r2, [r3, #48]	; 0x30
 8014abc:	69fb      	ldr	r3, [r7, #28]
 8014abe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014ac0:	69fb      	ldr	r3, [r7, #28]
 8014ac2:	62da      	str	r2, [r3, #44]	; 0x2c
 8014ac4:	69fb      	ldr	r3, [r7, #28]
 8014ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ac8:	69fb      	ldr	r3, [r7, #28]
 8014aca:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8014acc:	69fb      	ldr	r3, [r7, #28]
 8014ace:	2200      	movs	r2, #0
 8014ad0:	829a      	strh	r2, [r3, #20]
 8014ad2:	69fb      	ldr	r3, [r7, #28]
 8014ad4:	8a9a      	ldrh	r2, [r3, #20]
 8014ad6:	69fb      	ldr	r3, [r7, #28]
 8014ad8:	825a      	strh	r2, [r3, #18]
 8014ada:	69fb      	ldr	r3, [r7, #28]
 8014adc:	8a5a      	ldrh	r2, [r3, #18]
 8014ade:	69fb      	ldr	r3, [r7, #28]
 8014ae0:	821a      	strh	r2, [r3, #16]
 8014ae2:	69fb      	ldr	r3, [r7, #28]
 8014ae4:	8a1a      	ldrh	r2, [r3, #16]
 8014ae6:	69fb      	ldr	r3, [r7, #28]
 8014ae8:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8014aea:	6878      	ldr	r0, [r7, #4]
 8014aec:	f000 fdec 	bl	80156c8 <dhcp_supplied_address>
 8014af0:	4603      	mov	r3, r0
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	d03b      	beq.n	8014b6e <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8014af6:	f107 030e 	add.w	r3, r7, #14
 8014afa:	2207      	movs	r2, #7
 8014afc:	69f9      	ldr	r1, [r7, #28]
 8014afe:	6878      	ldr	r0, [r7, #4]
 8014b00:	f000 fcde 	bl	80154c0 <dhcp_create_msg>
 8014b04:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8014b06:	69bb      	ldr	r3, [r7, #24]
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d030      	beq.n	8014b6e <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014b0c:	69bb      	ldr	r3, [r7, #24]
 8014b0e:	685b      	ldr	r3, [r3, #4]
 8014b10:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8014b12:	89f8      	ldrh	r0, [r7, #14]
 8014b14:	697b      	ldr	r3, [r7, #20]
 8014b16:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014b1a:	2304      	movs	r3, #4
 8014b1c:	2236      	movs	r2, #54	; 0x36
 8014b1e:	f000 f85f 	bl	8014be0 <dhcp_option>
 8014b22:	4603      	mov	r3, r0
 8014b24:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8014b26:	89fc      	ldrh	r4, [r7, #14]
 8014b28:	697b      	ldr	r3, [r7, #20]
 8014b2a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014b2e:	693b      	ldr	r3, [r7, #16]
 8014b30:	4618      	mov	r0, r3
 8014b32:	f7f6 faa6 	bl	800b082 <lwip_htonl>
 8014b36:	4603      	mov	r3, r0
 8014b38:	461a      	mov	r2, r3
 8014b3a:	4629      	mov	r1, r5
 8014b3c:	4620      	mov	r0, r4
 8014b3e:	f000 f8db 	bl	8014cf8 <dhcp_option_long>
 8014b42:	4603      	mov	r3, r0
 8014b44:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014b46:	89f8      	ldrh	r0, [r7, #14]
 8014b48:	697b      	ldr	r3, [r7, #20]
 8014b4a:	33f0      	adds	r3, #240	; 0xf0
 8014b4c:	69ba      	ldr	r2, [r7, #24]
 8014b4e:	4619      	mov	r1, r3
 8014b50:	f000 fd8c 	bl	801566c <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014b54:	4b13      	ldr	r3, [pc, #76]	; (8014ba4 <dhcp_release_and_stop+0x12c>)
 8014b56:	6818      	ldr	r0, [r3, #0]
 8014b58:	f107 0210 	add.w	r2, r7, #16
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	9300      	str	r3, [sp, #0]
 8014b60:	2343      	movs	r3, #67	; 0x43
 8014b62:	69b9      	ldr	r1, [r7, #24]
 8014b64:	f7fe fc7c 	bl	8013460 <udp_sendto_if>
      pbuf_free(p_out);
 8014b68:	69b8      	ldr	r0, [r7, #24]
 8014b6a:	f7f7 fde1 	bl	800c730 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8014b6e:	4b0e      	ldr	r3, [pc, #56]	; (8014ba8 <dhcp_release_and_stop+0x130>)
 8014b70:	4a0d      	ldr	r2, [pc, #52]	; (8014ba8 <dhcp_release_and_stop+0x130>)
 8014b72:	490d      	ldr	r1, [pc, #52]	; (8014ba8 <dhcp_release_and_stop+0x130>)
 8014b74:	6878      	ldr	r0, [r7, #4]
 8014b76:	f7f7 f94b 	bl	800be10 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8014b7a:	2100      	movs	r1, #0
 8014b7c:	69f8      	ldr	r0, [r7, #28]
 8014b7e:	f000 f815 	bl	8014bac <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8014b82:	69fb      	ldr	r3, [r7, #28]
 8014b84:	791b      	ldrb	r3, [r3, #4]
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	d008      	beq.n	8014b9c <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8014b8a:	f7fe ffc1 	bl	8013b10 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8014b8e:	69fb      	ldr	r3, [r7, #28]
 8014b90:	2200      	movs	r2, #0
 8014b92:	711a      	strb	r2, [r3, #4]
 8014b94:	e002      	b.n	8014b9c <dhcp_release_and_stop+0x124>
    return;
 8014b96:	bf00      	nop
 8014b98:	e000      	b.n	8014b9c <dhcp_release_and_stop+0x124>
    return;
 8014b9a:	bf00      	nop
  }
}
 8014b9c:	3720      	adds	r7, #32
 8014b9e:	46bd      	mov	sp, r7
 8014ba0:	bdb0      	pop	{r4, r5, r7, pc}
 8014ba2:	bf00      	nop
 8014ba4:	20008c98 	.word	0x20008c98
 8014ba8:	08028574 	.word	0x08028574

08014bac <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8014bac:	b480      	push	{r7}
 8014bae:	b083      	sub	sp, #12
 8014bb0:	af00      	add	r7, sp, #0
 8014bb2:	6078      	str	r0, [r7, #4]
 8014bb4:	460b      	mov	r3, r1
 8014bb6:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	795b      	ldrb	r3, [r3, #5]
 8014bbc:	78fa      	ldrb	r2, [r7, #3]
 8014bbe:	429a      	cmp	r2, r3
 8014bc0:	d008      	beq.n	8014bd4 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	78fa      	ldrb	r2, [r7, #3]
 8014bc6:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	2200      	movs	r2, #0
 8014bcc:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	2200      	movs	r2, #0
 8014bd2:	811a      	strh	r2, [r3, #8]
  }
}
 8014bd4:	bf00      	nop
 8014bd6:	370c      	adds	r7, #12
 8014bd8:	46bd      	mov	sp, r7
 8014bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bde:	4770      	bx	lr

08014be0 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8014be0:	b580      	push	{r7, lr}
 8014be2:	b082      	sub	sp, #8
 8014be4:	af00      	add	r7, sp, #0
 8014be6:	6039      	str	r1, [r7, #0]
 8014be8:	4611      	mov	r1, r2
 8014bea:	461a      	mov	r2, r3
 8014bec:	4603      	mov	r3, r0
 8014bee:	80fb      	strh	r3, [r7, #6]
 8014bf0:	460b      	mov	r3, r1
 8014bf2:	717b      	strb	r3, [r7, #5]
 8014bf4:	4613      	mov	r3, r2
 8014bf6:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8014bf8:	88fa      	ldrh	r2, [r7, #6]
 8014bfa:	793b      	ldrb	r3, [r7, #4]
 8014bfc:	4413      	add	r3, r2
 8014bfe:	3302      	adds	r3, #2
 8014c00:	2b44      	cmp	r3, #68	; 0x44
 8014c02:	d906      	bls.n	8014c12 <dhcp_option+0x32>
 8014c04:	4b0d      	ldr	r3, [pc, #52]	; (8014c3c <dhcp_option+0x5c>)
 8014c06:	f240 529a 	movw	r2, #1434	; 0x59a
 8014c0a:	490d      	ldr	r1, [pc, #52]	; (8014c40 <dhcp_option+0x60>)
 8014c0c:	480d      	ldr	r0, [pc, #52]	; (8014c44 <dhcp_option+0x64>)
 8014c0e:	f003 fabf 	bl	8018190 <iprintf>
  options[options_out_len++] = option_type;
 8014c12:	88fb      	ldrh	r3, [r7, #6]
 8014c14:	1c5a      	adds	r2, r3, #1
 8014c16:	80fa      	strh	r2, [r7, #6]
 8014c18:	461a      	mov	r2, r3
 8014c1a:	683b      	ldr	r3, [r7, #0]
 8014c1c:	4413      	add	r3, r2
 8014c1e:	797a      	ldrb	r2, [r7, #5]
 8014c20:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8014c22:	88fb      	ldrh	r3, [r7, #6]
 8014c24:	1c5a      	adds	r2, r3, #1
 8014c26:	80fa      	strh	r2, [r7, #6]
 8014c28:	461a      	mov	r2, r3
 8014c2a:	683b      	ldr	r3, [r7, #0]
 8014c2c:	4413      	add	r3, r2
 8014c2e:	793a      	ldrb	r2, [r7, #4]
 8014c30:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014c32:	88fb      	ldrh	r3, [r7, #6]
}
 8014c34:	4618      	mov	r0, r3
 8014c36:	3708      	adds	r7, #8
 8014c38:	46bd      	mov	sp, r7
 8014c3a:	bd80      	pop	{r7, pc}
 8014c3c:	0801c600 	.word	0x0801c600
 8014c40:	0801c794 	.word	0x0801c794
 8014c44:	0801c660 	.word	0x0801c660

08014c48 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8014c48:	b580      	push	{r7, lr}
 8014c4a:	b082      	sub	sp, #8
 8014c4c:	af00      	add	r7, sp, #0
 8014c4e:	4603      	mov	r3, r0
 8014c50:	6039      	str	r1, [r7, #0]
 8014c52:	80fb      	strh	r3, [r7, #6]
 8014c54:	4613      	mov	r3, r2
 8014c56:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8014c58:	88fb      	ldrh	r3, [r7, #6]
 8014c5a:	2b43      	cmp	r3, #67	; 0x43
 8014c5c:	d906      	bls.n	8014c6c <dhcp_option_byte+0x24>
 8014c5e:	4b0a      	ldr	r3, [pc, #40]	; (8014c88 <dhcp_option_byte+0x40>)
 8014c60:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8014c64:	4909      	ldr	r1, [pc, #36]	; (8014c8c <dhcp_option_byte+0x44>)
 8014c66:	480a      	ldr	r0, [pc, #40]	; (8014c90 <dhcp_option_byte+0x48>)
 8014c68:	f003 fa92 	bl	8018190 <iprintf>
  options[options_out_len++] = value;
 8014c6c:	88fb      	ldrh	r3, [r7, #6]
 8014c6e:	1c5a      	adds	r2, r3, #1
 8014c70:	80fa      	strh	r2, [r7, #6]
 8014c72:	461a      	mov	r2, r3
 8014c74:	683b      	ldr	r3, [r7, #0]
 8014c76:	4413      	add	r3, r2
 8014c78:	797a      	ldrb	r2, [r7, #5]
 8014c7a:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014c7c:	88fb      	ldrh	r3, [r7, #6]
}
 8014c7e:	4618      	mov	r0, r3
 8014c80:	3708      	adds	r7, #8
 8014c82:	46bd      	mov	sp, r7
 8014c84:	bd80      	pop	{r7, pc}
 8014c86:	bf00      	nop
 8014c88:	0801c600 	.word	0x0801c600
 8014c8c:	0801c7d8 	.word	0x0801c7d8
 8014c90:	0801c660 	.word	0x0801c660

08014c94 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8014c94:	b580      	push	{r7, lr}
 8014c96:	b082      	sub	sp, #8
 8014c98:	af00      	add	r7, sp, #0
 8014c9a:	4603      	mov	r3, r0
 8014c9c:	6039      	str	r1, [r7, #0]
 8014c9e:	80fb      	strh	r3, [r7, #6]
 8014ca0:	4613      	mov	r3, r2
 8014ca2:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8014ca4:	88fb      	ldrh	r3, [r7, #6]
 8014ca6:	3302      	adds	r3, #2
 8014ca8:	2b44      	cmp	r3, #68	; 0x44
 8014caa:	d906      	bls.n	8014cba <dhcp_option_short+0x26>
 8014cac:	4b0f      	ldr	r3, [pc, #60]	; (8014cec <dhcp_option_short+0x58>)
 8014cae:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8014cb2:	490f      	ldr	r1, [pc, #60]	; (8014cf0 <dhcp_option_short+0x5c>)
 8014cb4:	480f      	ldr	r0, [pc, #60]	; (8014cf4 <dhcp_option_short+0x60>)
 8014cb6:	f003 fa6b 	bl	8018190 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8014cba:	88bb      	ldrh	r3, [r7, #4]
 8014cbc:	0a1b      	lsrs	r3, r3, #8
 8014cbe:	b29a      	uxth	r2, r3
 8014cc0:	88fb      	ldrh	r3, [r7, #6]
 8014cc2:	1c59      	adds	r1, r3, #1
 8014cc4:	80f9      	strh	r1, [r7, #6]
 8014cc6:	4619      	mov	r1, r3
 8014cc8:	683b      	ldr	r3, [r7, #0]
 8014cca:	440b      	add	r3, r1
 8014ccc:	b2d2      	uxtb	r2, r2
 8014cce:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8014cd0:	88fb      	ldrh	r3, [r7, #6]
 8014cd2:	1c5a      	adds	r2, r3, #1
 8014cd4:	80fa      	strh	r2, [r7, #6]
 8014cd6:	461a      	mov	r2, r3
 8014cd8:	683b      	ldr	r3, [r7, #0]
 8014cda:	4413      	add	r3, r2
 8014cdc:	88ba      	ldrh	r2, [r7, #4]
 8014cde:	b2d2      	uxtb	r2, r2
 8014ce0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014ce2:	88fb      	ldrh	r3, [r7, #6]
}
 8014ce4:	4618      	mov	r0, r3
 8014ce6:	3708      	adds	r7, #8
 8014ce8:	46bd      	mov	sp, r7
 8014cea:	bd80      	pop	{r7, pc}
 8014cec:	0801c600 	.word	0x0801c600
 8014cf0:	0801c810 	.word	0x0801c810
 8014cf4:	0801c660 	.word	0x0801c660

08014cf8 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8014cf8:	b580      	push	{r7, lr}
 8014cfa:	b084      	sub	sp, #16
 8014cfc:	af00      	add	r7, sp, #0
 8014cfe:	4603      	mov	r3, r0
 8014d00:	60b9      	str	r1, [r7, #8]
 8014d02:	607a      	str	r2, [r7, #4]
 8014d04:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8014d06:	89fb      	ldrh	r3, [r7, #14]
 8014d08:	3304      	adds	r3, #4
 8014d0a:	2b44      	cmp	r3, #68	; 0x44
 8014d0c:	d906      	bls.n	8014d1c <dhcp_option_long+0x24>
 8014d0e:	4b19      	ldr	r3, [pc, #100]	; (8014d74 <dhcp_option_long+0x7c>)
 8014d10:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8014d14:	4918      	ldr	r1, [pc, #96]	; (8014d78 <dhcp_option_long+0x80>)
 8014d16:	4819      	ldr	r0, [pc, #100]	; (8014d7c <dhcp_option_long+0x84>)
 8014d18:	f003 fa3a 	bl	8018190 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	0e1a      	lsrs	r2, r3, #24
 8014d20:	89fb      	ldrh	r3, [r7, #14]
 8014d22:	1c59      	adds	r1, r3, #1
 8014d24:	81f9      	strh	r1, [r7, #14]
 8014d26:	4619      	mov	r1, r3
 8014d28:	68bb      	ldr	r3, [r7, #8]
 8014d2a:	440b      	add	r3, r1
 8014d2c:	b2d2      	uxtb	r2, r2
 8014d2e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	0c1a      	lsrs	r2, r3, #16
 8014d34:	89fb      	ldrh	r3, [r7, #14]
 8014d36:	1c59      	adds	r1, r3, #1
 8014d38:	81f9      	strh	r1, [r7, #14]
 8014d3a:	4619      	mov	r1, r3
 8014d3c:	68bb      	ldr	r3, [r7, #8]
 8014d3e:	440b      	add	r3, r1
 8014d40:	b2d2      	uxtb	r2, r2
 8014d42:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	0a1a      	lsrs	r2, r3, #8
 8014d48:	89fb      	ldrh	r3, [r7, #14]
 8014d4a:	1c59      	adds	r1, r3, #1
 8014d4c:	81f9      	strh	r1, [r7, #14]
 8014d4e:	4619      	mov	r1, r3
 8014d50:	68bb      	ldr	r3, [r7, #8]
 8014d52:	440b      	add	r3, r1
 8014d54:	b2d2      	uxtb	r2, r2
 8014d56:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8014d58:	89fb      	ldrh	r3, [r7, #14]
 8014d5a:	1c5a      	adds	r2, r3, #1
 8014d5c:	81fa      	strh	r2, [r7, #14]
 8014d5e:	461a      	mov	r2, r3
 8014d60:	68bb      	ldr	r3, [r7, #8]
 8014d62:	4413      	add	r3, r2
 8014d64:	687a      	ldr	r2, [r7, #4]
 8014d66:	b2d2      	uxtb	r2, r2
 8014d68:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014d6a:	89fb      	ldrh	r3, [r7, #14]
}
 8014d6c:	4618      	mov	r0, r3
 8014d6e:	3710      	adds	r7, #16
 8014d70:	46bd      	mov	sp, r7
 8014d72:	bd80      	pop	{r7, pc}
 8014d74:	0801c600 	.word	0x0801c600
 8014d78:	0801c84c 	.word	0x0801c84c
 8014d7c:	0801c660 	.word	0x0801c660

08014d80 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8014d80:	b580      	push	{r7, lr}
 8014d82:	b090      	sub	sp, #64	; 0x40
 8014d84:	af00      	add	r7, sp, #0
 8014d86:	6078      	str	r0, [r7, #4]
 8014d88:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8014d8a:	2300      	movs	r3, #0
 8014d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8014d8e:	2300      	movs	r3, #0
 8014d90:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8014d92:	2208      	movs	r2, #8
 8014d94:	2100      	movs	r1, #0
 8014d96:	48be      	ldr	r0, [pc, #760]	; (8015090 <dhcp_parse_reply+0x310>)
 8014d98:	f003 f9f1 	bl	801817e <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	895b      	ldrh	r3, [r3, #10]
 8014da0:	2b2b      	cmp	r3, #43	; 0x2b
 8014da2:	d802      	bhi.n	8014daa <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8014da4:	f06f 0301 	mvn.w	r3, #1
 8014da8:	e2a8      	b.n	80152fc <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	685b      	ldr	r3, [r3, #4]
 8014dae:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8014db0:	23f0      	movs	r3, #240	; 0xf0
 8014db2:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	891b      	ldrh	r3, [r3, #8]
 8014db8:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8014dbe:	e00c      	b.n	8014dda <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8014dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dc2:	895b      	ldrh	r3, [r3, #10]
 8014dc4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014dc6:	1ad3      	subs	r3, r2, r3
 8014dc8:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8014dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dcc:	895b      	ldrh	r3, [r3, #10]
 8014dce:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8014dd0:	1ad3      	subs	r3, r2, r3
 8014dd2:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8014dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dd6:	681b      	ldr	r3, [r3, #0]
 8014dd8:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8014dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	d004      	beq.n	8014dea <dhcp_parse_reply+0x6a>
 8014de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014de2:	895b      	ldrh	r3, [r3, #10]
 8014de4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014de6:	429a      	cmp	r2, r3
 8014de8:	d2ea      	bcs.n	8014dc0 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8014dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d102      	bne.n	8014df6 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8014df0:	f06f 0301 	mvn.w	r3, #1
 8014df4:	e282      	b.n	80152fc <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 8014df6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014df8:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8014dfa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014dfc:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8014dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e00:	685b      	ldr	r3, [r3, #4]
 8014e02:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8014e04:	e23a      	b.n	801527c <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 8014e06:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014e08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014e0a:	4413      	add	r3, r2
 8014e0c:	781b      	ldrb	r3, [r3, #0]
 8014e0e:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8014e10:	2300      	movs	r3, #0
 8014e12:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8014e16:	f04f 33ff 	mov.w	r3, #4294967295
 8014e1a:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8014e1c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014e1e:	3302      	adds	r3, #2
 8014e20:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8014e22:	8bfa      	ldrh	r2, [r7, #30]
 8014e24:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014e26:	429a      	cmp	r2, r3
 8014e28:	d202      	bcs.n	8014e30 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8014e2a:	f06f 0301 	mvn.w	r3, #1
 8014e2e:	e265      	b.n	80152fc <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8014e30:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014e32:	3301      	adds	r3, #1
 8014e34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014e36:	8952      	ldrh	r2, [r2, #10]
 8014e38:	4293      	cmp	r3, r2
 8014e3a:	da07      	bge.n	8014e4c <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8014e3c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014e3e:	3301      	adds	r3, #1
 8014e40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014e42:	4413      	add	r3, r2
 8014e44:	781b      	ldrb	r3, [r3, #0]
 8014e46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014e4a:	e00b      	b.n	8014e64 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8014e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e4e:	681b      	ldr	r3, [r3, #0]
 8014e50:	2b00      	cmp	r3, #0
 8014e52:	d004      	beq.n	8014e5e <dhcp_parse_reply+0xde>
 8014e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e56:	681b      	ldr	r3, [r3, #0]
 8014e58:	685b      	ldr	r3, [r3, #4]
 8014e5a:	781b      	ldrb	r3, [r3, #0]
 8014e5c:	e000      	b.n	8014e60 <dhcp_parse_reply+0xe0>
 8014e5e:	2300      	movs	r3, #0
 8014e60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8014e64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014e68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8014e6c:	7dfb      	ldrb	r3, [r7, #23]
 8014e6e:	2b3b      	cmp	r3, #59	; 0x3b
 8014e70:	f200 812d 	bhi.w	80150ce <dhcp_parse_reply+0x34e>
 8014e74:	a201      	add	r2, pc, #4	; (adr r2, 8014e7c <dhcp_parse_reply+0xfc>)
 8014e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e7a:	bf00      	nop
 8014e7c:	08014f6d 	.word	0x08014f6d
 8014e80:	08014f7d 	.word	0x08014f7d
 8014e84:	080150cf 	.word	0x080150cf
 8014e88:	08014f9f 	.word	0x08014f9f
 8014e8c:	080150cf 	.word	0x080150cf
 8014e90:	080150cf 	.word	0x080150cf
 8014e94:	080150cf 	.word	0x080150cf
 8014e98:	080150cf 	.word	0x080150cf
 8014e9c:	080150cf 	.word	0x080150cf
 8014ea0:	080150cf 	.word	0x080150cf
 8014ea4:	080150cf 	.word	0x080150cf
 8014ea8:	080150cf 	.word	0x080150cf
 8014eac:	080150cf 	.word	0x080150cf
 8014eb0:	080150cf 	.word	0x080150cf
 8014eb4:	080150cf 	.word	0x080150cf
 8014eb8:	080150cf 	.word	0x080150cf
 8014ebc:	080150cf 	.word	0x080150cf
 8014ec0:	080150cf 	.word	0x080150cf
 8014ec4:	080150cf 	.word	0x080150cf
 8014ec8:	080150cf 	.word	0x080150cf
 8014ecc:	080150cf 	.word	0x080150cf
 8014ed0:	080150cf 	.word	0x080150cf
 8014ed4:	080150cf 	.word	0x080150cf
 8014ed8:	080150cf 	.word	0x080150cf
 8014edc:	080150cf 	.word	0x080150cf
 8014ee0:	080150cf 	.word	0x080150cf
 8014ee4:	080150cf 	.word	0x080150cf
 8014ee8:	080150cf 	.word	0x080150cf
 8014eec:	080150cf 	.word	0x080150cf
 8014ef0:	080150cf 	.word	0x080150cf
 8014ef4:	080150cf 	.word	0x080150cf
 8014ef8:	080150cf 	.word	0x080150cf
 8014efc:	080150cf 	.word	0x080150cf
 8014f00:	080150cf 	.word	0x080150cf
 8014f04:	080150cf 	.word	0x080150cf
 8014f08:	080150cf 	.word	0x080150cf
 8014f0c:	080150cf 	.word	0x080150cf
 8014f10:	080150cf 	.word	0x080150cf
 8014f14:	080150cf 	.word	0x080150cf
 8014f18:	080150cf 	.word	0x080150cf
 8014f1c:	080150cf 	.word	0x080150cf
 8014f20:	080150cf 	.word	0x080150cf
 8014f24:	080150cf 	.word	0x080150cf
 8014f28:	080150cf 	.word	0x080150cf
 8014f2c:	080150cf 	.word	0x080150cf
 8014f30:	080150cf 	.word	0x080150cf
 8014f34:	080150cf 	.word	0x080150cf
 8014f38:	080150cf 	.word	0x080150cf
 8014f3c:	080150cf 	.word	0x080150cf
 8014f40:	080150cf 	.word	0x080150cf
 8014f44:	080150cf 	.word	0x080150cf
 8014f48:	08014fcb 	.word	0x08014fcb
 8014f4c:	08014fed 	.word	0x08014fed
 8014f50:	08015029 	.word	0x08015029
 8014f54:	0801504b 	.word	0x0801504b
 8014f58:	080150cf 	.word	0x080150cf
 8014f5c:	080150cf 	.word	0x080150cf
 8014f60:	080150cf 	.word	0x080150cf
 8014f64:	0801506d 	.word	0x0801506d
 8014f68:	080150ad 	.word	0x080150ad
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8014f6c:	2300      	movs	r3, #0
 8014f6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014f72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014f76:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8014f7a:	e0ac      	b.n	80150d6 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014f7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014f80:	2b04      	cmp	r3, #4
 8014f82:	d009      	beq.n	8014f98 <dhcp_parse_reply+0x218>
 8014f84:	4b43      	ldr	r3, [pc, #268]	; (8015094 <dhcp_parse_reply+0x314>)
 8014f86:	f240 622e 	movw	r2, #1582	; 0x62e
 8014f8a:	4943      	ldr	r1, [pc, #268]	; (8015098 <dhcp_parse_reply+0x318>)
 8014f8c:	4843      	ldr	r0, [pc, #268]	; (801509c <dhcp_parse_reply+0x31c>)
 8014f8e:	f003 f8ff 	bl	8018190 <iprintf>
 8014f92:	f06f 0305 	mvn.w	r3, #5
 8014f96:	e1b1      	b.n	80152fc <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8014f98:	2306      	movs	r3, #6
 8014f9a:	623b      	str	r3, [r7, #32]
        break;
 8014f9c:	e09b      	b.n	80150d6 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8014f9e:	2304      	movs	r3, #4
 8014fa0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8014fa4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8014fa8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014fac:	429a      	cmp	r2, r3
 8014fae:	d209      	bcs.n	8014fc4 <dhcp_parse_reply+0x244>
 8014fb0:	4b38      	ldr	r3, [pc, #224]	; (8015094 <dhcp_parse_reply+0x314>)
 8014fb2:	f240 6233 	movw	r2, #1587	; 0x633
 8014fb6:	493a      	ldr	r1, [pc, #232]	; (80150a0 <dhcp_parse_reply+0x320>)
 8014fb8:	4838      	ldr	r0, [pc, #224]	; (801509c <dhcp_parse_reply+0x31c>)
 8014fba:	f003 f8e9 	bl	8018190 <iprintf>
 8014fbe:	f06f 0305 	mvn.w	r3, #5
 8014fc2:	e19b      	b.n	80152fc <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8014fc4:	2307      	movs	r3, #7
 8014fc6:	623b      	str	r3, [r7, #32]
        break;
 8014fc8:	e085      	b.n	80150d6 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014fca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014fce:	2b04      	cmp	r3, #4
 8014fd0:	d009      	beq.n	8014fe6 <dhcp_parse_reply+0x266>
 8014fd2:	4b30      	ldr	r3, [pc, #192]	; (8015094 <dhcp_parse_reply+0x314>)
 8014fd4:	f240 6241 	movw	r2, #1601	; 0x641
 8014fd8:	492f      	ldr	r1, [pc, #188]	; (8015098 <dhcp_parse_reply+0x318>)
 8014fda:	4830      	ldr	r0, [pc, #192]	; (801509c <dhcp_parse_reply+0x31c>)
 8014fdc:	f003 f8d8 	bl	8018190 <iprintf>
 8014fe0:	f06f 0305 	mvn.w	r3, #5
 8014fe4:	e18a      	b.n	80152fc <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8014fe6:	2303      	movs	r3, #3
 8014fe8:	623b      	str	r3, [r7, #32]
        break;
 8014fea:	e074      	b.n	80150d6 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8014fec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014ff0:	2b01      	cmp	r3, #1
 8014ff2:	d009      	beq.n	8015008 <dhcp_parse_reply+0x288>
 8014ff4:	4b27      	ldr	r3, [pc, #156]	; (8015094 <dhcp_parse_reply+0x314>)
 8014ff6:	f240 624f 	movw	r2, #1615	; 0x64f
 8014ffa:	492a      	ldr	r1, [pc, #168]	; (80150a4 <dhcp_parse_reply+0x324>)
 8014ffc:	4827      	ldr	r0, [pc, #156]	; (801509c <dhcp_parse_reply+0x31c>)
 8014ffe:	f003 f8c7 	bl	8018190 <iprintf>
 8015002:	f06f 0305 	mvn.w	r3, #5
 8015006:	e179      	b.n	80152fc <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8015008:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801500a:	2bf0      	cmp	r3, #240	; 0xf0
 801500c:	d009      	beq.n	8015022 <dhcp_parse_reply+0x2a2>
 801500e:	4b21      	ldr	r3, [pc, #132]	; (8015094 <dhcp_parse_reply+0x314>)
 8015010:	f240 6251 	movw	r2, #1617	; 0x651
 8015014:	4924      	ldr	r1, [pc, #144]	; (80150a8 <dhcp_parse_reply+0x328>)
 8015016:	4821      	ldr	r0, [pc, #132]	; (801509c <dhcp_parse_reply+0x31c>)
 8015018:	f003 f8ba 	bl	8018190 <iprintf>
 801501c:	f06f 0305 	mvn.w	r3, #5
 8015020:	e16c      	b.n	80152fc <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8015022:	2300      	movs	r3, #0
 8015024:	623b      	str	r3, [r7, #32]
        break;
 8015026:	e056      	b.n	80150d6 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8015028:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801502c:	2b01      	cmp	r3, #1
 801502e:	d009      	beq.n	8015044 <dhcp_parse_reply+0x2c4>
 8015030:	4b18      	ldr	r3, [pc, #96]	; (8015094 <dhcp_parse_reply+0x314>)
 8015032:	f240 6255 	movw	r2, #1621	; 0x655
 8015036:	491b      	ldr	r1, [pc, #108]	; (80150a4 <dhcp_parse_reply+0x324>)
 8015038:	4818      	ldr	r0, [pc, #96]	; (801509c <dhcp_parse_reply+0x31c>)
 801503a:	f003 f8a9 	bl	8018190 <iprintf>
 801503e:	f06f 0305 	mvn.w	r3, #5
 8015042:	e15b      	b.n	80152fc <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8015044:	2301      	movs	r3, #1
 8015046:	623b      	str	r3, [r7, #32]
        break;
 8015048:	e045      	b.n	80150d6 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801504a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801504e:	2b04      	cmp	r3, #4
 8015050:	d009      	beq.n	8015066 <dhcp_parse_reply+0x2e6>
 8015052:	4b10      	ldr	r3, [pc, #64]	; (8015094 <dhcp_parse_reply+0x314>)
 8015054:	f240 6259 	movw	r2, #1625	; 0x659
 8015058:	490f      	ldr	r1, [pc, #60]	; (8015098 <dhcp_parse_reply+0x318>)
 801505a:	4810      	ldr	r0, [pc, #64]	; (801509c <dhcp_parse_reply+0x31c>)
 801505c:	f003 f898 	bl	8018190 <iprintf>
 8015060:	f06f 0305 	mvn.w	r3, #5
 8015064:	e14a      	b.n	80152fc <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8015066:	2302      	movs	r3, #2
 8015068:	623b      	str	r3, [r7, #32]
        break;
 801506a:	e034      	b.n	80150d6 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801506c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015070:	2b04      	cmp	r3, #4
 8015072:	d009      	beq.n	8015088 <dhcp_parse_reply+0x308>
 8015074:	4b07      	ldr	r3, [pc, #28]	; (8015094 <dhcp_parse_reply+0x314>)
 8015076:	f240 625d 	movw	r2, #1629	; 0x65d
 801507a:	4907      	ldr	r1, [pc, #28]	; (8015098 <dhcp_parse_reply+0x318>)
 801507c:	4807      	ldr	r0, [pc, #28]	; (801509c <dhcp_parse_reply+0x31c>)
 801507e:	f003 f887 	bl	8018190 <iprintf>
 8015082:	f06f 0305 	mvn.w	r3, #5
 8015086:	e139      	b.n	80152fc <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 8015088:	2304      	movs	r3, #4
 801508a:	623b      	str	r3, [r7, #32]
        break;
 801508c:	e023      	b.n	80150d6 <dhcp_parse_reply+0x356>
 801508e:	bf00      	nop
 8015090:	2000faf4 	.word	0x2000faf4
 8015094:	0801c600 	.word	0x0801c600
 8015098:	0801c888 	.word	0x0801c888
 801509c:	0801c660 	.word	0x0801c660
 80150a0:	0801c894 	.word	0x0801c894
 80150a4:	0801c8a8 	.word	0x0801c8a8
 80150a8:	0801c8b4 	.word	0x0801c8b4
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80150ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80150b0:	2b04      	cmp	r3, #4
 80150b2:	d009      	beq.n	80150c8 <dhcp_parse_reply+0x348>
 80150b4:	4b93      	ldr	r3, [pc, #588]	; (8015304 <dhcp_parse_reply+0x584>)
 80150b6:	f240 6261 	movw	r2, #1633	; 0x661
 80150ba:	4993      	ldr	r1, [pc, #588]	; (8015308 <dhcp_parse_reply+0x588>)
 80150bc:	4893      	ldr	r0, [pc, #588]	; (801530c <dhcp_parse_reply+0x58c>)
 80150be:	f003 f867 	bl	8018190 <iprintf>
 80150c2:	f06f 0305 	mvn.w	r3, #5
 80150c6:	e119      	b.n	80152fc <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 80150c8:	2305      	movs	r3, #5
 80150ca:	623b      	str	r3, [r7, #32]
        break;
 80150cc:	e003      	b.n	80150d6 <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 80150ce:	2300      	movs	r3, #0
 80150d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 80150d4:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 80150d6:	7dfb      	ldrb	r3, [r7, #23]
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d103      	bne.n	80150e4 <dhcp_parse_reply+0x364>
      offset++;
 80150dc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80150de:	3301      	adds	r3, #1
 80150e0:	877b      	strh	r3, [r7, #58]	; 0x3a
 80150e2:	e0a1      	b.n	8015228 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 80150e4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80150e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80150ea:	4413      	add	r3, r2
 80150ec:	3302      	adds	r3, #2
 80150ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80150f2:	db02      	blt.n	80150fa <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 80150f4:	f06f 0301 	mvn.w	r3, #1
 80150f8:	e100      	b.n	80152fc <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 80150fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80150fe:	b29a      	uxth	r2, r3
 8015100:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015102:	4413      	add	r3, r2
 8015104:	b29b      	uxth	r3, r3
 8015106:	3302      	adds	r3, #2
 8015108:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 801510a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801510e:	2b00      	cmp	r3, #0
 8015110:	f000 808a 	beq.w	8015228 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 8015114:	2300      	movs	r3, #0
 8015116:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8015118:	6a3b      	ldr	r3, [r7, #32]
 801511a:	2b00      	cmp	r3, #0
 801511c:	db02      	blt.n	8015124 <dhcp_parse_reply+0x3a4>
 801511e:	6a3b      	ldr	r3, [r7, #32]
 8015120:	2b07      	cmp	r3, #7
 8015122:	dd06      	ble.n	8015132 <dhcp_parse_reply+0x3b2>
 8015124:	4b77      	ldr	r3, [pc, #476]	; (8015304 <dhcp_parse_reply+0x584>)
 8015126:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 801512a:	4979      	ldr	r1, [pc, #484]	; (8015310 <dhcp_parse_reply+0x590>)
 801512c:	4877      	ldr	r0, [pc, #476]	; (801530c <dhcp_parse_reply+0x58c>)
 801512e:	f003 f82f 	bl	8018190 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8015132:	4a78      	ldr	r2, [pc, #480]	; (8015314 <dhcp_parse_reply+0x594>)
 8015134:	6a3b      	ldr	r3, [r7, #32]
 8015136:	4413      	add	r3, r2
 8015138:	781b      	ldrb	r3, [r3, #0]
 801513a:	2b00      	cmp	r3, #0
 801513c:	d174      	bne.n	8015228 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 801513e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015142:	2b04      	cmp	r3, #4
 8015144:	bf28      	it	cs
 8015146:	2304      	movcs	r3, #4
 8015148:	b2db      	uxtb	r3, r3
 801514a:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801514c:	8bfb      	ldrh	r3, [r7, #30]
 801514e:	8aba      	ldrh	r2, [r7, #20]
 8015150:	f107 0108 	add.w	r1, r7, #8
 8015154:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015156:	f7f7 fcf1 	bl	800cb3c <pbuf_copy_partial>
 801515a:	4603      	mov	r3, r0
 801515c:	461a      	mov	r2, r3
 801515e:	8abb      	ldrh	r3, [r7, #20]
 8015160:	4293      	cmp	r3, r2
 8015162:	d002      	beq.n	801516a <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 8015164:	f06f 0301 	mvn.w	r3, #1
 8015168:	e0c8      	b.n	80152fc <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 801516a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801516e:	2b04      	cmp	r3, #4
 8015170:	d933      	bls.n	80151da <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8015172:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015176:	f003 0303 	and.w	r3, r3, #3
 801517a:	b2db      	uxtb	r3, r3
 801517c:	2b00      	cmp	r3, #0
 801517e:	d009      	beq.n	8015194 <dhcp_parse_reply+0x414>
 8015180:	4b60      	ldr	r3, [pc, #384]	; (8015304 <dhcp_parse_reply+0x584>)
 8015182:	f240 6281 	movw	r2, #1665	; 0x681
 8015186:	4964      	ldr	r1, [pc, #400]	; (8015318 <dhcp_parse_reply+0x598>)
 8015188:	4860      	ldr	r0, [pc, #384]	; (801530c <dhcp_parse_reply+0x58c>)
 801518a:	f003 f801 	bl	8018190 <iprintf>
 801518e:	f06f 0305 	mvn.w	r3, #5
 8015192:	e0b3      	b.n	80152fc <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 8015194:	4a5f      	ldr	r2, [pc, #380]	; (8015314 <dhcp_parse_reply+0x594>)
 8015196:	6a3b      	ldr	r3, [r7, #32]
 8015198:	4413      	add	r3, r2
 801519a:	2201      	movs	r2, #1
 801519c:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801519e:	68bb      	ldr	r3, [r7, #8]
 80151a0:	4618      	mov	r0, r3
 80151a2:	f7f5 ff6e 	bl	800b082 <lwip_htonl>
 80151a6:	4601      	mov	r1, r0
 80151a8:	4a5c      	ldr	r2, [pc, #368]	; (801531c <dhcp_parse_reply+0x59c>)
 80151aa:	6a3b      	ldr	r3, [r7, #32]
 80151ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 80151b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80151b4:	3b04      	subs	r3, #4
 80151b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 80151ba:	8bfb      	ldrh	r3, [r7, #30]
 80151bc:	3304      	adds	r3, #4
 80151be:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 80151c0:	8a7a      	ldrh	r2, [r7, #18]
 80151c2:	8bfb      	ldrh	r3, [r7, #30]
 80151c4:	429a      	cmp	r2, r3
 80151c6:	d202      	bcs.n	80151ce <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 80151c8:	f06f 0301 	mvn.w	r3, #1
 80151cc:	e096      	b.n	80152fc <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 80151ce:	8a7b      	ldrh	r3, [r7, #18]
 80151d0:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 80151d2:	6a3b      	ldr	r3, [r7, #32]
 80151d4:	3301      	adds	r3, #1
 80151d6:	623b      	str	r3, [r7, #32]
            goto decode_next;
 80151d8:	e79e      	b.n	8015118 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 80151da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80151de:	2b04      	cmp	r3, #4
 80151e0:	d106      	bne.n	80151f0 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 80151e2:	68bb      	ldr	r3, [r7, #8]
 80151e4:	4618      	mov	r0, r3
 80151e6:	f7f5 ff4c 	bl	800b082 <lwip_htonl>
 80151ea:	4603      	mov	r3, r0
 80151ec:	60bb      	str	r3, [r7, #8]
 80151ee:	e011      	b.n	8015214 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80151f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80151f4:	2b01      	cmp	r3, #1
 80151f6:	d009      	beq.n	801520c <dhcp_parse_reply+0x48c>
 80151f8:	4b42      	ldr	r3, [pc, #264]	; (8015304 <dhcp_parse_reply+0x584>)
 80151fa:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 80151fe:	4948      	ldr	r1, [pc, #288]	; (8015320 <dhcp_parse_reply+0x5a0>)
 8015200:	4842      	ldr	r0, [pc, #264]	; (801530c <dhcp_parse_reply+0x58c>)
 8015202:	f002 ffc5 	bl	8018190 <iprintf>
 8015206:	f06f 0305 	mvn.w	r3, #5
 801520a:	e077      	b.n	80152fc <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 801520c:	f107 0308 	add.w	r3, r7, #8
 8015210:	781b      	ldrb	r3, [r3, #0]
 8015212:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8015214:	4a3f      	ldr	r2, [pc, #252]	; (8015314 <dhcp_parse_reply+0x594>)
 8015216:	6a3b      	ldr	r3, [r7, #32]
 8015218:	4413      	add	r3, r2
 801521a:	2201      	movs	r2, #1
 801521c:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801521e:	68ba      	ldr	r2, [r7, #8]
 8015220:	493e      	ldr	r1, [pc, #248]	; (801531c <dhcp_parse_reply+0x59c>)
 8015222:	6a3b      	ldr	r3, [r7, #32]
 8015224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8015228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801522a:	895b      	ldrh	r3, [r3, #10]
 801522c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801522e:	429a      	cmp	r2, r3
 8015230:	d324      	bcc.n	801527c <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 8015232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015234:	895b      	ldrh	r3, [r3, #10]
 8015236:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015238:	1ad3      	subs	r3, r2, r3
 801523a:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 801523c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801523e:	895b      	ldrh	r3, [r3, #10]
 8015240:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8015242:	1ad3      	subs	r3, r2, r3
 8015244:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8015246:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015248:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801524a:	429a      	cmp	r2, r3
 801524c:	d213      	bcs.n	8015276 <dhcp_parse_reply+0x4f6>
        q = q->next;
 801524e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015250:	681b      	ldr	r3, [r3, #0]
 8015252:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8015254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015256:	2b00      	cmp	r3, #0
 8015258:	d109      	bne.n	801526e <dhcp_parse_reply+0x4ee>
 801525a:	4b2a      	ldr	r3, [pc, #168]	; (8015304 <dhcp_parse_reply+0x584>)
 801525c:	f240 629d 	movw	r2, #1693	; 0x69d
 8015260:	4930      	ldr	r1, [pc, #192]	; (8015324 <dhcp_parse_reply+0x5a4>)
 8015262:	482a      	ldr	r0, [pc, #168]	; (801530c <dhcp_parse_reply+0x58c>)
 8015264:	f002 ff94 	bl	8018190 <iprintf>
 8015268:	f06f 0305 	mvn.w	r3, #5
 801526c:	e046      	b.n	80152fc <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 801526e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015270:	685b      	ldr	r3, [r3, #4]
 8015272:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015274:	e002      	b.n	801527c <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8015276:	f06f 0301 	mvn.w	r3, #1
 801527a:	e03f      	b.n	80152fc <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801527c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801527e:	2b00      	cmp	r3, #0
 8015280:	d00a      	beq.n	8015298 <dhcp_parse_reply+0x518>
 8015282:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015284:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8015286:	429a      	cmp	r2, r3
 8015288:	d206      	bcs.n	8015298 <dhcp_parse_reply+0x518>
 801528a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801528c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801528e:	4413      	add	r3, r2
 8015290:	781b      	ldrb	r3, [r3, #0]
 8015292:	2bff      	cmp	r3, #255	; 0xff
 8015294:	f47f adb7 	bne.w	8014e06 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8015298:	4b1e      	ldr	r3, [pc, #120]	; (8015314 <dhcp_parse_reply+0x594>)
 801529a:	781b      	ldrb	r3, [r3, #0]
 801529c:	2b00      	cmp	r3, #0
 801529e:	d018      	beq.n	80152d2 <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80152a0:	4b1e      	ldr	r3, [pc, #120]	; (801531c <dhcp_parse_reply+0x59c>)
 80152a2:	681b      	ldr	r3, [r3, #0]
 80152a4:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80152a6:	4b1b      	ldr	r3, [pc, #108]	; (8015314 <dhcp_parse_reply+0x594>)
 80152a8:	2200      	movs	r2, #0
 80152aa:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 80152ac:	68fb      	ldr	r3, [r7, #12]
 80152ae:	2b01      	cmp	r3, #1
 80152b0:	d102      	bne.n	80152b8 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 80152b2:	2301      	movs	r3, #1
 80152b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80152b6:	e00c      	b.n	80152d2 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 80152b8:	68fb      	ldr	r3, [r7, #12]
 80152ba:	2b02      	cmp	r3, #2
 80152bc:	d102      	bne.n	80152c4 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 80152be:	2301      	movs	r3, #1
 80152c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80152c2:	e006      	b.n	80152d2 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 80152c4:	68fb      	ldr	r3, [r7, #12]
 80152c6:	2b03      	cmp	r3, #3
 80152c8:	d103      	bne.n	80152d2 <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 80152ca:	2301      	movs	r3, #1
 80152cc:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 80152ce:	2301      	movs	r3, #1
 80152d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 80152d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d006      	beq.n	80152e6 <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 80152d8:	2300      	movs	r3, #0
 80152da:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 80152dc:	236c      	movs	r3, #108	; 0x6c
 80152de:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 80152e0:	23ec      	movs	r3, #236	; 0xec
 80152e2:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 80152e4:	e569      	b.n	8014dba <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 80152e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	d006      	beq.n	80152fa <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 80152ec:	2300      	movs	r3, #0
 80152ee:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 80152f0:	232c      	movs	r3, #44	; 0x2c
 80152f2:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 80152f4:	236c      	movs	r3, #108	; 0x6c
 80152f6:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 80152f8:	e55f      	b.n	8014dba <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 80152fa:	2300      	movs	r3, #0
}
 80152fc:	4618      	mov	r0, r3
 80152fe:	3740      	adds	r7, #64	; 0x40
 8015300:	46bd      	mov	sp, r7
 8015302:	bd80      	pop	{r7, pc}
 8015304:	0801c600 	.word	0x0801c600
 8015308:	0801c888 	.word	0x0801c888
 801530c:	0801c660 	.word	0x0801c660
 8015310:	0801c8cc 	.word	0x0801c8cc
 8015314:	2000faf4 	.word	0x2000faf4
 8015318:	0801c8e0 	.word	0x0801c8e0
 801531c:	2000fafc 	.word	0x2000fafc
 8015320:	0801c8f8 	.word	0x0801c8f8
 8015324:	0801c90c 	.word	0x0801c90c

08015328 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8015328:	b580      	push	{r7, lr}
 801532a:	b08a      	sub	sp, #40	; 0x28
 801532c:	af00      	add	r7, sp, #0
 801532e:	60f8      	str	r0, [r7, #12]
 8015330:	60b9      	str	r1, [r7, #8]
 8015332:	607a      	str	r2, [r7, #4]
 8015334:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8015336:	4b5f      	ldr	r3, [pc, #380]	; (80154b4 <dhcp_recv+0x18c>)
 8015338:	685b      	ldr	r3, [r3, #4]
 801533a:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801533c:	6a3b      	ldr	r3, [r7, #32]
 801533e:	6a1b      	ldr	r3, [r3, #32]
 8015340:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8015342:	687b      	ldr	r3, [r7, #4]
 8015344:	685b      	ldr	r3, [r3, #4]
 8015346:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8015348:	69fb      	ldr	r3, [r7, #28]
 801534a:	2b00      	cmp	r3, #0
 801534c:	f000 809d 	beq.w	801548a <dhcp_recv+0x162>
 8015350:	69fb      	ldr	r3, [r7, #28]
 8015352:	791b      	ldrb	r3, [r3, #4]
 8015354:	2b00      	cmp	r3, #0
 8015356:	f000 8098 	beq.w	801548a <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	895b      	ldrh	r3, [r3, #10]
 801535e:	2b2b      	cmp	r3, #43	; 0x2b
 8015360:	f240 8095 	bls.w	801548e <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8015364:	69bb      	ldr	r3, [r7, #24]
 8015366:	781b      	ldrb	r3, [r3, #0]
 8015368:	2b02      	cmp	r3, #2
 801536a:	f040 8092 	bne.w	8015492 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801536e:	2300      	movs	r3, #0
 8015370:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015374:	e012      	b.n	801539c <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8015376:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801537a:	6a3a      	ldr	r2, [r7, #32]
 801537c:	4413      	add	r3, r2
 801537e:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8015382:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015386:	69b9      	ldr	r1, [r7, #24]
 8015388:	440b      	add	r3, r1
 801538a:	7f1b      	ldrb	r3, [r3, #28]
 801538c:	429a      	cmp	r2, r3
 801538e:	f040 8082 	bne.w	8015496 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015392:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015396:	3301      	adds	r3, #1
 8015398:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801539c:	6a3b      	ldr	r3, [r7, #32]
 801539e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80153a2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80153a6:	429a      	cmp	r2, r3
 80153a8:	d203      	bcs.n	80153b2 <dhcp_recv+0x8a>
 80153aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80153ae:	2b05      	cmp	r3, #5
 80153b0:	d9e1      	bls.n	8015376 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 80153b2:	69bb      	ldr	r3, [r7, #24]
 80153b4:	685b      	ldr	r3, [r3, #4]
 80153b6:	4618      	mov	r0, r3
 80153b8:	f7f5 fe63 	bl	800b082 <lwip_htonl>
 80153bc:	4602      	mov	r2, r0
 80153be:	69fb      	ldr	r3, [r7, #28]
 80153c0:	681b      	ldr	r3, [r3, #0]
 80153c2:	429a      	cmp	r2, r3
 80153c4:	d169      	bne.n	801549a <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 80153c6:	69f9      	ldr	r1, [r7, #28]
 80153c8:	6878      	ldr	r0, [r7, #4]
 80153ca:	f7ff fcd9 	bl	8014d80 <dhcp_parse_reply>
 80153ce:	4603      	mov	r3, r0
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	d164      	bne.n	801549e <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 80153d4:	4b38      	ldr	r3, [pc, #224]	; (80154b8 <dhcp_recv+0x190>)
 80153d6:	785b      	ldrb	r3, [r3, #1]
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d062      	beq.n	80154a2 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	685b      	ldr	r3, [r3, #4]
 80153e0:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80153e2:	4b36      	ldr	r3, [pc, #216]	; (80154bc <dhcp_recv+0x194>)
 80153e4:	685b      	ldr	r3, [r3, #4]
 80153e6:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 80153e8:	7cfb      	ldrb	r3, [r7, #19]
 80153ea:	2b05      	cmp	r3, #5
 80153ec:	d12a      	bne.n	8015444 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 80153ee:	69fb      	ldr	r3, [r7, #28]
 80153f0:	795b      	ldrb	r3, [r3, #5]
 80153f2:	2b01      	cmp	r3, #1
 80153f4:	d112      	bne.n	801541c <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 80153f6:	6979      	ldr	r1, [r7, #20]
 80153f8:	6a38      	ldr	r0, [r7, #32]
 80153fa:	f7fe fe53 	bl	80140a4 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80153fe:	6a3b      	ldr	r3, [r7, #32]
 8015400:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015404:	f003 0308 	and.w	r3, r3, #8
 8015408:	2b00      	cmp	r3, #0
 801540a:	d003      	beq.n	8015414 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801540c:	6a38      	ldr	r0, [r7, #32]
 801540e:	f7fe fbc3 	bl	8013b98 <dhcp_check>
 8015412:	e047      	b.n	80154a4 <dhcp_recv+0x17c>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8015414:	6a38      	ldr	r0, [r7, #32]
 8015416:	f7ff f867 	bl	80144e8 <dhcp_bind>
 801541a:	e043      	b.n	80154a4 <dhcp_recv+0x17c>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801541c:	69fb      	ldr	r3, [r7, #28]
 801541e:	795b      	ldrb	r3, [r3, #5]
 8015420:	2b03      	cmp	r3, #3
 8015422:	d007      	beq.n	8015434 <dhcp_recv+0x10c>
 8015424:	69fb      	ldr	r3, [r7, #28]
 8015426:	795b      	ldrb	r3, [r3, #5]
 8015428:	2b04      	cmp	r3, #4
 801542a:	d003      	beq.n	8015434 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801542c:	69fb      	ldr	r3, [r7, #28]
 801542e:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8015430:	2b05      	cmp	r3, #5
 8015432:	d137      	bne.n	80154a4 <dhcp_recv+0x17c>
      dhcp_handle_ack(netif, msg_in);
 8015434:	6979      	ldr	r1, [r7, #20]
 8015436:	6a38      	ldr	r0, [r7, #32]
 8015438:	f7fe fe34 	bl	80140a4 <dhcp_handle_ack>
      dhcp_bind(netif);
 801543c:	6a38      	ldr	r0, [r7, #32]
 801543e:	f7ff f853 	bl	80144e8 <dhcp_bind>
 8015442:	e02f      	b.n	80154a4 <dhcp_recv+0x17c>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8015444:	7cfb      	ldrb	r3, [r7, #19]
 8015446:	2b06      	cmp	r3, #6
 8015448:	d113      	bne.n	8015472 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801544a:	69fb      	ldr	r3, [r7, #28]
 801544c:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801544e:	2b03      	cmp	r3, #3
 8015450:	d00b      	beq.n	801546a <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015452:	69fb      	ldr	r3, [r7, #28]
 8015454:	795b      	ldrb	r3, [r3, #5]
 8015456:	2b01      	cmp	r3, #1
 8015458:	d007      	beq.n	801546a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801545a:	69fb      	ldr	r3, [r7, #28]
 801545c:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801545e:	2b04      	cmp	r3, #4
 8015460:	d003      	beq.n	801546a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8015462:	69fb      	ldr	r3, [r7, #28]
 8015464:	795b      	ldrb	r3, [r3, #5]
 8015466:	2b05      	cmp	r3, #5
 8015468:	d103      	bne.n	8015472 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801546a:	6a38      	ldr	r0, [r7, #32]
 801546c:	f7fe fb7a 	bl	8013b64 <dhcp_handle_nak>
 8015470:	e018      	b.n	80154a4 <dhcp_recv+0x17c>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8015472:	7cfb      	ldrb	r3, [r7, #19]
 8015474:	2b02      	cmp	r3, #2
 8015476:	d108      	bne.n	801548a <dhcp_recv+0x162>
 8015478:	69fb      	ldr	r3, [r7, #28]
 801547a:	795b      	ldrb	r3, [r3, #5]
 801547c:	2b06      	cmp	r3, #6
 801547e:	d104      	bne.n	801548a <dhcp_recv+0x162>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8015480:	6979      	ldr	r1, [r7, #20]
 8015482:	6a38      	ldr	r0, [r7, #32]
 8015484:	f7fe fbbc 	bl	8013c00 <dhcp_handle_offer>
 8015488:	e00c      	b.n	80154a4 <dhcp_recv+0x17c>
  }

free_pbuf_and_return:
 801548a:	bf00      	nop
 801548c:	e00a      	b.n	80154a4 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 801548e:	bf00      	nop
 8015490:	e008      	b.n	80154a4 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8015492:	bf00      	nop
 8015494:	e006      	b.n	80154a4 <dhcp_recv+0x17c>
      goto free_pbuf_and_return;
 8015496:	bf00      	nop
 8015498:	e004      	b.n	80154a4 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 801549a:	bf00      	nop
 801549c:	e002      	b.n	80154a4 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 801549e:	bf00      	nop
 80154a0:	e000      	b.n	80154a4 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 80154a2:	bf00      	nop
  pbuf_free(p);
 80154a4:	6878      	ldr	r0, [r7, #4]
 80154a6:	f7f7 f943 	bl	800c730 <pbuf_free>
}
 80154aa:	bf00      	nop
 80154ac:	3728      	adds	r7, #40	; 0x28
 80154ae:	46bd      	mov	sp, r7
 80154b0:	bd80      	pop	{r7, pc}
 80154b2:	bf00      	nop
 80154b4:	2000c3a4 	.word	0x2000c3a4
 80154b8:	2000faf4 	.word	0x2000faf4
 80154bc:	2000fafc 	.word	0x2000fafc

080154c0 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 80154c0:	b580      	push	{r7, lr}
 80154c2:	b088      	sub	sp, #32
 80154c4:	af00      	add	r7, sp, #0
 80154c6:	60f8      	str	r0, [r7, #12]
 80154c8:	60b9      	str	r1, [r7, #8]
 80154ca:	603b      	str	r3, [r7, #0]
 80154cc:	4613      	mov	r3, r2
 80154ce:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 80154d0:	68fb      	ldr	r3, [r7, #12]
 80154d2:	2b00      	cmp	r3, #0
 80154d4:	d108      	bne.n	80154e8 <dhcp_create_msg+0x28>
 80154d6:	4b5f      	ldr	r3, [pc, #380]	; (8015654 <dhcp_create_msg+0x194>)
 80154d8:	f240 7269 	movw	r2, #1897	; 0x769
 80154dc:	495e      	ldr	r1, [pc, #376]	; (8015658 <dhcp_create_msg+0x198>)
 80154de:	485f      	ldr	r0, [pc, #380]	; (801565c <dhcp_create_msg+0x19c>)
 80154e0:	f002 fe56 	bl	8018190 <iprintf>
 80154e4:	2300      	movs	r3, #0
 80154e6:	e0b1      	b.n	801564c <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 80154e8:	68bb      	ldr	r3, [r7, #8]
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d108      	bne.n	8015500 <dhcp_create_msg+0x40>
 80154ee:	4b59      	ldr	r3, [pc, #356]	; (8015654 <dhcp_create_msg+0x194>)
 80154f0:	f240 726a 	movw	r2, #1898	; 0x76a
 80154f4:	495a      	ldr	r1, [pc, #360]	; (8015660 <dhcp_create_msg+0x1a0>)
 80154f6:	4859      	ldr	r0, [pc, #356]	; (801565c <dhcp_create_msg+0x19c>)
 80154f8:	f002 fe4a 	bl	8018190 <iprintf>
 80154fc:	2300      	movs	r3, #0
 80154fe:	e0a5      	b.n	801564c <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8015500:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015504:	f44f 719a 	mov.w	r1, #308	; 0x134
 8015508:	2036      	movs	r0, #54	; 0x36
 801550a:	f7f6 fe31 	bl	800c170 <pbuf_alloc>
 801550e:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8015510:	69bb      	ldr	r3, [r7, #24]
 8015512:	2b00      	cmp	r3, #0
 8015514:	d101      	bne.n	801551a <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8015516:	2300      	movs	r3, #0
 8015518:	e098      	b.n	801564c <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801551a:	69bb      	ldr	r3, [r7, #24]
 801551c:	895b      	ldrh	r3, [r3, #10]
 801551e:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8015522:	d206      	bcs.n	8015532 <dhcp_create_msg+0x72>
 8015524:	4b4b      	ldr	r3, [pc, #300]	; (8015654 <dhcp_create_msg+0x194>)
 8015526:	f240 7272 	movw	r2, #1906	; 0x772
 801552a:	494e      	ldr	r1, [pc, #312]	; (8015664 <dhcp_create_msg+0x1a4>)
 801552c:	484b      	ldr	r0, [pc, #300]	; (801565c <dhcp_create_msg+0x19c>)
 801552e:	f002 fe2f 	bl	8018190 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8015532:	79fb      	ldrb	r3, [r7, #7]
 8015534:	2b03      	cmp	r3, #3
 8015536:	d103      	bne.n	8015540 <dhcp_create_msg+0x80>
 8015538:	68bb      	ldr	r3, [r7, #8]
 801553a:	795b      	ldrb	r3, [r3, #5]
 801553c:	2b03      	cmp	r3, #3
 801553e:	d10d      	bne.n	801555c <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8015540:	68bb      	ldr	r3, [r7, #8]
 8015542:	799b      	ldrb	r3, [r3, #6]
 8015544:	2b00      	cmp	r3, #0
 8015546:	d105      	bne.n	8015554 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8015548:	f002 fe3a 	bl	80181c0 <rand>
 801554c:	4603      	mov	r3, r0
 801554e:	461a      	mov	r2, r3
 8015550:	4b45      	ldr	r3, [pc, #276]	; (8015668 <dhcp_create_msg+0x1a8>)
 8015552:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8015554:	4b44      	ldr	r3, [pc, #272]	; (8015668 <dhcp_create_msg+0x1a8>)
 8015556:	681a      	ldr	r2, [r3, #0]
 8015558:	68bb      	ldr	r3, [r7, #8]
 801555a:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801555c:	69bb      	ldr	r3, [r7, #24]
 801555e:	685b      	ldr	r3, [r3, #4]
 8015560:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8015562:	f44f 729a 	mov.w	r2, #308	; 0x134
 8015566:	2100      	movs	r1, #0
 8015568:	6978      	ldr	r0, [r7, #20]
 801556a:	f002 fe08 	bl	801817e <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801556e:	697b      	ldr	r3, [r7, #20]
 8015570:	2201      	movs	r2, #1
 8015572:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8015574:	697b      	ldr	r3, [r7, #20]
 8015576:	2201      	movs	r2, #1
 8015578:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801557a:	68fb      	ldr	r3, [r7, #12]
 801557c:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8015580:	697b      	ldr	r3, [r7, #20]
 8015582:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8015584:	68bb      	ldr	r3, [r7, #8]
 8015586:	681b      	ldr	r3, [r3, #0]
 8015588:	4618      	mov	r0, r3
 801558a:	f7f5 fd7a 	bl	800b082 <lwip_htonl>
 801558e:	4602      	mov	r2, r0
 8015590:	697b      	ldr	r3, [r7, #20]
 8015592:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8015594:	79fb      	ldrb	r3, [r7, #7]
 8015596:	2b08      	cmp	r3, #8
 8015598:	d010      	beq.n	80155bc <dhcp_create_msg+0xfc>
 801559a:	79fb      	ldrb	r3, [r7, #7]
 801559c:	2b04      	cmp	r3, #4
 801559e:	d00d      	beq.n	80155bc <dhcp_create_msg+0xfc>
 80155a0:	79fb      	ldrb	r3, [r7, #7]
 80155a2:	2b07      	cmp	r3, #7
 80155a4:	d00a      	beq.n	80155bc <dhcp_create_msg+0xfc>
 80155a6:	79fb      	ldrb	r3, [r7, #7]
 80155a8:	2b03      	cmp	r3, #3
 80155aa:	d10c      	bne.n	80155c6 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80155ac:	68bb      	ldr	r3, [r7, #8]
 80155ae:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 80155b0:	2b05      	cmp	r3, #5
 80155b2:	d003      	beq.n	80155bc <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80155b4:	68bb      	ldr	r3, [r7, #8]
 80155b6:	795b      	ldrb	r3, [r3, #5]
 80155b8:	2b04      	cmp	r3, #4
 80155ba:	d104      	bne.n	80155c6 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 80155bc:	68fb      	ldr	r3, [r7, #12]
 80155be:	3304      	adds	r3, #4
 80155c0:	681a      	ldr	r2, [r3, #0]
 80155c2:	697b      	ldr	r3, [r7, #20]
 80155c4:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80155c6:	2300      	movs	r3, #0
 80155c8:	83fb      	strh	r3, [r7, #30]
 80155ca:	e00c      	b.n	80155e6 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 80155cc:	8bfa      	ldrh	r2, [r7, #30]
 80155ce:	8bfb      	ldrh	r3, [r7, #30]
 80155d0:	68f9      	ldr	r1, [r7, #12]
 80155d2:	440a      	add	r2, r1
 80155d4:	f892 1026 	ldrb.w	r1, [r2, #38]	; 0x26
 80155d8:	697a      	ldr	r2, [r7, #20]
 80155da:	4413      	add	r3, r2
 80155dc:	460a      	mov	r2, r1
 80155de:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80155e0:	8bfb      	ldrh	r3, [r7, #30]
 80155e2:	3301      	adds	r3, #1
 80155e4:	83fb      	strh	r3, [r7, #30]
 80155e6:	8bfb      	ldrh	r3, [r7, #30]
 80155e8:	2b05      	cmp	r3, #5
 80155ea:	d9ef      	bls.n	80155cc <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80155ec:	697b      	ldr	r3, [r7, #20]
 80155ee:	2200      	movs	r2, #0
 80155f0:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80155f4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80155f8:	2200      	movs	r2, #0
 80155fa:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80155fe:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8015602:	2200      	movs	r2, #0
 8015604:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8015608:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 801560c:	2200      	movs	r2, #0
 801560e:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8015612:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8015616:	697b      	ldr	r3, [r7, #20]
 8015618:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801561c:	2301      	movs	r3, #1
 801561e:	2235      	movs	r2, #53	; 0x35
 8015620:	2000      	movs	r0, #0
 8015622:	f7ff fadd 	bl	8014be0 <dhcp_option>
 8015626:	4603      	mov	r3, r0
 8015628:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801562a:	697b      	ldr	r3, [r7, #20]
 801562c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015630:	79fa      	ldrb	r2, [r7, #7]
 8015632:	8a7b      	ldrh	r3, [r7, #18]
 8015634:	4618      	mov	r0, r3
 8015636:	f7ff fb07 	bl	8014c48 <dhcp_option_byte>
 801563a:	4603      	mov	r3, r0
 801563c:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801563e:	683b      	ldr	r3, [r7, #0]
 8015640:	2b00      	cmp	r3, #0
 8015642:	d002      	beq.n	801564a <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8015644:	683b      	ldr	r3, [r7, #0]
 8015646:	8a7a      	ldrh	r2, [r7, #18]
 8015648:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801564a:	69bb      	ldr	r3, [r7, #24]
}
 801564c:	4618      	mov	r0, r3
 801564e:	3720      	adds	r7, #32
 8015650:	46bd      	mov	sp, r7
 8015652:	bd80      	pop	{r7, pc}
 8015654:	0801c600 	.word	0x0801c600
 8015658:	0801c920 	.word	0x0801c920
 801565c:	0801c660 	.word	0x0801c660
 8015660:	0801c940 	.word	0x0801c940
 8015664:	0801c960 	.word	0x0801c960
 8015668:	20008ca0 	.word	0x20008ca0

0801566c <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801566c:	b580      	push	{r7, lr}
 801566e:	b084      	sub	sp, #16
 8015670:	af00      	add	r7, sp, #0
 8015672:	4603      	mov	r3, r0
 8015674:	60b9      	str	r1, [r7, #8]
 8015676:	607a      	str	r2, [r7, #4]
 8015678:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801567a:	89fb      	ldrh	r3, [r7, #14]
 801567c:	1c5a      	adds	r2, r3, #1
 801567e:	81fa      	strh	r2, [r7, #14]
 8015680:	461a      	mov	r2, r3
 8015682:	68bb      	ldr	r3, [r7, #8]
 8015684:	4413      	add	r3, r2
 8015686:	22ff      	movs	r2, #255	; 0xff
 8015688:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801568a:	e007      	b.n	801569c <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801568c:	89fb      	ldrh	r3, [r7, #14]
 801568e:	1c5a      	adds	r2, r3, #1
 8015690:	81fa      	strh	r2, [r7, #14]
 8015692:	461a      	mov	r2, r3
 8015694:	68bb      	ldr	r3, [r7, #8]
 8015696:	4413      	add	r3, r2
 8015698:	2200      	movs	r2, #0
 801569a:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801569c:	89fb      	ldrh	r3, [r7, #14]
 801569e:	2b43      	cmp	r3, #67	; 0x43
 80156a0:	d904      	bls.n	80156ac <dhcp_option_trailer+0x40>
 80156a2:	89fb      	ldrh	r3, [r7, #14]
 80156a4:	f003 0303 	and.w	r3, r3, #3
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d002      	beq.n	80156b2 <dhcp_option_trailer+0x46>
 80156ac:	89fb      	ldrh	r3, [r7, #14]
 80156ae:	2b43      	cmp	r3, #67	; 0x43
 80156b0:	d9ec      	bls.n	801568c <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80156b2:	89fb      	ldrh	r3, [r7, #14]
 80156b4:	33f0      	adds	r3, #240	; 0xf0
 80156b6:	b29b      	uxth	r3, r3
 80156b8:	4619      	mov	r1, r3
 80156ba:	6878      	ldr	r0, [r7, #4]
 80156bc:	f7f6 feb2 	bl	800c424 <pbuf_realloc>
}
 80156c0:	bf00      	nop
 80156c2:	3710      	adds	r7, #16
 80156c4:	46bd      	mov	sp, r7
 80156c6:	bd80      	pop	{r7, pc}

080156c8 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 80156c8:	b480      	push	{r7}
 80156ca:	b085      	sub	sp, #20
 80156cc:	af00      	add	r7, sp, #0
 80156ce:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	d017      	beq.n	8015706 <dhcp_supplied_address+0x3e>
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	6a1b      	ldr	r3, [r3, #32]
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d013      	beq.n	8015706 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	6a1b      	ldr	r3, [r3, #32]
 80156e2:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80156e4:	68fb      	ldr	r3, [r7, #12]
 80156e6:	795b      	ldrb	r3, [r3, #5]
 80156e8:	2b0a      	cmp	r3, #10
 80156ea:	d007      	beq.n	80156fc <dhcp_supplied_address+0x34>
 80156ec:	68fb      	ldr	r3, [r7, #12]
 80156ee:	795b      	ldrb	r3, [r3, #5]
 80156f0:	2b05      	cmp	r3, #5
 80156f2:	d003      	beq.n	80156fc <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 80156f4:	68fb      	ldr	r3, [r7, #12]
 80156f6:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80156f8:	2b04      	cmp	r3, #4
 80156fa:	d101      	bne.n	8015700 <dhcp_supplied_address+0x38>
 80156fc:	2301      	movs	r3, #1
 80156fe:	e000      	b.n	8015702 <dhcp_supplied_address+0x3a>
 8015700:	2300      	movs	r3, #0
 8015702:	b2db      	uxtb	r3, r3
 8015704:	e000      	b.n	8015708 <dhcp_supplied_address+0x40>
  }
  return 0;
 8015706:	2300      	movs	r3, #0
}
 8015708:	4618      	mov	r0, r3
 801570a:	3714      	adds	r7, #20
 801570c:	46bd      	mov	sp, r7
 801570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015712:	4770      	bx	lr

08015714 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8015714:	b580      	push	{r7, lr}
 8015716:	b082      	sub	sp, #8
 8015718:	af00      	add	r7, sp, #0
 801571a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801571c:	4915      	ldr	r1, [pc, #84]	; (8015774 <etharp_free_entry+0x60>)
 801571e:	687a      	ldr	r2, [r7, #4]
 8015720:	4613      	mov	r3, r2
 8015722:	005b      	lsls	r3, r3, #1
 8015724:	4413      	add	r3, r2
 8015726:	00db      	lsls	r3, r3, #3
 8015728:	440b      	add	r3, r1
 801572a:	681b      	ldr	r3, [r3, #0]
 801572c:	2b00      	cmp	r3, #0
 801572e:	d013      	beq.n	8015758 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8015730:	4910      	ldr	r1, [pc, #64]	; (8015774 <etharp_free_entry+0x60>)
 8015732:	687a      	ldr	r2, [r7, #4]
 8015734:	4613      	mov	r3, r2
 8015736:	005b      	lsls	r3, r3, #1
 8015738:	4413      	add	r3, r2
 801573a:	00db      	lsls	r3, r3, #3
 801573c:	440b      	add	r3, r1
 801573e:	681b      	ldr	r3, [r3, #0]
 8015740:	4618      	mov	r0, r3
 8015742:	f7f6 fff5 	bl	800c730 <pbuf_free>
    arp_table[i].q = NULL;
 8015746:	490b      	ldr	r1, [pc, #44]	; (8015774 <etharp_free_entry+0x60>)
 8015748:	687a      	ldr	r2, [r7, #4]
 801574a:	4613      	mov	r3, r2
 801574c:	005b      	lsls	r3, r3, #1
 801574e:	4413      	add	r3, r2
 8015750:	00db      	lsls	r3, r3, #3
 8015752:	440b      	add	r3, r1
 8015754:	2200      	movs	r2, #0
 8015756:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8015758:	4906      	ldr	r1, [pc, #24]	; (8015774 <etharp_free_entry+0x60>)
 801575a:	687a      	ldr	r2, [r7, #4]
 801575c:	4613      	mov	r3, r2
 801575e:	005b      	lsls	r3, r3, #1
 8015760:	4413      	add	r3, r2
 8015762:	00db      	lsls	r3, r3, #3
 8015764:	440b      	add	r3, r1
 8015766:	3314      	adds	r3, #20
 8015768:	2200      	movs	r2, #0
 801576a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801576c:	bf00      	nop
 801576e:	3708      	adds	r7, #8
 8015770:	46bd      	mov	sp, r7
 8015772:	bd80      	pop	{r7, pc}
 8015774:	20008ca4 	.word	0x20008ca4

08015778 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8015778:	b580      	push	{r7, lr}
 801577a:	b082      	sub	sp, #8
 801577c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801577e:	2300      	movs	r3, #0
 8015780:	607b      	str	r3, [r7, #4]
 8015782:	e096      	b.n	80158b2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8015784:	494f      	ldr	r1, [pc, #316]	; (80158c4 <etharp_tmr+0x14c>)
 8015786:	687a      	ldr	r2, [r7, #4]
 8015788:	4613      	mov	r3, r2
 801578a:	005b      	lsls	r3, r3, #1
 801578c:	4413      	add	r3, r2
 801578e:	00db      	lsls	r3, r3, #3
 8015790:	440b      	add	r3, r1
 8015792:	3314      	adds	r3, #20
 8015794:	781b      	ldrb	r3, [r3, #0]
 8015796:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8015798:	78fb      	ldrb	r3, [r7, #3]
 801579a:	2b00      	cmp	r3, #0
 801579c:	f000 8086 	beq.w	80158ac <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80157a0:	4948      	ldr	r1, [pc, #288]	; (80158c4 <etharp_tmr+0x14c>)
 80157a2:	687a      	ldr	r2, [r7, #4]
 80157a4:	4613      	mov	r3, r2
 80157a6:	005b      	lsls	r3, r3, #1
 80157a8:	4413      	add	r3, r2
 80157aa:	00db      	lsls	r3, r3, #3
 80157ac:	440b      	add	r3, r1
 80157ae:	3312      	adds	r3, #18
 80157b0:	881b      	ldrh	r3, [r3, #0]
 80157b2:	3301      	adds	r3, #1
 80157b4:	b298      	uxth	r0, r3
 80157b6:	4943      	ldr	r1, [pc, #268]	; (80158c4 <etharp_tmr+0x14c>)
 80157b8:	687a      	ldr	r2, [r7, #4]
 80157ba:	4613      	mov	r3, r2
 80157bc:	005b      	lsls	r3, r3, #1
 80157be:	4413      	add	r3, r2
 80157c0:	00db      	lsls	r3, r3, #3
 80157c2:	440b      	add	r3, r1
 80157c4:	3312      	adds	r3, #18
 80157c6:	4602      	mov	r2, r0
 80157c8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80157ca:	493e      	ldr	r1, [pc, #248]	; (80158c4 <etharp_tmr+0x14c>)
 80157cc:	687a      	ldr	r2, [r7, #4]
 80157ce:	4613      	mov	r3, r2
 80157d0:	005b      	lsls	r3, r3, #1
 80157d2:	4413      	add	r3, r2
 80157d4:	00db      	lsls	r3, r3, #3
 80157d6:	440b      	add	r3, r1
 80157d8:	3312      	adds	r3, #18
 80157da:	881b      	ldrh	r3, [r3, #0]
 80157dc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80157e0:	d215      	bcs.n	801580e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80157e2:	4938      	ldr	r1, [pc, #224]	; (80158c4 <etharp_tmr+0x14c>)
 80157e4:	687a      	ldr	r2, [r7, #4]
 80157e6:	4613      	mov	r3, r2
 80157e8:	005b      	lsls	r3, r3, #1
 80157ea:	4413      	add	r3, r2
 80157ec:	00db      	lsls	r3, r3, #3
 80157ee:	440b      	add	r3, r1
 80157f0:	3314      	adds	r3, #20
 80157f2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80157f4:	2b01      	cmp	r3, #1
 80157f6:	d10e      	bne.n	8015816 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80157f8:	4932      	ldr	r1, [pc, #200]	; (80158c4 <etharp_tmr+0x14c>)
 80157fa:	687a      	ldr	r2, [r7, #4]
 80157fc:	4613      	mov	r3, r2
 80157fe:	005b      	lsls	r3, r3, #1
 8015800:	4413      	add	r3, r2
 8015802:	00db      	lsls	r3, r3, #3
 8015804:	440b      	add	r3, r1
 8015806:	3312      	adds	r3, #18
 8015808:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801580a:	2b04      	cmp	r3, #4
 801580c:	d903      	bls.n	8015816 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801580e:	6878      	ldr	r0, [r7, #4]
 8015810:	f7ff ff80 	bl	8015714 <etharp_free_entry>
 8015814:	e04a      	b.n	80158ac <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8015816:	492b      	ldr	r1, [pc, #172]	; (80158c4 <etharp_tmr+0x14c>)
 8015818:	687a      	ldr	r2, [r7, #4]
 801581a:	4613      	mov	r3, r2
 801581c:	005b      	lsls	r3, r3, #1
 801581e:	4413      	add	r3, r2
 8015820:	00db      	lsls	r3, r3, #3
 8015822:	440b      	add	r3, r1
 8015824:	3314      	adds	r3, #20
 8015826:	781b      	ldrb	r3, [r3, #0]
 8015828:	2b03      	cmp	r3, #3
 801582a:	d10a      	bne.n	8015842 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801582c:	4925      	ldr	r1, [pc, #148]	; (80158c4 <etharp_tmr+0x14c>)
 801582e:	687a      	ldr	r2, [r7, #4]
 8015830:	4613      	mov	r3, r2
 8015832:	005b      	lsls	r3, r3, #1
 8015834:	4413      	add	r3, r2
 8015836:	00db      	lsls	r3, r3, #3
 8015838:	440b      	add	r3, r1
 801583a:	3314      	adds	r3, #20
 801583c:	2204      	movs	r2, #4
 801583e:	701a      	strb	r2, [r3, #0]
 8015840:	e034      	b.n	80158ac <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8015842:	4920      	ldr	r1, [pc, #128]	; (80158c4 <etharp_tmr+0x14c>)
 8015844:	687a      	ldr	r2, [r7, #4]
 8015846:	4613      	mov	r3, r2
 8015848:	005b      	lsls	r3, r3, #1
 801584a:	4413      	add	r3, r2
 801584c:	00db      	lsls	r3, r3, #3
 801584e:	440b      	add	r3, r1
 8015850:	3314      	adds	r3, #20
 8015852:	781b      	ldrb	r3, [r3, #0]
 8015854:	2b04      	cmp	r3, #4
 8015856:	d10a      	bne.n	801586e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8015858:	491a      	ldr	r1, [pc, #104]	; (80158c4 <etharp_tmr+0x14c>)
 801585a:	687a      	ldr	r2, [r7, #4]
 801585c:	4613      	mov	r3, r2
 801585e:	005b      	lsls	r3, r3, #1
 8015860:	4413      	add	r3, r2
 8015862:	00db      	lsls	r3, r3, #3
 8015864:	440b      	add	r3, r1
 8015866:	3314      	adds	r3, #20
 8015868:	2202      	movs	r2, #2
 801586a:	701a      	strb	r2, [r3, #0]
 801586c:	e01e      	b.n	80158ac <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801586e:	4915      	ldr	r1, [pc, #84]	; (80158c4 <etharp_tmr+0x14c>)
 8015870:	687a      	ldr	r2, [r7, #4]
 8015872:	4613      	mov	r3, r2
 8015874:	005b      	lsls	r3, r3, #1
 8015876:	4413      	add	r3, r2
 8015878:	00db      	lsls	r3, r3, #3
 801587a:	440b      	add	r3, r1
 801587c:	3314      	adds	r3, #20
 801587e:	781b      	ldrb	r3, [r3, #0]
 8015880:	2b01      	cmp	r3, #1
 8015882:	d113      	bne.n	80158ac <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8015884:	490f      	ldr	r1, [pc, #60]	; (80158c4 <etharp_tmr+0x14c>)
 8015886:	687a      	ldr	r2, [r7, #4]
 8015888:	4613      	mov	r3, r2
 801588a:	005b      	lsls	r3, r3, #1
 801588c:	4413      	add	r3, r2
 801588e:	00db      	lsls	r3, r3, #3
 8015890:	440b      	add	r3, r1
 8015892:	3308      	adds	r3, #8
 8015894:	6818      	ldr	r0, [r3, #0]
 8015896:	687a      	ldr	r2, [r7, #4]
 8015898:	4613      	mov	r3, r2
 801589a:	005b      	lsls	r3, r3, #1
 801589c:	4413      	add	r3, r2
 801589e:	00db      	lsls	r3, r3, #3
 80158a0:	4a08      	ldr	r2, [pc, #32]	; (80158c4 <etharp_tmr+0x14c>)
 80158a2:	4413      	add	r3, r2
 80158a4:	3304      	adds	r3, #4
 80158a6:	4619      	mov	r1, r3
 80158a8:	f000 fe72 	bl	8016590 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	3301      	adds	r3, #1
 80158b0:	607b      	str	r3, [r7, #4]
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	2b09      	cmp	r3, #9
 80158b6:	f77f af65 	ble.w	8015784 <etharp_tmr+0xc>
      }
    }
  }
}
 80158ba:	bf00      	nop
 80158bc:	3708      	adds	r7, #8
 80158be:	46bd      	mov	sp, r7
 80158c0:	bd80      	pop	{r7, pc}
 80158c2:	bf00      	nop
 80158c4:	20008ca4 	.word	0x20008ca4

080158c8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80158c8:	b580      	push	{r7, lr}
 80158ca:	b08a      	sub	sp, #40	; 0x28
 80158cc:	af00      	add	r7, sp, #0
 80158ce:	60f8      	str	r0, [r7, #12]
 80158d0:	460b      	mov	r3, r1
 80158d2:	607a      	str	r2, [r7, #4]
 80158d4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80158d6:	230a      	movs	r3, #10
 80158d8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80158da:	230a      	movs	r3, #10
 80158dc:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80158de:	230a      	movs	r3, #10
 80158e0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80158e2:	2300      	movs	r3, #0
 80158e4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80158e6:	230a      	movs	r3, #10
 80158e8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80158ea:	2300      	movs	r3, #0
 80158ec:	83bb      	strh	r3, [r7, #28]
 80158ee:	2300      	movs	r3, #0
 80158f0:	837b      	strh	r3, [r7, #26]
 80158f2:	2300      	movs	r3, #0
 80158f4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80158f6:	2300      	movs	r3, #0
 80158f8:	843b      	strh	r3, [r7, #32]
 80158fa:	e0ae      	b.n	8015a5a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80158fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015900:	49a6      	ldr	r1, [pc, #664]	; (8015b9c <etharp_find_entry+0x2d4>)
 8015902:	4613      	mov	r3, r2
 8015904:	005b      	lsls	r3, r3, #1
 8015906:	4413      	add	r3, r2
 8015908:	00db      	lsls	r3, r3, #3
 801590a:	440b      	add	r3, r1
 801590c:	3314      	adds	r3, #20
 801590e:	781b      	ldrb	r3, [r3, #0]
 8015910:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8015912:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015916:	2b0a      	cmp	r3, #10
 8015918:	d105      	bne.n	8015926 <etharp_find_entry+0x5e>
 801591a:	7dfb      	ldrb	r3, [r7, #23]
 801591c:	2b00      	cmp	r3, #0
 801591e:	d102      	bne.n	8015926 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8015920:	8c3b      	ldrh	r3, [r7, #32]
 8015922:	847b      	strh	r3, [r7, #34]	; 0x22
 8015924:	e095      	b.n	8015a52 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8015926:	7dfb      	ldrb	r3, [r7, #23]
 8015928:	2b00      	cmp	r3, #0
 801592a:	f000 8092 	beq.w	8015a52 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801592e:	7dfb      	ldrb	r3, [r7, #23]
 8015930:	2b01      	cmp	r3, #1
 8015932:	d009      	beq.n	8015948 <etharp_find_entry+0x80>
 8015934:	7dfb      	ldrb	r3, [r7, #23]
 8015936:	2b01      	cmp	r3, #1
 8015938:	d806      	bhi.n	8015948 <etharp_find_entry+0x80>
 801593a:	4b99      	ldr	r3, [pc, #612]	; (8015ba0 <etharp_find_entry+0x2d8>)
 801593c:	f44f 7292 	mov.w	r2, #292	; 0x124
 8015940:	4998      	ldr	r1, [pc, #608]	; (8015ba4 <etharp_find_entry+0x2dc>)
 8015942:	4899      	ldr	r0, [pc, #612]	; (8015ba8 <etharp_find_entry+0x2e0>)
 8015944:	f002 fc24 	bl	8018190 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8015948:	68fb      	ldr	r3, [r7, #12]
 801594a:	2b00      	cmp	r3, #0
 801594c:	d020      	beq.n	8015990 <etharp_find_entry+0xc8>
 801594e:	68fb      	ldr	r3, [r7, #12]
 8015950:	6819      	ldr	r1, [r3, #0]
 8015952:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015956:	4891      	ldr	r0, [pc, #580]	; (8015b9c <etharp_find_entry+0x2d4>)
 8015958:	4613      	mov	r3, r2
 801595a:	005b      	lsls	r3, r3, #1
 801595c:	4413      	add	r3, r2
 801595e:	00db      	lsls	r3, r3, #3
 8015960:	4403      	add	r3, r0
 8015962:	3304      	adds	r3, #4
 8015964:	681b      	ldr	r3, [r3, #0]
 8015966:	4299      	cmp	r1, r3
 8015968:	d112      	bne.n	8015990 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	2b00      	cmp	r3, #0
 801596e:	d00c      	beq.n	801598a <etharp_find_entry+0xc2>
 8015970:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015974:	4989      	ldr	r1, [pc, #548]	; (8015b9c <etharp_find_entry+0x2d4>)
 8015976:	4613      	mov	r3, r2
 8015978:	005b      	lsls	r3, r3, #1
 801597a:	4413      	add	r3, r2
 801597c:	00db      	lsls	r3, r3, #3
 801597e:	440b      	add	r3, r1
 8015980:	3308      	adds	r3, #8
 8015982:	681b      	ldr	r3, [r3, #0]
 8015984:	687a      	ldr	r2, [r7, #4]
 8015986:	429a      	cmp	r2, r3
 8015988:	d102      	bne.n	8015990 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801598a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801598e:	e100      	b.n	8015b92 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8015990:	7dfb      	ldrb	r3, [r7, #23]
 8015992:	2b01      	cmp	r3, #1
 8015994:	d140      	bne.n	8015a18 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8015996:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801599a:	4980      	ldr	r1, [pc, #512]	; (8015b9c <etharp_find_entry+0x2d4>)
 801599c:	4613      	mov	r3, r2
 801599e:	005b      	lsls	r3, r3, #1
 80159a0:	4413      	add	r3, r2
 80159a2:	00db      	lsls	r3, r3, #3
 80159a4:	440b      	add	r3, r1
 80159a6:	681b      	ldr	r3, [r3, #0]
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d01a      	beq.n	80159e2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80159ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80159b0:	497a      	ldr	r1, [pc, #488]	; (8015b9c <etharp_find_entry+0x2d4>)
 80159b2:	4613      	mov	r3, r2
 80159b4:	005b      	lsls	r3, r3, #1
 80159b6:	4413      	add	r3, r2
 80159b8:	00db      	lsls	r3, r3, #3
 80159ba:	440b      	add	r3, r1
 80159bc:	3312      	adds	r3, #18
 80159be:	881b      	ldrh	r3, [r3, #0]
 80159c0:	8bba      	ldrh	r2, [r7, #28]
 80159c2:	429a      	cmp	r2, r3
 80159c4:	d845      	bhi.n	8015a52 <etharp_find_entry+0x18a>
            old_queue = i;
 80159c6:	8c3b      	ldrh	r3, [r7, #32]
 80159c8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80159ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80159ce:	4973      	ldr	r1, [pc, #460]	; (8015b9c <etharp_find_entry+0x2d4>)
 80159d0:	4613      	mov	r3, r2
 80159d2:	005b      	lsls	r3, r3, #1
 80159d4:	4413      	add	r3, r2
 80159d6:	00db      	lsls	r3, r3, #3
 80159d8:	440b      	add	r3, r1
 80159da:	3312      	adds	r3, #18
 80159dc:	881b      	ldrh	r3, [r3, #0]
 80159de:	83bb      	strh	r3, [r7, #28]
 80159e0:	e037      	b.n	8015a52 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80159e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80159e6:	496d      	ldr	r1, [pc, #436]	; (8015b9c <etharp_find_entry+0x2d4>)
 80159e8:	4613      	mov	r3, r2
 80159ea:	005b      	lsls	r3, r3, #1
 80159ec:	4413      	add	r3, r2
 80159ee:	00db      	lsls	r3, r3, #3
 80159f0:	440b      	add	r3, r1
 80159f2:	3312      	adds	r3, #18
 80159f4:	881b      	ldrh	r3, [r3, #0]
 80159f6:	8b7a      	ldrh	r2, [r7, #26]
 80159f8:	429a      	cmp	r2, r3
 80159fa:	d82a      	bhi.n	8015a52 <etharp_find_entry+0x18a>
            old_pending = i;
 80159fc:	8c3b      	ldrh	r3, [r7, #32]
 80159fe:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8015a00:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015a04:	4965      	ldr	r1, [pc, #404]	; (8015b9c <etharp_find_entry+0x2d4>)
 8015a06:	4613      	mov	r3, r2
 8015a08:	005b      	lsls	r3, r3, #1
 8015a0a:	4413      	add	r3, r2
 8015a0c:	00db      	lsls	r3, r3, #3
 8015a0e:	440b      	add	r3, r1
 8015a10:	3312      	adds	r3, #18
 8015a12:	881b      	ldrh	r3, [r3, #0]
 8015a14:	837b      	strh	r3, [r7, #26]
 8015a16:	e01c      	b.n	8015a52 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8015a18:	7dfb      	ldrb	r3, [r7, #23]
 8015a1a:	2b01      	cmp	r3, #1
 8015a1c:	d919      	bls.n	8015a52 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8015a1e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015a22:	495e      	ldr	r1, [pc, #376]	; (8015b9c <etharp_find_entry+0x2d4>)
 8015a24:	4613      	mov	r3, r2
 8015a26:	005b      	lsls	r3, r3, #1
 8015a28:	4413      	add	r3, r2
 8015a2a:	00db      	lsls	r3, r3, #3
 8015a2c:	440b      	add	r3, r1
 8015a2e:	3312      	adds	r3, #18
 8015a30:	881b      	ldrh	r3, [r3, #0]
 8015a32:	8b3a      	ldrh	r2, [r7, #24]
 8015a34:	429a      	cmp	r2, r3
 8015a36:	d80c      	bhi.n	8015a52 <etharp_find_entry+0x18a>
            old_stable = i;
 8015a38:	8c3b      	ldrh	r3, [r7, #32]
 8015a3a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8015a3c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015a40:	4956      	ldr	r1, [pc, #344]	; (8015b9c <etharp_find_entry+0x2d4>)
 8015a42:	4613      	mov	r3, r2
 8015a44:	005b      	lsls	r3, r3, #1
 8015a46:	4413      	add	r3, r2
 8015a48:	00db      	lsls	r3, r3, #3
 8015a4a:	440b      	add	r3, r1
 8015a4c:	3312      	adds	r3, #18
 8015a4e:	881b      	ldrh	r3, [r3, #0]
 8015a50:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015a52:	8c3b      	ldrh	r3, [r7, #32]
 8015a54:	3301      	adds	r3, #1
 8015a56:	b29b      	uxth	r3, r3
 8015a58:	843b      	strh	r3, [r7, #32]
 8015a5a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015a5e:	2b09      	cmp	r3, #9
 8015a60:	f77f af4c 	ble.w	80158fc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8015a64:	7afb      	ldrb	r3, [r7, #11]
 8015a66:	f003 0302 	and.w	r3, r3, #2
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	d108      	bne.n	8015a80 <etharp_find_entry+0x1b8>
 8015a6e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015a72:	2b0a      	cmp	r3, #10
 8015a74:	d107      	bne.n	8015a86 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8015a76:	7afb      	ldrb	r3, [r7, #11]
 8015a78:	f003 0301 	and.w	r3, r3, #1
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	d102      	bne.n	8015a86 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8015a80:	f04f 33ff 	mov.w	r3, #4294967295
 8015a84:	e085      	b.n	8015b92 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8015a86:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015a8a:	2b09      	cmp	r3, #9
 8015a8c:	dc02      	bgt.n	8015a94 <etharp_find_entry+0x1cc>
    i = empty;
 8015a8e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015a90:	843b      	strh	r3, [r7, #32]
 8015a92:	e039      	b.n	8015b08 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8015a94:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8015a98:	2b09      	cmp	r3, #9
 8015a9a:	dc14      	bgt.n	8015ac6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8015a9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015a9e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8015aa0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015aa4:	493d      	ldr	r1, [pc, #244]	; (8015b9c <etharp_find_entry+0x2d4>)
 8015aa6:	4613      	mov	r3, r2
 8015aa8:	005b      	lsls	r3, r3, #1
 8015aaa:	4413      	add	r3, r2
 8015aac:	00db      	lsls	r3, r3, #3
 8015aae:	440b      	add	r3, r1
 8015ab0:	681b      	ldr	r3, [r3, #0]
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	d018      	beq.n	8015ae8 <etharp_find_entry+0x220>
 8015ab6:	4b3a      	ldr	r3, [pc, #232]	; (8015ba0 <etharp_find_entry+0x2d8>)
 8015ab8:	f240 126d 	movw	r2, #365	; 0x16d
 8015abc:	493b      	ldr	r1, [pc, #236]	; (8015bac <etharp_find_entry+0x2e4>)
 8015abe:	483a      	ldr	r0, [pc, #232]	; (8015ba8 <etharp_find_entry+0x2e0>)
 8015ac0:	f002 fb66 	bl	8018190 <iprintf>
 8015ac4:	e010      	b.n	8015ae8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8015ac6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8015aca:	2b09      	cmp	r3, #9
 8015acc:	dc02      	bgt.n	8015ad4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8015ace:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015ad0:	843b      	strh	r3, [r7, #32]
 8015ad2:	e009      	b.n	8015ae8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015ad4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015ad8:	2b09      	cmp	r3, #9
 8015ada:	dc02      	bgt.n	8015ae2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8015adc:	8bfb      	ldrh	r3, [r7, #30]
 8015ade:	843b      	strh	r3, [r7, #32]
 8015ae0:	e002      	b.n	8015ae8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8015ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8015ae6:	e054      	b.n	8015b92 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015ae8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015aec:	2b09      	cmp	r3, #9
 8015aee:	dd06      	ble.n	8015afe <etharp_find_entry+0x236>
 8015af0:	4b2b      	ldr	r3, [pc, #172]	; (8015ba0 <etharp_find_entry+0x2d8>)
 8015af2:	f240 127f 	movw	r2, #383	; 0x17f
 8015af6:	492e      	ldr	r1, [pc, #184]	; (8015bb0 <etharp_find_entry+0x2e8>)
 8015af8:	482b      	ldr	r0, [pc, #172]	; (8015ba8 <etharp_find_entry+0x2e0>)
 8015afa:	f002 fb49 	bl	8018190 <iprintf>
    etharp_free_entry(i);
 8015afe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015b02:	4618      	mov	r0, r3
 8015b04:	f7ff fe06 	bl	8015714 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015b08:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015b0c:	2b09      	cmp	r3, #9
 8015b0e:	dd06      	ble.n	8015b1e <etharp_find_entry+0x256>
 8015b10:	4b23      	ldr	r3, [pc, #140]	; (8015ba0 <etharp_find_entry+0x2d8>)
 8015b12:	f240 1283 	movw	r2, #387	; 0x183
 8015b16:	4926      	ldr	r1, [pc, #152]	; (8015bb0 <etharp_find_entry+0x2e8>)
 8015b18:	4823      	ldr	r0, [pc, #140]	; (8015ba8 <etharp_find_entry+0x2e0>)
 8015b1a:	f002 fb39 	bl	8018190 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8015b1e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015b22:	491e      	ldr	r1, [pc, #120]	; (8015b9c <etharp_find_entry+0x2d4>)
 8015b24:	4613      	mov	r3, r2
 8015b26:	005b      	lsls	r3, r3, #1
 8015b28:	4413      	add	r3, r2
 8015b2a:	00db      	lsls	r3, r3, #3
 8015b2c:	440b      	add	r3, r1
 8015b2e:	3314      	adds	r3, #20
 8015b30:	781b      	ldrb	r3, [r3, #0]
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	d006      	beq.n	8015b44 <etharp_find_entry+0x27c>
 8015b36:	4b1a      	ldr	r3, [pc, #104]	; (8015ba0 <etharp_find_entry+0x2d8>)
 8015b38:	f240 1285 	movw	r2, #389	; 0x185
 8015b3c:	491d      	ldr	r1, [pc, #116]	; (8015bb4 <etharp_find_entry+0x2ec>)
 8015b3e:	481a      	ldr	r0, [pc, #104]	; (8015ba8 <etharp_find_entry+0x2e0>)
 8015b40:	f002 fb26 	bl	8018190 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8015b44:	68fb      	ldr	r3, [r7, #12]
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d00b      	beq.n	8015b62 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8015b4a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015b4e:	68fb      	ldr	r3, [r7, #12]
 8015b50:	6819      	ldr	r1, [r3, #0]
 8015b52:	4812      	ldr	r0, [pc, #72]	; (8015b9c <etharp_find_entry+0x2d4>)
 8015b54:	4613      	mov	r3, r2
 8015b56:	005b      	lsls	r3, r3, #1
 8015b58:	4413      	add	r3, r2
 8015b5a:	00db      	lsls	r3, r3, #3
 8015b5c:	4403      	add	r3, r0
 8015b5e:	3304      	adds	r3, #4
 8015b60:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8015b62:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015b66:	490d      	ldr	r1, [pc, #52]	; (8015b9c <etharp_find_entry+0x2d4>)
 8015b68:	4613      	mov	r3, r2
 8015b6a:	005b      	lsls	r3, r3, #1
 8015b6c:	4413      	add	r3, r2
 8015b6e:	00db      	lsls	r3, r3, #3
 8015b70:	440b      	add	r3, r1
 8015b72:	3312      	adds	r3, #18
 8015b74:	2200      	movs	r2, #0
 8015b76:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8015b78:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015b7c:	4907      	ldr	r1, [pc, #28]	; (8015b9c <etharp_find_entry+0x2d4>)
 8015b7e:	4613      	mov	r3, r2
 8015b80:	005b      	lsls	r3, r3, #1
 8015b82:	4413      	add	r3, r2
 8015b84:	00db      	lsls	r3, r3, #3
 8015b86:	440b      	add	r3, r1
 8015b88:	3308      	adds	r3, #8
 8015b8a:	687a      	ldr	r2, [r7, #4]
 8015b8c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8015b8e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8015b92:	4618      	mov	r0, r3
 8015b94:	3728      	adds	r7, #40	; 0x28
 8015b96:	46bd      	mov	sp, r7
 8015b98:	bd80      	pop	{r7, pc}
 8015b9a:	bf00      	nop
 8015b9c:	20008ca4 	.word	0x20008ca4
 8015ba0:	0801c9a0 	.word	0x0801c9a0
 8015ba4:	0801c9d8 	.word	0x0801c9d8
 8015ba8:	0801ca18 	.word	0x0801ca18
 8015bac:	0801ca40 	.word	0x0801ca40
 8015bb0:	0801ca58 	.word	0x0801ca58
 8015bb4:	0801ca6c 	.word	0x0801ca6c

08015bb8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8015bb8:	b580      	push	{r7, lr}
 8015bba:	b088      	sub	sp, #32
 8015bbc:	af02      	add	r7, sp, #8
 8015bbe:	60f8      	str	r0, [r7, #12]
 8015bc0:	60b9      	str	r1, [r7, #8]
 8015bc2:	607a      	str	r2, [r7, #4]
 8015bc4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8015bc6:	68fb      	ldr	r3, [r7, #12]
 8015bc8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015bcc:	2b06      	cmp	r3, #6
 8015bce:	d006      	beq.n	8015bde <etharp_update_arp_entry+0x26>
 8015bd0:	4b48      	ldr	r3, [pc, #288]	; (8015cf4 <etharp_update_arp_entry+0x13c>)
 8015bd2:	f240 12a9 	movw	r2, #425	; 0x1a9
 8015bd6:	4948      	ldr	r1, [pc, #288]	; (8015cf8 <etharp_update_arp_entry+0x140>)
 8015bd8:	4848      	ldr	r0, [pc, #288]	; (8015cfc <etharp_update_arp_entry+0x144>)
 8015bda:	f002 fad9 	bl	8018190 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8015bde:	68bb      	ldr	r3, [r7, #8]
 8015be0:	2b00      	cmp	r3, #0
 8015be2:	d012      	beq.n	8015c0a <etharp_update_arp_entry+0x52>
 8015be4:	68bb      	ldr	r3, [r7, #8]
 8015be6:	681b      	ldr	r3, [r3, #0]
 8015be8:	2b00      	cmp	r3, #0
 8015bea:	d00e      	beq.n	8015c0a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015bec:	68bb      	ldr	r3, [r7, #8]
 8015bee:	681b      	ldr	r3, [r3, #0]
 8015bf0:	68f9      	ldr	r1, [r7, #12]
 8015bf2:	4618      	mov	r0, r3
 8015bf4:	f001 f91e 	bl	8016e34 <ip4_addr_isbroadcast_u32>
 8015bf8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8015bfa:	2b00      	cmp	r3, #0
 8015bfc:	d105      	bne.n	8015c0a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8015bfe:	68bb      	ldr	r3, [r7, #8]
 8015c00:	681b      	ldr	r3, [r3, #0]
 8015c02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015c06:	2be0      	cmp	r3, #224	; 0xe0
 8015c08:	d102      	bne.n	8015c10 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015c0a:	f06f 030f 	mvn.w	r3, #15
 8015c0e:	e06c      	b.n	8015cea <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8015c10:	78fb      	ldrb	r3, [r7, #3]
 8015c12:	68fa      	ldr	r2, [r7, #12]
 8015c14:	4619      	mov	r1, r3
 8015c16:	68b8      	ldr	r0, [r7, #8]
 8015c18:	f7ff fe56 	bl	80158c8 <etharp_find_entry>
 8015c1c:	4603      	mov	r3, r0
 8015c1e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8015c20:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	da02      	bge.n	8015c2e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8015c28:	8afb      	ldrh	r3, [r7, #22]
 8015c2a:	b25b      	sxtb	r3, r3
 8015c2c:	e05d      	b.n	8015cea <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8015c2e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015c32:	4933      	ldr	r1, [pc, #204]	; (8015d00 <etharp_update_arp_entry+0x148>)
 8015c34:	4613      	mov	r3, r2
 8015c36:	005b      	lsls	r3, r3, #1
 8015c38:	4413      	add	r3, r2
 8015c3a:	00db      	lsls	r3, r3, #3
 8015c3c:	440b      	add	r3, r1
 8015c3e:	3314      	adds	r3, #20
 8015c40:	2202      	movs	r2, #2
 8015c42:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8015c44:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015c48:	492d      	ldr	r1, [pc, #180]	; (8015d00 <etharp_update_arp_entry+0x148>)
 8015c4a:	4613      	mov	r3, r2
 8015c4c:	005b      	lsls	r3, r3, #1
 8015c4e:	4413      	add	r3, r2
 8015c50:	00db      	lsls	r3, r3, #3
 8015c52:	440b      	add	r3, r1
 8015c54:	3308      	adds	r3, #8
 8015c56:	68fa      	ldr	r2, [r7, #12]
 8015c58:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8015c5a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015c5e:	4613      	mov	r3, r2
 8015c60:	005b      	lsls	r3, r3, #1
 8015c62:	4413      	add	r3, r2
 8015c64:	00db      	lsls	r3, r3, #3
 8015c66:	3308      	adds	r3, #8
 8015c68:	4a25      	ldr	r2, [pc, #148]	; (8015d00 <etharp_update_arp_entry+0x148>)
 8015c6a:	4413      	add	r3, r2
 8015c6c:	3304      	adds	r3, #4
 8015c6e:	2206      	movs	r2, #6
 8015c70:	6879      	ldr	r1, [r7, #4]
 8015c72:	4618      	mov	r0, r3
 8015c74:	f002 fa5f 	bl	8018136 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8015c78:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015c7c:	4920      	ldr	r1, [pc, #128]	; (8015d00 <etharp_update_arp_entry+0x148>)
 8015c7e:	4613      	mov	r3, r2
 8015c80:	005b      	lsls	r3, r3, #1
 8015c82:	4413      	add	r3, r2
 8015c84:	00db      	lsls	r3, r3, #3
 8015c86:	440b      	add	r3, r1
 8015c88:	3312      	adds	r3, #18
 8015c8a:	2200      	movs	r2, #0
 8015c8c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8015c8e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015c92:	491b      	ldr	r1, [pc, #108]	; (8015d00 <etharp_update_arp_entry+0x148>)
 8015c94:	4613      	mov	r3, r2
 8015c96:	005b      	lsls	r3, r3, #1
 8015c98:	4413      	add	r3, r2
 8015c9a:	00db      	lsls	r3, r3, #3
 8015c9c:	440b      	add	r3, r1
 8015c9e:	681b      	ldr	r3, [r3, #0]
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d021      	beq.n	8015ce8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8015ca4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015ca8:	4915      	ldr	r1, [pc, #84]	; (8015d00 <etharp_update_arp_entry+0x148>)
 8015caa:	4613      	mov	r3, r2
 8015cac:	005b      	lsls	r3, r3, #1
 8015cae:	4413      	add	r3, r2
 8015cb0:	00db      	lsls	r3, r3, #3
 8015cb2:	440b      	add	r3, r1
 8015cb4:	681b      	ldr	r3, [r3, #0]
 8015cb6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8015cb8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015cbc:	4910      	ldr	r1, [pc, #64]	; (8015d00 <etharp_update_arp_entry+0x148>)
 8015cbe:	4613      	mov	r3, r2
 8015cc0:	005b      	lsls	r3, r3, #1
 8015cc2:	4413      	add	r3, r2
 8015cc4:	00db      	lsls	r3, r3, #3
 8015cc6:	440b      	add	r3, r1
 8015cc8:	2200      	movs	r2, #0
 8015cca:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8015ccc:	68fb      	ldr	r3, [r7, #12]
 8015cce:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8015cd2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015cd6:	9300      	str	r3, [sp, #0]
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	6939      	ldr	r1, [r7, #16]
 8015cdc:	68f8      	ldr	r0, [r7, #12]
 8015cde:	f001 ffad 	bl	8017c3c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8015ce2:	6938      	ldr	r0, [r7, #16]
 8015ce4:	f7f6 fd24 	bl	800c730 <pbuf_free>
  }
  return ERR_OK;
 8015ce8:	2300      	movs	r3, #0
}
 8015cea:	4618      	mov	r0, r3
 8015cec:	3718      	adds	r7, #24
 8015cee:	46bd      	mov	sp, r7
 8015cf0:	bd80      	pop	{r7, pc}
 8015cf2:	bf00      	nop
 8015cf4:	0801c9a0 	.word	0x0801c9a0
 8015cf8:	0801ca98 	.word	0x0801ca98
 8015cfc:	0801ca18 	.word	0x0801ca18
 8015d00:	20008ca4 	.word	0x20008ca4

08015d04 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8015d04:	b580      	push	{r7, lr}
 8015d06:	b084      	sub	sp, #16
 8015d08:	af00      	add	r7, sp, #0
 8015d0a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015d0c:	2300      	movs	r3, #0
 8015d0e:	60fb      	str	r3, [r7, #12]
 8015d10:	e01e      	b.n	8015d50 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8015d12:	4913      	ldr	r1, [pc, #76]	; (8015d60 <etharp_cleanup_netif+0x5c>)
 8015d14:	68fa      	ldr	r2, [r7, #12]
 8015d16:	4613      	mov	r3, r2
 8015d18:	005b      	lsls	r3, r3, #1
 8015d1a:	4413      	add	r3, r2
 8015d1c:	00db      	lsls	r3, r3, #3
 8015d1e:	440b      	add	r3, r1
 8015d20:	3314      	adds	r3, #20
 8015d22:	781b      	ldrb	r3, [r3, #0]
 8015d24:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8015d26:	7afb      	ldrb	r3, [r7, #11]
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d00e      	beq.n	8015d4a <etharp_cleanup_netif+0x46>
 8015d2c:	490c      	ldr	r1, [pc, #48]	; (8015d60 <etharp_cleanup_netif+0x5c>)
 8015d2e:	68fa      	ldr	r2, [r7, #12]
 8015d30:	4613      	mov	r3, r2
 8015d32:	005b      	lsls	r3, r3, #1
 8015d34:	4413      	add	r3, r2
 8015d36:	00db      	lsls	r3, r3, #3
 8015d38:	440b      	add	r3, r1
 8015d3a:	3308      	adds	r3, #8
 8015d3c:	681b      	ldr	r3, [r3, #0]
 8015d3e:	687a      	ldr	r2, [r7, #4]
 8015d40:	429a      	cmp	r2, r3
 8015d42:	d102      	bne.n	8015d4a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8015d44:	68f8      	ldr	r0, [r7, #12]
 8015d46:	f7ff fce5 	bl	8015714 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015d4a:	68fb      	ldr	r3, [r7, #12]
 8015d4c:	3301      	adds	r3, #1
 8015d4e:	60fb      	str	r3, [r7, #12]
 8015d50:	68fb      	ldr	r3, [r7, #12]
 8015d52:	2b09      	cmp	r3, #9
 8015d54:	dddd      	ble.n	8015d12 <etharp_cleanup_netif+0xe>
    }
  }
}
 8015d56:	bf00      	nop
 8015d58:	3710      	adds	r7, #16
 8015d5a:	46bd      	mov	sp, r7
 8015d5c:	bd80      	pop	{r7, pc}
 8015d5e:	bf00      	nop
 8015d60:	20008ca4 	.word	0x20008ca4

08015d64 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8015d64:	b5b0      	push	{r4, r5, r7, lr}
 8015d66:	b08a      	sub	sp, #40	; 0x28
 8015d68:	af04      	add	r7, sp, #16
 8015d6a:	6078      	str	r0, [r7, #4]
 8015d6c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8015d6e:	683b      	ldr	r3, [r7, #0]
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	d107      	bne.n	8015d84 <etharp_input+0x20>
 8015d74:	4b3f      	ldr	r3, [pc, #252]	; (8015e74 <etharp_input+0x110>)
 8015d76:	f240 228a 	movw	r2, #650	; 0x28a
 8015d7a:	493f      	ldr	r1, [pc, #252]	; (8015e78 <etharp_input+0x114>)
 8015d7c:	483f      	ldr	r0, [pc, #252]	; (8015e7c <etharp_input+0x118>)
 8015d7e:	f002 fa07 	bl	8018190 <iprintf>
 8015d82:	e074      	b.n	8015e6e <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	685b      	ldr	r3, [r3, #4]
 8015d88:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015d8a:	693b      	ldr	r3, [r7, #16]
 8015d8c:	881b      	ldrh	r3, [r3, #0]
 8015d8e:	b29b      	uxth	r3, r3
 8015d90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015d94:	d10c      	bne.n	8015db0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015d96:	693b      	ldr	r3, [r7, #16]
 8015d98:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015d9a:	2b06      	cmp	r3, #6
 8015d9c:	d108      	bne.n	8015db0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015d9e:	693b      	ldr	r3, [r7, #16]
 8015da0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015da2:	2b04      	cmp	r3, #4
 8015da4:	d104      	bne.n	8015db0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8015da6:	693b      	ldr	r3, [r7, #16]
 8015da8:	885b      	ldrh	r3, [r3, #2]
 8015daa:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015dac:	2b08      	cmp	r3, #8
 8015dae:	d003      	beq.n	8015db8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8015db0:	6878      	ldr	r0, [r7, #4]
 8015db2:	f7f6 fcbd 	bl	800c730 <pbuf_free>
    return;
 8015db6:	e05a      	b.n	8015e6e <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8015db8:	693b      	ldr	r3, [r7, #16]
 8015dba:	330e      	adds	r3, #14
 8015dbc:	681b      	ldr	r3, [r3, #0]
 8015dbe:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8015dc0:	693b      	ldr	r3, [r7, #16]
 8015dc2:	3318      	adds	r3, #24
 8015dc4:	681b      	ldr	r3, [r3, #0]
 8015dc6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015dc8:	683b      	ldr	r3, [r7, #0]
 8015dca:	3304      	adds	r3, #4
 8015dcc:	681b      	ldr	r3, [r3, #0]
 8015dce:	2b00      	cmp	r3, #0
 8015dd0:	d102      	bne.n	8015dd8 <etharp_input+0x74>
    for_us = 0;
 8015dd2:	2300      	movs	r3, #0
 8015dd4:	75fb      	strb	r3, [r7, #23]
 8015dd6:	e009      	b.n	8015dec <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8015dd8:	68ba      	ldr	r2, [r7, #8]
 8015dda:	683b      	ldr	r3, [r7, #0]
 8015ddc:	3304      	adds	r3, #4
 8015dde:	681b      	ldr	r3, [r3, #0]
 8015de0:	429a      	cmp	r2, r3
 8015de2:	bf0c      	ite	eq
 8015de4:	2301      	moveq	r3, #1
 8015de6:	2300      	movne	r3, #0
 8015de8:	b2db      	uxtb	r3, r3
 8015dea:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8015dec:	693b      	ldr	r3, [r7, #16]
 8015dee:	f103 0208 	add.w	r2, r3, #8
 8015df2:	7dfb      	ldrb	r3, [r7, #23]
 8015df4:	2b00      	cmp	r3, #0
 8015df6:	d001      	beq.n	8015dfc <etharp_input+0x98>
 8015df8:	2301      	movs	r3, #1
 8015dfa:	e000      	b.n	8015dfe <etharp_input+0x9a>
 8015dfc:	2302      	movs	r3, #2
 8015dfe:	f107 010c 	add.w	r1, r7, #12
 8015e02:	6838      	ldr	r0, [r7, #0]
 8015e04:	f7ff fed8 	bl	8015bb8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8015e08:	693b      	ldr	r3, [r7, #16]
 8015e0a:	88db      	ldrh	r3, [r3, #6]
 8015e0c:	b29b      	uxth	r3, r3
 8015e0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015e12:	d003      	beq.n	8015e1c <etharp_input+0xb8>
 8015e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015e18:	d01e      	beq.n	8015e58 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8015e1a:	e025      	b.n	8015e68 <etharp_input+0x104>
      if (for_us) {
 8015e1c:	7dfb      	ldrb	r3, [r7, #23]
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	d021      	beq.n	8015e66 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8015e22:	683b      	ldr	r3, [r7, #0]
 8015e24:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8015e28:	693b      	ldr	r3, [r7, #16]
 8015e2a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8015e2e:	683b      	ldr	r3, [r7, #0]
 8015e30:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8015e34:	683b      	ldr	r3, [r7, #0]
 8015e36:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8015e38:	693a      	ldr	r2, [r7, #16]
 8015e3a:	3208      	adds	r2, #8
        etharp_raw(netif,
 8015e3c:	2102      	movs	r1, #2
 8015e3e:	9103      	str	r1, [sp, #12]
 8015e40:	f107 010c 	add.w	r1, r7, #12
 8015e44:	9102      	str	r1, [sp, #8]
 8015e46:	9201      	str	r2, [sp, #4]
 8015e48:	9300      	str	r3, [sp, #0]
 8015e4a:	462b      	mov	r3, r5
 8015e4c:	4622      	mov	r2, r4
 8015e4e:	4601      	mov	r1, r0
 8015e50:	6838      	ldr	r0, [r7, #0]
 8015e52:	f000 faef 	bl	8016434 <etharp_raw>
      break;
 8015e56:	e006      	b.n	8015e66 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8015e58:	f107 030c 	add.w	r3, r7, #12
 8015e5c:	4619      	mov	r1, r3
 8015e5e:	6838      	ldr	r0, [r7, #0]
 8015e60:	f7fe f9fe 	bl	8014260 <dhcp_arp_reply>
      break;
 8015e64:	e000      	b.n	8015e68 <etharp_input+0x104>
      break;
 8015e66:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8015e68:	6878      	ldr	r0, [r7, #4]
 8015e6a:	f7f6 fc61 	bl	800c730 <pbuf_free>
}
 8015e6e:	3718      	adds	r7, #24
 8015e70:	46bd      	mov	sp, r7
 8015e72:	bdb0      	pop	{r4, r5, r7, pc}
 8015e74:	0801c9a0 	.word	0x0801c9a0
 8015e78:	0801caf0 	.word	0x0801caf0
 8015e7c:	0801ca18 	.word	0x0801ca18

08015e80 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8015e80:	b580      	push	{r7, lr}
 8015e82:	b086      	sub	sp, #24
 8015e84:	af02      	add	r7, sp, #8
 8015e86:	60f8      	str	r0, [r7, #12]
 8015e88:	60b9      	str	r1, [r7, #8]
 8015e8a:	4613      	mov	r3, r2
 8015e8c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8015e8e:	79fa      	ldrb	r2, [r7, #7]
 8015e90:	4944      	ldr	r1, [pc, #272]	; (8015fa4 <etharp_output_to_arp_index+0x124>)
 8015e92:	4613      	mov	r3, r2
 8015e94:	005b      	lsls	r3, r3, #1
 8015e96:	4413      	add	r3, r2
 8015e98:	00db      	lsls	r3, r3, #3
 8015e9a:	440b      	add	r3, r1
 8015e9c:	3314      	adds	r3, #20
 8015e9e:	781b      	ldrb	r3, [r3, #0]
 8015ea0:	2b01      	cmp	r3, #1
 8015ea2:	d806      	bhi.n	8015eb2 <etharp_output_to_arp_index+0x32>
 8015ea4:	4b40      	ldr	r3, [pc, #256]	; (8015fa8 <etharp_output_to_arp_index+0x128>)
 8015ea6:	f240 22ef 	movw	r2, #751	; 0x2ef
 8015eaa:	4940      	ldr	r1, [pc, #256]	; (8015fac <etharp_output_to_arp_index+0x12c>)
 8015eac:	4840      	ldr	r0, [pc, #256]	; (8015fb0 <etharp_output_to_arp_index+0x130>)
 8015eae:	f002 f96f 	bl	8018190 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8015eb2:	79fa      	ldrb	r2, [r7, #7]
 8015eb4:	493b      	ldr	r1, [pc, #236]	; (8015fa4 <etharp_output_to_arp_index+0x124>)
 8015eb6:	4613      	mov	r3, r2
 8015eb8:	005b      	lsls	r3, r3, #1
 8015eba:	4413      	add	r3, r2
 8015ebc:	00db      	lsls	r3, r3, #3
 8015ebe:	440b      	add	r3, r1
 8015ec0:	3314      	adds	r3, #20
 8015ec2:	781b      	ldrb	r3, [r3, #0]
 8015ec4:	2b02      	cmp	r3, #2
 8015ec6:	d153      	bne.n	8015f70 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8015ec8:	79fa      	ldrb	r2, [r7, #7]
 8015eca:	4936      	ldr	r1, [pc, #216]	; (8015fa4 <etharp_output_to_arp_index+0x124>)
 8015ecc:	4613      	mov	r3, r2
 8015ece:	005b      	lsls	r3, r3, #1
 8015ed0:	4413      	add	r3, r2
 8015ed2:	00db      	lsls	r3, r3, #3
 8015ed4:	440b      	add	r3, r1
 8015ed6:	3312      	adds	r3, #18
 8015ed8:	881b      	ldrh	r3, [r3, #0]
 8015eda:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8015ede:	d919      	bls.n	8015f14 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8015ee0:	79fa      	ldrb	r2, [r7, #7]
 8015ee2:	4613      	mov	r3, r2
 8015ee4:	005b      	lsls	r3, r3, #1
 8015ee6:	4413      	add	r3, r2
 8015ee8:	00db      	lsls	r3, r3, #3
 8015eea:	4a2e      	ldr	r2, [pc, #184]	; (8015fa4 <etharp_output_to_arp_index+0x124>)
 8015eec:	4413      	add	r3, r2
 8015eee:	3304      	adds	r3, #4
 8015ef0:	4619      	mov	r1, r3
 8015ef2:	68f8      	ldr	r0, [r7, #12]
 8015ef4:	f000 fb4c 	bl	8016590 <etharp_request>
 8015ef8:	4603      	mov	r3, r0
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	d138      	bne.n	8015f70 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015efe:	79fa      	ldrb	r2, [r7, #7]
 8015f00:	4928      	ldr	r1, [pc, #160]	; (8015fa4 <etharp_output_to_arp_index+0x124>)
 8015f02:	4613      	mov	r3, r2
 8015f04:	005b      	lsls	r3, r3, #1
 8015f06:	4413      	add	r3, r2
 8015f08:	00db      	lsls	r3, r3, #3
 8015f0a:	440b      	add	r3, r1
 8015f0c:	3314      	adds	r3, #20
 8015f0e:	2203      	movs	r2, #3
 8015f10:	701a      	strb	r2, [r3, #0]
 8015f12:	e02d      	b.n	8015f70 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8015f14:	79fa      	ldrb	r2, [r7, #7]
 8015f16:	4923      	ldr	r1, [pc, #140]	; (8015fa4 <etharp_output_to_arp_index+0x124>)
 8015f18:	4613      	mov	r3, r2
 8015f1a:	005b      	lsls	r3, r3, #1
 8015f1c:	4413      	add	r3, r2
 8015f1e:	00db      	lsls	r3, r3, #3
 8015f20:	440b      	add	r3, r1
 8015f22:	3312      	adds	r3, #18
 8015f24:	881b      	ldrh	r3, [r3, #0]
 8015f26:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8015f2a:	d321      	bcc.n	8015f70 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8015f2c:	79fa      	ldrb	r2, [r7, #7]
 8015f2e:	4613      	mov	r3, r2
 8015f30:	005b      	lsls	r3, r3, #1
 8015f32:	4413      	add	r3, r2
 8015f34:	00db      	lsls	r3, r3, #3
 8015f36:	4a1b      	ldr	r2, [pc, #108]	; (8015fa4 <etharp_output_to_arp_index+0x124>)
 8015f38:	4413      	add	r3, r2
 8015f3a:	1d19      	adds	r1, r3, #4
 8015f3c:	79fa      	ldrb	r2, [r7, #7]
 8015f3e:	4613      	mov	r3, r2
 8015f40:	005b      	lsls	r3, r3, #1
 8015f42:	4413      	add	r3, r2
 8015f44:	00db      	lsls	r3, r3, #3
 8015f46:	3308      	adds	r3, #8
 8015f48:	4a16      	ldr	r2, [pc, #88]	; (8015fa4 <etharp_output_to_arp_index+0x124>)
 8015f4a:	4413      	add	r3, r2
 8015f4c:	3304      	adds	r3, #4
 8015f4e:	461a      	mov	r2, r3
 8015f50:	68f8      	ldr	r0, [r7, #12]
 8015f52:	f000 fafb 	bl	801654c <etharp_request_dst>
 8015f56:	4603      	mov	r3, r0
 8015f58:	2b00      	cmp	r3, #0
 8015f5a:	d109      	bne.n	8015f70 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015f5c:	79fa      	ldrb	r2, [r7, #7]
 8015f5e:	4911      	ldr	r1, [pc, #68]	; (8015fa4 <etharp_output_to_arp_index+0x124>)
 8015f60:	4613      	mov	r3, r2
 8015f62:	005b      	lsls	r3, r3, #1
 8015f64:	4413      	add	r3, r2
 8015f66:	00db      	lsls	r3, r3, #3
 8015f68:	440b      	add	r3, r1
 8015f6a:	3314      	adds	r3, #20
 8015f6c:	2203      	movs	r2, #3
 8015f6e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8015f70:	68fb      	ldr	r3, [r7, #12]
 8015f72:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8015f76:	79fa      	ldrb	r2, [r7, #7]
 8015f78:	4613      	mov	r3, r2
 8015f7a:	005b      	lsls	r3, r3, #1
 8015f7c:	4413      	add	r3, r2
 8015f7e:	00db      	lsls	r3, r3, #3
 8015f80:	3308      	adds	r3, #8
 8015f82:	4a08      	ldr	r2, [pc, #32]	; (8015fa4 <etharp_output_to_arp_index+0x124>)
 8015f84:	4413      	add	r3, r2
 8015f86:	1d1a      	adds	r2, r3, #4
 8015f88:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015f8c:	9300      	str	r3, [sp, #0]
 8015f8e:	4613      	mov	r3, r2
 8015f90:	460a      	mov	r2, r1
 8015f92:	68b9      	ldr	r1, [r7, #8]
 8015f94:	68f8      	ldr	r0, [r7, #12]
 8015f96:	f001 fe51 	bl	8017c3c <ethernet_output>
 8015f9a:	4603      	mov	r3, r0
}
 8015f9c:	4618      	mov	r0, r3
 8015f9e:	3710      	adds	r7, #16
 8015fa0:	46bd      	mov	sp, r7
 8015fa2:	bd80      	pop	{r7, pc}
 8015fa4:	20008ca4 	.word	0x20008ca4
 8015fa8:	0801c9a0 	.word	0x0801c9a0
 8015fac:	0801cb10 	.word	0x0801cb10
 8015fb0:	0801ca18 	.word	0x0801ca18

08015fb4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8015fb4:	b580      	push	{r7, lr}
 8015fb6:	b08a      	sub	sp, #40	; 0x28
 8015fb8:	af02      	add	r7, sp, #8
 8015fba:	60f8      	str	r0, [r7, #12]
 8015fbc:	60b9      	str	r1, [r7, #8]
 8015fbe:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015fc4:	68fb      	ldr	r3, [r7, #12]
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	d106      	bne.n	8015fd8 <etharp_output+0x24>
 8015fca:	4b73      	ldr	r3, [pc, #460]	; (8016198 <etharp_output+0x1e4>)
 8015fcc:	f240 321e 	movw	r2, #798	; 0x31e
 8015fd0:	4972      	ldr	r1, [pc, #456]	; (801619c <etharp_output+0x1e8>)
 8015fd2:	4873      	ldr	r0, [pc, #460]	; (80161a0 <etharp_output+0x1ec>)
 8015fd4:	f002 f8dc 	bl	8018190 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8015fd8:	68bb      	ldr	r3, [r7, #8]
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	d106      	bne.n	8015fec <etharp_output+0x38>
 8015fde:	4b6e      	ldr	r3, [pc, #440]	; (8016198 <etharp_output+0x1e4>)
 8015fe0:	f240 321f 	movw	r2, #799	; 0x31f
 8015fe4:	496f      	ldr	r1, [pc, #444]	; (80161a4 <etharp_output+0x1f0>)
 8015fe6:	486e      	ldr	r0, [pc, #440]	; (80161a0 <etharp_output+0x1ec>)
 8015fe8:	f002 f8d2 	bl	8018190 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	d106      	bne.n	8016000 <etharp_output+0x4c>
 8015ff2:	4b69      	ldr	r3, [pc, #420]	; (8016198 <etharp_output+0x1e4>)
 8015ff4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8015ff8:	496b      	ldr	r1, [pc, #428]	; (80161a8 <etharp_output+0x1f4>)
 8015ffa:	4869      	ldr	r0, [pc, #420]	; (80161a0 <etharp_output+0x1ec>)
 8015ffc:	f002 f8c8 	bl	8018190 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	681b      	ldr	r3, [r3, #0]
 8016004:	68f9      	ldr	r1, [r7, #12]
 8016006:	4618      	mov	r0, r3
 8016008:	f000 ff14 	bl	8016e34 <ip4_addr_isbroadcast_u32>
 801600c:	4603      	mov	r3, r0
 801600e:	2b00      	cmp	r3, #0
 8016010:	d002      	beq.n	8016018 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8016012:	4b66      	ldr	r3, [pc, #408]	; (80161ac <etharp_output+0x1f8>)
 8016014:	61fb      	str	r3, [r7, #28]
 8016016:	e0af      	b.n	8016178 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	681b      	ldr	r3, [r3, #0]
 801601c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016020:	2be0      	cmp	r3, #224	; 0xe0
 8016022:	d118      	bne.n	8016056 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8016024:	2301      	movs	r3, #1
 8016026:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8016028:	2300      	movs	r3, #0
 801602a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801602c:	235e      	movs	r3, #94	; 0x5e
 801602e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	3301      	adds	r3, #1
 8016034:	781b      	ldrb	r3, [r3, #0]
 8016036:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801603a:	b2db      	uxtb	r3, r3
 801603c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	3302      	adds	r3, #2
 8016042:	781b      	ldrb	r3, [r3, #0]
 8016044:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	3303      	adds	r3, #3
 801604a:	781b      	ldrb	r3, [r3, #0]
 801604c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801604e:	f107 0310 	add.w	r3, r7, #16
 8016052:	61fb      	str	r3, [r7, #28]
 8016054:	e090      	b.n	8016178 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	681a      	ldr	r2, [r3, #0]
 801605a:	68fb      	ldr	r3, [r7, #12]
 801605c:	3304      	adds	r3, #4
 801605e:	681b      	ldr	r3, [r3, #0]
 8016060:	405a      	eors	r2, r3
 8016062:	68fb      	ldr	r3, [r7, #12]
 8016064:	3308      	adds	r3, #8
 8016066:	681b      	ldr	r3, [r3, #0]
 8016068:	4013      	ands	r3, r2
 801606a:	2b00      	cmp	r3, #0
 801606c:	d012      	beq.n	8016094 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	681b      	ldr	r3, [r3, #0]
 8016072:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016074:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8016078:	4293      	cmp	r3, r2
 801607a:	d00b      	beq.n	8016094 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801607c:	68fb      	ldr	r3, [r7, #12]
 801607e:	330c      	adds	r3, #12
 8016080:	681b      	ldr	r3, [r3, #0]
 8016082:	2b00      	cmp	r3, #0
 8016084:	d003      	beq.n	801608e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8016086:	68fb      	ldr	r3, [r7, #12]
 8016088:	330c      	adds	r3, #12
 801608a:	61bb      	str	r3, [r7, #24]
 801608c:	e002      	b.n	8016094 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801608e:	f06f 0303 	mvn.w	r3, #3
 8016092:	e07d      	b.n	8016190 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016094:	4b46      	ldr	r3, [pc, #280]	; (80161b0 <etharp_output+0x1fc>)
 8016096:	781b      	ldrb	r3, [r3, #0]
 8016098:	4619      	mov	r1, r3
 801609a:	4a46      	ldr	r2, [pc, #280]	; (80161b4 <etharp_output+0x200>)
 801609c:	460b      	mov	r3, r1
 801609e:	005b      	lsls	r3, r3, #1
 80160a0:	440b      	add	r3, r1
 80160a2:	00db      	lsls	r3, r3, #3
 80160a4:	4413      	add	r3, r2
 80160a6:	3314      	adds	r3, #20
 80160a8:	781b      	ldrb	r3, [r3, #0]
 80160aa:	2b01      	cmp	r3, #1
 80160ac:	d925      	bls.n	80160fa <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80160ae:	4b40      	ldr	r3, [pc, #256]	; (80161b0 <etharp_output+0x1fc>)
 80160b0:	781b      	ldrb	r3, [r3, #0]
 80160b2:	4619      	mov	r1, r3
 80160b4:	4a3f      	ldr	r2, [pc, #252]	; (80161b4 <etharp_output+0x200>)
 80160b6:	460b      	mov	r3, r1
 80160b8:	005b      	lsls	r3, r3, #1
 80160ba:	440b      	add	r3, r1
 80160bc:	00db      	lsls	r3, r3, #3
 80160be:	4413      	add	r3, r2
 80160c0:	3308      	adds	r3, #8
 80160c2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80160c4:	68fa      	ldr	r2, [r7, #12]
 80160c6:	429a      	cmp	r2, r3
 80160c8:	d117      	bne.n	80160fa <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80160ca:	69bb      	ldr	r3, [r7, #24]
 80160cc:	681a      	ldr	r2, [r3, #0]
 80160ce:	4b38      	ldr	r3, [pc, #224]	; (80161b0 <etharp_output+0x1fc>)
 80160d0:	781b      	ldrb	r3, [r3, #0]
 80160d2:	4618      	mov	r0, r3
 80160d4:	4937      	ldr	r1, [pc, #220]	; (80161b4 <etharp_output+0x200>)
 80160d6:	4603      	mov	r3, r0
 80160d8:	005b      	lsls	r3, r3, #1
 80160da:	4403      	add	r3, r0
 80160dc:	00db      	lsls	r3, r3, #3
 80160de:	440b      	add	r3, r1
 80160e0:	3304      	adds	r3, #4
 80160e2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80160e4:	429a      	cmp	r2, r3
 80160e6:	d108      	bne.n	80160fa <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80160e8:	4b31      	ldr	r3, [pc, #196]	; (80161b0 <etharp_output+0x1fc>)
 80160ea:	781b      	ldrb	r3, [r3, #0]
 80160ec:	461a      	mov	r2, r3
 80160ee:	68b9      	ldr	r1, [r7, #8]
 80160f0:	68f8      	ldr	r0, [r7, #12]
 80160f2:	f7ff fec5 	bl	8015e80 <etharp_output_to_arp_index>
 80160f6:	4603      	mov	r3, r0
 80160f8:	e04a      	b.n	8016190 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80160fa:	2300      	movs	r3, #0
 80160fc:	75fb      	strb	r3, [r7, #23]
 80160fe:	e031      	b.n	8016164 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016100:	7dfa      	ldrb	r2, [r7, #23]
 8016102:	492c      	ldr	r1, [pc, #176]	; (80161b4 <etharp_output+0x200>)
 8016104:	4613      	mov	r3, r2
 8016106:	005b      	lsls	r3, r3, #1
 8016108:	4413      	add	r3, r2
 801610a:	00db      	lsls	r3, r3, #3
 801610c:	440b      	add	r3, r1
 801610e:	3314      	adds	r3, #20
 8016110:	781b      	ldrb	r3, [r3, #0]
 8016112:	2b01      	cmp	r3, #1
 8016114:	d923      	bls.n	801615e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8016116:	7dfa      	ldrb	r2, [r7, #23]
 8016118:	4926      	ldr	r1, [pc, #152]	; (80161b4 <etharp_output+0x200>)
 801611a:	4613      	mov	r3, r2
 801611c:	005b      	lsls	r3, r3, #1
 801611e:	4413      	add	r3, r2
 8016120:	00db      	lsls	r3, r3, #3
 8016122:	440b      	add	r3, r1
 8016124:	3308      	adds	r3, #8
 8016126:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016128:	68fa      	ldr	r2, [r7, #12]
 801612a:	429a      	cmp	r2, r3
 801612c:	d117      	bne.n	801615e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801612e:	69bb      	ldr	r3, [r7, #24]
 8016130:	6819      	ldr	r1, [r3, #0]
 8016132:	7dfa      	ldrb	r2, [r7, #23]
 8016134:	481f      	ldr	r0, [pc, #124]	; (80161b4 <etharp_output+0x200>)
 8016136:	4613      	mov	r3, r2
 8016138:	005b      	lsls	r3, r3, #1
 801613a:	4413      	add	r3, r2
 801613c:	00db      	lsls	r3, r3, #3
 801613e:	4403      	add	r3, r0
 8016140:	3304      	adds	r3, #4
 8016142:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8016144:	4299      	cmp	r1, r3
 8016146:	d10a      	bne.n	801615e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8016148:	4a19      	ldr	r2, [pc, #100]	; (80161b0 <etharp_output+0x1fc>)
 801614a:	7dfb      	ldrb	r3, [r7, #23]
 801614c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801614e:	7dfb      	ldrb	r3, [r7, #23]
 8016150:	461a      	mov	r2, r3
 8016152:	68b9      	ldr	r1, [r7, #8]
 8016154:	68f8      	ldr	r0, [r7, #12]
 8016156:	f7ff fe93 	bl	8015e80 <etharp_output_to_arp_index>
 801615a:	4603      	mov	r3, r0
 801615c:	e018      	b.n	8016190 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801615e:	7dfb      	ldrb	r3, [r7, #23]
 8016160:	3301      	adds	r3, #1
 8016162:	75fb      	strb	r3, [r7, #23]
 8016164:	7dfb      	ldrb	r3, [r7, #23]
 8016166:	2b09      	cmp	r3, #9
 8016168:	d9ca      	bls.n	8016100 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801616a:	68ba      	ldr	r2, [r7, #8]
 801616c:	69b9      	ldr	r1, [r7, #24]
 801616e:	68f8      	ldr	r0, [r7, #12]
 8016170:	f000 f822 	bl	80161b8 <etharp_query>
 8016174:	4603      	mov	r3, r0
 8016176:	e00b      	b.n	8016190 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8016178:	68fb      	ldr	r3, [r7, #12]
 801617a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801617e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016182:	9300      	str	r3, [sp, #0]
 8016184:	69fb      	ldr	r3, [r7, #28]
 8016186:	68b9      	ldr	r1, [r7, #8]
 8016188:	68f8      	ldr	r0, [r7, #12]
 801618a:	f001 fd57 	bl	8017c3c <ethernet_output>
 801618e:	4603      	mov	r3, r0
}
 8016190:	4618      	mov	r0, r3
 8016192:	3720      	adds	r7, #32
 8016194:	46bd      	mov	sp, r7
 8016196:	bd80      	pop	{r7, pc}
 8016198:	0801c9a0 	.word	0x0801c9a0
 801619c:	0801caf0 	.word	0x0801caf0
 80161a0:	0801ca18 	.word	0x0801ca18
 80161a4:	0801cb40 	.word	0x0801cb40
 80161a8:	0801cae0 	.word	0x0801cae0
 80161ac:	0802857c 	.word	0x0802857c
 80161b0:	20008d94 	.word	0x20008d94
 80161b4:	20008ca4 	.word	0x20008ca4

080161b8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80161b8:	b580      	push	{r7, lr}
 80161ba:	b08c      	sub	sp, #48	; 0x30
 80161bc:	af02      	add	r7, sp, #8
 80161be:	60f8      	str	r0, [r7, #12]
 80161c0:	60b9      	str	r1, [r7, #8]
 80161c2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80161c4:	68fb      	ldr	r3, [r7, #12]
 80161c6:	3326      	adds	r3, #38	; 0x26
 80161c8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80161ca:	23ff      	movs	r3, #255	; 0xff
 80161cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80161d0:	2300      	movs	r3, #0
 80161d2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80161d4:	68bb      	ldr	r3, [r7, #8]
 80161d6:	681b      	ldr	r3, [r3, #0]
 80161d8:	68f9      	ldr	r1, [r7, #12]
 80161da:	4618      	mov	r0, r3
 80161dc:	f000 fe2a 	bl	8016e34 <ip4_addr_isbroadcast_u32>
 80161e0:	4603      	mov	r3, r0
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	d10c      	bne.n	8016200 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80161e6:	68bb      	ldr	r3, [r7, #8]
 80161e8:	681b      	ldr	r3, [r3, #0]
 80161ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80161ee:	2be0      	cmp	r3, #224	; 0xe0
 80161f0:	d006      	beq.n	8016200 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80161f2:	68bb      	ldr	r3, [r7, #8]
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d003      	beq.n	8016200 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80161f8:	68bb      	ldr	r3, [r7, #8]
 80161fa:	681b      	ldr	r3, [r3, #0]
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d102      	bne.n	8016206 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016200:	f06f 030f 	mvn.w	r3, #15
 8016204:	e102      	b.n	801640c <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8016206:	68fa      	ldr	r2, [r7, #12]
 8016208:	2101      	movs	r1, #1
 801620a:	68b8      	ldr	r0, [r7, #8]
 801620c:	f7ff fb5c 	bl	80158c8 <etharp_find_entry>
 8016210:	4603      	mov	r3, r0
 8016212:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8016214:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016218:	2b00      	cmp	r3, #0
 801621a:	da02      	bge.n	8016222 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801621c:	8a7b      	ldrh	r3, [r7, #18]
 801621e:	b25b      	sxtb	r3, r3
 8016220:	e0f4      	b.n	801640c <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8016222:	8a7b      	ldrh	r3, [r7, #18]
 8016224:	2b7e      	cmp	r3, #126	; 0x7e
 8016226:	d906      	bls.n	8016236 <etharp_query+0x7e>
 8016228:	4b7a      	ldr	r3, [pc, #488]	; (8016414 <etharp_query+0x25c>)
 801622a:	f240 32c1 	movw	r2, #961	; 0x3c1
 801622e:	497a      	ldr	r1, [pc, #488]	; (8016418 <etharp_query+0x260>)
 8016230:	487a      	ldr	r0, [pc, #488]	; (801641c <etharp_query+0x264>)
 8016232:	f001 ffad 	bl	8018190 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8016236:	8a7b      	ldrh	r3, [r7, #18]
 8016238:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801623a:	7c7a      	ldrb	r2, [r7, #17]
 801623c:	4978      	ldr	r1, [pc, #480]	; (8016420 <etharp_query+0x268>)
 801623e:	4613      	mov	r3, r2
 8016240:	005b      	lsls	r3, r3, #1
 8016242:	4413      	add	r3, r2
 8016244:	00db      	lsls	r3, r3, #3
 8016246:	440b      	add	r3, r1
 8016248:	3314      	adds	r3, #20
 801624a:	781b      	ldrb	r3, [r3, #0]
 801624c:	2b00      	cmp	r3, #0
 801624e:	d115      	bne.n	801627c <etharp_query+0xc4>
    is_new_entry = 1;
 8016250:	2301      	movs	r3, #1
 8016252:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8016254:	7c7a      	ldrb	r2, [r7, #17]
 8016256:	4972      	ldr	r1, [pc, #456]	; (8016420 <etharp_query+0x268>)
 8016258:	4613      	mov	r3, r2
 801625a:	005b      	lsls	r3, r3, #1
 801625c:	4413      	add	r3, r2
 801625e:	00db      	lsls	r3, r3, #3
 8016260:	440b      	add	r3, r1
 8016262:	3314      	adds	r3, #20
 8016264:	2201      	movs	r2, #1
 8016266:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8016268:	7c7a      	ldrb	r2, [r7, #17]
 801626a:	496d      	ldr	r1, [pc, #436]	; (8016420 <etharp_query+0x268>)
 801626c:	4613      	mov	r3, r2
 801626e:	005b      	lsls	r3, r3, #1
 8016270:	4413      	add	r3, r2
 8016272:	00db      	lsls	r3, r3, #3
 8016274:	440b      	add	r3, r1
 8016276:	3308      	adds	r3, #8
 8016278:	68fa      	ldr	r2, [r7, #12]
 801627a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801627c:	7c7a      	ldrb	r2, [r7, #17]
 801627e:	4968      	ldr	r1, [pc, #416]	; (8016420 <etharp_query+0x268>)
 8016280:	4613      	mov	r3, r2
 8016282:	005b      	lsls	r3, r3, #1
 8016284:	4413      	add	r3, r2
 8016286:	00db      	lsls	r3, r3, #3
 8016288:	440b      	add	r3, r1
 801628a:	3314      	adds	r3, #20
 801628c:	781b      	ldrb	r3, [r3, #0]
 801628e:	2b01      	cmp	r3, #1
 8016290:	d011      	beq.n	80162b6 <etharp_query+0xfe>
 8016292:	7c7a      	ldrb	r2, [r7, #17]
 8016294:	4962      	ldr	r1, [pc, #392]	; (8016420 <etharp_query+0x268>)
 8016296:	4613      	mov	r3, r2
 8016298:	005b      	lsls	r3, r3, #1
 801629a:	4413      	add	r3, r2
 801629c:	00db      	lsls	r3, r3, #3
 801629e:	440b      	add	r3, r1
 80162a0:	3314      	adds	r3, #20
 80162a2:	781b      	ldrb	r3, [r3, #0]
 80162a4:	2b01      	cmp	r3, #1
 80162a6:	d806      	bhi.n	80162b6 <etharp_query+0xfe>
 80162a8:	4b5a      	ldr	r3, [pc, #360]	; (8016414 <etharp_query+0x25c>)
 80162aa:	f240 32cf 	movw	r2, #975	; 0x3cf
 80162ae:	495d      	ldr	r1, [pc, #372]	; (8016424 <etharp_query+0x26c>)
 80162b0:	485a      	ldr	r0, [pc, #360]	; (801641c <etharp_query+0x264>)
 80162b2:	f001 ff6d 	bl	8018190 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80162b6:	6a3b      	ldr	r3, [r7, #32]
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d102      	bne.n	80162c2 <etharp_query+0x10a>
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	2b00      	cmp	r3, #0
 80162c0:	d10c      	bne.n	80162dc <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80162c2:	68b9      	ldr	r1, [r7, #8]
 80162c4:	68f8      	ldr	r0, [r7, #12]
 80162c6:	f000 f963 	bl	8016590 <etharp_request>
 80162ca:	4603      	mov	r3, r0
 80162cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	2b00      	cmp	r3, #0
 80162d4:	d102      	bne.n	80162dc <etharp_query+0x124>
      return result;
 80162d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80162da:	e097      	b.n	801640c <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	2b00      	cmp	r3, #0
 80162e0:	d106      	bne.n	80162f0 <etharp_query+0x138>
 80162e2:	4b4c      	ldr	r3, [pc, #304]	; (8016414 <etharp_query+0x25c>)
 80162e4:	f240 32e1 	movw	r2, #993	; 0x3e1
 80162e8:	494f      	ldr	r1, [pc, #316]	; (8016428 <etharp_query+0x270>)
 80162ea:	484c      	ldr	r0, [pc, #304]	; (801641c <etharp_query+0x264>)
 80162ec:	f001 ff50 	bl	8018190 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80162f0:	7c7a      	ldrb	r2, [r7, #17]
 80162f2:	494b      	ldr	r1, [pc, #300]	; (8016420 <etharp_query+0x268>)
 80162f4:	4613      	mov	r3, r2
 80162f6:	005b      	lsls	r3, r3, #1
 80162f8:	4413      	add	r3, r2
 80162fa:	00db      	lsls	r3, r3, #3
 80162fc:	440b      	add	r3, r1
 80162fe:	3314      	adds	r3, #20
 8016300:	781b      	ldrb	r3, [r3, #0]
 8016302:	2b01      	cmp	r3, #1
 8016304:	d918      	bls.n	8016338 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8016306:	4a49      	ldr	r2, [pc, #292]	; (801642c <etharp_query+0x274>)
 8016308:	7c7b      	ldrb	r3, [r7, #17]
 801630a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801630c:	7c7a      	ldrb	r2, [r7, #17]
 801630e:	4613      	mov	r3, r2
 8016310:	005b      	lsls	r3, r3, #1
 8016312:	4413      	add	r3, r2
 8016314:	00db      	lsls	r3, r3, #3
 8016316:	3308      	adds	r3, #8
 8016318:	4a41      	ldr	r2, [pc, #260]	; (8016420 <etharp_query+0x268>)
 801631a:	4413      	add	r3, r2
 801631c:	1d1a      	adds	r2, r3, #4
 801631e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016322:	9300      	str	r3, [sp, #0]
 8016324:	4613      	mov	r3, r2
 8016326:	697a      	ldr	r2, [r7, #20]
 8016328:	6879      	ldr	r1, [r7, #4]
 801632a:	68f8      	ldr	r0, [r7, #12]
 801632c:	f001 fc86 	bl	8017c3c <ethernet_output>
 8016330:	4603      	mov	r3, r0
 8016332:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016336:	e067      	b.n	8016408 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016338:	7c7a      	ldrb	r2, [r7, #17]
 801633a:	4939      	ldr	r1, [pc, #228]	; (8016420 <etharp_query+0x268>)
 801633c:	4613      	mov	r3, r2
 801633e:	005b      	lsls	r3, r3, #1
 8016340:	4413      	add	r3, r2
 8016342:	00db      	lsls	r3, r3, #3
 8016344:	440b      	add	r3, r1
 8016346:	3314      	adds	r3, #20
 8016348:	781b      	ldrb	r3, [r3, #0]
 801634a:	2b01      	cmp	r3, #1
 801634c:	d15c      	bne.n	8016408 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801634e:	2300      	movs	r3, #0
 8016350:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016356:	e01c      	b.n	8016392 <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8016358:	69fb      	ldr	r3, [r7, #28]
 801635a:	895a      	ldrh	r2, [r3, #10]
 801635c:	69fb      	ldr	r3, [r7, #28]
 801635e:	891b      	ldrh	r3, [r3, #8]
 8016360:	429a      	cmp	r2, r3
 8016362:	d10a      	bne.n	801637a <etharp_query+0x1c2>
 8016364:	69fb      	ldr	r3, [r7, #28]
 8016366:	681b      	ldr	r3, [r3, #0]
 8016368:	2b00      	cmp	r3, #0
 801636a:	d006      	beq.n	801637a <etharp_query+0x1c2>
 801636c:	4b29      	ldr	r3, [pc, #164]	; (8016414 <etharp_query+0x25c>)
 801636e:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8016372:	492f      	ldr	r1, [pc, #188]	; (8016430 <etharp_query+0x278>)
 8016374:	4829      	ldr	r0, [pc, #164]	; (801641c <etharp_query+0x264>)
 8016376:	f001 ff0b 	bl	8018190 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801637a:	69fb      	ldr	r3, [r7, #28]
 801637c:	7b1b      	ldrb	r3, [r3, #12]
 801637e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016382:	2b00      	cmp	r3, #0
 8016384:	d002      	beq.n	801638c <etharp_query+0x1d4>
        copy_needed = 1;
 8016386:	2301      	movs	r3, #1
 8016388:	61bb      	str	r3, [r7, #24]
        break;
 801638a:	e005      	b.n	8016398 <etharp_query+0x1e0>
      }
      p = p->next;
 801638c:	69fb      	ldr	r3, [r7, #28]
 801638e:	681b      	ldr	r3, [r3, #0]
 8016390:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016392:	69fb      	ldr	r3, [r7, #28]
 8016394:	2b00      	cmp	r3, #0
 8016396:	d1df      	bne.n	8016358 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 8016398:	69bb      	ldr	r3, [r7, #24]
 801639a:	2b00      	cmp	r3, #0
 801639c:	d007      	beq.n	80163ae <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801639e:	687a      	ldr	r2, [r7, #4]
 80163a0:	f44f 7120 	mov.w	r1, #640	; 0x280
 80163a4:	200e      	movs	r0, #14
 80163a6:	f7f6 fc3b 	bl	800cc20 <pbuf_clone>
 80163aa:	61f8      	str	r0, [r7, #28]
 80163ac:	e004      	b.n	80163b8 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80163b2:	69f8      	ldr	r0, [r7, #28]
 80163b4:	f7f6 fa62 	bl	800c87c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80163b8:	69fb      	ldr	r3, [r7, #28]
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d021      	beq.n	8016402 <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80163be:	7c7a      	ldrb	r2, [r7, #17]
 80163c0:	4917      	ldr	r1, [pc, #92]	; (8016420 <etharp_query+0x268>)
 80163c2:	4613      	mov	r3, r2
 80163c4:	005b      	lsls	r3, r3, #1
 80163c6:	4413      	add	r3, r2
 80163c8:	00db      	lsls	r3, r3, #3
 80163ca:	440b      	add	r3, r1
 80163cc:	681b      	ldr	r3, [r3, #0]
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	d00a      	beq.n	80163e8 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80163d2:	7c7a      	ldrb	r2, [r7, #17]
 80163d4:	4912      	ldr	r1, [pc, #72]	; (8016420 <etharp_query+0x268>)
 80163d6:	4613      	mov	r3, r2
 80163d8:	005b      	lsls	r3, r3, #1
 80163da:	4413      	add	r3, r2
 80163dc:	00db      	lsls	r3, r3, #3
 80163de:	440b      	add	r3, r1
 80163e0:	681b      	ldr	r3, [r3, #0]
 80163e2:	4618      	mov	r0, r3
 80163e4:	f7f6 f9a4 	bl	800c730 <pbuf_free>
      }
      arp_table[i].q = p;
 80163e8:	7c7a      	ldrb	r2, [r7, #17]
 80163ea:	490d      	ldr	r1, [pc, #52]	; (8016420 <etharp_query+0x268>)
 80163ec:	4613      	mov	r3, r2
 80163ee:	005b      	lsls	r3, r3, #1
 80163f0:	4413      	add	r3, r2
 80163f2:	00db      	lsls	r3, r3, #3
 80163f4:	440b      	add	r3, r1
 80163f6:	69fa      	ldr	r2, [r7, #28]
 80163f8:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80163fa:	2300      	movs	r3, #0
 80163fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016400:	e002      	b.n	8016408 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8016402:	23ff      	movs	r3, #255	; 0xff
 8016404:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8016408:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801640c:	4618      	mov	r0, r3
 801640e:	3728      	adds	r7, #40	; 0x28
 8016410:	46bd      	mov	sp, r7
 8016412:	bd80      	pop	{r7, pc}
 8016414:	0801c9a0 	.word	0x0801c9a0
 8016418:	0801cb4c 	.word	0x0801cb4c
 801641c:	0801ca18 	.word	0x0801ca18
 8016420:	20008ca4 	.word	0x20008ca4
 8016424:	0801cb5c 	.word	0x0801cb5c
 8016428:	0801cb40 	.word	0x0801cb40
 801642c:	20008d94 	.word	0x20008d94
 8016430:	0801cb84 	.word	0x0801cb84

08016434 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8016434:	b580      	push	{r7, lr}
 8016436:	b08a      	sub	sp, #40	; 0x28
 8016438:	af02      	add	r7, sp, #8
 801643a:	60f8      	str	r0, [r7, #12]
 801643c:	60b9      	str	r1, [r7, #8]
 801643e:	607a      	str	r2, [r7, #4]
 8016440:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8016442:	2300      	movs	r3, #0
 8016444:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016446:	68fb      	ldr	r3, [r7, #12]
 8016448:	2b00      	cmp	r3, #0
 801644a:	d106      	bne.n	801645a <etharp_raw+0x26>
 801644c:	4b3a      	ldr	r3, [pc, #232]	; (8016538 <etharp_raw+0x104>)
 801644e:	f240 4257 	movw	r2, #1111	; 0x457
 8016452:	493a      	ldr	r1, [pc, #232]	; (801653c <etharp_raw+0x108>)
 8016454:	483a      	ldr	r0, [pc, #232]	; (8016540 <etharp_raw+0x10c>)
 8016456:	f001 fe9b 	bl	8018190 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801645a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801645e:	211c      	movs	r1, #28
 8016460:	200e      	movs	r0, #14
 8016462:	f7f5 fe85 	bl	800c170 <pbuf_alloc>
 8016466:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8016468:	69bb      	ldr	r3, [r7, #24]
 801646a:	2b00      	cmp	r3, #0
 801646c:	d102      	bne.n	8016474 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801646e:	f04f 33ff 	mov.w	r3, #4294967295
 8016472:	e05d      	b.n	8016530 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8016474:	69bb      	ldr	r3, [r7, #24]
 8016476:	895b      	ldrh	r3, [r3, #10]
 8016478:	2b1b      	cmp	r3, #27
 801647a:	d806      	bhi.n	801648a <etharp_raw+0x56>
 801647c:	4b2e      	ldr	r3, [pc, #184]	; (8016538 <etharp_raw+0x104>)
 801647e:	f240 4263 	movw	r2, #1123	; 0x463
 8016482:	4930      	ldr	r1, [pc, #192]	; (8016544 <etharp_raw+0x110>)
 8016484:	482e      	ldr	r0, [pc, #184]	; (8016540 <etharp_raw+0x10c>)
 8016486:	f001 fe83 	bl	8018190 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801648a:	69bb      	ldr	r3, [r7, #24]
 801648c:	685b      	ldr	r3, [r3, #4]
 801648e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8016490:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016492:	4618      	mov	r0, r3
 8016494:	f7f4 fde0 	bl	800b058 <lwip_htons>
 8016498:	4603      	mov	r3, r0
 801649a:	461a      	mov	r2, r3
 801649c:	697b      	ldr	r3, [r7, #20]
 801649e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80164a0:	68fb      	ldr	r3, [r7, #12]
 80164a2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80164a6:	2b06      	cmp	r3, #6
 80164a8:	d006      	beq.n	80164b8 <etharp_raw+0x84>
 80164aa:	4b23      	ldr	r3, [pc, #140]	; (8016538 <etharp_raw+0x104>)
 80164ac:	f240 426a 	movw	r2, #1130	; 0x46a
 80164b0:	4925      	ldr	r1, [pc, #148]	; (8016548 <etharp_raw+0x114>)
 80164b2:	4823      	ldr	r0, [pc, #140]	; (8016540 <etharp_raw+0x10c>)
 80164b4:	f001 fe6c 	bl	8018190 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80164b8:	697b      	ldr	r3, [r7, #20]
 80164ba:	3308      	adds	r3, #8
 80164bc:	2206      	movs	r2, #6
 80164be:	6839      	ldr	r1, [r7, #0]
 80164c0:	4618      	mov	r0, r3
 80164c2:	f001 fe38 	bl	8018136 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80164c6:	697b      	ldr	r3, [r7, #20]
 80164c8:	3312      	adds	r3, #18
 80164ca:	2206      	movs	r2, #6
 80164cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80164ce:	4618      	mov	r0, r3
 80164d0:	f001 fe31 	bl	8018136 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80164d4:	697b      	ldr	r3, [r7, #20]
 80164d6:	330e      	adds	r3, #14
 80164d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80164da:	6812      	ldr	r2, [r2, #0]
 80164dc:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80164de:	697b      	ldr	r3, [r7, #20]
 80164e0:	3318      	adds	r3, #24
 80164e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80164e4:	6812      	ldr	r2, [r2, #0]
 80164e6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80164e8:	697b      	ldr	r3, [r7, #20]
 80164ea:	2200      	movs	r2, #0
 80164ec:	701a      	strb	r2, [r3, #0]
 80164ee:	2200      	movs	r2, #0
 80164f0:	f042 0201 	orr.w	r2, r2, #1
 80164f4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80164f6:	697b      	ldr	r3, [r7, #20]
 80164f8:	2200      	movs	r2, #0
 80164fa:	f042 0208 	orr.w	r2, r2, #8
 80164fe:	709a      	strb	r2, [r3, #2]
 8016500:	2200      	movs	r2, #0
 8016502:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8016504:	697b      	ldr	r3, [r7, #20]
 8016506:	2206      	movs	r2, #6
 8016508:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801650a:	697b      	ldr	r3, [r7, #20]
 801650c:	2204      	movs	r2, #4
 801650e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8016510:	f640 0306 	movw	r3, #2054	; 0x806
 8016514:	9300      	str	r3, [sp, #0]
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	68ba      	ldr	r2, [r7, #8]
 801651a:	69b9      	ldr	r1, [r7, #24]
 801651c:	68f8      	ldr	r0, [r7, #12]
 801651e:	f001 fb8d 	bl	8017c3c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8016522:	69b8      	ldr	r0, [r7, #24]
 8016524:	f7f6 f904 	bl	800c730 <pbuf_free>
  p = NULL;
 8016528:	2300      	movs	r3, #0
 801652a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801652c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016530:	4618      	mov	r0, r3
 8016532:	3720      	adds	r7, #32
 8016534:	46bd      	mov	sp, r7
 8016536:	bd80      	pop	{r7, pc}
 8016538:	0801c9a0 	.word	0x0801c9a0
 801653c:	0801caf0 	.word	0x0801caf0
 8016540:	0801ca18 	.word	0x0801ca18
 8016544:	0801cba0 	.word	0x0801cba0
 8016548:	0801cbd4 	.word	0x0801cbd4

0801654c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801654c:	b580      	push	{r7, lr}
 801654e:	b088      	sub	sp, #32
 8016550:	af04      	add	r7, sp, #16
 8016552:	60f8      	str	r0, [r7, #12]
 8016554:	60b9      	str	r1, [r7, #8]
 8016556:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016558:	68fb      	ldr	r3, [r7, #12]
 801655a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801655e:	68fb      	ldr	r3, [r7, #12]
 8016560:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8016564:	68fb      	ldr	r3, [r7, #12]
 8016566:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016568:	2201      	movs	r2, #1
 801656a:	9203      	str	r2, [sp, #12]
 801656c:	68ba      	ldr	r2, [r7, #8]
 801656e:	9202      	str	r2, [sp, #8]
 8016570:	4a06      	ldr	r2, [pc, #24]	; (801658c <etharp_request_dst+0x40>)
 8016572:	9201      	str	r2, [sp, #4]
 8016574:	9300      	str	r3, [sp, #0]
 8016576:	4603      	mov	r3, r0
 8016578:	687a      	ldr	r2, [r7, #4]
 801657a:	68f8      	ldr	r0, [r7, #12]
 801657c:	f7ff ff5a 	bl	8016434 <etharp_raw>
 8016580:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8016582:	4618      	mov	r0, r3
 8016584:	3710      	adds	r7, #16
 8016586:	46bd      	mov	sp, r7
 8016588:	bd80      	pop	{r7, pc}
 801658a:	bf00      	nop
 801658c:	08028584 	.word	0x08028584

08016590 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8016590:	b580      	push	{r7, lr}
 8016592:	b082      	sub	sp, #8
 8016594:	af00      	add	r7, sp, #0
 8016596:	6078      	str	r0, [r7, #4]
 8016598:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801659a:	4a05      	ldr	r2, [pc, #20]	; (80165b0 <etharp_request+0x20>)
 801659c:	6839      	ldr	r1, [r7, #0]
 801659e:	6878      	ldr	r0, [r7, #4]
 80165a0:	f7ff ffd4 	bl	801654c <etharp_request_dst>
 80165a4:	4603      	mov	r3, r0
}
 80165a6:	4618      	mov	r0, r3
 80165a8:	3708      	adds	r7, #8
 80165aa:	46bd      	mov	sp, r7
 80165ac:	bd80      	pop	{r7, pc}
 80165ae:	bf00      	nop
 80165b0:	0802857c 	.word	0x0802857c

080165b4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80165b4:	b580      	push	{r7, lr}
 80165b6:	b08e      	sub	sp, #56	; 0x38
 80165b8:	af04      	add	r7, sp, #16
 80165ba:	6078      	str	r0, [r7, #4]
 80165bc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80165be:	4b79      	ldr	r3, [pc, #484]	; (80167a4 <icmp_input+0x1f0>)
 80165c0:	689b      	ldr	r3, [r3, #8]
 80165c2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80165c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165c6:	781b      	ldrb	r3, [r3, #0]
 80165c8:	f003 030f 	and.w	r3, r3, #15
 80165cc:	b2db      	uxtb	r3, r3
 80165ce:	009b      	lsls	r3, r3, #2
 80165d0:	b2db      	uxtb	r3, r3
 80165d2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80165d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80165d6:	2b13      	cmp	r3, #19
 80165d8:	f240 80cd 	bls.w	8016776 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	895b      	ldrh	r3, [r3, #10]
 80165e0:	2b03      	cmp	r3, #3
 80165e2:	f240 80ca 	bls.w	801677a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	685b      	ldr	r3, [r3, #4]
 80165ea:	781b      	ldrb	r3, [r3, #0]
 80165ec:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80165f0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	f000 80b7 	beq.w	8016768 <icmp_input+0x1b4>
 80165fa:	2b08      	cmp	r3, #8
 80165fc:	f040 80b7 	bne.w	801676e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8016600:	4b69      	ldr	r3, [pc, #420]	; (80167a8 <icmp_input+0x1f4>)
 8016602:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016604:	4b67      	ldr	r3, [pc, #412]	; (80167a4 <icmp_input+0x1f0>)
 8016606:	695b      	ldr	r3, [r3, #20]
 8016608:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801660c:	2be0      	cmp	r3, #224	; 0xe0
 801660e:	f000 80bb 	beq.w	8016788 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8016612:	4b64      	ldr	r3, [pc, #400]	; (80167a4 <icmp_input+0x1f0>)
 8016614:	695a      	ldr	r2, [r3, #20]
 8016616:	4b63      	ldr	r3, [pc, #396]	; (80167a4 <icmp_input+0x1f0>)
 8016618:	681b      	ldr	r3, [r3, #0]
 801661a:	4619      	mov	r1, r3
 801661c:	4610      	mov	r0, r2
 801661e:	f000 fc09 	bl	8016e34 <ip4_addr_isbroadcast_u32>
 8016622:	4603      	mov	r3, r0
 8016624:	2b00      	cmp	r3, #0
 8016626:	f040 80b1 	bne.w	801678c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	891b      	ldrh	r3, [r3, #8]
 801662e:	2b07      	cmp	r3, #7
 8016630:	f240 80a5 	bls.w	801677e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016634:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016636:	330e      	adds	r3, #14
 8016638:	4619      	mov	r1, r3
 801663a:	6878      	ldr	r0, [r7, #4]
 801663c:	f7f5 ffe2 	bl	800c604 <pbuf_add_header>
 8016640:	4603      	mov	r3, r0
 8016642:	2b00      	cmp	r3, #0
 8016644:	d04b      	beq.n	80166de <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	891a      	ldrh	r2, [r3, #8]
 801664a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801664c:	4413      	add	r3, r2
 801664e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	891b      	ldrh	r3, [r3, #8]
 8016654:	8b7a      	ldrh	r2, [r7, #26]
 8016656:	429a      	cmp	r2, r3
 8016658:	f0c0 809a 	bcc.w	8016790 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801665c:	8b7b      	ldrh	r3, [r7, #26]
 801665e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016662:	4619      	mov	r1, r3
 8016664:	200e      	movs	r0, #14
 8016666:	f7f5 fd83 	bl	800c170 <pbuf_alloc>
 801666a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801666c:	697b      	ldr	r3, [r7, #20]
 801666e:	2b00      	cmp	r3, #0
 8016670:	f000 8090 	beq.w	8016794 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8016674:	697b      	ldr	r3, [r7, #20]
 8016676:	895b      	ldrh	r3, [r3, #10]
 8016678:	461a      	mov	r2, r3
 801667a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801667c:	3308      	adds	r3, #8
 801667e:	429a      	cmp	r2, r3
 8016680:	d203      	bcs.n	801668a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8016682:	6978      	ldr	r0, [r7, #20]
 8016684:	f7f6 f854 	bl	800c730 <pbuf_free>
          goto icmperr;
 8016688:	e085      	b.n	8016796 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801668a:	697b      	ldr	r3, [r7, #20]
 801668c:	685b      	ldr	r3, [r3, #4]
 801668e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016690:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016692:	4618      	mov	r0, r3
 8016694:	f001 fd4f 	bl	8018136 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8016698:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801669a:	4619      	mov	r1, r3
 801669c:	6978      	ldr	r0, [r7, #20]
 801669e:	f7f5 ffc1 	bl	800c624 <pbuf_remove_header>
 80166a2:	4603      	mov	r3, r0
 80166a4:	2b00      	cmp	r3, #0
 80166a6:	d009      	beq.n	80166bc <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80166a8:	4b40      	ldr	r3, [pc, #256]	; (80167ac <icmp_input+0x1f8>)
 80166aa:	22b6      	movs	r2, #182	; 0xb6
 80166ac:	4940      	ldr	r1, [pc, #256]	; (80167b0 <icmp_input+0x1fc>)
 80166ae:	4841      	ldr	r0, [pc, #260]	; (80167b4 <icmp_input+0x200>)
 80166b0:	f001 fd6e 	bl	8018190 <iprintf>
          pbuf_free(r);
 80166b4:	6978      	ldr	r0, [r7, #20]
 80166b6:	f7f6 f83b 	bl	800c730 <pbuf_free>
          goto icmperr;
 80166ba:	e06c      	b.n	8016796 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80166bc:	6879      	ldr	r1, [r7, #4]
 80166be:	6978      	ldr	r0, [r7, #20]
 80166c0:	f7f6 f96a 	bl	800c998 <pbuf_copy>
 80166c4:	4603      	mov	r3, r0
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	d003      	beq.n	80166d2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80166ca:	6978      	ldr	r0, [r7, #20]
 80166cc:	f7f6 f830 	bl	800c730 <pbuf_free>
          goto icmperr;
 80166d0:	e061      	b.n	8016796 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80166d2:	6878      	ldr	r0, [r7, #4]
 80166d4:	f7f6 f82c 	bl	800c730 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80166d8:	697b      	ldr	r3, [r7, #20]
 80166da:	607b      	str	r3, [r7, #4]
 80166dc:	e00f      	b.n	80166fe <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80166de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80166e0:	330e      	adds	r3, #14
 80166e2:	4619      	mov	r1, r3
 80166e4:	6878      	ldr	r0, [r7, #4]
 80166e6:	f7f5 ff9d 	bl	800c624 <pbuf_remove_header>
 80166ea:	4603      	mov	r3, r0
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	d006      	beq.n	80166fe <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80166f0:	4b2e      	ldr	r3, [pc, #184]	; (80167ac <icmp_input+0x1f8>)
 80166f2:	22c7      	movs	r2, #199	; 0xc7
 80166f4:	4930      	ldr	r1, [pc, #192]	; (80167b8 <icmp_input+0x204>)
 80166f6:	482f      	ldr	r0, [pc, #188]	; (80167b4 <icmp_input+0x200>)
 80166f8:	f001 fd4a 	bl	8018190 <iprintf>
          goto icmperr;
 80166fc:	e04b      	b.n	8016796 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	685b      	ldr	r3, [r3, #4]
 8016702:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8016704:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016706:	4619      	mov	r1, r3
 8016708:	6878      	ldr	r0, [r7, #4]
 801670a:	f7f5 ff7b 	bl	800c604 <pbuf_add_header>
 801670e:	4603      	mov	r3, r0
 8016710:	2b00      	cmp	r3, #0
 8016712:	d12b      	bne.n	801676c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	685b      	ldr	r3, [r3, #4]
 8016718:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801671a:	69fb      	ldr	r3, [r7, #28]
 801671c:	681a      	ldr	r2, [r3, #0]
 801671e:	68fb      	ldr	r3, [r7, #12]
 8016720:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8016722:	4b20      	ldr	r3, [pc, #128]	; (80167a4 <icmp_input+0x1f0>)
 8016724:	691a      	ldr	r2, [r3, #16]
 8016726:	68fb      	ldr	r3, [r7, #12]
 8016728:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801672a:	693b      	ldr	r3, [r7, #16]
 801672c:	2200      	movs	r2, #0
 801672e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8016730:	693b      	ldr	r3, [r7, #16]
 8016732:	2200      	movs	r2, #0
 8016734:	709a      	strb	r2, [r3, #2]
 8016736:	2200      	movs	r2, #0
 8016738:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801673a:	68fb      	ldr	r3, [r7, #12]
 801673c:	22ff      	movs	r2, #255	; 0xff
 801673e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8016740:	68fb      	ldr	r3, [r7, #12]
 8016742:	2200      	movs	r2, #0
 8016744:	729a      	strb	r2, [r3, #10]
 8016746:	2200      	movs	r2, #0
 8016748:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801674a:	683b      	ldr	r3, [r7, #0]
 801674c:	9302      	str	r3, [sp, #8]
 801674e:	2301      	movs	r3, #1
 8016750:	9301      	str	r3, [sp, #4]
 8016752:	2300      	movs	r3, #0
 8016754:	9300      	str	r3, [sp, #0]
 8016756:	23ff      	movs	r3, #255	; 0xff
 8016758:	2200      	movs	r2, #0
 801675a:	69f9      	ldr	r1, [r7, #28]
 801675c:	6878      	ldr	r0, [r7, #4]
 801675e:	f000 fa91 	bl	8016c84 <ip4_output_if>
 8016762:	4603      	mov	r3, r0
 8016764:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8016766:	e001      	b.n	801676c <icmp_input+0x1b8>
      break;
 8016768:	bf00      	nop
 801676a:	e000      	b.n	801676e <icmp_input+0x1ba>
      break;
 801676c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801676e:	6878      	ldr	r0, [r7, #4]
 8016770:	f7f5 ffde 	bl	800c730 <pbuf_free>
  return;
 8016774:	e013      	b.n	801679e <icmp_input+0x1ea>
    goto lenerr;
 8016776:	bf00      	nop
 8016778:	e002      	b.n	8016780 <icmp_input+0x1cc>
    goto lenerr;
 801677a:	bf00      	nop
 801677c:	e000      	b.n	8016780 <icmp_input+0x1cc>
        goto lenerr;
 801677e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8016780:	6878      	ldr	r0, [r7, #4]
 8016782:	f7f5 ffd5 	bl	800c730 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016786:	e00a      	b.n	801679e <icmp_input+0x1ea>
        goto icmperr;
 8016788:	bf00      	nop
 801678a:	e004      	b.n	8016796 <icmp_input+0x1e2>
        goto icmperr;
 801678c:	bf00      	nop
 801678e:	e002      	b.n	8016796 <icmp_input+0x1e2>
          goto icmperr;
 8016790:	bf00      	nop
 8016792:	e000      	b.n	8016796 <icmp_input+0x1e2>
          goto icmperr;
 8016794:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8016796:	6878      	ldr	r0, [r7, #4]
 8016798:	f7f5 ffca 	bl	800c730 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801679c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801679e:	3728      	adds	r7, #40	; 0x28
 80167a0:	46bd      	mov	sp, r7
 80167a2:	bd80      	pop	{r7, pc}
 80167a4:	2000c3a4 	.word	0x2000c3a4
 80167a8:	2000c3b8 	.word	0x2000c3b8
 80167ac:	0801cc18 	.word	0x0801cc18
 80167b0:	0801cc50 	.word	0x0801cc50
 80167b4:	0801cc88 	.word	0x0801cc88
 80167b8:	0801ccb0 	.word	0x0801ccb0

080167bc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80167bc:	b580      	push	{r7, lr}
 80167be:	b082      	sub	sp, #8
 80167c0:	af00      	add	r7, sp, #0
 80167c2:	6078      	str	r0, [r7, #4]
 80167c4:	460b      	mov	r3, r1
 80167c6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80167c8:	78fb      	ldrb	r3, [r7, #3]
 80167ca:	461a      	mov	r2, r3
 80167cc:	2103      	movs	r1, #3
 80167ce:	6878      	ldr	r0, [r7, #4]
 80167d0:	f000 f814 	bl	80167fc <icmp_send_response>
}
 80167d4:	bf00      	nop
 80167d6:	3708      	adds	r7, #8
 80167d8:	46bd      	mov	sp, r7
 80167da:	bd80      	pop	{r7, pc}

080167dc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80167dc:	b580      	push	{r7, lr}
 80167de:	b082      	sub	sp, #8
 80167e0:	af00      	add	r7, sp, #0
 80167e2:	6078      	str	r0, [r7, #4]
 80167e4:	460b      	mov	r3, r1
 80167e6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80167e8:	78fb      	ldrb	r3, [r7, #3]
 80167ea:	461a      	mov	r2, r3
 80167ec:	210b      	movs	r1, #11
 80167ee:	6878      	ldr	r0, [r7, #4]
 80167f0:	f000 f804 	bl	80167fc <icmp_send_response>
}
 80167f4:	bf00      	nop
 80167f6:	3708      	adds	r7, #8
 80167f8:	46bd      	mov	sp, r7
 80167fa:	bd80      	pop	{r7, pc}

080167fc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80167fc:	b580      	push	{r7, lr}
 80167fe:	b08c      	sub	sp, #48	; 0x30
 8016800:	af04      	add	r7, sp, #16
 8016802:	6078      	str	r0, [r7, #4]
 8016804:	460b      	mov	r3, r1
 8016806:	70fb      	strb	r3, [r7, #3]
 8016808:	4613      	mov	r3, r2
 801680a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801680c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016810:	2124      	movs	r1, #36	; 0x24
 8016812:	2022      	movs	r0, #34	; 0x22
 8016814:	f7f5 fcac 	bl	800c170 <pbuf_alloc>
 8016818:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801681a:	69fb      	ldr	r3, [r7, #28]
 801681c:	2b00      	cmp	r3, #0
 801681e:	d04c      	beq.n	80168ba <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8016820:	69fb      	ldr	r3, [r7, #28]
 8016822:	895b      	ldrh	r3, [r3, #10]
 8016824:	2b23      	cmp	r3, #35	; 0x23
 8016826:	d806      	bhi.n	8016836 <icmp_send_response+0x3a>
 8016828:	4b26      	ldr	r3, [pc, #152]	; (80168c4 <icmp_send_response+0xc8>)
 801682a:	f240 1269 	movw	r2, #361	; 0x169
 801682e:	4926      	ldr	r1, [pc, #152]	; (80168c8 <icmp_send_response+0xcc>)
 8016830:	4826      	ldr	r0, [pc, #152]	; (80168cc <icmp_send_response+0xd0>)
 8016832:	f001 fcad 	bl	8018190 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	685b      	ldr	r3, [r3, #4]
 801683a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801683c:	69fb      	ldr	r3, [r7, #28]
 801683e:	685b      	ldr	r3, [r3, #4]
 8016840:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8016842:	697b      	ldr	r3, [r7, #20]
 8016844:	78fa      	ldrb	r2, [r7, #3]
 8016846:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8016848:	697b      	ldr	r3, [r7, #20]
 801684a:	78ba      	ldrb	r2, [r7, #2]
 801684c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801684e:	697b      	ldr	r3, [r7, #20]
 8016850:	2200      	movs	r2, #0
 8016852:	711a      	strb	r2, [r3, #4]
 8016854:	2200      	movs	r2, #0
 8016856:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8016858:	697b      	ldr	r3, [r7, #20]
 801685a:	2200      	movs	r2, #0
 801685c:	719a      	strb	r2, [r3, #6]
 801685e:	2200      	movs	r2, #0
 8016860:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8016862:	69fb      	ldr	r3, [r7, #28]
 8016864:	685b      	ldr	r3, [r3, #4]
 8016866:	f103 0008 	add.w	r0, r3, #8
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	685b      	ldr	r3, [r3, #4]
 801686e:	221c      	movs	r2, #28
 8016870:	4619      	mov	r1, r3
 8016872:	f001 fc60 	bl	8018136 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8016876:	69bb      	ldr	r3, [r7, #24]
 8016878:	68db      	ldr	r3, [r3, #12]
 801687a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801687c:	f107 030c 	add.w	r3, r7, #12
 8016880:	4618      	mov	r0, r3
 8016882:	f000 f825 	bl	80168d0 <ip4_route>
 8016886:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8016888:	693b      	ldr	r3, [r7, #16]
 801688a:	2b00      	cmp	r3, #0
 801688c:	d011      	beq.n	80168b2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801688e:	697b      	ldr	r3, [r7, #20]
 8016890:	2200      	movs	r2, #0
 8016892:	709a      	strb	r2, [r3, #2]
 8016894:	2200      	movs	r2, #0
 8016896:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8016898:	f107 020c 	add.w	r2, r7, #12
 801689c:	693b      	ldr	r3, [r7, #16]
 801689e:	9302      	str	r3, [sp, #8]
 80168a0:	2301      	movs	r3, #1
 80168a2:	9301      	str	r3, [sp, #4]
 80168a4:	2300      	movs	r3, #0
 80168a6:	9300      	str	r3, [sp, #0]
 80168a8:	23ff      	movs	r3, #255	; 0xff
 80168aa:	2100      	movs	r1, #0
 80168ac:	69f8      	ldr	r0, [r7, #28]
 80168ae:	f000 f9e9 	bl	8016c84 <ip4_output_if>
  }
  pbuf_free(q);
 80168b2:	69f8      	ldr	r0, [r7, #28]
 80168b4:	f7f5 ff3c 	bl	800c730 <pbuf_free>
 80168b8:	e000      	b.n	80168bc <icmp_send_response+0xc0>
    return;
 80168ba:	bf00      	nop
}
 80168bc:	3720      	adds	r7, #32
 80168be:	46bd      	mov	sp, r7
 80168c0:	bd80      	pop	{r7, pc}
 80168c2:	bf00      	nop
 80168c4:	0801cc18 	.word	0x0801cc18
 80168c8:	0801cce4 	.word	0x0801cce4
 80168cc:	0801cc88 	.word	0x0801cc88

080168d0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80168d0:	b480      	push	{r7}
 80168d2:	b085      	sub	sp, #20
 80168d4:	af00      	add	r7, sp, #0
 80168d6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80168d8:	4b33      	ldr	r3, [pc, #204]	; (80169a8 <ip4_route+0xd8>)
 80168da:	681b      	ldr	r3, [r3, #0]
 80168dc:	60fb      	str	r3, [r7, #12]
 80168de:	e036      	b.n	801694e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80168e0:	68fb      	ldr	r3, [r7, #12]
 80168e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80168e6:	f003 0301 	and.w	r3, r3, #1
 80168ea:	b2db      	uxtb	r3, r3
 80168ec:	2b00      	cmp	r3, #0
 80168ee:	d02b      	beq.n	8016948 <ip4_route+0x78>
 80168f0:	68fb      	ldr	r3, [r7, #12]
 80168f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80168f6:	089b      	lsrs	r3, r3, #2
 80168f8:	f003 0301 	and.w	r3, r3, #1
 80168fc:	b2db      	uxtb	r3, r3
 80168fe:	2b00      	cmp	r3, #0
 8016900:	d022      	beq.n	8016948 <ip4_route+0x78>
 8016902:	68fb      	ldr	r3, [r7, #12]
 8016904:	3304      	adds	r3, #4
 8016906:	681b      	ldr	r3, [r3, #0]
 8016908:	2b00      	cmp	r3, #0
 801690a:	d01d      	beq.n	8016948 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	681a      	ldr	r2, [r3, #0]
 8016910:	68fb      	ldr	r3, [r7, #12]
 8016912:	3304      	adds	r3, #4
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	405a      	eors	r2, r3
 8016918:	68fb      	ldr	r3, [r7, #12]
 801691a:	3308      	adds	r3, #8
 801691c:	681b      	ldr	r3, [r3, #0]
 801691e:	4013      	ands	r3, r2
 8016920:	2b00      	cmp	r3, #0
 8016922:	d101      	bne.n	8016928 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8016924:	68fb      	ldr	r3, [r7, #12]
 8016926:	e038      	b.n	801699a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8016928:	68fb      	ldr	r3, [r7, #12]
 801692a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801692e:	f003 0302 	and.w	r3, r3, #2
 8016932:	2b00      	cmp	r3, #0
 8016934:	d108      	bne.n	8016948 <ip4_route+0x78>
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	681a      	ldr	r2, [r3, #0]
 801693a:	68fb      	ldr	r3, [r7, #12]
 801693c:	330c      	adds	r3, #12
 801693e:	681b      	ldr	r3, [r3, #0]
 8016940:	429a      	cmp	r2, r3
 8016942:	d101      	bne.n	8016948 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8016944:	68fb      	ldr	r3, [r7, #12]
 8016946:	e028      	b.n	801699a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8016948:	68fb      	ldr	r3, [r7, #12]
 801694a:	681b      	ldr	r3, [r3, #0]
 801694c:	60fb      	str	r3, [r7, #12]
 801694e:	68fb      	ldr	r3, [r7, #12]
 8016950:	2b00      	cmp	r3, #0
 8016952:	d1c5      	bne.n	80168e0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016954:	4b15      	ldr	r3, [pc, #84]	; (80169ac <ip4_route+0xdc>)
 8016956:	681b      	ldr	r3, [r3, #0]
 8016958:	2b00      	cmp	r3, #0
 801695a:	d01a      	beq.n	8016992 <ip4_route+0xc2>
 801695c:	4b13      	ldr	r3, [pc, #76]	; (80169ac <ip4_route+0xdc>)
 801695e:	681b      	ldr	r3, [r3, #0]
 8016960:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016964:	f003 0301 	and.w	r3, r3, #1
 8016968:	2b00      	cmp	r3, #0
 801696a:	d012      	beq.n	8016992 <ip4_route+0xc2>
 801696c:	4b0f      	ldr	r3, [pc, #60]	; (80169ac <ip4_route+0xdc>)
 801696e:	681b      	ldr	r3, [r3, #0]
 8016970:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016974:	f003 0304 	and.w	r3, r3, #4
 8016978:	2b00      	cmp	r3, #0
 801697a:	d00a      	beq.n	8016992 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801697c:	4b0b      	ldr	r3, [pc, #44]	; (80169ac <ip4_route+0xdc>)
 801697e:	681b      	ldr	r3, [r3, #0]
 8016980:	3304      	adds	r3, #4
 8016982:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016984:	2b00      	cmp	r3, #0
 8016986:	d004      	beq.n	8016992 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	681b      	ldr	r3, [r3, #0]
 801698c:	b2db      	uxtb	r3, r3
 801698e:	2b7f      	cmp	r3, #127	; 0x7f
 8016990:	d101      	bne.n	8016996 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8016992:	2300      	movs	r3, #0
 8016994:	e001      	b.n	801699a <ip4_route+0xca>
  }

  return netif_default;
 8016996:	4b05      	ldr	r3, [pc, #20]	; (80169ac <ip4_route+0xdc>)
 8016998:	681b      	ldr	r3, [r3, #0]
}
 801699a:	4618      	mov	r0, r3
 801699c:	3714      	adds	r7, #20
 801699e:	46bd      	mov	sp, r7
 80169a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169a4:	4770      	bx	lr
 80169a6:	bf00      	nop
 80169a8:	2000fac8 	.word	0x2000fac8
 80169ac:	2000facc 	.word	0x2000facc

080169b0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80169b0:	b580      	push	{r7, lr}
 80169b2:	b082      	sub	sp, #8
 80169b4:	af00      	add	r7, sp, #0
 80169b6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80169be:	f003 0301 	and.w	r3, r3, #1
 80169c2:	b2db      	uxtb	r3, r3
 80169c4:	2b00      	cmp	r3, #0
 80169c6:	d016      	beq.n	80169f6 <ip4_input_accept+0x46>
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	3304      	adds	r3, #4
 80169cc:	681b      	ldr	r3, [r3, #0]
 80169ce:	2b00      	cmp	r3, #0
 80169d0:	d011      	beq.n	80169f6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80169d2:	4b0b      	ldr	r3, [pc, #44]	; (8016a00 <ip4_input_accept+0x50>)
 80169d4:	695a      	ldr	r2, [r3, #20]
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	3304      	adds	r3, #4
 80169da:	681b      	ldr	r3, [r3, #0]
 80169dc:	429a      	cmp	r2, r3
 80169de:	d008      	beq.n	80169f2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80169e0:	4b07      	ldr	r3, [pc, #28]	; (8016a00 <ip4_input_accept+0x50>)
 80169e2:	695b      	ldr	r3, [r3, #20]
 80169e4:	6879      	ldr	r1, [r7, #4]
 80169e6:	4618      	mov	r0, r3
 80169e8:	f000 fa24 	bl	8016e34 <ip4_addr_isbroadcast_u32>
 80169ec:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80169ee:	2b00      	cmp	r3, #0
 80169f0:	d001      	beq.n	80169f6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80169f2:	2301      	movs	r3, #1
 80169f4:	e000      	b.n	80169f8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80169f6:	2300      	movs	r3, #0
}
 80169f8:	4618      	mov	r0, r3
 80169fa:	3708      	adds	r7, #8
 80169fc:	46bd      	mov	sp, r7
 80169fe:	bd80      	pop	{r7, pc}
 8016a00:	2000c3a4 	.word	0x2000c3a4

08016a04 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8016a04:	b580      	push	{r7, lr}
 8016a06:	b088      	sub	sp, #32
 8016a08:	af00      	add	r7, sp, #0
 8016a0a:	6078      	str	r0, [r7, #4]
 8016a0c:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8016a0e:	2301      	movs	r3, #1
 8016a10:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	685b      	ldr	r3, [r3, #4]
 8016a16:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8016a18:	69fb      	ldr	r3, [r7, #28]
 8016a1a:	781b      	ldrb	r3, [r3, #0]
 8016a1c:	091b      	lsrs	r3, r3, #4
 8016a1e:	b2db      	uxtb	r3, r3
 8016a20:	2b04      	cmp	r3, #4
 8016a22:	d004      	beq.n	8016a2e <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8016a24:	6878      	ldr	r0, [r7, #4]
 8016a26:	f7f5 fe83 	bl	800c730 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8016a2a:	2300      	movs	r3, #0
 8016a2c:	e121      	b.n	8016c72 <ip4_input+0x26e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8016a2e:	69fb      	ldr	r3, [r7, #28]
 8016a30:	781b      	ldrb	r3, [r3, #0]
 8016a32:	f003 030f 	and.w	r3, r3, #15
 8016a36:	b2db      	uxtb	r3, r3
 8016a38:	009b      	lsls	r3, r3, #2
 8016a3a:	b2db      	uxtb	r3, r3
 8016a3c:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8016a3e:	69fb      	ldr	r3, [r7, #28]
 8016a40:	885b      	ldrh	r3, [r3, #2]
 8016a42:	b29b      	uxth	r3, r3
 8016a44:	4618      	mov	r0, r3
 8016a46:	f7f4 fb07 	bl	800b058 <lwip_htons>
 8016a4a:	4603      	mov	r3, r0
 8016a4c:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	891b      	ldrh	r3, [r3, #8]
 8016a52:	8a3a      	ldrh	r2, [r7, #16]
 8016a54:	429a      	cmp	r2, r3
 8016a56:	d204      	bcs.n	8016a62 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8016a58:	8a3b      	ldrh	r3, [r7, #16]
 8016a5a:	4619      	mov	r1, r3
 8016a5c:	6878      	ldr	r0, [r7, #4]
 8016a5e:	f7f5 fce1 	bl	800c424 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8016a62:	687b      	ldr	r3, [r7, #4]
 8016a64:	895b      	ldrh	r3, [r3, #10]
 8016a66:	8a7a      	ldrh	r2, [r7, #18]
 8016a68:	429a      	cmp	r2, r3
 8016a6a:	d807      	bhi.n	8016a7c <ip4_input+0x78>
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	891b      	ldrh	r3, [r3, #8]
 8016a70:	8a3a      	ldrh	r2, [r7, #16]
 8016a72:	429a      	cmp	r2, r3
 8016a74:	d802      	bhi.n	8016a7c <ip4_input+0x78>
 8016a76:	8a7b      	ldrh	r3, [r7, #18]
 8016a78:	2b13      	cmp	r3, #19
 8016a7a:	d804      	bhi.n	8016a86 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8016a7c:	6878      	ldr	r0, [r7, #4]
 8016a7e:	f7f5 fe57 	bl	800c730 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8016a82:	2300      	movs	r3, #0
 8016a84:	e0f5      	b.n	8016c72 <ip4_input+0x26e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8016a86:	69fb      	ldr	r3, [r7, #28]
 8016a88:	691b      	ldr	r3, [r3, #16]
 8016a8a:	4a7c      	ldr	r2, [pc, #496]	; (8016c7c <ip4_input+0x278>)
 8016a8c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8016a8e:	69fb      	ldr	r3, [r7, #28]
 8016a90:	68db      	ldr	r3, [r3, #12]
 8016a92:	4a7a      	ldr	r2, [pc, #488]	; (8016c7c <ip4_input+0x278>)
 8016a94:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016a96:	4b79      	ldr	r3, [pc, #484]	; (8016c7c <ip4_input+0x278>)
 8016a98:	695b      	ldr	r3, [r3, #20]
 8016a9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016a9e:	2be0      	cmp	r3, #224	; 0xe0
 8016aa0:	d112      	bne.n	8016ac8 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8016aa2:	683b      	ldr	r3, [r7, #0]
 8016aa4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016aa8:	f003 0301 	and.w	r3, r3, #1
 8016aac:	b2db      	uxtb	r3, r3
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	d007      	beq.n	8016ac2 <ip4_input+0xbe>
 8016ab2:	683b      	ldr	r3, [r7, #0]
 8016ab4:	3304      	adds	r3, #4
 8016ab6:	681b      	ldr	r3, [r3, #0]
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d002      	beq.n	8016ac2 <ip4_input+0xbe>
      netif = inp;
 8016abc:	683b      	ldr	r3, [r7, #0]
 8016abe:	61bb      	str	r3, [r7, #24]
 8016ac0:	e02a      	b.n	8016b18 <ip4_input+0x114>
    } else {
      netif = NULL;
 8016ac2:	2300      	movs	r3, #0
 8016ac4:	61bb      	str	r3, [r7, #24]
 8016ac6:	e027      	b.n	8016b18 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8016ac8:	6838      	ldr	r0, [r7, #0]
 8016aca:	f7ff ff71 	bl	80169b0 <ip4_input_accept>
 8016ace:	4603      	mov	r3, r0
 8016ad0:	2b00      	cmp	r3, #0
 8016ad2:	d002      	beq.n	8016ada <ip4_input+0xd6>
      netif = inp;
 8016ad4:	683b      	ldr	r3, [r7, #0]
 8016ad6:	61bb      	str	r3, [r7, #24]
 8016ad8:	e01e      	b.n	8016b18 <ip4_input+0x114>
    } else {
      netif = NULL;
 8016ada:	2300      	movs	r3, #0
 8016adc:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8016ade:	4b67      	ldr	r3, [pc, #412]	; (8016c7c <ip4_input+0x278>)
 8016ae0:	695b      	ldr	r3, [r3, #20]
 8016ae2:	b2db      	uxtb	r3, r3
 8016ae4:	2b7f      	cmp	r3, #127	; 0x7f
 8016ae6:	d017      	beq.n	8016b18 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8016ae8:	4b65      	ldr	r3, [pc, #404]	; (8016c80 <ip4_input+0x27c>)
 8016aea:	681b      	ldr	r3, [r3, #0]
 8016aec:	61bb      	str	r3, [r7, #24]
 8016aee:	e00e      	b.n	8016b0e <ip4_input+0x10a>
          if (netif == inp) {
 8016af0:	69ba      	ldr	r2, [r7, #24]
 8016af2:	683b      	ldr	r3, [r7, #0]
 8016af4:	429a      	cmp	r2, r3
 8016af6:	d006      	beq.n	8016b06 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8016af8:	69b8      	ldr	r0, [r7, #24]
 8016afa:	f7ff ff59 	bl	80169b0 <ip4_input_accept>
 8016afe:	4603      	mov	r3, r0
 8016b00:	2b00      	cmp	r3, #0
 8016b02:	d108      	bne.n	8016b16 <ip4_input+0x112>
 8016b04:	e000      	b.n	8016b08 <ip4_input+0x104>
            continue;
 8016b06:	bf00      	nop
        NETIF_FOREACH(netif) {
 8016b08:	69bb      	ldr	r3, [r7, #24]
 8016b0a:	681b      	ldr	r3, [r3, #0]
 8016b0c:	61bb      	str	r3, [r7, #24]
 8016b0e:	69bb      	ldr	r3, [r7, #24]
 8016b10:	2b00      	cmp	r3, #0
 8016b12:	d1ed      	bne.n	8016af0 <ip4_input+0xec>
 8016b14:	e000      	b.n	8016b18 <ip4_input+0x114>
            break;
 8016b16:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8016b18:	69bb      	ldr	r3, [r7, #24]
 8016b1a:	2b00      	cmp	r3, #0
 8016b1c:	d111      	bne.n	8016b42 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8016b1e:	69fb      	ldr	r3, [r7, #28]
 8016b20:	7a5b      	ldrb	r3, [r3, #9]
 8016b22:	2b11      	cmp	r3, #17
 8016b24:	d10d      	bne.n	8016b42 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8016b26:	8a7b      	ldrh	r3, [r7, #18]
 8016b28:	69fa      	ldr	r2, [r7, #28]
 8016b2a:	4413      	add	r3, r2
 8016b2c:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8016b2e:	68fb      	ldr	r3, [r7, #12]
 8016b30:	885b      	ldrh	r3, [r3, #2]
 8016b32:	b29b      	uxth	r3, r3
 8016b34:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8016b38:	d103      	bne.n	8016b42 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8016b3a:	683b      	ldr	r3, [r7, #0]
 8016b3c:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8016b3e:	2300      	movs	r3, #0
 8016b40:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8016b42:	697b      	ldr	r3, [r7, #20]
 8016b44:	2b00      	cmp	r3, #0
 8016b46:	d017      	beq.n	8016b78 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8016b48:	4b4c      	ldr	r3, [pc, #304]	; (8016c7c <ip4_input+0x278>)
 8016b4a:	691b      	ldr	r3, [r3, #16]
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	d013      	beq.n	8016b78 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016b50:	4b4a      	ldr	r3, [pc, #296]	; (8016c7c <ip4_input+0x278>)
 8016b52:	691b      	ldr	r3, [r3, #16]
 8016b54:	6839      	ldr	r1, [r7, #0]
 8016b56:	4618      	mov	r0, r3
 8016b58:	f000 f96c 	bl	8016e34 <ip4_addr_isbroadcast_u32>
 8016b5c:	4603      	mov	r3, r0
 8016b5e:	2b00      	cmp	r3, #0
 8016b60:	d105      	bne.n	8016b6e <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8016b62:	4b46      	ldr	r3, [pc, #280]	; (8016c7c <ip4_input+0x278>)
 8016b64:	691b      	ldr	r3, [r3, #16]
 8016b66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016b6a:	2be0      	cmp	r3, #224	; 0xe0
 8016b6c:	d104      	bne.n	8016b78 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8016b6e:	6878      	ldr	r0, [r7, #4]
 8016b70:	f7f5 fdde 	bl	800c730 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8016b74:	2300      	movs	r3, #0
 8016b76:	e07c      	b.n	8016c72 <ip4_input+0x26e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8016b78:	69bb      	ldr	r3, [r7, #24]
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	d104      	bne.n	8016b88 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8016b7e:	6878      	ldr	r0, [r7, #4]
 8016b80:	f7f5 fdd6 	bl	800c730 <pbuf_free>
    return ERR_OK;
 8016b84:	2300      	movs	r3, #0
 8016b86:	e074      	b.n	8016c72 <ip4_input+0x26e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8016b88:	69fb      	ldr	r3, [r7, #28]
 8016b8a:	88db      	ldrh	r3, [r3, #6]
 8016b8c:	b29b      	uxth	r3, r3
 8016b8e:	461a      	mov	r2, r3
 8016b90:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8016b94:	4013      	ands	r3, r2
 8016b96:	2b00      	cmp	r3, #0
 8016b98:	d00b      	beq.n	8016bb2 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8016b9a:	6878      	ldr	r0, [r7, #4]
 8016b9c:	f000 fc90 	bl	80174c0 <ip4_reass>
 8016ba0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	2b00      	cmp	r3, #0
 8016ba6:	d101      	bne.n	8016bac <ip4_input+0x1a8>
      return ERR_OK;
 8016ba8:	2300      	movs	r3, #0
 8016baa:	e062      	b.n	8016c72 <ip4_input+0x26e>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	685b      	ldr	r3, [r3, #4]
 8016bb0:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8016bb2:	4a32      	ldr	r2, [pc, #200]	; (8016c7c <ip4_input+0x278>)
 8016bb4:	69bb      	ldr	r3, [r7, #24]
 8016bb6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8016bb8:	4a30      	ldr	r2, [pc, #192]	; (8016c7c <ip4_input+0x278>)
 8016bba:	683b      	ldr	r3, [r7, #0]
 8016bbc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8016bbe:	4a2f      	ldr	r2, [pc, #188]	; (8016c7c <ip4_input+0x278>)
 8016bc0:	69fb      	ldr	r3, [r7, #28]
 8016bc2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8016bc4:	69fb      	ldr	r3, [r7, #28]
 8016bc6:	781b      	ldrb	r3, [r3, #0]
 8016bc8:	f003 030f 	and.w	r3, r3, #15
 8016bcc:	b2db      	uxtb	r3, r3
 8016bce:	009b      	lsls	r3, r3, #2
 8016bd0:	b2db      	uxtb	r3, r3
 8016bd2:	b29a      	uxth	r2, r3
 8016bd4:	4b29      	ldr	r3, [pc, #164]	; (8016c7c <ip4_input+0x278>)
 8016bd6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8016bd8:	8a7b      	ldrh	r3, [r7, #18]
 8016bda:	4619      	mov	r1, r3
 8016bdc:	6878      	ldr	r0, [r7, #4]
 8016bde:	f7f5 fd21 	bl	800c624 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8016be2:	69fb      	ldr	r3, [r7, #28]
 8016be4:	7a5b      	ldrb	r3, [r3, #9]
 8016be6:	2b06      	cmp	r3, #6
 8016be8:	d009      	beq.n	8016bfe <ip4_input+0x1fa>
 8016bea:	2b11      	cmp	r3, #17
 8016bec:	d002      	beq.n	8016bf4 <ip4_input+0x1f0>
 8016bee:	2b01      	cmp	r3, #1
 8016bf0:	d00a      	beq.n	8016c08 <ip4_input+0x204>
 8016bf2:	e00e      	b.n	8016c12 <ip4_input+0x20e>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8016bf4:	6839      	ldr	r1, [r7, #0]
 8016bf6:	6878      	ldr	r0, [r7, #4]
 8016bf8:	f7fc fb1e 	bl	8013238 <udp_input>
        break;
 8016bfc:	e026      	b.n	8016c4c <ip4_input+0x248>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8016bfe:	6839      	ldr	r1, [r7, #0]
 8016c00:	6878      	ldr	r0, [r7, #4]
 8016c02:	f7f7 fecd 	bl	800e9a0 <tcp_input>
        break;
 8016c06:	e021      	b.n	8016c4c <ip4_input+0x248>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8016c08:	6839      	ldr	r1, [r7, #0]
 8016c0a:	6878      	ldr	r0, [r7, #4]
 8016c0c:	f7ff fcd2 	bl	80165b4 <icmp_input>
        break;
 8016c10:	e01c      	b.n	8016c4c <ip4_input+0x248>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016c12:	4b1a      	ldr	r3, [pc, #104]	; (8016c7c <ip4_input+0x278>)
 8016c14:	695b      	ldr	r3, [r3, #20]
 8016c16:	69b9      	ldr	r1, [r7, #24]
 8016c18:	4618      	mov	r0, r3
 8016c1a:	f000 f90b 	bl	8016e34 <ip4_addr_isbroadcast_u32>
 8016c1e:	4603      	mov	r3, r0
 8016c20:	2b00      	cmp	r3, #0
 8016c22:	d10f      	bne.n	8016c44 <ip4_input+0x240>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016c24:	4b15      	ldr	r3, [pc, #84]	; (8016c7c <ip4_input+0x278>)
 8016c26:	695b      	ldr	r3, [r3, #20]
 8016c28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016c2c:	2be0      	cmp	r3, #224	; 0xe0
 8016c2e:	d009      	beq.n	8016c44 <ip4_input+0x240>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8016c30:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016c34:	4619      	mov	r1, r3
 8016c36:	6878      	ldr	r0, [r7, #4]
 8016c38:	f7f5 fd67 	bl	800c70a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016c3c:	2102      	movs	r1, #2
 8016c3e:	6878      	ldr	r0, [r7, #4]
 8016c40:	f7ff fdbc 	bl	80167bc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8016c44:	6878      	ldr	r0, [r7, #4]
 8016c46:	f7f5 fd73 	bl	800c730 <pbuf_free>
        break;
 8016c4a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8016c4c:	4b0b      	ldr	r3, [pc, #44]	; (8016c7c <ip4_input+0x278>)
 8016c4e:	2200      	movs	r2, #0
 8016c50:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8016c52:	4b0a      	ldr	r3, [pc, #40]	; (8016c7c <ip4_input+0x278>)
 8016c54:	2200      	movs	r2, #0
 8016c56:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8016c58:	4b08      	ldr	r3, [pc, #32]	; (8016c7c <ip4_input+0x278>)
 8016c5a:	2200      	movs	r2, #0
 8016c5c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8016c5e:	4b07      	ldr	r3, [pc, #28]	; (8016c7c <ip4_input+0x278>)
 8016c60:	2200      	movs	r2, #0
 8016c62:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8016c64:	4b05      	ldr	r3, [pc, #20]	; (8016c7c <ip4_input+0x278>)
 8016c66:	2200      	movs	r2, #0
 8016c68:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8016c6a:	4b04      	ldr	r3, [pc, #16]	; (8016c7c <ip4_input+0x278>)
 8016c6c:	2200      	movs	r2, #0
 8016c6e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8016c70:	2300      	movs	r3, #0
}
 8016c72:	4618      	mov	r0, r3
 8016c74:	3720      	adds	r7, #32
 8016c76:	46bd      	mov	sp, r7
 8016c78:	bd80      	pop	{r7, pc}
 8016c7a:	bf00      	nop
 8016c7c:	2000c3a4 	.word	0x2000c3a4
 8016c80:	2000fac8 	.word	0x2000fac8

08016c84 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8016c84:	b580      	push	{r7, lr}
 8016c86:	b08a      	sub	sp, #40	; 0x28
 8016c88:	af04      	add	r7, sp, #16
 8016c8a:	60f8      	str	r0, [r7, #12]
 8016c8c:	60b9      	str	r1, [r7, #8]
 8016c8e:	607a      	str	r2, [r7, #4]
 8016c90:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8016c92:	68bb      	ldr	r3, [r7, #8]
 8016c94:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	2b00      	cmp	r3, #0
 8016c9a:	d009      	beq.n	8016cb0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8016c9c:	68bb      	ldr	r3, [r7, #8]
 8016c9e:	2b00      	cmp	r3, #0
 8016ca0:	d003      	beq.n	8016caa <ip4_output_if+0x26>
 8016ca2:	68bb      	ldr	r3, [r7, #8]
 8016ca4:	681b      	ldr	r3, [r3, #0]
 8016ca6:	2b00      	cmp	r3, #0
 8016ca8:	d102      	bne.n	8016cb0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8016caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cac:	3304      	adds	r3, #4
 8016cae:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8016cb0:	78fa      	ldrb	r2, [r7, #3]
 8016cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cb4:	9302      	str	r3, [sp, #8]
 8016cb6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016cba:	9301      	str	r3, [sp, #4]
 8016cbc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016cc0:	9300      	str	r3, [sp, #0]
 8016cc2:	4613      	mov	r3, r2
 8016cc4:	687a      	ldr	r2, [r7, #4]
 8016cc6:	6979      	ldr	r1, [r7, #20]
 8016cc8:	68f8      	ldr	r0, [r7, #12]
 8016cca:	f000 f805 	bl	8016cd8 <ip4_output_if_src>
 8016cce:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8016cd0:	4618      	mov	r0, r3
 8016cd2:	3718      	adds	r7, #24
 8016cd4:	46bd      	mov	sp, r7
 8016cd6:	bd80      	pop	{r7, pc}

08016cd8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8016cd8:	b580      	push	{r7, lr}
 8016cda:	b088      	sub	sp, #32
 8016cdc:	af00      	add	r7, sp, #0
 8016cde:	60f8      	str	r0, [r7, #12]
 8016ce0:	60b9      	str	r1, [r7, #8]
 8016ce2:	607a      	str	r2, [r7, #4]
 8016ce4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8016ce6:	68fb      	ldr	r3, [r7, #12]
 8016ce8:	7b9b      	ldrb	r3, [r3, #14]
 8016cea:	2b01      	cmp	r3, #1
 8016cec:	d006      	beq.n	8016cfc <ip4_output_if_src+0x24>
 8016cee:	4b4b      	ldr	r3, [pc, #300]	; (8016e1c <ip4_output_if_src+0x144>)
 8016cf0:	f44f 7255 	mov.w	r2, #852	; 0x354
 8016cf4:	494a      	ldr	r1, [pc, #296]	; (8016e20 <ip4_output_if_src+0x148>)
 8016cf6:	484b      	ldr	r0, [pc, #300]	; (8016e24 <ip4_output_if_src+0x14c>)
 8016cf8:	f001 fa4a 	bl	8018190 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	2b00      	cmp	r3, #0
 8016d00:	d060      	beq.n	8016dc4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8016d02:	2314      	movs	r3, #20
 8016d04:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8016d06:	2114      	movs	r1, #20
 8016d08:	68f8      	ldr	r0, [r7, #12]
 8016d0a:	f7f5 fc7b 	bl	800c604 <pbuf_add_header>
 8016d0e:	4603      	mov	r3, r0
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	d002      	beq.n	8016d1a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016d14:	f06f 0301 	mvn.w	r3, #1
 8016d18:	e07c      	b.n	8016e14 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8016d1a:	68fb      	ldr	r3, [r7, #12]
 8016d1c:	685b      	ldr	r3, [r3, #4]
 8016d1e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8016d20:	68fb      	ldr	r3, [r7, #12]
 8016d22:	895b      	ldrh	r3, [r3, #10]
 8016d24:	2b13      	cmp	r3, #19
 8016d26:	d806      	bhi.n	8016d36 <ip4_output_if_src+0x5e>
 8016d28:	4b3c      	ldr	r3, [pc, #240]	; (8016e1c <ip4_output_if_src+0x144>)
 8016d2a:	f240 3289 	movw	r2, #905	; 0x389
 8016d2e:	493e      	ldr	r1, [pc, #248]	; (8016e28 <ip4_output_if_src+0x150>)
 8016d30:	483c      	ldr	r0, [pc, #240]	; (8016e24 <ip4_output_if_src+0x14c>)
 8016d32:	f001 fa2d 	bl	8018190 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8016d36:	69fb      	ldr	r3, [r7, #28]
 8016d38:	78fa      	ldrb	r2, [r7, #3]
 8016d3a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8016d3c:	69fb      	ldr	r3, [r7, #28]
 8016d3e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8016d42:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8016d44:	687b      	ldr	r3, [r7, #4]
 8016d46:	681a      	ldr	r2, [r3, #0]
 8016d48:	69fb      	ldr	r3, [r7, #28]
 8016d4a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016d4c:	8b7b      	ldrh	r3, [r7, #26]
 8016d4e:	089b      	lsrs	r3, r3, #2
 8016d50:	b29b      	uxth	r3, r3
 8016d52:	b2db      	uxtb	r3, r3
 8016d54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016d58:	b2da      	uxtb	r2, r3
 8016d5a:	69fb      	ldr	r3, [r7, #28]
 8016d5c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8016d5e:	69fb      	ldr	r3, [r7, #28]
 8016d60:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8016d64:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8016d66:	68fb      	ldr	r3, [r7, #12]
 8016d68:	891b      	ldrh	r3, [r3, #8]
 8016d6a:	4618      	mov	r0, r3
 8016d6c:	f7f4 f974 	bl	800b058 <lwip_htons>
 8016d70:	4603      	mov	r3, r0
 8016d72:	461a      	mov	r2, r3
 8016d74:	69fb      	ldr	r3, [r7, #28]
 8016d76:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8016d78:	69fb      	ldr	r3, [r7, #28]
 8016d7a:	2200      	movs	r2, #0
 8016d7c:	719a      	strb	r2, [r3, #6]
 8016d7e:	2200      	movs	r2, #0
 8016d80:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8016d82:	4b2a      	ldr	r3, [pc, #168]	; (8016e2c <ip4_output_if_src+0x154>)
 8016d84:	881b      	ldrh	r3, [r3, #0]
 8016d86:	4618      	mov	r0, r3
 8016d88:	f7f4 f966 	bl	800b058 <lwip_htons>
 8016d8c:	4603      	mov	r3, r0
 8016d8e:	461a      	mov	r2, r3
 8016d90:	69fb      	ldr	r3, [r7, #28]
 8016d92:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8016d94:	4b25      	ldr	r3, [pc, #148]	; (8016e2c <ip4_output_if_src+0x154>)
 8016d96:	881b      	ldrh	r3, [r3, #0]
 8016d98:	3301      	adds	r3, #1
 8016d9a:	b29a      	uxth	r2, r3
 8016d9c:	4b23      	ldr	r3, [pc, #140]	; (8016e2c <ip4_output_if_src+0x154>)
 8016d9e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8016da0:	68bb      	ldr	r3, [r7, #8]
 8016da2:	2b00      	cmp	r3, #0
 8016da4:	d104      	bne.n	8016db0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8016da6:	4b22      	ldr	r3, [pc, #136]	; (8016e30 <ip4_output_if_src+0x158>)
 8016da8:	681a      	ldr	r2, [r3, #0]
 8016daa:	69fb      	ldr	r3, [r7, #28]
 8016dac:	60da      	str	r2, [r3, #12]
 8016dae:	e003      	b.n	8016db8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8016db0:	68bb      	ldr	r3, [r7, #8]
 8016db2:	681a      	ldr	r2, [r3, #0]
 8016db4:	69fb      	ldr	r3, [r7, #28]
 8016db6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8016db8:	69fb      	ldr	r3, [r7, #28]
 8016dba:	2200      	movs	r2, #0
 8016dbc:	729a      	strb	r2, [r3, #10]
 8016dbe:	2200      	movs	r2, #0
 8016dc0:	72da      	strb	r2, [r3, #11]
 8016dc2:	e00f      	b.n	8016de4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8016dc4:	68fb      	ldr	r3, [r7, #12]
 8016dc6:	895b      	ldrh	r3, [r3, #10]
 8016dc8:	2b13      	cmp	r3, #19
 8016dca:	d802      	bhi.n	8016dd2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016dcc:	f06f 0301 	mvn.w	r3, #1
 8016dd0:	e020      	b.n	8016e14 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8016dd2:	68fb      	ldr	r3, [r7, #12]
 8016dd4:	685b      	ldr	r3, [r3, #4]
 8016dd6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8016dd8:	69fb      	ldr	r3, [r7, #28]
 8016dda:	691b      	ldr	r3, [r3, #16]
 8016ddc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8016dde:	f107 0314 	add.w	r3, r7, #20
 8016de2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8016de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016de6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016de8:	2b00      	cmp	r3, #0
 8016dea:	d00c      	beq.n	8016e06 <ip4_output_if_src+0x12e>
 8016dec:	68fb      	ldr	r3, [r7, #12]
 8016dee:	891a      	ldrh	r2, [r3, #8]
 8016df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016df2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016df4:	429a      	cmp	r2, r3
 8016df6:	d906      	bls.n	8016e06 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8016df8:	687a      	ldr	r2, [r7, #4]
 8016dfa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016dfc:	68f8      	ldr	r0, [r7, #12]
 8016dfe:	f000 fd4b 	bl	8017898 <ip4_frag>
 8016e02:	4603      	mov	r3, r0
 8016e04:	e006      	b.n	8016e14 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8016e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e08:	695b      	ldr	r3, [r3, #20]
 8016e0a:	687a      	ldr	r2, [r7, #4]
 8016e0c:	68f9      	ldr	r1, [r7, #12]
 8016e0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016e10:	4798      	blx	r3
 8016e12:	4603      	mov	r3, r0
}
 8016e14:	4618      	mov	r0, r3
 8016e16:	3720      	adds	r7, #32
 8016e18:	46bd      	mov	sp, r7
 8016e1a:	bd80      	pop	{r7, pc}
 8016e1c:	0801cd10 	.word	0x0801cd10
 8016e20:	0801cd44 	.word	0x0801cd44
 8016e24:	0801cd50 	.word	0x0801cd50
 8016e28:	0801cd78 	.word	0x0801cd78
 8016e2c:	20008d96 	.word	0x20008d96
 8016e30:	08028574 	.word	0x08028574

08016e34 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8016e34:	b480      	push	{r7}
 8016e36:	b085      	sub	sp, #20
 8016e38:	af00      	add	r7, sp, #0
 8016e3a:	6078      	str	r0, [r7, #4]
 8016e3c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8016e3e:	687b      	ldr	r3, [r7, #4]
 8016e40:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8016e42:	687b      	ldr	r3, [r7, #4]
 8016e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e48:	d002      	beq.n	8016e50 <ip4_addr_isbroadcast_u32+0x1c>
 8016e4a:	687b      	ldr	r3, [r7, #4]
 8016e4c:	2b00      	cmp	r3, #0
 8016e4e:	d101      	bne.n	8016e54 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8016e50:	2301      	movs	r3, #1
 8016e52:	e02a      	b.n	8016eaa <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8016e54:	683b      	ldr	r3, [r7, #0]
 8016e56:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016e5a:	f003 0302 	and.w	r3, r3, #2
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	d101      	bne.n	8016e66 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8016e62:	2300      	movs	r3, #0
 8016e64:	e021      	b.n	8016eaa <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8016e66:	683b      	ldr	r3, [r7, #0]
 8016e68:	3304      	adds	r3, #4
 8016e6a:	681b      	ldr	r3, [r3, #0]
 8016e6c:	687a      	ldr	r2, [r7, #4]
 8016e6e:	429a      	cmp	r2, r3
 8016e70:	d101      	bne.n	8016e76 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8016e72:	2300      	movs	r3, #0
 8016e74:	e019      	b.n	8016eaa <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8016e76:	68fa      	ldr	r2, [r7, #12]
 8016e78:	683b      	ldr	r3, [r7, #0]
 8016e7a:	3304      	adds	r3, #4
 8016e7c:	681b      	ldr	r3, [r3, #0]
 8016e7e:	405a      	eors	r2, r3
 8016e80:	683b      	ldr	r3, [r7, #0]
 8016e82:	3308      	adds	r3, #8
 8016e84:	681b      	ldr	r3, [r3, #0]
 8016e86:	4013      	ands	r3, r2
 8016e88:	2b00      	cmp	r3, #0
 8016e8a:	d10d      	bne.n	8016ea8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016e8c:	683b      	ldr	r3, [r7, #0]
 8016e8e:	3308      	adds	r3, #8
 8016e90:	681b      	ldr	r3, [r3, #0]
 8016e92:	43da      	mvns	r2, r3
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8016e98:	683b      	ldr	r3, [r7, #0]
 8016e9a:	3308      	adds	r3, #8
 8016e9c:	681b      	ldr	r3, [r3, #0]
 8016e9e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016ea0:	429a      	cmp	r2, r3
 8016ea2:	d101      	bne.n	8016ea8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8016ea4:	2301      	movs	r3, #1
 8016ea6:	e000      	b.n	8016eaa <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8016ea8:	2300      	movs	r3, #0
  }
}
 8016eaa:	4618      	mov	r0, r3
 8016eac:	3714      	adds	r7, #20
 8016eae:	46bd      	mov	sp, r7
 8016eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eb4:	4770      	bx	lr
	...

08016eb8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8016eb8:	b580      	push	{r7, lr}
 8016eba:	b084      	sub	sp, #16
 8016ebc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8016ebe:	2300      	movs	r3, #0
 8016ec0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8016ec2:	4b12      	ldr	r3, [pc, #72]	; (8016f0c <ip_reass_tmr+0x54>)
 8016ec4:	681b      	ldr	r3, [r3, #0]
 8016ec6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8016ec8:	e018      	b.n	8016efc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8016eca:	68fb      	ldr	r3, [r7, #12]
 8016ecc:	7fdb      	ldrb	r3, [r3, #31]
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	d00b      	beq.n	8016eea <ip_reass_tmr+0x32>
      r->timer--;
 8016ed2:	68fb      	ldr	r3, [r7, #12]
 8016ed4:	7fdb      	ldrb	r3, [r3, #31]
 8016ed6:	3b01      	subs	r3, #1
 8016ed8:	b2da      	uxtb	r2, r3
 8016eda:	68fb      	ldr	r3, [r7, #12]
 8016edc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8016ede:	68fb      	ldr	r3, [r7, #12]
 8016ee0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8016ee2:	68fb      	ldr	r3, [r7, #12]
 8016ee4:	681b      	ldr	r3, [r3, #0]
 8016ee6:	60fb      	str	r3, [r7, #12]
 8016ee8:	e008      	b.n	8016efc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8016eea:	68fb      	ldr	r3, [r7, #12]
 8016eec:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8016eee:	68fb      	ldr	r3, [r7, #12]
 8016ef0:	681b      	ldr	r3, [r3, #0]
 8016ef2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8016ef4:	68b9      	ldr	r1, [r7, #8]
 8016ef6:	6878      	ldr	r0, [r7, #4]
 8016ef8:	f000 f80a 	bl	8016f10 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8016efc:	68fb      	ldr	r3, [r7, #12]
 8016efe:	2b00      	cmp	r3, #0
 8016f00:	d1e3      	bne.n	8016eca <ip_reass_tmr+0x12>
    }
  }
}
 8016f02:	bf00      	nop
 8016f04:	3710      	adds	r7, #16
 8016f06:	46bd      	mov	sp, r7
 8016f08:	bd80      	pop	{r7, pc}
 8016f0a:	bf00      	nop
 8016f0c:	20008d98 	.word	0x20008d98

08016f10 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016f10:	b580      	push	{r7, lr}
 8016f12:	b088      	sub	sp, #32
 8016f14:	af00      	add	r7, sp, #0
 8016f16:	6078      	str	r0, [r7, #4]
 8016f18:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8016f1a:	2300      	movs	r3, #0
 8016f1c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8016f1e:	683a      	ldr	r2, [r7, #0]
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	429a      	cmp	r2, r3
 8016f24:	d105      	bne.n	8016f32 <ip_reass_free_complete_datagram+0x22>
 8016f26:	4b45      	ldr	r3, [pc, #276]	; (801703c <ip_reass_free_complete_datagram+0x12c>)
 8016f28:	22ab      	movs	r2, #171	; 0xab
 8016f2a:	4945      	ldr	r1, [pc, #276]	; (8017040 <ip_reass_free_complete_datagram+0x130>)
 8016f2c:	4845      	ldr	r0, [pc, #276]	; (8017044 <ip_reass_free_complete_datagram+0x134>)
 8016f2e:	f001 f92f 	bl	8018190 <iprintf>
  if (prev != NULL) {
 8016f32:	683b      	ldr	r3, [r7, #0]
 8016f34:	2b00      	cmp	r3, #0
 8016f36:	d00a      	beq.n	8016f4e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8016f38:	683b      	ldr	r3, [r7, #0]
 8016f3a:	681b      	ldr	r3, [r3, #0]
 8016f3c:	687a      	ldr	r2, [r7, #4]
 8016f3e:	429a      	cmp	r2, r3
 8016f40:	d005      	beq.n	8016f4e <ip_reass_free_complete_datagram+0x3e>
 8016f42:	4b3e      	ldr	r3, [pc, #248]	; (801703c <ip_reass_free_complete_datagram+0x12c>)
 8016f44:	22ad      	movs	r2, #173	; 0xad
 8016f46:	4940      	ldr	r1, [pc, #256]	; (8017048 <ip_reass_free_complete_datagram+0x138>)
 8016f48:	483e      	ldr	r0, [pc, #248]	; (8017044 <ip_reass_free_complete_datagram+0x134>)
 8016f4a:	f001 f921 	bl	8018190 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8016f4e:	687b      	ldr	r3, [r7, #4]
 8016f50:	685b      	ldr	r3, [r3, #4]
 8016f52:	685b      	ldr	r3, [r3, #4]
 8016f54:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8016f56:	697b      	ldr	r3, [r7, #20]
 8016f58:	889b      	ldrh	r3, [r3, #4]
 8016f5a:	b29b      	uxth	r3, r3
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	d12a      	bne.n	8016fb6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	685b      	ldr	r3, [r3, #4]
 8016f64:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8016f66:	697b      	ldr	r3, [r7, #20]
 8016f68:	681a      	ldr	r2, [r3, #0]
 8016f6a:	687b      	ldr	r3, [r7, #4]
 8016f6c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8016f6e:	69bb      	ldr	r3, [r7, #24]
 8016f70:	6858      	ldr	r0, [r3, #4]
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	3308      	adds	r3, #8
 8016f76:	2214      	movs	r2, #20
 8016f78:	4619      	mov	r1, r3
 8016f7a:	f001 f8dc 	bl	8018136 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8016f7e:	2101      	movs	r1, #1
 8016f80:	69b8      	ldr	r0, [r7, #24]
 8016f82:	f7ff fc2b 	bl	80167dc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8016f86:	69b8      	ldr	r0, [r7, #24]
 8016f88:	f7f5 fc60 	bl	800c84c <pbuf_clen>
 8016f8c:	4603      	mov	r3, r0
 8016f8e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016f90:	8bfa      	ldrh	r2, [r7, #30]
 8016f92:	8a7b      	ldrh	r3, [r7, #18]
 8016f94:	4413      	add	r3, r2
 8016f96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016f9a:	db05      	blt.n	8016fa8 <ip_reass_free_complete_datagram+0x98>
 8016f9c:	4b27      	ldr	r3, [pc, #156]	; (801703c <ip_reass_free_complete_datagram+0x12c>)
 8016f9e:	22bc      	movs	r2, #188	; 0xbc
 8016fa0:	492a      	ldr	r1, [pc, #168]	; (801704c <ip_reass_free_complete_datagram+0x13c>)
 8016fa2:	4828      	ldr	r0, [pc, #160]	; (8017044 <ip_reass_free_complete_datagram+0x134>)
 8016fa4:	f001 f8f4 	bl	8018190 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016fa8:	8bfa      	ldrh	r2, [r7, #30]
 8016faa:	8a7b      	ldrh	r3, [r7, #18]
 8016fac:	4413      	add	r3, r2
 8016fae:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8016fb0:	69b8      	ldr	r0, [r7, #24]
 8016fb2:	f7f5 fbbd 	bl	800c730 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	685b      	ldr	r3, [r3, #4]
 8016fba:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8016fbc:	e01f      	b.n	8016ffe <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8016fbe:	69bb      	ldr	r3, [r7, #24]
 8016fc0:	685b      	ldr	r3, [r3, #4]
 8016fc2:	617b      	str	r3, [r7, #20]
    pcur = p;
 8016fc4:	69bb      	ldr	r3, [r7, #24]
 8016fc6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8016fc8:	697b      	ldr	r3, [r7, #20]
 8016fca:	681b      	ldr	r3, [r3, #0]
 8016fcc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8016fce:	68f8      	ldr	r0, [r7, #12]
 8016fd0:	f7f5 fc3c 	bl	800c84c <pbuf_clen>
 8016fd4:	4603      	mov	r3, r0
 8016fd6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016fd8:	8bfa      	ldrh	r2, [r7, #30]
 8016fda:	8a7b      	ldrh	r3, [r7, #18]
 8016fdc:	4413      	add	r3, r2
 8016fde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016fe2:	db05      	blt.n	8016ff0 <ip_reass_free_complete_datagram+0xe0>
 8016fe4:	4b15      	ldr	r3, [pc, #84]	; (801703c <ip_reass_free_complete_datagram+0x12c>)
 8016fe6:	22cc      	movs	r2, #204	; 0xcc
 8016fe8:	4918      	ldr	r1, [pc, #96]	; (801704c <ip_reass_free_complete_datagram+0x13c>)
 8016fea:	4816      	ldr	r0, [pc, #88]	; (8017044 <ip_reass_free_complete_datagram+0x134>)
 8016fec:	f001 f8d0 	bl	8018190 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016ff0:	8bfa      	ldrh	r2, [r7, #30]
 8016ff2:	8a7b      	ldrh	r3, [r7, #18]
 8016ff4:	4413      	add	r3, r2
 8016ff6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8016ff8:	68f8      	ldr	r0, [r7, #12]
 8016ffa:	f7f5 fb99 	bl	800c730 <pbuf_free>
  while (p != NULL) {
 8016ffe:	69bb      	ldr	r3, [r7, #24]
 8017000:	2b00      	cmp	r3, #0
 8017002:	d1dc      	bne.n	8016fbe <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8017004:	6839      	ldr	r1, [r7, #0]
 8017006:	6878      	ldr	r0, [r7, #4]
 8017008:	f000 f8c2 	bl	8017190 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801700c:	4b10      	ldr	r3, [pc, #64]	; (8017050 <ip_reass_free_complete_datagram+0x140>)
 801700e:	881b      	ldrh	r3, [r3, #0]
 8017010:	8bfa      	ldrh	r2, [r7, #30]
 8017012:	429a      	cmp	r2, r3
 8017014:	d905      	bls.n	8017022 <ip_reass_free_complete_datagram+0x112>
 8017016:	4b09      	ldr	r3, [pc, #36]	; (801703c <ip_reass_free_complete_datagram+0x12c>)
 8017018:	22d2      	movs	r2, #210	; 0xd2
 801701a:	490e      	ldr	r1, [pc, #56]	; (8017054 <ip_reass_free_complete_datagram+0x144>)
 801701c:	4809      	ldr	r0, [pc, #36]	; (8017044 <ip_reass_free_complete_datagram+0x134>)
 801701e:	f001 f8b7 	bl	8018190 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8017022:	4b0b      	ldr	r3, [pc, #44]	; (8017050 <ip_reass_free_complete_datagram+0x140>)
 8017024:	881a      	ldrh	r2, [r3, #0]
 8017026:	8bfb      	ldrh	r3, [r7, #30]
 8017028:	1ad3      	subs	r3, r2, r3
 801702a:	b29a      	uxth	r2, r3
 801702c:	4b08      	ldr	r3, [pc, #32]	; (8017050 <ip_reass_free_complete_datagram+0x140>)
 801702e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8017030:	8bfb      	ldrh	r3, [r7, #30]
}
 8017032:	4618      	mov	r0, r3
 8017034:	3720      	adds	r7, #32
 8017036:	46bd      	mov	sp, r7
 8017038:	bd80      	pop	{r7, pc}
 801703a:	bf00      	nop
 801703c:	0801cda8 	.word	0x0801cda8
 8017040:	0801cde4 	.word	0x0801cde4
 8017044:	0801cdf0 	.word	0x0801cdf0
 8017048:	0801ce18 	.word	0x0801ce18
 801704c:	0801ce2c 	.word	0x0801ce2c
 8017050:	20008d9c 	.word	0x20008d9c
 8017054:	0801ce4c 	.word	0x0801ce4c

08017058 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8017058:	b580      	push	{r7, lr}
 801705a:	b08a      	sub	sp, #40	; 0x28
 801705c:	af00      	add	r7, sp, #0
 801705e:	6078      	str	r0, [r7, #4]
 8017060:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8017062:	2300      	movs	r3, #0
 8017064:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8017066:	2300      	movs	r3, #0
 8017068:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801706a:	2300      	movs	r3, #0
 801706c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801706e:	2300      	movs	r3, #0
 8017070:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8017072:	2300      	movs	r3, #0
 8017074:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8017076:	4b28      	ldr	r3, [pc, #160]	; (8017118 <ip_reass_remove_oldest_datagram+0xc0>)
 8017078:	681b      	ldr	r3, [r3, #0]
 801707a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801707c:	e030      	b.n	80170e0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801707e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017080:	695a      	ldr	r2, [r3, #20]
 8017082:	687b      	ldr	r3, [r7, #4]
 8017084:	68db      	ldr	r3, [r3, #12]
 8017086:	429a      	cmp	r2, r3
 8017088:	d10c      	bne.n	80170a4 <ip_reass_remove_oldest_datagram+0x4c>
 801708a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801708c:	699a      	ldr	r2, [r3, #24]
 801708e:	687b      	ldr	r3, [r7, #4]
 8017090:	691b      	ldr	r3, [r3, #16]
 8017092:	429a      	cmp	r2, r3
 8017094:	d106      	bne.n	80170a4 <ip_reass_remove_oldest_datagram+0x4c>
 8017096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017098:	899a      	ldrh	r2, [r3, #12]
 801709a:	687b      	ldr	r3, [r7, #4]
 801709c:	889b      	ldrh	r3, [r3, #4]
 801709e:	b29b      	uxth	r3, r3
 80170a0:	429a      	cmp	r2, r3
 80170a2:	d014      	beq.n	80170ce <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80170a4:	693b      	ldr	r3, [r7, #16]
 80170a6:	3301      	adds	r3, #1
 80170a8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80170aa:	6a3b      	ldr	r3, [r7, #32]
 80170ac:	2b00      	cmp	r3, #0
 80170ae:	d104      	bne.n	80170ba <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80170b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170b2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80170b4:	69fb      	ldr	r3, [r7, #28]
 80170b6:	61bb      	str	r3, [r7, #24]
 80170b8:	e009      	b.n	80170ce <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80170ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170bc:	7fda      	ldrb	r2, [r3, #31]
 80170be:	6a3b      	ldr	r3, [r7, #32]
 80170c0:	7fdb      	ldrb	r3, [r3, #31]
 80170c2:	429a      	cmp	r2, r3
 80170c4:	d803      	bhi.n	80170ce <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80170c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170c8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80170ca:	69fb      	ldr	r3, [r7, #28]
 80170cc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80170ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170d0:	681b      	ldr	r3, [r3, #0]
 80170d2:	2b00      	cmp	r3, #0
 80170d4:	d001      	beq.n	80170da <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80170d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170d8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80170da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170dc:	681b      	ldr	r3, [r3, #0]
 80170de:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80170e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170e2:	2b00      	cmp	r3, #0
 80170e4:	d1cb      	bne.n	801707e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80170e6:	6a3b      	ldr	r3, [r7, #32]
 80170e8:	2b00      	cmp	r3, #0
 80170ea:	d008      	beq.n	80170fe <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80170ec:	69b9      	ldr	r1, [r7, #24]
 80170ee:	6a38      	ldr	r0, [r7, #32]
 80170f0:	f7ff ff0e 	bl	8016f10 <ip_reass_free_complete_datagram>
 80170f4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80170f6:	697a      	ldr	r2, [r7, #20]
 80170f8:	68fb      	ldr	r3, [r7, #12]
 80170fa:	4413      	add	r3, r2
 80170fc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80170fe:	697a      	ldr	r2, [r7, #20]
 8017100:	683b      	ldr	r3, [r7, #0]
 8017102:	429a      	cmp	r2, r3
 8017104:	da02      	bge.n	801710c <ip_reass_remove_oldest_datagram+0xb4>
 8017106:	693b      	ldr	r3, [r7, #16]
 8017108:	2b01      	cmp	r3, #1
 801710a:	dcac      	bgt.n	8017066 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801710c:	697b      	ldr	r3, [r7, #20]
}
 801710e:	4618      	mov	r0, r3
 8017110:	3728      	adds	r7, #40	; 0x28
 8017112:	46bd      	mov	sp, r7
 8017114:	bd80      	pop	{r7, pc}
 8017116:	bf00      	nop
 8017118:	20008d98 	.word	0x20008d98

0801711c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801711c:	b580      	push	{r7, lr}
 801711e:	b084      	sub	sp, #16
 8017120:	af00      	add	r7, sp, #0
 8017122:	6078      	str	r0, [r7, #4]
 8017124:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017126:	2004      	movs	r0, #4
 8017128:	f7f4 fc82 	bl	800ba30 <memp_malloc>
 801712c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801712e:	68fb      	ldr	r3, [r7, #12]
 8017130:	2b00      	cmp	r3, #0
 8017132:	d110      	bne.n	8017156 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8017134:	6839      	ldr	r1, [r7, #0]
 8017136:	6878      	ldr	r0, [r7, #4]
 8017138:	f7ff ff8e 	bl	8017058 <ip_reass_remove_oldest_datagram>
 801713c:	4602      	mov	r2, r0
 801713e:	683b      	ldr	r3, [r7, #0]
 8017140:	4293      	cmp	r3, r2
 8017142:	dc03      	bgt.n	801714c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017144:	2004      	movs	r0, #4
 8017146:	f7f4 fc73 	bl	800ba30 <memp_malloc>
 801714a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801714c:	68fb      	ldr	r3, [r7, #12]
 801714e:	2b00      	cmp	r3, #0
 8017150:	d101      	bne.n	8017156 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8017152:	2300      	movs	r3, #0
 8017154:	e016      	b.n	8017184 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8017156:	2220      	movs	r2, #32
 8017158:	2100      	movs	r1, #0
 801715a:	68f8      	ldr	r0, [r7, #12]
 801715c:	f001 f80f 	bl	801817e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8017160:	68fb      	ldr	r3, [r7, #12]
 8017162:	220f      	movs	r2, #15
 8017164:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8017166:	4b09      	ldr	r3, [pc, #36]	; (801718c <ip_reass_enqueue_new_datagram+0x70>)
 8017168:	681a      	ldr	r2, [r3, #0]
 801716a:	68fb      	ldr	r3, [r7, #12]
 801716c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801716e:	4a07      	ldr	r2, [pc, #28]	; (801718c <ip_reass_enqueue_new_datagram+0x70>)
 8017170:	68fb      	ldr	r3, [r7, #12]
 8017172:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8017174:	68fb      	ldr	r3, [r7, #12]
 8017176:	3308      	adds	r3, #8
 8017178:	2214      	movs	r2, #20
 801717a:	6879      	ldr	r1, [r7, #4]
 801717c:	4618      	mov	r0, r3
 801717e:	f000 ffda 	bl	8018136 <memcpy>
  return ipr;
 8017182:	68fb      	ldr	r3, [r7, #12]
}
 8017184:	4618      	mov	r0, r3
 8017186:	3710      	adds	r7, #16
 8017188:	46bd      	mov	sp, r7
 801718a:	bd80      	pop	{r7, pc}
 801718c:	20008d98 	.word	0x20008d98

08017190 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017190:	b580      	push	{r7, lr}
 8017192:	b082      	sub	sp, #8
 8017194:	af00      	add	r7, sp, #0
 8017196:	6078      	str	r0, [r7, #4]
 8017198:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801719a:	4b10      	ldr	r3, [pc, #64]	; (80171dc <ip_reass_dequeue_datagram+0x4c>)
 801719c:	681b      	ldr	r3, [r3, #0]
 801719e:	687a      	ldr	r2, [r7, #4]
 80171a0:	429a      	cmp	r2, r3
 80171a2:	d104      	bne.n	80171ae <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80171a4:	687b      	ldr	r3, [r7, #4]
 80171a6:	681b      	ldr	r3, [r3, #0]
 80171a8:	4a0c      	ldr	r2, [pc, #48]	; (80171dc <ip_reass_dequeue_datagram+0x4c>)
 80171aa:	6013      	str	r3, [r2, #0]
 80171ac:	e00d      	b.n	80171ca <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80171ae:	683b      	ldr	r3, [r7, #0]
 80171b0:	2b00      	cmp	r3, #0
 80171b2:	d106      	bne.n	80171c2 <ip_reass_dequeue_datagram+0x32>
 80171b4:	4b0a      	ldr	r3, [pc, #40]	; (80171e0 <ip_reass_dequeue_datagram+0x50>)
 80171b6:	f240 1245 	movw	r2, #325	; 0x145
 80171ba:	490a      	ldr	r1, [pc, #40]	; (80171e4 <ip_reass_dequeue_datagram+0x54>)
 80171bc:	480a      	ldr	r0, [pc, #40]	; (80171e8 <ip_reass_dequeue_datagram+0x58>)
 80171be:	f000 ffe7 	bl	8018190 <iprintf>
    prev->next = ipr->next;
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	681a      	ldr	r2, [r3, #0]
 80171c6:	683b      	ldr	r3, [r7, #0]
 80171c8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80171ca:	6879      	ldr	r1, [r7, #4]
 80171cc:	2004      	movs	r0, #4
 80171ce:	f7f4 fc81 	bl	800bad4 <memp_free>
}
 80171d2:	bf00      	nop
 80171d4:	3708      	adds	r7, #8
 80171d6:	46bd      	mov	sp, r7
 80171d8:	bd80      	pop	{r7, pc}
 80171da:	bf00      	nop
 80171dc:	20008d98 	.word	0x20008d98
 80171e0:	0801cda8 	.word	0x0801cda8
 80171e4:	0801ce70 	.word	0x0801ce70
 80171e8:	0801cdf0 	.word	0x0801cdf0

080171ec <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80171ec:	b580      	push	{r7, lr}
 80171ee:	b08c      	sub	sp, #48	; 0x30
 80171f0:	af00      	add	r7, sp, #0
 80171f2:	60f8      	str	r0, [r7, #12]
 80171f4:	60b9      	str	r1, [r7, #8]
 80171f6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80171f8:	2300      	movs	r3, #0
 80171fa:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80171fc:	2301      	movs	r3, #1
 80171fe:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8017200:	68bb      	ldr	r3, [r7, #8]
 8017202:	685b      	ldr	r3, [r3, #4]
 8017204:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017206:	69fb      	ldr	r3, [r7, #28]
 8017208:	885b      	ldrh	r3, [r3, #2]
 801720a:	b29b      	uxth	r3, r3
 801720c:	4618      	mov	r0, r3
 801720e:	f7f3 ff23 	bl	800b058 <lwip_htons>
 8017212:	4603      	mov	r3, r0
 8017214:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8017216:	69fb      	ldr	r3, [r7, #28]
 8017218:	781b      	ldrb	r3, [r3, #0]
 801721a:	f003 030f 	and.w	r3, r3, #15
 801721e:	b2db      	uxtb	r3, r3
 8017220:	009b      	lsls	r3, r3, #2
 8017222:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8017224:	7e7b      	ldrb	r3, [r7, #25]
 8017226:	b29b      	uxth	r3, r3
 8017228:	8b7a      	ldrh	r2, [r7, #26]
 801722a:	429a      	cmp	r2, r3
 801722c:	d202      	bcs.n	8017234 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801722e:	f04f 33ff 	mov.w	r3, #4294967295
 8017232:	e135      	b.n	80174a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8017234:	7e7b      	ldrb	r3, [r7, #25]
 8017236:	b29b      	uxth	r3, r3
 8017238:	8b7a      	ldrh	r2, [r7, #26]
 801723a:	1ad3      	subs	r3, r2, r3
 801723c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801723e:	69fb      	ldr	r3, [r7, #28]
 8017240:	88db      	ldrh	r3, [r3, #6]
 8017242:	b29b      	uxth	r3, r3
 8017244:	4618      	mov	r0, r3
 8017246:	f7f3 ff07 	bl	800b058 <lwip_htons>
 801724a:	4603      	mov	r3, r0
 801724c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017250:	b29b      	uxth	r3, r3
 8017252:	00db      	lsls	r3, r3, #3
 8017254:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8017256:	68bb      	ldr	r3, [r7, #8]
 8017258:	685b      	ldr	r3, [r3, #4]
 801725a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801725c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801725e:	2200      	movs	r2, #0
 8017260:	701a      	strb	r2, [r3, #0]
 8017262:	2200      	movs	r2, #0
 8017264:	705a      	strb	r2, [r3, #1]
 8017266:	2200      	movs	r2, #0
 8017268:	709a      	strb	r2, [r3, #2]
 801726a:	2200      	movs	r2, #0
 801726c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801726e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017270:	8afa      	ldrh	r2, [r7, #22]
 8017272:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8017274:	8afa      	ldrh	r2, [r7, #22]
 8017276:	8b7b      	ldrh	r3, [r7, #26]
 8017278:	4413      	add	r3, r2
 801727a:	b29a      	uxth	r2, r3
 801727c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801727e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8017280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017282:	88db      	ldrh	r3, [r3, #6]
 8017284:	b29b      	uxth	r3, r3
 8017286:	8afa      	ldrh	r2, [r7, #22]
 8017288:	429a      	cmp	r2, r3
 801728a:	d902      	bls.n	8017292 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801728c:	f04f 33ff 	mov.w	r3, #4294967295
 8017290:	e106      	b.n	80174a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8017292:	68fb      	ldr	r3, [r7, #12]
 8017294:	685b      	ldr	r3, [r3, #4]
 8017296:	627b      	str	r3, [r7, #36]	; 0x24
 8017298:	e068      	b.n	801736c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801729a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801729c:	685b      	ldr	r3, [r3, #4]
 801729e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80172a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172a2:	889b      	ldrh	r3, [r3, #4]
 80172a4:	b29a      	uxth	r2, r3
 80172a6:	693b      	ldr	r3, [r7, #16]
 80172a8:	889b      	ldrh	r3, [r3, #4]
 80172aa:	b29b      	uxth	r3, r3
 80172ac:	429a      	cmp	r2, r3
 80172ae:	d235      	bcs.n	801731c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80172b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80172b4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80172b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172b8:	2b00      	cmp	r3, #0
 80172ba:	d020      	beq.n	80172fe <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80172bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172be:	889b      	ldrh	r3, [r3, #4]
 80172c0:	b29a      	uxth	r2, r3
 80172c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172c4:	88db      	ldrh	r3, [r3, #6]
 80172c6:	b29b      	uxth	r3, r3
 80172c8:	429a      	cmp	r2, r3
 80172ca:	d307      	bcc.n	80172dc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80172cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172ce:	88db      	ldrh	r3, [r3, #6]
 80172d0:	b29a      	uxth	r2, r3
 80172d2:	693b      	ldr	r3, [r7, #16]
 80172d4:	889b      	ldrh	r3, [r3, #4]
 80172d6:	b29b      	uxth	r3, r3
 80172d8:	429a      	cmp	r2, r3
 80172da:	d902      	bls.n	80172e2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80172dc:	f04f 33ff 	mov.w	r3, #4294967295
 80172e0:	e0de      	b.n	80174a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80172e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172e4:	68ba      	ldr	r2, [r7, #8]
 80172e6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80172e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172ea:	88db      	ldrh	r3, [r3, #6]
 80172ec:	b29a      	uxth	r2, r3
 80172ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172f0:	889b      	ldrh	r3, [r3, #4]
 80172f2:	b29b      	uxth	r3, r3
 80172f4:	429a      	cmp	r2, r3
 80172f6:	d03d      	beq.n	8017374 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80172f8:	2300      	movs	r3, #0
 80172fa:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80172fc:	e03a      	b.n	8017374 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80172fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017300:	88db      	ldrh	r3, [r3, #6]
 8017302:	b29a      	uxth	r2, r3
 8017304:	693b      	ldr	r3, [r7, #16]
 8017306:	889b      	ldrh	r3, [r3, #4]
 8017308:	b29b      	uxth	r3, r3
 801730a:	429a      	cmp	r2, r3
 801730c:	d902      	bls.n	8017314 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801730e:	f04f 33ff 	mov.w	r3, #4294967295
 8017312:	e0c5      	b.n	80174a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8017314:	68fb      	ldr	r3, [r7, #12]
 8017316:	68ba      	ldr	r2, [r7, #8]
 8017318:	605a      	str	r2, [r3, #4]
      break;
 801731a:	e02b      	b.n	8017374 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801731c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801731e:	889b      	ldrh	r3, [r3, #4]
 8017320:	b29a      	uxth	r2, r3
 8017322:	693b      	ldr	r3, [r7, #16]
 8017324:	889b      	ldrh	r3, [r3, #4]
 8017326:	b29b      	uxth	r3, r3
 8017328:	429a      	cmp	r2, r3
 801732a:	d102      	bne.n	8017332 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801732c:	f04f 33ff 	mov.w	r3, #4294967295
 8017330:	e0b6      	b.n	80174a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8017332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017334:	889b      	ldrh	r3, [r3, #4]
 8017336:	b29a      	uxth	r2, r3
 8017338:	693b      	ldr	r3, [r7, #16]
 801733a:	88db      	ldrh	r3, [r3, #6]
 801733c:	b29b      	uxth	r3, r3
 801733e:	429a      	cmp	r2, r3
 8017340:	d202      	bcs.n	8017348 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017342:	f04f 33ff 	mov.w	r3, #4294967295
 8017346:	e0ab      	b.n	80174a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8017348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801734a:	2b00      	cmp	r3, #0
 801734c:	d009      	beq.n	8017362 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801734e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017350:	88db      	ldrh	r3, [r3, #6]
 8017352:	b29a      	uxth	r2, r3
 8017354:	693b      	ldr	r3, [r7, #16]
 8017356:	889b      	ldrh	r3, [r3, #4]
 8017358:	b29b      	uxth	r3, r3
 801735a:	429a      	cmp	r2, r3
 801735c:	d001      	beq.n	8017362 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801735e:	2300      	movs	r3, #0
 8017360:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8017362:	693b      	ldr	r3, [r7, #16]
 8017364:	681b      	ldr	r3, [r3, #0]
 8017366:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8017368:	693b      	ldr	r3, [r7, #16]
 801736a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801736c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801736e:	2b00      	cmp	r3, #0
 8017370:	d193      	bne.n	801729a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8017372:	e000      	b.n	8017376 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8017374:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8017376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017378:	2b00      	cmp	r3, #0
 801737a:	d12d      	bne.n	80173d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801737c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801737e:	2b00      	cmp	r3, #0
 8017380:	d01c      	beq.n	80173bc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8017382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017384:	88db      	ldrh	r3, [r3, #6]
 8017386:	b29a      	uxth	r2, r3
 8017388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801738a:	889b      	ldrh	r3, [r3, #4]
 801738c:	b29b      	uxth	r3, r3
 801738e:	429a      	cmp	r2, r3
 8017390:	d906      	bls.n	80173a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8017392:	4b45      	ldr	r3, [pc, #276]	; (80174a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017394:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8017398:	4944      	ldr	r1, [pc, #272]	; (80174ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801739a:	4845      	ldr	r0, [pc, #276]	; (80174b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801739c:	f000 fef8 	bl	8018190 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80173a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173a2:	68ba      	ldr	r2, [r7, #8]
 80173a4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80173a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173a8:	88db      	ldrh	r3, [r3, #6]
 80173aa:	b29a      	uxth	r2, r3
 80173ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173ae:	889b      	ldrh	r3, [r3, #4]
 80173b0:	b29b      	uxth	r3, r3
 80173b2:	429a      	cmp	r2, r3
 80173b4:	d010      	beq.n	80173d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80173b6:	2300      	movs	r3, #0
 80173b8:	623b      	str	r3, [r7, #32]
 80173ba:	e00d      	b.n	80173d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80173bc:	68fb      	ldr	r3, [r7, #12]
 80173be:	685b      	ldr	r3, [r3, #4]
 80173c0:	2b00      	cmp	r3, #0
 80173c2:	d006      	beq.n	80173d2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80173c4:	4b38      	ldr	r3, [pc, #224]	; (80174a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80173c6:	f240 12bf 	movw	r2, #447	; 0x1bf
 80173ca:	493a      	ldr	r1, [pc, #232]	; (80174b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80173cc:	4838      	ldr	r0, [pc, #224]	; (80174b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80173ce:	f000 fedf 	bl	8018190 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80173d2:	68fb      	ldr	r3, [r7, #12]
 80173d4:	68ba      	ldr	r2, [r7, #8]
 80173d6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80173d8:	687b      	ldr	r3, [r7, #4]
 80173da:	2b00      	cmp	r3, #0
 80173dc:	d105      	bne.n	80173ea <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80173de:	68fb      	ldr	r3, [r7, #12]
 80173e0:	7f9b      	ldrb	r3, [r3, #30]
 80173e2:	f003 0301 	and.w	r3, r3, #1
 80173e6:	2b00      	cmp	r3, #0
 80173e8:	d059      	beq.n	801749e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80173ea:	6a3b      	ldr	r3, [r7, #32]
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	d04f      	beq.n	8017490 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80173f0:	68fb      	ldr	r3, [r7, #12]
 80173f2:	685b      	ldr	r3, [r3, #4]
 80173f4:	2b00      	cmp	r3, #0
 80173f6:	d006      	beq.n	8017406 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80173f8:	68fb      	ldr	r3, [r7, #12]
 80173fa:	685b      	ldr	r3, [r3, #4]
 80173fc:	685b      	ldr	r3, [r3, #4]
 80173fe:	889b      	ldrh	r3, [r3, #4]
 8017400:	b29b      	uxth	r3, r3
 8017402:	2b00      	cmp	r3, #0
 8017404:	d002      	beq.n	801740c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8017406:	2300      	movs	r3, #0
 8017408:	623b      	str	r3, [r7, #32]
 801740a:	e041      	b.n	8017490 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801740c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801740e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8017410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017412:	681b      	ldr	r3, [r3, #0]
 8017414:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017416:	e012      	b.n	801743e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8017418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801741a:	685b      	ldr	r3, [r3, #4]
 801741c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801741e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017420:	88db      	ldrh	r3, [r3, #6]
 8017422:	b29a      	uxth	r2, r3
 8017424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017426:	889b      	ldrh	r3, [r3, #4]
 8017428:	b29b      	uxth	r3, r3
 801742a:	429a      	cmp	r2, r3
 801742c:	d002      	beq.n	8017434 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801742e:	2300      	movs	r3, #0
 8017430:	623b      	str	r3, [r7, #32]
            break;
 8017432:	e007      	b.n	8017444 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8017434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017436:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8017438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801743a:	681b      	ldr	r3, [r3, #0]
 801743c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801743e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017440:	2b00      	cmp	r3, #0
 8017442:	d1e9      	bne.n	8017418 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8017444:	6a3b      	ldr	r3, [r7, #32]
 8017446:	2b00      	cmp	r3, #0
 8017448:	d022      	beq.n	8017490 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801744a:	68fb      	ldr	r3, [r7, #12]
 801744c:	685b      	ldr	r3, [r3, #4]
 801744e:	2b00      	cmp	r3, #0
 8017450:	d106      	bne.n	8017460 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8017452:	4b15      	ldr	r3, [pc, #84]	; (80174a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017454:	f240 12df 	movw	r2, #479	; 0x1df
 8017458:	4917      	ldr	r1, [pc, #92]	; (80174b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801745a:	4815      	ldr	r0, [pc, #84]	; (80174b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801745c:	f000 fe98 	bl	8018190 <iprintf>
          LWIP_ASSERT("sanity check",
 8017460:	68fb      	ldr	r3, [r7, #12]
 8017462:	685b      	ldr	r3, [r3, #4]
 8017464:	685b      	ldr	r3, [r3, #4]
 8017466:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017468:	429a      	cmp	r2, r3
 801746a:	d106      	bne.n	801747a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801746c:	4b0e      	ldr	r3, [pc, #56]	; (80174a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801746e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8017472:	4911      	ldr	r1, [pc, #68]	; (80174b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017474:	480e      	ldr	r0, [pc, #56]	; (80174b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017476:	f000 fe8b 	bl	8018190 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801747a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801747c:	681b      	ldr	r3, [r3, #0]
 801747e:	2b00      	cmp	r3, #0
 8017480:	d006      	beq.n	8017490 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8017482:	4b09      	ldr	r3, [pc, #36]	; (80174a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017484:	f240 12e3 	movw	r2, #483	; 0x1e3
 8017488:	490c      	ldr	r1, [pc, #48]	; (80174bc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801748a:	4809      	ldr	r0, [pc, #36]	; (80174b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801748c:	f000 fe80 	bl	8018190 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8017490:	6a3b      	ldr	r3, [r7, #32]
 8017492:	2b00      	cmp	r3, #0
 8017494:	bf14      	ite	ne
 8017496:	2301      	movne	r3, #1
 8017498:	2300      	moveq	r3, #0
 801749a:	b2db      	uxtb	r3, r3
 801749c:	e000      	b.n	80174a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801749e:	2300      	movs	r3, #0
}
 80174a0:	4618      	mov	r0, r3
 80174a2:	3730      	adds	r7, #48	; 0x30
 80174a4:	46bd      	mov	sp, r7
 80174a6:	bd80      	pop	{r7, pc}
 80174a8:	0801cda8 	.word	0x0801cda8
 80174ac:	0801ce8c 	.word	0x0801ce8c
 80174b0:	0801cdf0 	.word	0x0801cdf0
 80174b4:	0801ceac 	.word	0x0801ceac
 80174b8:	0801cee4 	.word	0x0801cee4
 80174bc:	0801cef4 	.word	0x0801cef4

080174c0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80174c0:	b580      	push	{r7, lr}
 80174c2:	b08e      	sub	sp, #56	; 0x38
 80174c4:	af00      	add	r7, sp, #0
 80174c6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80174c8:	687b      	ldr	r3, [r7, #4]
 80174ca:	685b      	ldr	r3, [r3, #4]
 80174cc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80174ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174d0:	781b      	ldrb	r3, [r3, #0]
 80174d2:	f003 030f 	and.w	r3, r3, #15
 80174d6:	b2db      	uxtb	r3, r3
 80174d8:	009b      	lsls	r3, r3, #2
 80174da:	b2db      	uxtb	r3, r3
 80174dc:	2b14      	cmp	r3, #20
 80174de:	f040 8167 	bne.w	80177b0 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80174e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174e4:	88db      	ldrh	r3, [r3, #6]
 80174e6:	b29b      	uxth	r3, r3
 80174e8:	4618      	mov	r0, r3
 80174ea:	f7f3 fdb5 	bl	800b058 <lwip_htons>
 80174ee:	4603      	mov	r3, r0
 80174f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80174f4:	b29b      	uxth	r3, r3
 80174f6:	00db      	lsls	r3, r3, #3
 80174f8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80174fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174fc:	885b      	ldrh	r3, [r3, #2]
 80174fe:	b29b      	uxth	r3, r3
 8017500:	4618      	mov	r0, r3
 8017502:	f7f3 fda9 	bl	800b058 <lwip_htons>
 8017506:	4603      	mov	r3, r0
 8017508:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801750a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801750c:	781b      	ldrb	r3, [r3, #0]
 801750e:	f003 030f 	and.w	r3, r3, #15
 8017512:	b2db      	uxtb	r3, r3
 8017514:	009b      	lsls	r3, r3, #2
 8017516:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801751a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801751e:	b29b      	uxth	r3, r3
 8017520:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017522:	429a      	cmp	r2, r3
 8017524:	f0c0 8146 	bcc.w	80177b4 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8017528:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801752c:	b29b      	uxth	r3, r3
 801752e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017530:	1ad3      	subs	r3, r2, r3
 8017532:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8017534:	6878      	ldr	r0, [r7, #4]
 8017536:	f7f5 f989 	bl	800c84c <pbuf_clen>
 801753a:	4603      	mov	r3, r0
 801753c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801753e:	4ba3      	ldr	r3, [pc, #652]	; (80177cc <ip4_reass+0x30c>)
 8017540:	881b      	ldrh	r3, [r3, #0]
 8017542:	461a      	mov	r2, r3
 8017544:	8c3b      	ldrh	r3, [r7, #32]
 8017546:	4413      	add	r3, r2
 8017548:	2b0a      	cmp	r3, #10
 801754a:	dd10      	ble.n	801756e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801754c:	8c3b      	ldrh	r3, [r7, #32]
 801754e:	4619      	mov	r1, r3
 8017550:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017552:	f7ff fd81 	bl	8017058 <ip_reass_remove_oldest_datagram>
 8017556:	4603      	mov	r3, r0
 8017558:	2b00      	cmp	r3, #0
 801755a:	f000 812d 	beq.w	80177b8 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801755e:	4b9b      	ldr	r3, [pc, #620]	; (80177cc <ip4_reass+0x30c>)
 8017560:	881b      	ldrh	r3, [r3, #0]
 8017562:	461a      	mov	r2, r3
 8017564:	8c3b      	ldrh	r3, [r7, #32]
 8017566:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017568:	2b0a      	cmp	r3, #10
 801756a:	f300 8125 	bgt.w	80177b8 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801756e:	4b98      	ldr	r3, [pc, #608]	; (80177d0 <ip4_reass+0x310>)
 8017570:	681b      	ldr	r3, [r3, #0]
 8017572:	633b      	str	r3, [r7, #48]	; 0x30
 8017574:	e015      	b.n	80175a2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8017576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017578:	695a      	ldr	r2, [r3, #20]
 801757a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801757c:	68db      	ldr	r3, [r3, #12]
 801757e:	429a      	cmp	r2, r3
 8017580:	d10c      	bne.n	801759c <ip4_reass+0xdc>
 8017582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017584:	699a      	ldr	r2, [r3, #24]
 8017586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017588:	691b      	ldr	r3, [r3, #16]
 801758a:	429a      	cmp	r2, r3
 801758c:	d106      	bne.n	801759c <ip4_reass+0xdc>
 801758e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017590:	899a      	ldrh	r2, [r3, #12]
 8017592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017594:	889b      	ldrh	r3, [r3, #4]
 8017596:	b29b      	uxth	r3, r3
 8017598:	429a      	cmp	r2, r3
 801759a:	d006      	beq.n	80175aa <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801759c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801759e:	681b      	ldr	r3, [r3, #0]
 80175a0:	633b      	str	r3, [r7, #48]	; 0x30
 80175a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175a4:	2b00      	cmp	r3, #0
 80175a6:	d1e6      	bne.n	8017576 <ip4_reass+0xb6>
 80175a8:	e000      	b.n	80175ac <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80175aa:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80175ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175ae:	2b00      	cmp	r3, #0
 80175b0:	d109      	bne.n	80175c6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80175b2:	8c3b      	ldrh	r3, [r7, #32]
 80175b4:	4619      	mov	r1, r3
 80175b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80175b8:	f7ff fdb0 	bl	801711c <ip_reass_enqueue_new_datagram>
 80175bc:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80175be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	d11c      	bne.n	80175fe <ip4_reass+0x13e>
      goto nullreturn;
 80175c4:	e0f9      	b.n	80177ba <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80175c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175c8:	88db      	ldrh	r3, [r3, #6]
 80175ca:	b29b      	uxth	r3, r3
 80175cc:	4618      	mov	r0, r3
 80175ce:	f7f3 fd43 	bl	800b058 <lwip_htons>
 80175d2:	4603      	mov	r3, r0
 80175d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80175d8:	2b00      	cmp	r3, #0
 80175da:	d110      	bne.n	80175fe <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80175dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175de:	89db      	ldrh	r3, [r3, #14]
 80175e0:	4618      	mov	r0, r3
 80175e2:	f7f3 fd39 	bl	800b058 <lwip_htons>
 80175e6:	4603      	mov	r3, r0
 80175e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80175ec:	2b00      	cmp	r3, #0
 80175ee:	d006      	beq.n	80175fe <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80175f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175f2:	3308      	adds	r3, #8
 80175f4:	2214      	movs	r2, #20
 80175f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80175f8:	4618      	mov	r0, r3
 80175fa:	f000 fd9c 	bl	8018136 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80175fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017600:	88db      	ldrh	r3, [r3, #6]
 8017602:	b29b      	uxth	r3, r3
 8017604:	f003 0320 	and.w	r3, r3, #32
 8017608:	2b00      	cmp	r3, #0
 801760a:	bf0c      	ite	eq
 801760c:	2301      	moveq	r3, #1
 801760e:	2300      	movne	r3, #0
 8017610:	b2db      	uxtb	r3, r3
 8017612:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8017614:	69fb      	ldr	r3, [r7, #28]
 8017616:	2b00      	cmp	r3, #0
 8017618:	d00e      	beq.n	8017638 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801761a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801761c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801761e:	4413      	add	r3, r2
 8017620:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8017622:	8b7a      	ldrh	r2, [r7, #26]
 8017624:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017626:	429a      	cmp	r2, r3
 8017628:	f0c0 80a0 	bcc.w	801776c <ip4_reass+0x2ac>
 801762c:	8b7b      	ldrh	r3, [r7, #26]
 801762e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8017632:	4293      	cmp	r3, r2
 8017634:	f200 809a 	bhi.w	801776c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8017638:	69fa      	ldr	r2, [r7, #28]
 801763a:	6879      	ldr	r1, [r7, #4]
 801763c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801763e:	f7ff fdd5 	bl	80171ec <ip_reass_chain_frag_into_datagram_and_validate>
 8017642:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8017644:	697b      	ldr	r3, [r7, #20]
 8017646:	f1b3 3fff 	cmp.w	r3, #4294967295
 801764a:	f000 8091 	beq.w	8017770 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801764e:	4b5f      	ldr	r3, [pc, #380]	; (80177cc <ip4_reass+0x30c>)
 8017650:	881a      	ldrh	r2, [r3, #0]
 8017652:	8c3b      	ldrh	r3, [r7, #32]
 8017654:	4413      	add	r3, r2
 8017656:	b29a      	uxth	r2, r3
 8017658:	4b5c      	ldr	r3, [pc, #368]	; (80177cc <ip4_reass+0x30c>)
 801765a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801765c:	69fb      	ldr	r3, [r7, #28]
 801765e:	2b00      	cmp	r3, #0
 8017660:	d00d      	beq.n	801767e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8017662:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017664:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017666:	4413      	add	r3, r2
 8017668:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801766a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801766c:	8a7a      	ldrh	r2, [r7, #18]
 801766e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8017670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017672:	7f9b      	ldrb	r3, [r3, #30]
 8017674:	f043 0301 	orr.w	r3, r3, #1
 8017678:	b2da      	uxtb	r2, r3
 801767a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801767c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801767e:	697b      	ldr	r3, [r7, #20]
 8017680:	2b01      	cmp	r3, #1
 8017682:	d171      	bne.n	8017768 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8017684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017686:	8b9b      	ldrh	r3, [r3, #28]
 8017688:	3314      	adds	r3, #20
 801768a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801768c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801768e:	685b      	ldr	r3, [r3, #4]
 8017690:	685b      	ldr	r3, [r3, #4]
 8017692:	681b      	ldr	r3, [r3, #0]
 8017694:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8017696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017698:	685b      	ldr	r3, [r3, #4]
 801769a:	685b      	ldr	r3, [r3, #4]
 801769c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801769e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176a0:	3308      	adds	r3, #8
 80176a2:	2214      	movs	r2, #20
 80176a4:	4619      	mov	r1, r3
 80176a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80176a8:	f000 fd45 	bl	8018136 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80176ac:	8a3b      	ldrh	r3, [r7, #16]
 80176ae:	4618      	mov	r0, r3
 80176b0:	f7f3 fcd2 	bl	800b058 <lwip_htons>
 80176b4:	4603      	mov	r3, r0
 80176b6:	461a      	mov	r2, r3
 80176b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176ba:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80176bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176be:	2200      	movs	r2, #0
 80176c0:	719a      	strb	r2, [r3, #6]
 80176c2:	2200      	movs	r2, #0
 80176c4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80176c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176c8:	2200      	movs	r2, #0
 80176ca:	729a      	strb	r2, [r3, #10]
 80176cc:	2200      	movs	r2, #0
 80176ce:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80176d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176d2:	685b      	ldr	r3, [r3, #4]
 80176d4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80176d6:	e00d      	b.n	80176f4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80176d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80176da:	685b      	ldr	r3, [r3, #4]
 80176dc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80176de:	2114      	movs	r1, #20
 80176e0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80176e2:	f7f4 ff9f 	bl	800c624 <pbuf_remove_header>
      pbuf_cat(p, r);
 80176e6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80176e8:	6878      	ldr	r0, [r7, #4]
 80176ea:	f7f5 f8ef 	bl	800c8cc <pbuf_cat>
      r = iprh->next_pbuf;
 80176ee:	68fb      	ldr	r3, [r7, #12]
 80176f0:	681b      	ldr	r3, [r3, #0]
 80176f2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80176f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80176f6:	2b00      	cmp	r3, #0
 80176f8:	d1ee      	bne.n	80176d8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80176fa:	4b35      	ldr	r3, [pc, #212]	; (80177d0 <ip4_reass+0x310>)
 80176fc:	681b      	ldr	r3, [r3, #0]
 80176fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017700:	429a      	cmp	r2, r3
 8017702:	d102      	bne.n	801770a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8017704:	2300      	movs	r3, #0
 8017706:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017708:	e010      	b.n	801772c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801770a:	4b31      	ldr	r3, [pc, #196]	; (80177d0 <ip4_reass+0x310>)
 801770c:	681b      	ldr	r3, [r3, #0]
 801770e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017710:	e007      	b.n	8017722 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8017712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017714:	681b      	ldr	r3, [r3, #0]
 8017716:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017718:	429a      	cmp	r2, r3
 801771a:	d006      	beq.n	801772a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801771c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801771e:	681b      	ldr	r3, [r3, #0]
 8017720:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017724:	2b00      	cmp	r3, #0
 8017726:	d1f4      	bne.n	8017712 <ip4_reass+0x252>
 8017728:	e000      	b.n	801772c <ip4_reass+0x26c>
          break;
 801772a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801772c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801772e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017730:	f7ff fd2e 	bl	8017190 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8017734:	6878      	ldr	r0, [r7, #4]
 8017736:	f7f5 f889 	bl	800c84c <pbuf_clen>
 801773a:	4603      	mov	r3, r0
 801773c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801773e:	4b23      	ldr	r3, [pc, #140]	; (80177cc <ip4_reass+0x30c>)
 8017740:	881b      	ldrh	r3, [r3, #0]
 8017742:	8c3a      	ldrh	r2, [r7, #32]
 8017744:	429a      	cmp	r2, r3
 8017746:	d906      	bls.n	8017756 <ip4_reass+0x296>
 8017748:	4b22      	ldr	r3, [pc, #136]	; (80177d4 <ip4_reass+0x314>)
 801774a:	f240 229b 	movw	r2, #667	; 0x29b
 801774e:	4922      	ldr	r1, [pc, #136]	; (80177d8 <ip4_reass+0x318>)
 8017750:	4822      	ldr	r0, [pc, #136]	; (80177dc <ip4_reass+0x31c>)
 8017752:	f000 fd1d 	bl	8018190 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8017756:	4b1d      	ldr	r3, [pc, #116]	; (80177cc <ip4_reass+0x30c>)
 8017758:	881a      	ldrh	r2, [r3, #0]
 801775a:	8c3b      	ldrh	r3, [r7, #32]
 801775c:	1ad3      	subs	r3, r2, r3
 801775e:	b29a      	uxth	r2, r3
 8017760:	4b1a      	ldr	r3, [pc, #104]	; (80177cc <ip4_reass+0x30c>)
 8017762:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	e02c      	b.n	80177c2 <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8017768:	2300      	movs	r3, #0
 801776a:	e02a      	b.n	80177c2 <ip4_reass+0x302>

nullreturn_ipr:
 801776c:	bf00      	nop
 801776e:	e000      	b.n	8017772 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8017770:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8017772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017774:	2b00      	cmp	r3, #0
 8017776:	d106      	bne.n	8017786 <ip4_reass+0x2c6>
 8017778:	4b16      	ldr	r3, [pc, #88]	; (80177d4 <ip4_reass+0x314>)
 801777a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801777e:	4918      	ldr	r1, [pc, #96]	; (80177e0 <ip4_reass+0x320>)
 8017780:	4816      	ldr	r0, [pc, #88]	; (80177dc <ip4_reass+0x31c>)
 8017782:	f000 fd05 	bl	8018190 <iprintf>
  if (ipr->p == NULL) {
 8017786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017788:	685b      	ldr	r3, [r3, #4]
 801778a:	2b00      	cmp	r3, #0
 801778c:	d114      	bne.n	80177b8 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801778e:	4b10      	ldr	r3, [pc, #64]	; (80177d0 <ip4_reass+0x310>)
 8017790:	681b      	ldr	r3, [r3, #0]
 8017792:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017794:	429a      	cmp	r2, r3
 8017796:	d006      	beq.n	80177a6 <ip4_reass+0x2e6>
 8017798:	4b0e      	ldr	r3, [pc, #56]	; (80177d4 <ip4_reass+0x314>)
 801779a:	f240 22ab 	movw	r2, #683	; 0x2ab
 801779e:	4911      	ldr	r1, [pc, #68]	; (80177e4 <ip4_reass+0x324>)
 80177a0:	480e      	ldr	r0, [pc, #56]	; (80177dc <ip4_reass+0x31c>)
 80177a2:	f000 fcf5 	bl	8018190 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80177a6:	2100      	movs	r1, #0
 80177a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80177aa:	f7ff fcf1 	bl	8017190 <ip_reass_dequeue_datagram>
 80177ae:	e004      	b.n	80177ba <ip4_reass+0x2fa>
    goto nullreturn;
 80177b0:	bf00      	nop
 80177b2:	e002      	b.n	80177ba <ip4_reass+0x2fa>
    goto nullreturn;
 80177b4:	bf00      	nop
 80177b6:	e000      	b.n	80177ba <ip4_reass+0x2fa>
  }

nullreturn:
 80177b8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80177ba:	6878      	ldr	r0, [r7, #4]
 80177bc:	f7f4 ffb8 	bl	800c730 <pbuf_free>
  return NULL;
 80177c0:	2300      	movs	r3, #0
}
 80177c2:	4618      	mov	r0, r3
 80177c4:	3738      	adds	r7, #56	; 0x38
 80177c6:	46bd      	mov	sp, r7
 80177c8:	bd80      	pop	{r7, pc}
 80177ca:	bf00      	nop
 80177cc:	20008d9c 	.word	0x20008d9c
 80177d0:	20008d98 	.word	0x20008d98
 80177d4:	0801cda8 	.word	0x0801cda8
 80177d8:	0801cf18 	.word	0x0801cf18
 80177dc:	0801cdf0 	.word	0x0801cdf0
 80177e0:	0801cf34 	.word	0x0801cf34
 80177e4:	0801cf40 	.word	0x0801cf40

080177e8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80177e8:	b580      	push	{r7, lr}
 80177ea:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80177ec:	2005      	movs	r0, #5
 80177ee:	f7f4 f91f 	bl	800ba30 <memp_malloc>
 80177f2:	4603      	mov	r3, r0
}
 80177f4:	4618      	mov	r0, r3
 80177f6:	bd80      	pop	{r7, pc}

080177f8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80177f8:	b580      	push	{r7, lr}
 80177fa:	b082      	sub	sp, #8
 80177fc:	af00      	add	r7, sp, #0
 80177fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8017800:	687b      	ldr	r3, [r7, #4]
 8017802:	2b00      	cmp	r3, #0
 8017804:	d106      	bne.n	8017814 <ip_frag_free_pbuf_custom_ref+0x1c>
 8017806:	4b07      	ldr	r3, [pc, #28]	; (8017824 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8017808:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801780c:	4906      	ldr	r1, [pc, #24]	; (8017828 <ip_frag_free_pbuf_custom_ref+0x30>)
 801780e:	4807      	ldr	r0, [pc, #28]	; (801782c <ip_frag_free_pbuf_custom_ref+0x34>)
 8017810:	f000 fcbe 	bl	8018190 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8017814:	6879      	ldr	r1, [r7, #4]
 8017816:	2005      	movs	r0, #5
 8017818:	f7f4 f95c 	bl	800bad4 <memp_free>
}
 801781c:	bf00      	nop
 801781e:	3708      	adds	r7, #8
 8017820:	46bd      	mov	sp, r7
 8017822:	bd80      	pop	{r7, pc}
 8017824:	0801cda8 	.word	0x0801cda8
 8017828:	0801cf60 	.word	0x0801cf60
 801782c:	0801cdf0 	.word	0x0801cdf0

08017830 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8017830:	b580      	push	{r7, lr}
 8017832:	b084      	sub	sp, #16
 8017834:	af00      	add	r7, sp, #0
 8017836:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801783c:	68fb      	ldr	r3, [r7, #12]
 801783e:	2b00      	cmp	r3, #0
 8017840:	d106      	bne.n	8017850 <ipfrag_free_pbuf_custom+0x20>
 8017842:	4b11      	ldr	r3, [pc, #68]	; (8017888 <ipfrag_free_pbuf_custom+0x58>)
 8017844:	f240 22ce 	movw	r2, #718	; 0x2ce
 8017848:	4910      	ldr	r1, [pc, #64]	; (801788c <ipfrag_free_pbuf_custom+0x5c>)
 801784a:	4811      	ldr	r0, [pc, #68]	; (8017890 <ipfrag_free_pbuf_custom+0x60>)
 801784c:	f000 fca0 	bl	8018190 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8017850:	68fa      	ldr	r2, [r7, #12]
 8017852:	687b      	ldr	r3, [r7, #4]
 8017854:	429a      	cmp	r2, r3
 8017856:	d006      	beq.n	8017866 <ipfrag_free_pbuf_custom+0x36>
 8017858:	4b0b      	ldr	r3, [pc, #44]	; (8017888 <ipfrag_free_pbuf_custom+0x58>)
 801785a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801785e:	490d      	ldr	r1, [pc, #52]	; (8017894 <ipfrag_free_pbuf_custom+0x64>)
 8017860:	480b      	ldr	r0, [pc, #44]	; (8017890 <ipfrag_free_pbuf_custom+0x60>)
 8017862:	f000 fc95 	bl	8018190 <iprintf>
  if (pcr->original != NULL) {
 8017866:	68fb      	ldr	r3, [r7, #12]
 8017868:	695b      	ldr	r3, [r3, #20]
 801786a:	2b00      	cmp	r3, #0
 801786c:	d004      	beq.n	8017878 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801786e:	68fb      	ldr	r3, [r7, #12]
 8017870:	695b      	ldr	r3, [r3, #20]
 8017872:	4618      	mov	r0, r3
 8017874:	f7f4 ff5c 	bl	800c730 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8017878:	68f8      	ldr	r0, [r7, #12]
 801787a:	f7ff ffbd 	bl	80177f8 <ip_frag_free_pbuf_custom_ref>
}
 801787e:	bf00      	nop
 8017880:	3710      	adds	r7, #16
 8017882:	46bd      	mov	sp, r7
 8017884:	bd80      	pop	{r7, pc}
 8017886:	bf00      	nop
 8017888:	0801cda8 	.word	0x0801cda8
 801788c:	0801cf6c 	.word	0x0801cf6c
 8017890:	0801cdf0 	.word	0x0801cdf0
 8017894:	0801cf78 	.word	0x0801cf78

08017898 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8017898:	b580      	push	{r7, lr}
 801789a:	b094      	sub	sp, #80	; 0x50
 801789c:	af02      	add	r7, sp, #8
 801789e:	60f8      	str	r0, [r7, #12]
 80178a0:	60b9      	str	r1, [r7, #8]
 80178a2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80178a4:	2300      	movs	r3, #0
 80178a6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80178aa:	68bb      	ldr	r3, [r7, #8]
 80178ac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80178ae:	3b14      	subs	r3, #20
 80178b0:	2b00      	cmp	r3, #0
 80178b2:	da00      	bge.n	80178b6 <ip4_frag+0x1e>
 80178b4:	3307      	adds	r3, #7
 80178b6:	10db      	asrs	r3, r3, #3
 80178b8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80178ba:	2314      	movs	r3, #20
 80178bc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80178be:	68fb      	ldr	r3, [r7, #12]
 80178c0:	685b      	ldr	r3, [r3, #4]
 80178c2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80178c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80178c6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80178c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178ca:	781b      	ldrb	r3, [r3, #0]
 80178cc:	f003 030f 	and.w	r3, r3, #15
 80178d0:	b2db      	uxtb	r3, r3
 80178d2:	009b      	lsls	r3, r3, #2
 80178d4:	b2db      	uxtb	r3, r3
 80178d6:	2b14      	cmp	r3, #20
 80178d8:	d002      	beq.n	80178e0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80178da:	f06f 0305 	mvn.w	r3, #5
 80178de:	e10f      	b.n	8017b00 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80178e0:	68fb      	ldr	r3, [r7, #12]
 80178e2:	895b      	ldrh	r3, [r3, #10]
 80178e4:	2b13      	cmp	r3, #19
 80178e6:	d809      	bhi.n	80178fc <ip4_frag+0x64>
 80178e8:	4b87      	ldr	r3, [pc, #540]	; (8017b08 <ip4_frag+0x270>)
 80178ea:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80178ee:	4987      	ldr	r1, [pc, #540]	; (8017b0c <ip4_frag+0x274>)
 80178f0:	4887      	ldr	r0, [pc, #540]	; (8017b10 <ip4_frag+0x278>)
 80178f2:	f000 fc4d 	bl	8018190 <iprintf>
 80178f6:	f06f 0305 	mvn.w	r3, #5
 80178fa:	e101      	b.n	8017b00 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80178fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178fe:	88db      	ldrh	r3, [r3, #6]
 8017900:	b29b      	uxth	r3, r3
 8017902:	4618      	mov	r0, r3
 8017904:	f7f3 fba8 	bl	800b058 <lwip_htons>
 8017908:	4603      	mov	r3, r0
 801790a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801790c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801790e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017912:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8017916:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017918:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801791c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801791e:	68fb      	ldr	r3, [r7, #12]
 8017920:	891b      	ldrh	r3, [r3, #8]
 8017922:	3b14      	subs	r3, #20
 8017924:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8017928:	e0e0      	b.n	8017aec <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801792a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801792c:	00db      	lsls	r3, r3, #3
 801792e:	b29b      	uxth	r3, r3
 8017930:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017934:	4293      	cmp	r3, r2
 8017936:	bf28      	it	cs
 8017938:	4613      	movcs	r3, r2
 801793a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801793c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017940:	2114      	movs	r1, #20
 8017942:	200e      	movs	r0, #14
 8017944:	f7f4 fc14 	bl	800c170 <pbuf_alloc>
 8017948:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801794a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801794c:	2b00      	cmp	r3, #0
 801794e:	f000 80d4 	beq.w	8017afa <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8017952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017954:	895b      	ldrh	r3, [r3, #10]
 8017956:	2b13      	cmp	r3, #19
 8017958:	d806      	bhi.n	8017968 <ip4_frag+0xd0>
 801795a:	4b6b      	ldr	r3, [pc, #428]	; (8017b08 <ip4_frag+0x270>)
 801795c:	f240 3225 	movw	r2, #805	; 0x325
 8017960:	496c      	ldr	r1, [pc, #432]	; (8017b14 <ip4_frag+0x27c>)
 8017962:	486b      	ldr	r0, [pc, #428]	; (8017b10 <ip4_frag+0x278>)
 8017964:	f000 fc14 	bl	8018190 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8017968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801796a:	685b      	ldr	r3, [r3, #4]
 801796c:	2214      	movs	r2, #20
 801796e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017970:	4618      	mov	r0, r3
 8017972:	f000 fbe0 	bl	8018136 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8017976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017978:	685b      	ldr	r3, [r3, #4]
 801797a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801797c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801797e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8017982:	e064      	b.n	8017a4e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8017984:	68fb      	ldr	r3, [r7, #12]
 8017986:	895a      	ldrh	r2, [r3, #10]
 8017988:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801798a:	1ad3      	subs	r3, r2, r3
 801798c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801798e:	68fb      	ldr	r3, [r7, #12]
 8017990:	895b      	ldrh	r3, [r3, #10]
 8017992:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017994:	429a      	cmp	r2, r3
 8017996:	d906      	bls.n	80179a6 <ip4_frag+0x10e>
 8017998:	4b5b      	ldr	r3, [pc, #364]	; (8017b08 <ip4_frag+0x270>)
 801799a:	f240 322d 	movw	r2, #813	; 0x32d
 801799e:	495e      	ldr	r1, [pc, #376]	; (8017b18 <ip4_frag+0x280>)
 80179a0:	485b      	ldr	r0, [pc, #364]	; (8017b10 <ip4_frag+0x278>)
 80179a2:	f000 fbf5 	bl	8018190 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80179a6:	8bfa      	ldrh	r2, [r7, #30]
 80179a8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80179ac:	4293      	cmp	r3, r2
 80179ae:	bf28      	it	cs
 80179b0:	4613      	movcs	r3, r2
 80179b2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80179b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80179ba:	2b00      	cmp	r3, #0
 80179bc:	d105      	bne.n	80179ca <ip4_frag+0x132>
        poff = 0;
 80179be:	2300      	movs	r3, #0
 80179c0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80179c2:	68fb      	ldr	r3, [r7, #12]
 80179c4:	681b      	ldr	r3, [r3, #0]
 80179c6:	60fb      	str	r3, [r7, #12]
        continue;
 80179c8:	e041      	b.n	8017a4e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80179ca:	f7ff ff0d 	bl	80177e8 <ip_frag_alloc_pbuf_custom_ref>
 80179ce:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80179d0:	69bb      	ldr	r3, [r7, #24]
 80179d2:	2b00      	cmp	r3, #0
 80179d4:	d103      	bne.n	80179de <ip4_frag+0x146>
        pbuf_free(rambuf);
 80179d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80179d8:	f7f4 feaa 	bl	800c730 <pbuf_free>
        goto memerr;
 80179dc:	e08e      	b.n	8017afc <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80179de:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80179e0:	68fb      	ldr	r3, [r7, #12]
 80179e2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80179e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80179e6:	4413      	add	r3, r2
 80179e8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80179ec:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80179f0:	9201      	str	r2, [sp, #4]
 80179f2:	9300      	str	r3, [sp, #0]
 80179f4:	4603      	mov	r3, r0
 80179f6:	2241      	movs	r2, #65	; 0x41
 80179f8:	2000      	movs	r0, #0
 80179fa:	f7f4 fcdf 	bl	800c3bc <pbuf_alloced_custom>
 80179fe:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8017a00:	697b      	ldr	r3, [r7, #20]
 8017a02:	2b00      	cmp	r3, #0
 8017a04:	d106      	bne.n	8017a14 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8017a06:	69b8      	ldr	r0, [r7, #24]
 8017a08:	f7ff fef6 	bl	80177f8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8017a0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017a0e:	f7f4 fe8f 	bl	800c730 <pbuf_free>
        goto memerr;
 8017a12:	e073      	b.n	8017afc <ip4_frag+0x264>
      }
      pbuf_ref(p);
 8017a14:	68f8      	ldr	r0, [r7, #12]
 8017a16:	f7f4 ff31 	bl	800c87c <pbuf_ref>
      pcr->original = p;
 8017a1a:	69bb      	ldr	r3, [r7, #24]
 8017a1c:	68fa      	ldr	r2, [r7, #12]
 8017a1e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8017a20:	69bb      	ldr	r3, [r7, #24]
 8017a22:	4a3e      	ldr	r2, [pc, #248]	; (8017b1c <ip4_frag+0x284>)
 8017a24:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8017a26:	6979      	ldr	r1, [r7, #20]
 8017a28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017a2a:	f7f4 ff4f 	bl	800c8cc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8017a2e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8017a32:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017a36:	1ad3      	subs	r3, r2, r3
 8017a38:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8017a3c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017a40:	2b00      	cmp	r3, #0
 8017a42:	d004      	beq.n	8017a4e <ip4_frag+0x1b6>
        poff = 0;
 8017a44:	2300      	movs	r3, #0
 8017a46:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017a48:	68fb      	ldr	r3, [r7, #12]
 8017a4a:	681b      	ldr	r3, [r3, #0]
 8017a4c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8017a4e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017a52:	2b00      	cmp	r3, #0
 8017a54:	d196      	bne.n	8017984 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8017a56:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017a58:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017a5c:	4413      	add	r3, r2
 8017a5e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8017a60:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017a64:	68bb      	ldr	r3, [r7, #8]
 8017a66:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017a68:	3b14      	subs	r3, #20
 8017a6a:	429a      	cmp	r2, r3
 8017a6c:	bfd4      	ite	le
 8017a6e:	2301      	movle	r3, #1
 8017a70:	2300      	movgt	r3, #0
 8017a72:	b2db      	uxtb	r3, r3
 8017a74:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8017a76:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017a7a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017a7e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8017a80:	6a3b      	ldr	r3, [r7, #32]
 8017a82:	2b00      	cmp	r3, #0
 8017a84:	d002      	beq.n	8017a8c <ip4_frag+0x1f4>
 8017a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a88:	2b00      	cmp	r3, #0
 8017a8a:	d003      	beq.n	8017a94 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8017a8c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017a8e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017a92:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8017a94:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017a96:	4618      	mov	r0, r3
 8017a98:	f7f3 fade 	bl	800b058 <lwip_htons>
 8017a9c:	4603      	mov	r3, r0
 8017a9e:	461a      	mov	r2, r3
 8017aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017aa2:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8017aa4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017aa6:	3314      	adds	r3, #20
 8017aa8:	b29b      	uxth	r3, r3
 8017aaa:	4618      	mov	r0, r3
 8017aac:	f7f3 fad4 	bl	800b058 <lwip_htons>
 8017ab0:	4603      	mov	r3, r0
 8017ab2:	461a      	mov	r2, r3
 8017ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ab6:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8017ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017aba:	2200      	movs	r2, #0
 8017abc:	729a      	strb	r2, [r3, #10]
 8017abe:	2200      	movs	r2, #0
 8017ac0:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8017ac2:	68bb      	ldr	r3, [r7, #8]
 8017ac4:	695b      	ldr	r3, [r3, #20]
 8017ac6:	687a      	ldr	r2, [r7, #4]
 8017ac8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017aca:	68b8      	ldr	r0, [r7, #8]
 8017acc:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8017ace:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017ad0:	f7f4 fe2e 	bl	800c730 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8017ad4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017ad8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017ada:	1ad3      	subs	r3, r2, r3
 8017adc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8017ae0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8017ae4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017ae6:	4413      	add	r3, r2
 8017ae8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8017aec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017af0:	2b00      	cmp	r3, #0
 8017af2:	f47f af1a 	bne.w	801792a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8017af6:	2300      	movs	r3, #0
 8017af8:	e002      	b.n	8017b00 <ip4_frag+0x268>
      goto memerr;
 8017afa:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8017afc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017b00:	4618      	mov	r0, r3
 8017b02:	3748      	adds	r7, #72	; 0x48
 8017b04:	46bd      	mov	sp, r7
 8017b06:	bd80      	pop	{r7, pc}
 8017b08:	0801cda8 	.word	0x0801cda8
 8017b0c:	0801cf84 	.word	0x0801cf84
 8017b10:	0801cdf0 	.word	0x0801cdf0
 8017b14:	0801cfa0 	.word	0x0801cfa0
 8017b18:	0801cfc0 	.word	0x0801cfc0
 8017b1c:	08017831 	.word	0x08017831

08017b20 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8017b20:	b580      	push	{r7, lr}
 8017b22:	b086      	sub	sp, #24
 8017b24:	af00      	add	r7, sp, #0
 8017b26:	6078      	str	r0, [r7, #4]
 8017b28:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8017b2a:	230e      	movs	r3, #14
 8017b2c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	895b      	ldrh	r3, [r3, #10]
 8017b32:	2b0e      	cmp	r3, #14
 8017b34:	d96e      	bls.n	8017c14 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	7bdb      	ldrb	r3, [r3, #15]
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	d106      	bne.n	8017b4c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8017b3e:	683b      	ldr	r3, [r7, #0]
 8017b40:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017b44:	3301      	adds	r3, #1
 8017b46:	b2da      	uxtb	r2, r3
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	685b      	ldr	r3, [r3, #4]
 8017b50:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8017b52:	693b      	ldr	r3, [r7, #16]
 8017b54:	7b1a      	ldrb	r2, [r3, #12]
 8017b56:	7b5b      	ldrb	r3, [r3, #13]
 8017b58:	021b      	lsls	r3, r3, #8
 8017b5a:	4313      	orrs	r3, r2
 8017b5c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8017b5e:	693b      	ldr	r3, [r7, #16]
 8017b60:	781b      	ldrb	r3, [r3, #0]
 8017b62:	f003 0301 	and.w	r3, r3, #1
 8017b66:	2b00      	cmp	r3, #0
 8017b68:	d023      	beq.n	8017bb2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8017b6a:	693b      	ldr	r3, [r7, #16]
 8017b6c:	781b      	ldrb	r3, [r3, #0]
 8017b6e:	2b01      	cmp	r3, #1
 8017b70:	d10f      	bne.n	8017b92 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017b72:	693b      	ldr	r3, [r7, #16]
 8017b74:	785b      	ldrb	r3, [r3, #1]
 8017b76:	2b00      	cmp	r3, #0
 8017b78:	d11b      	bne.n	8017bb2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8017b7a:	693b      	ldr	r3, [r7, #16]
 8017b7c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017b7e:	2b5e      	cmp	r3, #94	; 0x5e
 8017b80:	d117      	bne.n	8017bb2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8017b82:	687b      	ldr	r3, [r7, #4]
 8017b84:	7b5b      	ldrb	r3, [r3, #13]
 8017b86:	f043 0310 	orr.w	r3, r3, #16
 8017b8a:	b2da      	uxtb	r2, r3
 8017b8c:	687b      	ldr	r3, [r7, #4]
 8017b8e:	735a      	strb	r2, [r3, #13]
 8017b90:	e00f      	b.n	8017bb2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8017b92:	693b      	ldr	r3, [r7, #16]
 8017b94:	2206      	movs	r2, #6
 8017b96:	4928      	ldr	r1, [pc, #160]	; (8017c38 <ethernet_input+0x118>)
 8017b98:	4618      	mov	r0, r3
 8017b9a:	f000 fabd 	bl	8018118 <memcmp>
 8017b9e:	4603      	mov	r3, r0
 8017ba0:	2b00      	cmp	r3, #0
 8017ba2:	d106      	bne.n	8017bb2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8017ba4:	687b      	ldr	r3, [r7, #4]
 8017ba6:	7b5b      	ldrb	r3, [r3, #13]
 8017ba8:	f043 0308 	orr.w	r3, r3, #8
 8017bac:	b2da      	uxtb	r2, r3
 8017bae:	687b      	ldr	r3, [r7, #4]
 8017bb0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8017bb2:	89fb      	ldrh	r3, [r7, #14]
 8017bb4:	2b08      	cmp	r3, #8
 8017bb6:	d003      	beq.n	8017bc0 <ethernet_input+0xa0>
 8017bb8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8017bbc:	d014      	beq.n	8017be8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8017bbe:	e032      	b.n	8017c26 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017bc0:	683b      	ldr	r3, [r7, #0]
 8017bc2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017bc6:	f003 0308 	and.w	r3, r3, #8
 8017bca:	2b00      	cmp	r3, #0
 8017bcc:	d024      	beq.n	8017c18 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017bce:	8afb      	ldrh	r3, [r7, #22]
 8017bd0:	4619      	mov	r1, r3
 8017bd2:	6878      	ldr	r0, [r7, #4]
 8017bd4:	f7f4 fd26 	bl	800c624 <pbuf_remove_header>
 8017bd8:	4603      	mov	r3, r0
 8017bda:	2b00      	cmp	r3, #0
 8017bdc:	d11e      	bne.n	8017c1c <ethernet_input+0xfc>
        ip4_input(p, netif);
 8017bde:	6839      	ldr	r1, [r7, #0]
 8017be0:	6878      	ldr	r0, [r7, #4]
 8017be2:	f7fe ff0f 	bl	8016a04 <ip4_input>
      break;
 8017be6:	e013      	b.n	8017c10 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017be8:	683b      	ldr	r3, [r7, #0]
 8017bea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017bee:	f003 0308 	and.w	r3, r3, #8
 8017bf2:	2b00      	cmp	r3, #0
 8017bf4:	d014      	beq.n	8017c20 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017bf6:	8afb      	ldrh	r3, [r7, #22]
 8017bf8:	4619      	mov	r1, r3
 8017bfa:	6878      	ldr	r0, [r7, #4]
 8017bfc:	f7f4 fd12 	bl	800c624 <pbuf_remove_header>
 8017c00:	4603      	mov	r3, r0
 8017c02:	2b00      	cmp	r3, #0
 8017c04:	d10e      	bne.n	8017c24 <ethernet_input+0x104>
        etharp_input(p, netif);
 8017c06:	6839      	ldr	r1, [r7, #0]
 8017c08:	6878      	ldr	r0, [r7, #4]
 8017c0a:	f7fe f8ab 	bl	8015d64 <etharp_input>
      break;
 8017c0e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8017c10:	2300      	movs	r3, #0
 8017c12:	e00c      	b.n	8017c2e <ethernet_input+0x10e>
    goto free_and_return;
 8017c14:	bf00      	nop
 8017c16:	e006      	b.n	8017c26 <ethernet_input+0x106>
        goto free_and_return;
 8017c18:	bf00      	nop
 8017c1a:	e004      	b.n	8017c26 <ethernet_input+0x106>
        goto free_and_return;
 8017c1c:	bf00      	nop
 8017c1e:	e002      	b.n	8017c26 <ethernet_input+0x106>
        goto free_and_return;
 8017c20:	bf00      	nop
 8017c22:	e000      	b.n	8017c26 <ethernet_input+0x106>
        goto free_and_return;
 8017c24:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8017c26:	6878      	ldr	r0, [r7, #4]
 8017c28:	f7f4 fd82 	bl	800c730 <pbuf_free>
  return ERR_OK;
 8017c2c:	2300      	movs	r3, #0
}
 8017c2e:	4618      	mov	r0, r3
 8017c30:	3718      	adds	r7, #24
 8017c32:	46bd      	mov	sp, r7
 8017c34:	bd80      	pop	{r7, pc}
 8017c36:	bf00      	nop
 8017c38:	0802857c 	.word	0x0802857c

08017c3c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8017c3c:	b580      	push	{r7, lr}
 8017c3e:	b086      	sub	sp, #24
 8017c40:	af00      	add	r7, sp, #0
 8017c42:	60f8      	str	r0, [r7, #12]
 8017c44:	60b9      	str	r1, [r7, #8]
 8017c46:	607a      	str	r2, [r7, #4]
 8017c48:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8017c4a:	8c3b      	ldrh	r3, [r7, #32]
 8017c4c:	4618      	mov	r0, r3
 8017c4e:	f7f3 fa03 	bl	800b058 <lwip_htons>
 8017c52:	4603      	mov	r3, r0
 8017c54:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8017c56:	210e      	movs	r1, #14
 8017c58:	68b8      	ldr	r0, [r7, #8]
 8017c5a:	f7f4 fcd3 	bl	800c604 <pbuf_add_header>
 8017c5e:	4603      	mov	r3, r0
 8017c60:	2b00      	cmp	r3, #0
 8017c62:	d125      	bne.n	8017cb0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8017c64:	68bb      	ldr	r3, [r7, #8]
 8017c66:	685b      	ldr	r3, [r3, #4]
 8017c68:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8017c6a:	693b      	ldr	r3, [r7, #16]
 8017c6c:	8afa      	ldrh	r2, [r7, #22]
 8017c6e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8017c70:	693b      	ldr	r3, [r7, #16]
 8017c72:	2206      	movs	r2, #6
 8017c74:	6839      	ldr	r1, [r7, #0]
 8017c76:	4618      	mov	r0, r3
 8017c78:	f000 fa5d 	bl	8018136 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8017c7c:	693b      	ldr	r3, [r7, #16]
 8017c7e:	3306      	adds	r3, #6
 8017c80:	2206      	movs	r2, #6
 8017c82:	6879      	ldr	r1, [r7, #4]
 8017c84:	4618      	mov	r0, r3
 8017c86:	f000 fa56 	bl	8018136 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8017c8a:	68fb      	ldr	r3, [r7, #12]
 8017c8c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8017c90:	2b06      	cmp	r3, #6
 8017c92:	d006      	beq.n	8017ca2 <ethernet_output+0x66>
 8017c94:	4b0a      	ldr	r3, [pc, #40]	; (8017cc0 <ethernet_output+0x84>)
 8017c96:	f240 1233 	movw	r2, #307	; 0x133
 8017c9a:	490a      	ldr	r1, [pc, #40]	; (8017cc4 <ethernet_output+0x88>)
 8017c9c:	480a      	ldr	r0, [pc, #40]	; (8017cc8 <ethernet_output+0x8c>)
 8017c9e:	f000 fa77 	bl	8018190 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8017ca2:	68fb      	ldr	r3, [r7, #12]
 8017ca4:	699b      	ldr	r3, [r3, #24]
 8017ca6:	68b9      	ldr	r1, [r7, #8]
 8017ca8:	68f8      	ldr	r0, [r7, #12]
 8017caa:	4798      	blx	r3
 8017cac:	4603      	mov	r3, r0
 8017cae:	e002      	b.n	8017cb6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8017cb0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8017cb2:	f06f 0301 	mvn.w	r3, #1
}
 8017cb6:	4618      	mov	r0, r3
 8017cb8:	3718      	adds	r7, #24
 8017cba:	46bd      	mov	sp, r7
 8017cbc:	bd80      	pop	{r7, pc}
 8017cbe:	bf00      	nop
 8017cc0:	0801cfd0 	.word	0x0801cfd0
 8017cc4:	0801d008 	.word	0x0801d008
 8017cc8:	0801d03c 	.word	0x0801d03c

08017ccc <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8017ccc:	b580      	push	{r7, lr}
 8017cce:	b086      	sub	sp, #24
 8017cd0:	af00      	add	r7, sp, #0
 8017cd2:	6078      	str	r0, [r7, #4]
 8017cd4:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8017cd6:	683b      	ldr	r3, [r7, #0]
 8017cd8:	60bb      	str	r3, [r7, #8]
 8017cda:	2304      	movs	r3, #4
 8017cdc:	60fb      	str	r3, [r7, #12]
 8017cde:	2300      	movs	r3, #0
 8017ce0:	613b      	str	r3, [r7, #16]
 8017ce2:	2300      	movs	r3, #0
 8017ce4:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8017ce6:	f107 0308 	add.w	r3, r7, #8
 8017cea:	2100      	movs	r1, #0
 8017cec:	4618      	mov	r0, r3
 8017cee:	f7ed fa5e 	bl	80051ae <osMessageCreate>
 8017cf2:	4602      	mov	r2, r0
 8017cf4:	687b      	ldr	r3, [r7, #4]
 8017cf6:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	681b      	ldr	r3, [r3, #0]
 8017cfc:	2b00      	cmp	r3, #0
 8017cfe:	d102      	bne.n	8017d06 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8017d00:	f04f 33ff 	mov.w	r3, #4294967295
 8017d04:	e000      	b.n	8017d08 <sys_mbox_new+0x3c>

  return ERR_OK;
 8017d06:	2300      	movs	r3, #0
}
 8017d08:	4618      	mov	r0, r3
 8017d0a:	3718      	adds	r7, #24
 8017d0c:	46bd      	mov	sp, r7
 8017d0e:	bd80      	pop	{r7, pc}

08017d10 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8017d10:	b580      	push	{r7, lr}
 8017d12:	b082      	sub	sp, #8
 8017d14:	af00      	add	r7, sp, #0
 8017d16:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8017d18:	687b      	ldr	r3, [r7, #4]
 8017d1a:	681b      	ldr	r3, [r3, #0]
 8017d1c:	4618      	mov	r0, r3
 8017d1e:	f7ed fb23 	bl	8005368 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8017d22:	687b      	ldr	r3, [r7, #4]
 8017d24:	681b      	ldr	r3, [r3, #0]
 8017d26:	4618      	mov	r0, r3
 8017d28:	f7ed fb34 	bl	8005394 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8017d2c:	bf00      	nop
 8017d2e:	3708      	adds	r7, #8
 8017d30:	46bd      	mov	sp, r7
 8017d32:	bd80      	pop	{r7, pc}

08017d34 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8017d34:	b580      	push	{r7, lr}
 8017d36:	b084      	sub	sp, #16
 8017d38:	af00      	add	r7, sp, #0
 8017d3a:	6078      	str	r0, [r7, #4]
 8017d3c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8017d3e:	687b      	ldr	r3, [r7, #4]
 8017d40:	681b      	ldr	r3, [r3, #0]
 8017d42:	6839      	ldr	r1, [r7, #0]
 8017d44:	2200      	movs	r2, #0
 8017d46:	4618      	mov	r0, r3
 8017d48:	f7ed fa5a 	bl	8005200 <osMessagePut>
 8017d4c:	4603      	mov	r3, r0
 8017d4e:	2b00      	cmp	r3, #0
 8017d50:	d102      	bne.n	8017d58 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8017d52:	2300      	movs	r3, #0
 8017d54:	73fb      	strb	r3, [r7, #15]
 8017d56:	e001      	b.n	8017d5c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8017d58:	23ff      	movs	r3, #255	; 0xff
 8017d5a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8017d5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017d60:	4618      	mov	r0, r3
 8017d62:	3710      	adds	r7, #16
 8017d64:	46bd      	mov	sp, r7
 8017d66:	bd80      	pop	{r7, pc}

08017d68 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8017d68:	b580      	push	{r7, lr}
 8017d6a:	b08c      	sub	sp, #48	; 0x30
 8017d6c:	af00      	add	r7, sp, #0
 8017d6e:	61f8      	str	r0, [r7, #28]
 8017d70:	61b9      	str	r1, [r7, #24]
 8017d72:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8017d74:	f7ed f844 	bl	8004e00 <osKernelSysTick>
 8017d78:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8017d7a:	697b      	ldr	r3, [r7, #20]
 8017d7c:	2b00      	cmp	r3, #0
 8017d7e:	d017      	beq.n	8017db0 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8017d80:	69fb      	ldr	r3, [r7, #28]
 8017d82:	6819      	ldr	r1, [r3, #0]
 8017d84:	f107 0320 	add.w	r3, r7, #32
 8017d88:	697a      	ldr	r2, [r7, #20]
 8017d8a:	4618      	mov	r0, r3
 8017d8c:	f7ed fa78 	bl	8005280 <osMessageGet>

    if(event.status == osEventMessage)
 8017d90:	6a3b      	ldr	r3, [r7, #32]
 8017d92:	2b10      	cmp	r3, #16
 8017d94:	d109      	bne.n	8017daa <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8017d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d98:	461a      	mov	r2, r3
 8017d9a:	69bb      	ldr	r3, [r7, #24]
 8017d9c:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8017d9e:	f7ed f82f 	bl	8004e00 <osKernelSysTick>
 8017da2:	4602      	mov	r2, r0
 8017da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017da6:	1ad3      	subs	r3, r2, r3
 8017da8:	e019      	b.n	8017dde <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8017daa:	f04f 33ff 	mov.w	r3, #4294967295
 8017dae:	e016      	b.n	8017dde <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8017db0:	69fb      	ldr	r3, [r7, #28]
 8017db2:	6819      	ldr	r1, [r3, #0]
 8017db4:	463b      	mov	r3, r7
 8017db6:	f04f 32ff 	mov.w	r2, #4294967295
 8017dba:	4618      	mov	r0, r3
 8017dbc:	f7ed fa60 	bl	8005280 <osMessageGet>
 8017dc0:	f107 0320 	add.w	r3, r7, #32
 8017dc4:	463a      	mov	r2, r7
 8017dc6:	ca07      	ldmia	r2, {r0, r1, r2}
 8017dc8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8017dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dce:	461a      	mov	r2, r3
 8017dd0:	69bb      	ldr	r3, [r7, #24]
 8017dd2:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8017dd4:	f7ed f814 	bl	8004e00 <osKernelSysTick>
 8017dd8:	4602      	mov	r2, r0
 8017dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ddc:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8017dde:	4618      	mov	r0, r3
 8017de0:	3730      	adds	r7, #48	; 0x30
 8017de2:	46bd      	mov	sp, r7
 8017de4:	bd80      	pop	{r7, pc}

08017de6 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8017de6:	b580      	push	{r7, lr}
 8017de8:	b086      	sub	sp, #24
 8017dea:	af00      	add	r7, sp, #0
 8017dec:	6078      	str	r0, [r7, #4]
 8017dee:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8017df0:	687b      	ldr	r3, [r7, #4]
 8017df2:	6819      	ldr	r1, [r3, #0]
 8017df4:	f107 030c 	add.w	r3, r7, #12
 8017df8:	2200      	movs	r2, #0
 8017dfa:	4618      	mov	r0, r3
 8017dfc:	f7ed fa40 	bl	8005280 <osMessageGet>

  if(event.status == osEventMessage)
 8017e00:	68fb      	ldr	r3, [r7, #12]
 8017e02:	2b10      	cmp	r3, #16
 8017e04:	d105      	bne.n	8017e12 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8017e06:	693b      	ldr	r3, [r7, #16]
 8017e08:	461a      	mov	r2, r3
 8017e0a:	683b      	ldr	r3, [r7, #0]
 8017e0c:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8017e0e:	2300      	movs	r3, #0
 8017e10:	e001      	b.n	8017e16 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8017e12:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8017e16:	4618      	mov	r0, r3
 8017e18:	3718      	adds	r7, #24
 8017e1a:	46bd      	mov	sp, r7
 8017e1c:	bd80      	pop	{r7, pc}

08017e1e <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8017e1e:	b480      	push	{r7}
 8017e20:	b083      	sub	sp, #12
 8017e22:	af00      	add	r7, sp, #0
 8017e24:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8017e26:	687b      	ldr	r3, [r7, #4]
 8017e28:	681b      	ldr	r3, [r3, #0]
 8017e2a:	2b00      	cmp	r3, #0
 8017e2c:	d101      	bne.n	8017e32 <sys_mbox_valid+0x14>
    return 0;
 8017e2e:	2300      	movs	r3, #0
 8017e30:	e000      	b.n	8017e34 <sys_mbox_valid+0x16>
  else
    return 1;
 8017e32:	2301      	movs	r3, #1
}
 8017e34:	4618      	mov	r0, r3
 8017e36:	370c      	adds	r7, #12
 8017e38:	46bd      	mov	sp, r7
 8017e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e3e:	4770      	bx	lr

08017e40 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8017e40:	b480      	push	{r7}
 8017e42:	b083      	sub	sp, #12
 8017e44:	af00      	add	r7, sp, #0
 8017e46:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8017e48:	687b      	ldr	r3, [r7, #4]
 8017e4a:	2200      	movs	r2, #0
 8017e4c:	601a      	str	r2, [r3, #0]
}
 8017e4e:	bf00      	nop
 8017e50:	370c      	adds	r7, #12
 8017e52:	46bd      	mov	sp, r7
 8017e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e58:	4770      	bx	lr

08017e5a <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8017e5a:	b580      	push	{r7, lr}
 8017e5c:	b084      	sub	sp, #16
 8017e5e:	af00      	add	r7, sp, #0
 8017e60:	6078      	str	r0, [r7, #4]
 8017e62:	460b      	mov	r3, r1
 8017e64:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8017e66:	2300      	movs	r3, #0
 8017e68:	60bb      	str	r3, [r7, #8]
 8017e6a:	2300      	movs	r3, #0
 8017e6c:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8017e6e:	f107 0308 	add.w	r3, r7, #8
 8017e72:	2101      	movs	r1, #1
 8017e74:	4618      	mov	r0, r3
 8017e76:	f7ed f8cf 	bl	8005018 <osSemaphoreCreate>
 8017e7a:	4602      	mov	r2, r0
 8017e7c:	687b      	ldr	r3, [r7, #4]
 8017e7e:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8017e80:	687b      	ldr	r3, [r7, #4]
 8017e82:	681b      	ldr	r3, [r3, #0]
 8017e84:	2b00      	cmp	r3, #0
 8017e86:	d102      	bne.n	8017e8e <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017e88:	f04f 33ff 	mov.w	r3, #4294967295
 8017e8c:	e009      	b.n	8017ea2 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8017e8e:	78fb      	ldrb	r3, [r7, #3]
 8017e90:	2b00      	cmp	r3, #0
 8017e92:	d105      	bne.n	8017ea0 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8017e94:	687b      	ldr	r3, [r7, #4]
 8017e96:	681b      	ldr	r3, [r3, #0]
 8017e98:	2100      	movs	r1, #0
 8017e9a:	4618      	mov	r0, r3
 8017e9c:	f7ed f8f0 	bl	8005080 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8017ea0:	2300      	movs	r3, #0
}
 8017ea2:	4618      	mov	r0, r3
 8017ea4:	3710      	adds	r7, #16
 8017ea6:	46bd      	mov	sp, r7
 8017ea8:	bd80      	pop	{r7, pc}

08017eaa <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8017eaa:	b580      	push	{r7, lr}
 8017eac:	b084      	sub	sp, #16
 8017eae:	af00      	add	r7, sp, #0
 8017eb0:	6078      	str	r0, [r7, #4]
 8017eb2:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8017eb4:	f7ec ffa4 	bl	8004e00 <osKernelSysTick>
 8017eb8:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8017eba:	683b      	ldr	r3, [r7, #0]
 8017ebc:	2b00      	cmp	r3, #0
 8017ebe:	d011      	beq.n	8017ee4 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8017ec0:	687b      	ldr	r3, [r7, #4]
 8017ec2:	681b      	ldr	r3, [r3, #0]
 8017ec4:	6839      	ldr	r1, [r7, #0]
 8017ec6:	4618      	mov	r0, r3
 8017ec8:	f7ed f8da 	bl	8005080 <osSemaphoreWait>
 8017ecc:	4603      	mov	r3, r0
 8017ece:	2b00      	cmp	r3, #0
 8017ed0:	d105      	bne.n	8017ede <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8017ed2:	f7ec ff95 	bl	8004e00 <osKernelSysTick>
 8017ed6:	4602      	mov	r2, r0
 8017ed8:	68fb      	ldr	r3, [r7, #12]
 8017eda:	1ad3      	subs	r3, r2, r3
 8017edc:	e012      	b.n	8017f04 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8017ede:	f04f 33ff 	mov.w	r3, #4294967295
 8017ee2:	e00f      	b.n	8017f04 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8017ee4:	bf00      	nop
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	681b      	ldr	r3, [r3, #0]
 8017eea:	f04f 31ff 	mov.w	r1, #4294967295
 8017eee:	4618      	mov	r0, r3
 8017ef0:	f7ed f8c6 	bl	8005080 <osSemaphoreWait>
 8017ef4:	4603      	mov	r3, r0
 8017ef6:	2b00      	cmp	r3, #0
 8017ef8:	d1f5      	bne.n	8017ee6 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8017efa:	f7ec ff81 	bl	8004e00 <osKernelSysTick>
 8017efe:	4602      	mov	r2, r0
 8017f00:	68fb      	ldr	r3, [r7, #12]
 8017f02:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8017f04:	4618      	mov	r0, r3
 8017f06:	3710      	adds	r7, #16
 8017f08:	46bd      	mov	sp, r7
 8017f0a:	bd80      	pop	{r7, pc}

08017f0c <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8017f0c:	b580      	push	{r7, lr}
 8017f0e:	b082      	sub	sp, #8
 8017f10:	af00      	add	r7, sp, #0
 8017f12:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8017f14:	687b      	ldr	r3, [r7, #4]
 8017f16:	681b      	ldr	r3, [r3, #0]
 8017f18:	4618      	mov	r0, r3
 8017f1a:	f7ed f8ff 	bl	800511c <osSemaphoreRelease>
}
 8017f1e:	bf00      	nop
 8017f20:	3708      	adds	r7, #8
 8017f22:	46bd      	mov	sp, r7
 8017f24:	bd80      	pop	{r7, pc}

08017f26 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8017f26:	b580      	push	{r7, lr}
 8017f28:	b082      	sub	sp, #8
 8017f2a:	af00      	add	r7, sp, #0
 8017f2c:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8017f2e:	687b      	ldr	r3, [r7, #4]
 8017f30:	681b      	ldr	r3, [r3, #0]
 8017f32:	4618      	mov	r0, r3
 8017f34:	f7ed f928 	bl	8005188 <osSemaphoreDelete>
}
 8017f38:	bf00      	nop
 8017f3a:	3708      	adds	r7, #8
 8017f3c:	46bd      	mov	sp, r7
 8017f3e:	bd80      	pop	{r7, pc}

08017f40 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8017f40:	b480      	push	{r7}
 8017f42:	b083      	sub	sp, #12
 8017f44:	af00      	add	r7, sp, #0
 8017f46:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8017f48:	687b      	ldr	r3, [r7, #4]
 8017f4a:	681b      	ldr	r3, [r3, #0]
 8017f4c:	2b00      	cmp	r3, #0
 8017f4e:	d101      	bne.n	8017f54 <sys_sem_valid+0x14>
    return 0;
 8017f50:	2300      	movs	r3, #0
 8017f52:	e000      	b.n	8017f56 <sys_sem_valid+0x16>
  else
    return 1;
 8017f54:	2301      	movs	r3, #1
}
 8017f56:	4618      	mov	r0, r3
 8017f58:	370c      	adds	r7, #12
 8017f5a:	46bd      	mov	sp, r7
 8017f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f60:	4770      	bx	lr

08017f62 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8017f62:	b480      	push	{r7}
 8017f64:	b083      	sub	sp, #12
 8017f66:	af00      	add	r7, sp, #0
 8017f68:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8017f6a:	687b      	ldr	r3, [r7, #4]
 8017f6c:	2200      	movs	r2, #0
 8017f6e:	601a      	str	r2, [r3, #0]
}
 8017f70:	bf00      	nop
 8017f72:	370c      	adds	r7, #12
 8017f74:	46bd      	mov	sp, r7
 8017f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f7a:	4770      	bx	lr

08017f7c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8017f7c:	b580      	push	{r7, lr}
 8017f7e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8017f80:	4803      	ldr	r0, [pc, #12]	; (8017f90 <sys_init+0x14>)
 8017f82:	f7ec ffad 	bl	8004ee0 <osMutexCreate>
 8017f86:	4602      	mov	r2, r0
 8017f88:	4b02      	ldr	r3, [pc, #8]	; (8017f94 <sys_init+0x18>)
 8017f8a:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8017f8c:	bf00      	nop
 8017f8e:	bd80      	pop	{r7, pc}
 8017f90:	0802858c 	.word	0x0802858c
 8017f94:	2000fb20 	.word	0x2000fb20

08017f98 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8017f98:	b580      	push	{r7, lr}
 8017f9a:	b084      	sub	sp, #16
 8017f9c:	af00      	add	r7, sp, #0
 8017f9e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8017fa0:	2300      	movs	r3, #0
 8017fa2:	60bb      	str	r3, [r7, #8]
 8017fa4:	2300      	movs	r3, #0
 8017fa6:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8017fa8:	f107 0308 	add.w	r3, r7, #8
 8017fac:	4618      	mov	r0, r3
 8017fae:	f7ec ff97 	bl	8004ee0 <osMutexCreate>
 8017fb2:	4602      	mov	r2, r0
 8017fb4:	687b      	ldr	r3, [r7, #4]
 8017fb6:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8017fb8:	687b      	ldr	r3, [r7, #4]
 8017fba:	681b      	ldr	r3, [r3, #0]
 8017fbc:	2b00      	cmp	r3, #0
 8017fbe:	d102      	bne.n	8017fc6 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8017fc4:	e000      	b.n	8017fc8 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8017fc6:	2300      	movs	r3, #0
}
 8017fc8:	4618      	mov	r0, r3
 8017fca:	3710      	adds	r7, #16
 8017fcc:	46bd      	mov	sp, r7
 8017fce:	bd80      	pop	{r7, pc}

08017fd0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8017fd0:	b580      	push	{r7, lr}
 8017fd2:	b082      	sub	sp, #8
 8017fd4:	af00      	add	r7, sp, #0
 8017fd6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8017fd8:	687b      	ldr	r3, [r7, #4]
 8017fda:	681b      	ldr	r3, [r3, #0]
 8017fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8017fe0:	4618      	mov	r0, r3
 8017fe2:	f7ec ff95 	bl	8004f10 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8017fe6:	bf00      	nop
 8017fe8:	3708      	adds	r7, #8
 8017fea:	46bd      	mov	sp, r7
 8017fec:	bd80      	pop	{r7, pc}

08017fee <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8017fee:	b580      	push	{r7, lr}
 8017ff0:	b082      	sub	sp, #8
 8017ff2:	af00      	add	r7, sp, #0
 8017ff4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	681b      	ldr	r3, [r3, #0]
 8017ffa:	4618      	mov	r0, r3
 8017ffc:	f7ec ffd6 	bl	8004fac <osMutexRelease>
}
 8018000:	bf00      	nop
 8018002:	3708      	adds	r7, #8
 8018004:	46bd      	mov	sp, r7
 8018006:	bd80      	pop	{r7, pc}

08018008 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8018008:	b580      	push	{r7, lr}
 801800a:	b08c      	sub	sp, #48	; 0x30
 801800c:	af00      	add	r7, sp, #0
 801800e:	60f8      	str	r0, [r7, #12]
 8018010:	60b9      	str	r1, [r7, #8]
 8018012:	607a      	str	r2, [r7, #4]
 8018014:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8018016:	f107 0314 	add.w	r3, r7, #20
 801801a:	2200      	movs	r2, #0
 801801c:	601a      	str	r2, [r3, #0]
 801801e:	605a      	str	r2, [r3, #4]
 8018020:	609a      	str	r2, [r3, #8]
 8018022:	60da      	str	r2, [r3, #12]
 8018024:	611a      	str	r2, [r3, #16]
 8018026:	615a      	str	r2, [r3, #20]
 8018028:	619a      	str	r2, [r3, #24]
 801802a:	68fb      	ldr	r3, [r7, #12]
 801802c:	617b      	str	r3, [r7, #20]
 801802e:	68bb      	ldr	r3, [r7, #8]
 8018030:	61bb      	str	r3, [r7, #24]
 8018032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018034:	b21b      	sxth	r3, r3
 8018036:	83bb      	strh	r3, [r7, #28]
 8018038:	683b      	ldr	r3, [r7, #0]
 801803a:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801803c:	f107 0314 	add.w	r3, r7, #20
 8018040:	6879      	ldr	r1, [r7, #4]
 8018042:	4618      	mov	r0, r3
 8018044:	f7ec feec 	bl	8004e20 <osThreadCreate>
 8018048:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801804a:	4618      	mov	r0, r3
 801804c:	3730      	adds	r7, #48	; 0x30
 801804e:	46bd      	mov	sp, r7
 8018050:	bd80      	pop	{r7, pc}
	...

08018054 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8018054:	b580      	push	{r7, lr}
 8018056:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8018058:	4b04      	ldr	r3, [pc, #16]	; (801806c <sys_arch_protect+0x18>)
 801805a:	681b      	ldr	r3, [r3, #0]
 801805c:	f04f 31ff 	mov.w	r1, #4294967295
 8018060:	4618      	mov	r0, r3
 8018062:	f7ec ff55 	bl	8004f10 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8018066:	2301      	movs	r3, #1
}
 8018068:	4618      	mov	r0, r3
 801806a:	bd80      	pop	{r7, pc}
 801806c:	2000fb20 	.word	0x2000fb20

08018070 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8018070:	b580      	push	{r7, lr}
 8018072:	b082      	sub	sp, #8
 8018074:	af00      	add	r7, sp, #0
 8018076:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8018078:	4b04      	ldr	r3, [pc, #16]	; (801808c <sys_arch_unprotect+0x1c>)
 801807a:	681b      	ldr	r3, [r3, #0]
 801807c:	4618      	mov	r0, r3
 801807e:	f7ec ff95 	bl	8004fac <osMutexRelease>
}
 8018082:	bf00      	nop
 8018084:	3708      	adds	r7, #8
 8018086:	46bd      	mov	sp, r7
 8018088:	bd80      	pop	{r7, pc}
 801808a:	bf00      	nop
 801808c:	2000fb20 	.word	0x2000fb20

08018090 <__libc_init_array>:
 8018090:	b570      	push	{r4, r5, r6, lr}
 8018092:	4e0d      	ldr	r6, [pc, #52]	; (80180c8 <__libc_init_array+0x38>)
 8018094:	4c0d      	ldr	r4, [pc, #52]	; (80180cc <__libc_init_array+0x3c>)
 8018096:	1ba4      	subs	r4, r4, r6
 8018098:	10a4      	asrs	r4, r4, #2
 801809a:	2500      	movs	r5, #0
 801809c:	42a5      	cmp	r5, r4
 801809e:	d109      	bne.n	80180b4 <__libc_init_array+0x24>
 80180a0:	4e0b      	ldr	r6, [pc, #44]	; (80180d0 <__libc_init_array+0x40>)
 80180a2:	4c0c      	ldr	r4, [pc, #48]	; (80180d4 <__libc_init_array+0x44>)
 80180a4:	f001 f9ac 	bl	8019400 <_init>
 80180a8:	1ba4      	subs	r4, r4, r6
 80180aa:	10a4      	asrs	r4, r4, #2
 80180ac:	2500      	movs	r5, #0
 80180ae:	42a5      	cmp	r5, r4
 80180b0:	d105      	bne.n	80180be <__libc_init_array+0x2e>
 80180b2:	bd70      	pop	{r4, r5, r6, pc}
 80180b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80180b8:	4798      	blx	r3
 80180ba:	3501      	adds	r5, #1
 80180bc:	e7ee      	b.n	801809c <__libc_init_array+0xc>
 80180be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80180c2:	4798      	blx	r3
 80180c4:	3501      	adds	r5, #1
 80180c6:	e7f2      	b.n	80180ae <__libc_init_array+0x1e>
 80180c8:	08028740 	.word	0x08028740
 80180cc:	08028740 	.word	0x08028740
 80180d0:	08028740 	.word	0x08028740
 80180d4:	08028744 	.word	0x08028744

080180d8 <__locale_ctype_ptr>:
 80180d8:	4b04      	ldr	r3, [pc, #16]	; (80180ec <__locale_ctype_ptr+0x14>)
 80180da:	4a05      	ldr	r2, [pc, #20]	; (80180f0 <__locale_ctype_ptr+0x18>)
 80180dc:	681b      	ldr	r3, [r3, #0]
 80180de:	6a1b      	ldr	r3, [r3, #32]
 80180e0:	2b00      	cmp	r3, #0
 80180e2:	bf08      	it	eq
 80180e4:	4613      	moveq	r3, r2
 80180e6:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80180ea:	4770      	bx	lr
 80180ec:	20000020 	.word	0x20000020
 80180f0:	20000084 	.word	0x20000084

080180f4 <__ascii_mbtowc>:
 80180f4:	b082      	sub	sp, #8
 80180f6:	b901      	cbnz	r1, 80180fa <__ascii_mbtowc+0x6>
 80180f8:	a901      	add	r1, sp, #4
 80180fa:	b142      	cbz	r2, 801810e <__ascii_mbtowc+0x1a>
 80180fc:	b14b      	cbz	r3, 8018112 <__ascii_mbtowc+0x1e>
 80180fe:	7813      	ldrb	r3, [r2, #0]
 8018100:	600b      	str	r3, [r1, #0]
 8018102:	7812      	ldrb	r2, [r2, #0]
 8018104:	1c10      	adds	r0, r2, #0
 8018106:	bf18      	it	ne
 8018108:	2001      	movne	r0, #1
 801810a:	b002      	add	sp, #8
 801810c:	4770      	bx	lr
 801810e:	4610      	mov	r0, r2
 8018110:	e7fb      	b.n	801810a <__ascii_mbtowc+0x16>
 8018112:	f06f 0001 	mvn.w	r0, #1
 8018116:	e7f8      	b.n	801810a <__ascii_mbtowc+0x16>

08018118 <memcmp>:
 8018118:	b530      	push	{r4, r5, lr}
 801811a:	2400      	movs	r4, #0
 801811c:	42a2      	cmp	r2, r4
 801811e:	d101      	bne.n	8018124 <memcmp+0xc>
 8018120:	2000      	movs	r0, #0
 8018122:	e007      	b.n	8018134 <memcmp+0x1c>
 8018124:	5d03      	ldrb	r3, [r0, r4]
 8018126:	3401      	adds	r4, #1
 8018128:	190d      	adds	r5, r1, r4
 801812a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801812e:	42ab      	cmp	r3, r5
 8018130:	d0f4      	beq.n	801811c <memcmp+0x4>
 8018132:	1b58      	subs	r0, r3, r5
 8018134:	bd30      	pop	{r4, r5, pc}

08018136 <memcpy>:
 8018136:	b510      	push	{r4, lr}
 8018138:	1e43      	subs	r3, r0, #1
 801813a:	440a      	add	r2, r1
 801813c:	4291      	cmp	r1, r2
 801813e:	d100      	bne.n	8018142 <memcpy+0xc>
 8018140:	bd10      	pop	{r4, pc}
 8018142:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018146:	f803 4f01 	strb.w	r4, [r3, #1]!
 801814a:	e7f7      	b.n	801813c <memcpy+0x6>

0801814c <memmove>:
 801814c:	4288      	cmp	r0, r1
 801814e:	b510      	push	{r4, lr}
 8018150:	eb01 0302 	add.w	r3, r1, r2
 8018154:	d807      	bhi.n	8018166 <memmove+0x1a>
 8018156:	1e42      	subs	r2, r0, #1
 8018158:	4299      	cmp	r1, r3
 801815a:	d00a      	beq.n	8018172 <memmove+0x26>
 801815c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018160:	f802 4f01 	strb.w	r4, [r2, #1]!
 8018164:	e7f8      	b.n	8018158 <memmove+0xc>
 8018166:	4283      	cmp	r3, r0
 8018168:	d9f5      	bls.n	8018156 <memmove+0xa>
 801816a:	1881      	adds	r1, r0, r2
 801816c:	1ad2      	subs	r2, r2, r3
 801816e:	42d3      	cmn	r3, r2
 8018170:	d100      	bne.n	8018174 <memmove+0x28>
 8018172:	bd10      	pop	{r4, pc}
 8018174:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018178:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801817c:	e7f7      	b.n	801816e <memmove+0x22>

0801817e <memset>:
 801817e:	4402      	add	r2, r0
 8018180:	4603      	mov	r3, r0
 8018182:	4293      	cmp	r3, r2
 8018184:	d100      	bne.n	8018188 <memset+0xa>
 8018186:	4770      	bx	lr
 8018188:	f803 1b01 	strb.w	r1, [r3], #1
 801818c:	e7f9      	b.n	8018182 <memset+0x4>
	...

08018190 <iprintf>:
 8018190:	b40f      	push	{r0, r1, r2, r3}
 8018192:	4b0a      	ldr	r3, [pc, #40]	; (80181bc <iprintf+0x2c>)
 8018194:	b513      	push	{r0, r1, r4, lr}
 8018196:	681c      	ldr	r4, [r3, #0]
 8018198:	b124      	cbz	r4, 80181a4 <iprintf+0x14>
 801819a:	69a3      	ldr	r3, [r4, #24]
 801819c:	b913      	cbnz	r3, 80181a4 <iprintf+0x14>
 801819e:	4620      	mov	r0, r4
 80181a0:	f000 f91a 	bl	80183d8 <__sinit>
 80181a4:	ab05      	add	r3, sp, #20
 80181a6:	9a04      	ldr	r2, [sp, #16]
 80181a8:	68a1      	ldr	r1, [r4, #8]
 80181aa:	9301      	str	r3, [sp, #4]
 80181ac:	4620      	mov	r0, r4
 80181ae:	f000 fbc9 	bl	8018944 <_vfiprintf_r>
 80181b2:	b002      	add	sp, #8
 80181b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80181b8:	b004      	add	sp, #16
 80181ba:	4770      	bx	lr
 80181bc:	20000020 	.word	0x20000020

080181c0 <rand>:
 80181c0:	b538      	push	{r3, r4, r5, lr}
 80181c2:	4b13      	ldr	r3, [pc, #76]	; (8018210 <rand+0x50>)
 80181c4:	681c      	ldr	r4, [r3, #0]
 80181c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80181c8:	b97b      	cbnz	r3, 80181ea <rand+0x2a>
 80181ca:	2018      	movs	r0, #24
 80181cc:	f000 f98e 	bl	80184ec <malloc>
 80181d0:	4a10      	ldr	r2, [pc, #64]	; (8018214 <rand+0x54>)
 80181d2:	4b11      	ldr	r3, [pc, #68]	; (8018218 <rand+0x58>)
 80181d4:	63a0      	str	r0, [r4, #56]	; 0x38
 80181d6:	e9c0 2300 	strd	r2, r3, [r0]
 80181da:	4b10      	ldr	r3, [pc, #64]	; (801821c <rand+0x5c>)
 80181dc:	6083      	str	r3, [r0, #8]
 80181de:	230b      	movs	r3, #11
 80181e0:	8183      	strh	r3, [r0, #12]
 80181e2:	2201      	movs	r2, #1
 80181e4:	2300      	movs	r3, #0
 80181e6:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80181ea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80181ec:	480c      	ldr	r0, [pc, #48]	; (8018220 <rand+0x60>)
 80181ee:	690a      	ldr	r2, [r1, #16]
 80181f0:	694b      	ldr	r3, [r1, #20]
 80181f2:	4c0c      	ldr	r4, [pc, #48]	; (8018224 <rand+0x64>)
 80181f4:	4350      	muls	r0, r2
 80181f6:	fb04 0003 	mla	r0, r4, r3, r0
 80181fa:	fba2 2304 	umull	r2, r3, r2, r4
 80181fe:	4403      	add	r3, r0
 8018200:	1c54      	adds	r4, r2, #1
 8018202:	f143 0500 	adc.w	r5, r3, #0
 8018206:	e9c1 4504 	strd	r4, r5, [r1, #16]
 801820a:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 801820e:	bd38      	pop	{r3, r4, r5, pc}
 8018210:	20000020 	.word	0x20000020
 8018214:	abcd330e 	.word	0xabcd330e
 8018218:	e66d1234 	.word	0xe66d1234
 801821c:	0005deec 	.word	0x0005deec
 8018220:	5851f42d 	.word	0x5851f42d
 8018224:	4c957f2d 	.word	0x4c957f2d

08018228 <siprintf>:
 8018228:	b40e      	push	{r1, r2, r3}
 801822a:	b500      	push	{lr}
 801822c:	b09c      	sub	sp, #112	; 0x70
 801822e:	ab1d      	add	r3, sp, #116	; 0x74
 8018230:	9002      	str	r0, [sp, #8]
 8018232:	9006      	str	r0, [sp, #24]
 8018234:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018238:	4809      	ldr	r0, [pc, #36]	; (8018260 <siprintf+0x38>)
 801823a:	9107      	str	r1, [sp, #28]
 801823c:	9104      	str	r1, [sp, #16]
 801823e:	4909      	ldr	r1, [pc, #36]	; (8018264 <siprintf+0x3c>)
 8018240:	f853 2b04 	ldr.w	r2, [r3], #4
 8018244:	9105      	str	r1, [sp, #20]
 8018246:	6800      	ldr	r0, [r0, #0]
 8018248:	9301      	str	r3, [sp, #4]
 801824a:	a902      	add	r1, sp, #8
 801824c:	f000 fa58 	bl	8018700 <_svfiprintf_r>
 8018250:	9b02      	ldr	r3, [sp, #8]
 8018252:	2200      	movs	r2, #0
 8018254:	701a      	strb	r2, [r3, #0]
 8018256:	b01c      	add	sp, #112	; 0x70
 8018258:	f85d eb04 	ldr.w	lr, [sp], #4
 801825c:	b003      	add	sp, #12
 801825e:	4770      	bx	lr
 8018260:	20000020 	.word	0x20000020
 8018264:	ffff0208 	.word	0xffff0208

08018268 <strcasecmp>:
 8018268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801826a:	4606      	mov	r6, r0
 801826c:	460f      	mov	r7, r1
 801826e:	f816 4b01 	ldrb.w	r4, [r6], #1
 8018272:	f7ff ff31 	bl	80180d8 <__locale_ctype_ptr>
 8018276:	4420      	add	r0, r4
 8018278:	f817 5b01 	ldrb.w	r5, [r7], #1
 801827c:	7843      	ldrb	r3, [r0, #1]
 801827e:	f003 0303 	and.w	r3, r3, #3
 8018282:	2b01      	cmp	r3, #1
 8018284:	bf08      	it	eq
 8018286:	3420      	addeq	r4, #32
 8018288:	f7ff ff26 	bl	80180d8 <__locale_ctype_ptr>
 801828c:	4428      	add	r0, r5
 801828e:	7842      	ldrb	r2, [r0, #1]
 8018290:	f002 0203 	and.w	r2, r2, #3
 8018294:	2a01      	cmp	r2, #1
 8018296:	bf08      	it	eq
 8018298:	3520      	addeq	r5, #32
 801829a:	1b60      	subs	r0, r4, r5
 801829c:	d101      	bne.n	80182a2 <strcasecmp+0x3a>
 801829e:	2d00      	cmp	r5, #0
 80182a0:	d1e5      	bne.n	801826e <strcasecmp+0x6>
 80182a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080182a4 <strchr>:
 80182a4:	b2c9      	uxtb	r1, r1
 80182a6:	4603      	mov	r3, r0
 80182a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80182ac:	b11a      	cbz	r2, 80182b6 <strchr+0x12>
 80182ae:	428a      	cmp	r2, r1
 80182b0:	d1f9      	bne.n	80182a6 <strchr+0x2>
 80182b2:	4618      	mov	r0, r3
 80182b4:	4770      	bx	lr
 80182b6:	2900      	cmp	r1, #0
 80182b8:	bf18      	it	ne
 80182ba:	2300      	movne	r3, #0
 80182bc:	e7f9      	b.n	80182b2 <strchr+0xe>

080182be <strncmp>:
 80182be:	b510      	push	{r4, lr}
 80182c0:	b16a      	cbz	r2, 80182de <strncmp+0x20>
 80182c2:	3901      	subs	r1, #1
 80182c4:	1884      	adds	r4, r0, r2
 80182c6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80182ca:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80182ce:	4293      	cmp	r3, r2
 80182d0:	d103      	bne.n	80182da <strncmp+0x1c>
 80182d2:	42a0      	cmp	r0, r4
 80182d4:	d001      	beq.n	80182da <strncmp+0x1c>
 80182d6:	2b00      	cmp	r3, #0
 80182d8:	d1f5      	bne.n	80182c6 <strncmp+0x8>
 80182da:	1a98      	subs	r0, r3, r2
 80182dc:	bd10      	pop	{r4, pc}
 80182de:	4610      	mov	r0, r2
 80182e0:	e7fc      	b.n	80182dc <strncmp+0x1e>

080182e2 <__strtok_r>:
 80182e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80182e4:	b918      	cbnz	r0, 80182ee <__strtok_r+0xc>
 80182e6:	6810      	ldr	r0, [r2, #0]
 80182e8:	b908      	cbnz	r0, 80182ee <__strtok_r+0xc>
 80182ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80182ec:	4620      	mov	r0, r4
 80182ee:	4604      	mov	r4, r0
 80182f0:	460f      	mov	r7, r1
 80182f2:	f814 5b01 	ldrb.w	r5, [r4], #1
 80182f6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80182fa:	b91e      	cbnz	r6, 8018304 <__strtok_r+0x22>
 80182fc:	b96d      	cbnz	r5, 801831a <__strtok_r+0x38>
 80182fe:	6015      	str	r5, [r2, #0]
 8018300:	4628      	mov	r0, r5
 8018302:	e7f2      	b.n	80182ea <__strtok_r+0x8>
 8018304:	42b5      	cmp	r5, r6
 8018306:	d1f6      	bne.n	80182f6 <__strtok_r+0x14>
 8018308:	2b00      	cmp	r3, #0
 801830a:	d1ef      	bne.n	80182ec <__strtok_r+0xa>
 801830c:	6014      	str	r4, [r2, #0]
 801830e:	7003      	strb	r3, [r0, #0]
 8018310:	e7eb      	b.n	80182ea <__strtok_r+0x8>
 8018312:	462b      	mov	r3, r5
 8018314:	e00d      	b.n	8018332 <__strtok_r+0x50>
 8018316:	b926      	cbnz	r6, 8018322 <__strtok_r+0x40>
 8018318:	461c      	mov	r4, r3
 801831a:	4623      	mov	r3, r4
 801831c:	460f      	mov	r7, r1
 801831e:	f813 5b01 	ldrb.w	r5, [r3], #1
 8018322:	f817 6b01 	ldrb.w	r6, [r7], #1
 8018326:	42b5      	cmp	r5, r6
 8018328:	d1f5      	bne.n	8018316 <__strtok_r+0x34>
 801832a:	2d00      	cmp	r5, #0
 801832c:	d0f1      	beq.n	8018312 <__strtok_r+0x30>
 801832e:	2100      	movs	r1, #0
 8018330:	7021      	strb	r1, [r4, #0]
 8018332:	6013      	str	r3, [r2, #0]
 8018334:	e7d9      	b.n	80182ea <__strtok_r+0x8>

08018336 <strtok_r>:
 8018336:	2301      	movs	r3, #1
 8018338:	f7ff bfd3 	b.w	80182e2 <__strtok_r>

0801833c <__ascii_wctomb>:
 801833c:	b149      	cbz	r1, 8018352 <__ascii_wctomb+0x16>
 801833e:	2aff      	cmp	r2, #255	; 0xff
 8018340:	bf85      	ittet	hi
 8018342:	238a      	movhi	r3, #138	; 0x8a
 8018344:	6003      	strhi	r3, [r0, #0]
 8018346:	700a      	strbls	r2, [r1, #0]
 8018348:	f04f 30ff 	movhi.w	r0, #4294967295
 801834c:	bf98      	it	ls
 801834e:	2001      	movls	r0, #1
 8018350:	4770      	bx	lr
 8018352:	4608      	mov	r0, r1
 8018354:	4770      	bx	lr
	...

08018358 <std>:
 8018358:	2300      	movs	r3, #0
 801835a:	b510      	push	{r4, lr}
 801835c:	4604      	mov	r4, r0
 801835e:	e9c0 3300 	strd	r3, r3, [r0]
 8018362:	6083      	str	r3, [r0, #8]
 8018364:	8181      	strh	r1, [r0, #12]
 8018366:	6643      	str	r3, [r0, #100]	; 0x64
 8018368:	81c2      	strh	r2, [r0, #14]
 801836a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801836e:	6183      	str	r3, [r0, #24]
 8018370:	4619      	mov	r1, r3
 8018372:	2208      	movs	r2, #8
 8018374:	305c      	adds	r0, #92	; 0x5c
 8018376:	f7ff ff02 	bl	801817e <memset>
 801837a:	4b05      	ldr	r3, [pc, #20]	; (8018390 <std+0x38>)
 801837c:	6263      	str	r3, [r4, #36]	; 0x24
 801837e:	4b05      	ldr	r3, [pc, #20]	; (8018394 <std+0x3c>)
 8018380:	62a3      	str	r3, [r4, #40]	; 0x28
 8018382:	4b05      	ldr	r3, [pc, #20]	; (8018398 <std+0x40>)
 8018384:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018386:	4b05      	ldr	r3, [pc, #20]	; (801839c <std+0x44>)
 8018388:	6224      	str	r4, [r4, #32]
 801838a:	6323      	str	r3, [r4, #48]	; 0x30
 801838c:	bd10      	pop	{r4, pc}
 801838e:	bf00      	nop
 8018390:	08018ea1 	.word	0x08018ea1
 8018394:	08018ec3 	.word	0x08018ec3
 8018398:	08018efb 	.word	0x08018efb
 801839c:	08018f1f 	.word	0x08018f1f

080183a0 <_cleanup_r>:
 80183a0:	4901      	ldr	r1, [pc, #4]	; (80183a8 <_cleanup_r+0x8>)
 80183a2:	f000 b885 	b.w	80184b0 <_fwalk_reent>
 80183a6:	bf00      	nop
 80183a8:	080191f9 	.word	0x080191f9

080183ac <__sfmoreglue>:
 80183ac:	b570      	push	{r4, r5, r6, lr}
 80183ae:	1e4a      	subs	r2, r1, #1
 80183b0:	2568      	movs	r5, #104	; 0x68
 80183b2:	4355      	muls	r5, r2
 80183b4:	460e      	mov	r6, r1
 80183b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80183ba:	f000 f8ed 	bl	8018598 <_malloc_r>
 80183be:	4604      	mov	r4, r0
 80183c0:	b140      	cbz	r0, 80183d4 <__sfmoreglue+0x28>
 80183c2:	2100      	movs	r1, #0
 80183c4:	e9c0 1600 	strd	r1, r6, [r0]
 80183c8:	300c      	adds	r0, #12
 80183ca:	60a0      	str	r0, [r4, #8]
 80183cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80183d0:	f7ff fed5 	bl	801817e <memset>
 80183d4:	4620      	mov	r0, r4
 80183d6:	bd70      	pop	{r4, r5, r6, pc}

080183d8 <__sinit>:
 80183d8:	6983      	ldr	r3, [r0, #24]
 80183da:	b510      	push	{r4, lr}
 80183dc:	4604      	mov	r4, r0
 80183de:	bb33      	cbnz	r3, 801842e <__sinit+0x56>
 80183e0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80183e4:	6503      	str	r3, [r0, #80]	; 0x50
 80183e6:	4b12      	ldr	r3, [pc, #72]	; (8018430 <__sinit+0x58>)
 80183e8:	4a12      	ldr	r2, [pc, #72]	; (8018434 <__sinit+0x5c>)
 80183ea:	681b      	ldr	r3, [r3, #0]
 80183ec:	6282      	str	r2, [r0, #40]	; 0x28
 80183ee:	4298      	cmp	r0, r3
 80183f0:	bf04      	itt	eq
 80183f2:	2301      	moveq	r3, #1
 80183f4:	6183      	streq	r3, [r0, #24]
 80183f6:	f000 f81f 	bl	8018438 <__sfp>
 80183fa:	6060      	str	r0, [r4, #4]
 80183fc:	4620      	mov	r0, r4
 80183fe:	f000 f81b 	bl	8018438 <__sfp>
 8018402:	60a0      	str	r0, [r4, #8]
 8018404:	4620      	mov	r0, r4
 8018406:	f000 f817 	bl	8018438 <__sfp>
 801840a:	2200      	movs	r2, #0
 801840c:	60e0      	str	r0, [r4, #12]
 801840e:	2104      	movs	r1, #4
 8018410:	6860      	ldr	r0, [r4, #4]
 8018412:	f7ff ffa1 	bl	8018358 <std>
 8018416:	2201      	movs	r2, #1
 8018418:	2109      	movs	r1, #9
 801841a:	68a0      	ldr	r0, [r4, #8]
 801841c:	f7ff ff9c 	bl	8018358 <std>
 8018420:	2202      	movs	r2, #2
 8018422:	2112      	movs	r1, #18
 8018424:	68e0      	ldr	r0, [r4, #12]
 8018426:	f7ff ff97 	bl	8018358 <std>
 801842a:	2301      	movs	r3, #1
 801842c:	61a3      	str	r3, [r4, #24]
 801842e:	bd10      	pop	{r4, pc}
 8018430:	08028594 	.word	0x08028594
 8018434:	080183a1 	.word	0x080183a1

08018438 <__sfp>:
 8018438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801843a:	4b1b      	ldr	r3, [pc, #108]	; (80184a8 <__sfp+0x70>)
 801843c:	681e      	ldr	r6, [r3, #0]
 801843e:	69b3      	ldr	r3, [r6, #24]
 8018440:	4607      	mov	r7, r0
 8018442:	b913      	cbnz	r3, 801844a <__sfp+0x12>
 8018444:	4630      	mov	r0, r6
 8018446:	f7ff ffc7 	bl	80183d8 <__sinit>
 801844a:	3648      	adds	r6, #72	; 0x48
 801844c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018450:	3b01      	subs	r3, #1
 8018452:	d503      	bpl.n	801845c <__sfp+0x24>
 8018454:	6833      	ldr	r3, [r6, #0]
 8018456:	b133      	cbz	r3, 8018466 <__sfp+0x2e>
 8018458:	6836      	ldr	r6, [r6, #0]
 801845a:	e7f7      	b.n	801844c <__sfp+0x14>
 801845c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018460:	b16d      	cbz	r5, 801847e <__sfp+0x46>
 8018462:	3468      	adds	r4, #104	; 0x68
 8018464:	e7f4      	b.n	8018450 <__sfp+0x18>
 8018466:	2104      	movs	r1, #4
 8018468:	4638      	mov	r0, r7
 801846a:	f7ff ff9f 	bl	80183ac <__sfmoreglue>
 801846e:	6030      	str	r0, [r6, #0]
 8018470:	2800      	cmp	r0, #0
 8018472:	d1f1      	bne.n	8018458 <__sfp+0x20>
 8018474:	230c      	movs	r3, #12
 8018476:	603b      	str	r3, [r7, #0]
 8018478:	4604      	mov	r4, r0
 801847a:	4620      	mov	r0, r4
 801847c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801847e:	4b0b      	ldr	r3, [pc, #44]	; (80184ac <__sfp+0x74>)
 8018480:	6665      	str	r5, [r4, #100]	; 0x64
 8018482:	e9c4 5500 	strd	r5, r5, [r4]
 8018486:	60a5      	str	r5, [r4, #8]
 8018488:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801848c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8018490:	2208      	movs	r2, #8
 8018492:	4629      	mov	r1, r5
 8018494:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018498:	f7ff fe71 	bl	801817e <memset>
 801849c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80184a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80184a4:	e7e9      	b.n	801847a <__sfp+0x42>
 80184a6:	bf00      	nop
 80184a8:	08028594 	.word	0x08028594
 80184ac:	ffff0001 	.word	0xffff0001

080184b0 <_fwalk_reent>:
 80184b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80184b4:	4680      	mov	r8, r0
 80184b6:	4689      	mov	r9, r1
 80184b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80184bc:	2600      	movs	r6, #0
 80184be:	b914      	cbnz	r4, 80184c6 <_fwalk_reent+0x16>
 80184c0:	4630      	mov	r0, r6
 80184c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80184c6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80184ca:	3f01      	subs	r7, #1
 80184cc:	d501      	bpl.n	80184d2 <_fwalk_reent+0x22>
 80184ce:	6824      	ldr	r4, [r4, #0]
 80184d0:	e7f5      	b.n	80184be <_fwalk_reent+0xe>
 80184d2:	89ab      	ldrh	r3, [r5, #12]
 80184d4:	2b01      	cmp	r3, #1
 80184d6:	d907      	bls.n	80184e8 <_fwalk_reent+0x38>
 80184d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80184dc:	3301      	adds	r3, #1
 80184de:	d003      	beq.n	80184e8 <_fwalk_reent+0x38>
 80184e0:	4629      	mov	r1, r5
 80184e2:	4640      	mov	r0, r8
 80184e4:	47c8      	blx	r9
 80184e6:	4306      	orrs	r6, r0
 80184e8:	3568      	adds	r5, #104	; 0x68
 80184ea:	e7ee      	b.n	80184ca <_fwalk_reent+0x1a>

080184ec <malloc>:
 80184ec:	4b02      	ldr	r3, [pc, #8]	; (80184f8 <malloc+0xc>)
 80184ee:	4601      	mov	r1, r0
 80184f0:	6818      	ldr	r0, [r3, #0]
 80184f2:	f000 b851 	b.w	8018598 <_malloc_r>
 80184f6:	bf00      	nop
 80184f8:	20000020 	.word	0x20000020

080184fc <_free_r>:
 80184fc:	b538      	push	{r3, r4, r5, lr}
 80184fe:	4605      	mov	r5, r0
 8018500:	2900      	cmp	r1, #0
 8018502:	d045      	beq.n	8018590 <_free_r+0x94>
 8018504:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018508:	1f0c      	subs	r4, r1, #4
 801850a:	2b00      	cmp	r3, #0
 801850c:	bfb8      	it	lt
 801850e:	18e4      	addlt	r4, r4, r3
 8018510:	f000 ff12 	bl	8019338 <__malloc_lock>
 8018514:	4a1f      	ldr	r2, [pc, #124]	; (8018594 <_free_r+0x98>)
 8018516:	6813      	ldr	r3, [r2, #0]
 8018518:	4610      	mov	r0, r2
 801851a:	b933      	cbnz	r3, 801852a <_free_r+0x2e>
 801851c:	6063      	str	r3, [r4, #4]
 801851e:	6014      	str	r4, [r2, #0]
 8018520:	4628      	mov	r0, r5
 8018522:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018526:	f000 bf08 	b.w	801933a <__malloc_unlock>
 801852a:	42a3      	cmp	r3, r4
 801852c:	d90c      	bls.n	8018548 <_free_r+0x4c>
 801852e:	6821      	ldr	r1, [r4, #0]
 8018530:	1862      	adds	r2, r4, r1
 8018532:	4293      	cmp	r3, r2
 8018534:	bf04      	itt	eq
 8018536:	681a      	ldreq	r2, [r3, #0]
 8018538:	685b      	ldreq	r3, [r3, #4]
 801853a:	6063      	str	r3, [r4, #4]
 801853c:	bf04      	itt	eq
 801853e:	1852      	addeq	r2, r2, r1
 8018540:	6022      	streq	r2, [r4, #0]
 8018542:	6004      	str	r4, [r0, #0]
 8018544:	e7ec      	b.n	8018520 <_free_r+0x24>
 8018546:	4613      	mov	r3, r2
 8018548:	685a      	ldr	r2, [r3, #4]
 801854a:	b10a      	cbz	r2, 8018550 <_free_r+0x54>
 801854c:	42a2      	cmp	r2, r4
 801854e:	d9fa      	bls.n	8018546 <_free_r+0x4a>
 8018550:	6819      	ldr	r1, [r3, #0]
 8018552:	1858      	adds	r0, r3, r1
 8018554:	42a0      	cmp	r0, r4
 8018556:	d10b      	bne.n	8018570 <_free_r+0x74>
 8018558:	6820      	ldr	r0, [r4, #0]
 801855a:	4401      	add	r1, r0
 801855c:	1858      	adds	r0, r3, r1
 801855e:	4282      	cmp	r2, r0
 8018560:	6019      	str	r1, [r3, #0]
 8018562:	d1dd      	bne.n	8018520 <_free_r+0x24>
 8018564:	6810      	ldr	r0, [r2, #0]
 8018566:	6852      	ldr	r2, [r2, #4]
 8018568:	605a      	str	r2, [r3, #4]
 801856a:	4401      	add	r1, r0
 801856c:	6019      	str	r1, [r3, #0]
 801856e:	e7d7      	b.n	8018520 <_free_r+0x24>
 8018570:	d902      	bls.n	8018578 <_free_r+0x7c>
 8018572:	230c      	movs	r3, #12
 8018574:	602b      	str	r3, [r5, #0]
 8018576:	e7d3      	b.n	8018520 <_free_r+0x24>
 8018578:	6820      	ldr	r0, [r4, #0]
 801857a:	1821      	adds	r1, r4, r0
 801857c:	428a      	cmp	r2, r1
 801857e:	bf04      	itt	eq
 8018580:	6811      	ldreq	r1, [r2, #0]
 8018582:	6852      	ldreq	r2, [r2, #4]
 8018584:	6062      	str	r2, [r4, #4]
 8018586:	bf04      	itt	eq
 8018588:	1809      	addeq	r1, r1, r0
 801858a:	6021      	streq	r1, [r4, #0]
 801858c:	605c      	str	r4, [r3, #4]
 801858e:	e7c7      	b.n	8018520 <_free_r+0x24>
 8018590:	bd38      	pop	{r3, r4, r5, pc}
 8018592:	bf00      	nop
 8018594:	20008da0 	.word	0x20008da0

08018598 <_malloc_r>:
 8018598:	b570      	push	{r4, r5, r6, lr}
 801859a:	1ccd      	adds	r5, r1, #3
 801859c:	f025 0503 	bic.w	r5, r5, #3
 80185a0:	3508      	adds	r5, #8
 80185a2:	2d0c      	cmp	r5, #12
 80185a4:	bf38      	it	cc
 80185a6:	250c      	movcc	r5, #12
 80185a8:	2d00      	cmp	r5, #0
 80185aa:	4606      	mov	r6, r0
 80185ac:	db01      	blt.n	80185b2 <_malloc_r+0x1a>
 80185ae:	42a9      	cmp	r1, r5
 80185b0:	d903      	bls.n	80185ba <_malloc_r+0x22>
 80185b2:	230c      	movs	r3, #12
 80185b4:	6033      	str	r3, [r6, #0]
 80185b6:	2000      	movs	r0, #0
 80185b8:	bd70      	pop	{r4, r5, r6, pc}
 80185ba:	f000 febd 	bl	8019338 <__malloc_lock>
 80185be:	4a21      	ldr	r2, [pc, #132]	; (8018644 <_malloc_r+0xac>)
 80185c0:	6814      	ldr	r4, [r2, #0]
 80185c2:	4621      	mov	r1, r4
 80185c4:	b991      	cbnz	r1, 80185ec <_malloc_r+0x54>
 80185c6:	4c20      	ldr	r4, [pc, #128]	; (8018648 <_malloc_r+0xb0>)
 80185c8:	6823      	ldr	r3, [r4, #0]
 80185ca:	b91b      	cbnz	r3, 80185d4 <_malloc_r+0x3c>
 80185cc:	4630      	mov	r0, r6
 80185ce:	f000 fc57 	bl	8018e80 <_sbrk_r>
 80185d2:	6020      	str	r0, [r4, #0]
 80185d4:	4629      	mov	r1, r5
 80185d6:	4630      	mov	r0, r6
 80185d8:	f000 fc52 	bl	8018e80 <_sbrk_r>
 80185dc:	1c43      	adds	r3, r0, #1
 80185de:	d124      	bne.n	801862a <_malloc_r+0x92>
 80185e0:	230c      	movs	r3, #12
 80185e2:	6033      	str	r3, [r6, #0]
 80185e4:	4630      	mov	r0, r6
 80185e6:	f000 fea8 	bl	801933a <__malloc_unlock>
 80185ea:	e7e4      	b.n	80185b6 <_malloc_r+0x1e>
 80185ec:	680b      	ldr	r3, [r1, #0]
 80185ee:	1b5b      	subs	r3, r3, r5
 80185f0:	d418      	bmi.n	8018624 <_malloc_r+0x8c>
 80185f2:	2b0b      	cmp	r3, #11
 80185f4:	d90f      	bls.n	8018616 <_malloc_r+0x7e>
 80185f6:	600b      	str	r3, [r1, #0]
 80185f8:	50cd      	str	r5, [r1, r3]
 80185fa:	18cc      	adds	r4, r1, r3
 80185fc:	4630      	mov	r0, r6
 80185fe:	f000 fe9c 	bl	801933a <__malloc_unlock>
 8018602:	f104 000b 	add.w	r0, r4, #11
 8018606:	1d23      	adds	r3, r4, #4
 8018608:	f020 0007 	bic.w	r0, r0, #7
 801860c:	1ac3      	subs	r3, r0, r3
 801860e:	d0d3      	beq.n	80185b8 <_malloc_r+0x20>
 8018610:	425a      	negs	r2, r3
 8018612:	50e2      	str	r2, [r4, r3]
 8018614:	e7d0      	b.n	80185b8 <_malloc_r+0x20>
 8018616:	428c      	cmp	r4, r1
 8018618:	684b      	ldr	r3, [r1, #4]
 801861a:	bf16      	itet	ne
 801861c:	6063      	strne	r3, [r4, #4]
 801861e:	6013      	streq	r3, [r2, #0]
 8018620:	460c      	movne	r4, r1
 8018622:	e7eb      	b.n	80185fc <_malloc_r+0x64>
 8018624:	460c      	mov	r4, r1
 8018626:	6849      	ldr	r1, [r1, #4]
 8018628:	e7cc      	b.n	80185c4 <_malloc_r+0x2c>
 801862a:	1cc4      	adds	r4, r0, #3
 801862c:	f024 0403 	bic.w	r4, r4, #3
 8018630:	42a0      	cmp	r0, r4
 8018632:	d005      	beq.n	8018640 <_malloc_r+0xa8>
 8018634:	1a21      	subs	r1, r4, r0
 8018636:	4630      	mov	r0, r6
 8018638:	f000 fc22 	bl	8018e80 <_sbrk_r>
 801863c:	3001      	adds	r0, #1
 801863e:	d0cf      	beq.n	80185e0 <_malloc_r+0x48>
 8018640:	6025      	str	r5, [r4, #0]
 8018642:	e7db      	b.n	80185fc <_malloc_r+0x64>
 8018644:	20008da0 	.word	0x20008da0
 8018648:	20008da4 	.word	0x20008da4

0801864c <__ssputs_r>:
 801864c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018650:	688e      	ldr	r6, [r1, #8]
 8018652:	429e      	cmp	r6, r3
 8018654:	4682      	mov	sl, r0
 8018656:	460c      	mov	r4, r1
 8018658:	4690      	mov	r8, r2
 801865a:	4699      	mov	r9, r3
 801865c:	d837      	bhi.n	80186ce <__ssputs_r+0x82>
 801865e:	898a      	ldrh	r2, [r1, #12]
 8018660:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018664:	d031      	beq.n	80186ca <__ssputs_r+0x7e>
 8018666:	6825      	ldr	r5, [r4, #0]
 8018668:	6909      	ldr	r1, [r1, #16]
 801866a:	1a6f      	subs	r7, r5, r1
 801866c:	6965      	ldr	r5, [r4, #20]
 801866e:	2302      	movs	r3, #2
 8018670:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018674:	fb95 f5f3 	sdiv	r5, r5, r3
 8018678:	f109 0301 	add.w	r3, r9, #1
 801867c:	443b      	add	r3, r7
 801867e:	429d      	cmp	r5, r3
 8018680:	bf38      	it	cc
 8018682:	461d      	movcc	r5, r3
 8018684:	0553      	lsls	r3, r2, #21
 8018686:	d530      	bpl.n	80186ea <__ssputs_r+0x9e>
 8018688:	4629      	mov	r1, r5
 801868a:	f7ff ff85 	bl	8018598 <_malloc_r>
 801868e:	4606      	mov	r6, r0
 8018690:	b950      	cbnz	r0, 80186a8 <__ssputs_r+0x5c>
 8018692:	230c      	movs	r3, #12
 8018694:	f8ca 3000 	str.w	r3, [sl]
 8018698:	89a3      	ldrh	r3, [r4, #12]
 801869a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801869e:	81a3      	strh	r3, [r4, #12]
 80186a0:	f04f 30ff 	mov.w	r0, #4294967295
 80186a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80186a8:	463a      	mov	r2, r7
 80186aa:	6921      	ldr	r1, [r4, #16]
 80186ac:	f7ff fd43 	bl	8018136 <memcpy>
 80186b0:	89a3      	ldrh	r3, [r4, #12]
 80186b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80186b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80186ba:	81a3      	strh	r3, [r4, #12]
 80186bc:	6126      	str	r6, [r4, #16]
 80186be:	6165      	str	r5, [r4, #20]
 80186c0:	443e      	add	r6, r7
 80186c2:	1bed      	subs	r5, r5, r7
 80186c4:	6026      	str	r6, [r4, #0]
 80186c6:	60a5      	str	r5, [r4, #8]
 80186c8:	464e      	mov	r6, r9
 80186ca:	454e      	cmp	r6, r9
 80186cc:	d900      	bls.n	80186d0 <__ssputs_r+0x84>
 80186ce:	464e      	mov	r6, r9
 80186d0:	4632      	mov	r2, r6
 80186d2:	4641      	mov	r1, r8
 80186d4:	6820      	ldr	r0, [r4, #0]
 80186d6:	f7ff fd39 	bl	801814c <memmove>
 80186da:	68a3      	ldr	r3, [r4, #8]
 80186dc:	1b9b      	subs	r3, r3, r6
 80186de:	60a3      	str	r3, [r4, #8]
 80186e0:	6823      	ldr	r3, [r4, #0]
 80186e2:	441e      	add	r6, r3
 80186e4:	6026      	str	r6, [r4, #0]
 80186e6:	2000      	movs	r0, #0
 80186e8:	e7dc      	b.n	80186a4 <__ssputs_r+0x58>
 80186ea:	462a      	mov	r2, r5
 80186ec:	f000 fe26 	bl	801933c <_realloc_r>
 80186f0:	4606      	mov	r6, r0
 80186f2:	2800      	cmp	r0, #0
 80186f4:	d1e2      	bne.n	80186bc <__ssputs_r+0x70>
 80186f6:	6921      	ldr	r1, [r4, #16]
 80186f8:	4650      	mov	r0, sl
 80186fa:	f7ff feff 	bl	80184fc <_free_r>
 80186fe:	e7c8      	b.n	8018692 <__ssputs_r+0x46>

08018700 <_svfiprintf_r>:
 8018700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018704:	461d      	mov	r5, r3
 8018706:	898b      	ldrh	r3, [r1, #12]
 8018708:	061f      	lsls	r7, r3, #24
 801870a:	b09d      	sub	sp, #116	; 0x74
 801870c:	4680      	mov	r8, r0
 801870e:	460c      	mov	r4, r1
 8018710:	4616      	mov	r6, r2
 8018712:	d50f      	bpl.n	8018734 <_svfiprintf_r+0x34>
 8018714:	690b      	ldr	r3, [r1, #16]
 8018716:	b96b      	cbnz	r3, 8018734 <_svfiprintf_r+0x34>
 8018718:	2140      	movs	r1, #64	; 0x40
 801871a:	f7ff ff3d 	bl	8018598 <_malloc_r>
 801871e:	6020      	str	r0, [r4, #0]
 8018720:	6120      	str	r0, [r4, #16]
 8018722:	b928      	cbnz	r0, 8018730 <_svfiprintf_r+0x30>
 8018724:	230c      	movs	r3, #12
 8018726:	f8c8 3000 	str.w	r3, [r8]
 801872a:	f04f 30ff 	mov.w	r0, #4294967295
 801872e:	e0c8      	b.n	80188c2 <_svfiprintf_r+0x1c2>
 8018730:	2340      	movs	r3, #64	; 0x40
 8018732:	6163      	str	r3, [r4, #20]
 8018734:	2300      	movs	r3, #0
 8018736:	9309      	str	r3, [sp, #36]	; 0x24
 8018738:	2320      	movs	r3, #32
 801873a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801873e:	2330      	movs	r3, #48	; 0x30
 8018740:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018744:	9503      	str	r5, [sp, #12]
 8018746:	f04f 0b01 	mov.w	fp, #1
 801874a:	4637      	mov	r7, r6
 801874c:	463d      	mov	r5, r7
 801874e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8018752:	b10b      	cbz	r3, 8018758 <_svfiprintf_r+0x58>
 8018754:	2b25      	cmp	r3, #37	; 0x25
 8018756:	d13e      	bne.n	80187d6 <_svfiprintf_r+0xd6>
 8018758:	ebb7 0a06 	subs.w	sl, r7, r6
 801875c:	d00b      	beq.n	8018776 <_svfiprintf_r+0x76>
 801875e:	4653      	mov	r3, sl
 8018760:	4632      	mov	r2, r6
 8018762:	4621      	mov	r1, r4
 8018764:	4640      	mov	r0, r8
 8018766:	f7ff ff71 	bl	801864c <__ssputs_r>
 801876a:	3001      	adds	r0, #1
 801876c:	f000 80a4 	beq.w	80188b8 <_svfiprintf_r+0x1b8>
 8018770:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018772:	4453      	add	r3, sl
 8018774:	9309      	str	r3, [sp, #36]	; 0x24
 8018776:	783b      	ldrb	r3, [r7, #0]
 8018778:	2b00      	cmp	r3, #0
 801877a:	f000 809d 	beq.w	80188b8 <_svfiprintf_r+0x1b8>
 801877e:	2300      	movs	r3, #0
 8018780:	f04f 32ff 	mov.w	r2, #4294967295
 8018784:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018788:	9304      	str	r3, [sp, #16]
 801878a:	9307      	str	r3, [sp, #28]
 801878c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018790:	931a      	str	r3, [sp, #104]	; 0x68
 8018792:	462f      	mov	r7, r5
 8018794:	2205      	movs	r2, #5
 8018796:	f817 1b01 	ldrb.w	r1, [r7], #1
 801879a:	4850      	ldr	r0, [pc, #320]	; (80188dc <_svfiprintf_r+0x1dc>)
 801879c:	f7e7 fd40 	bl	8000220 <memchr>
 80187a0:	9b04      	ldr	r3, [sp, #16]
 80187a2:	b9d0      	cbnz	r0, 80187da <_svfiprintf_r+0xda>
 80187a4:	06d9      	lsls	r1, r3, #27
 80187a6:	bf44      	itt	mi
 80187a8:	2220      	movmi	r2, #32
 80187aa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80187ae:	071a      	lsls	r2, r3, #28
 80187b0:	bf44      	itt	mi
 80187b2:	222b      	movmi	r2, #43	; 0x2b
 80187b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80187b8:	782a      	ldrb	r2, [r5, #0]
 80187ba:	2a2a      	cmp	r2, #42	; 0x2a
 80187bc:	d015      	beq.n	80187ea <_svfiprintf_r+0xea>
 80187be:	9a07      	ldr	r2, [sp, #28]
 80187c0:	462f      	mov	r7, r5
 80187c2:	2000      	movs	r0, #0
 80187c4:	250a      	movs	r5, #10
 80187c6:	4639      	mov	r1, r7
 80187c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80187cc:	3b30      	subs	r3, #48	; 0x30
 80187ce:	2b09      	cmp	r3, #9
 80187d0:	d94d      	bls.n	801886e <_svfiprintf_r+0x16e>
 80187d2:	b1b8      	cbz	r0, 8018804 <_svfiprintf_r+0x104>
 80187d4:	e00f      	b.n	80187f6 <_svfiprintf_r+0xf6>
 80187d6:	462f      	mov	r7, r5
 80187d8:	e7b8      	b.n	801874c <_svfiprintf_r+0x4c>
 80187da:	4a40      	ldr	r2, [pc, #256]	; (80188dc <_svfiprintf_r+0x1dc>)
 80187dc:	1a80      	subs	r0, r0, r2
 80187de:	fa0b f000 	lsl.w	r0, fp, r0
 80187e2:	4318      	orrs	r0, r3
 80187e4:	9004      	str	r0, [sp, #16]
 80187e6:	463d      	mov	r5, r7
 80187e8:	e7d3      	b.n	8018792 <_svfiprintf_r+0x92>
 80187ea:	9a03      	ldr	r2, [sp, #12]
 80187ec:	1d11      	adds	r1, r2, #4
 80187ee:	6812      	ldr	r2, [r2, #0]
 80187f0:	9103      	str	r1, [sp, #12]
 80187f2:	2a00      	cmp	r2, #0
 80187f4:	db01      	blt.n	80187fa <_svfiprintf_r+0xfa>
 80187f6:	9207      	str	r2, [sp, #28]
 80187f8:	e004      	b.n	8018804 <_svfiprintf_r+0x104>
 80187fa:	4252      	negs	r2, r2
 80187fc:	f043 0302 	orr.w	r3, r3, #2
 8018800:	9207      	str	r2, [sp, #28]
 8018802:	9304      	str	r3, [sp, #16]
 8018804:	783b      	ldrb	r3, [r7, #0]
 8018806:	2b2e      	cmp	r3, #46	; 0x2e
 8018808:	d10c      	bne.n	8018824 <_svfiprintf_r+0x124>
 801880a:	787b      	ldrb	r3, [r7, #1]
 801880c:	2b2a      	cmp	r3, #42	; 0x2a
 801880e:	d133      	bne.n	8018878 <_svfiprintf_r+0x178>
 8018810:	9b03      	ldr	r3, [sp, #12]
 8018812:	1d1a      	adds	r2, r3, #4
 8018814:	681b      	ldr	r3, [r3, #0]
 8018816:	9203      	str	r2, [sp, #12]
 8018818:	2b00      	cmp	r3, #0
 801881a:	bfb8      	it	lt
 801881c:	f04f 33ff 	movlt.w	r3, #4294967295
 8018820:	3702      	adds	r7, #2
 8018822:	9305      	str	r3, [sp, #20]
 8018824:	4d2e      	ldr	r5, [pc, #184]	; (80188e0 <_svfiprintf_r+0x1e0>)
 8018826:	7839      	ldrb	r1, [r7, #0]
 8018828:	2203      	movs	r2, #3
 801882a:	4628      	mov	r0, r5
 801882c:	f7e7 fcf8 	bl	8000220 <memchr>
 8018830:	b138      	cbz	r0, 8018842 <_svfiprintf_r+0x142>
 8018832:	2340      	movs	r3, #64	; 0x40
 8018834:	1b40      	subs	r0, r0, r5
 8018836:	fa03 f000 	lsl.w	r0, r3, r0
 801883a:	9b04      	ldr	r3, [sp, #16]
 801883c:	4303      	orrs	r3, r0
 801883e:	3701      	adds	r7, #1
 8018840:	9304      	str	r3, [sp, #16]
 8018842:	7839      	ldrb	r1, [r7, #0]
 8018844:	4827      	ldr	r0, [pc, #156]	; (80188e4 <_svfiprintf_r+0x1e4>)
 8018846:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801884a:	2206      	movs	r2, #6
 801884c:	1c7e      	adds	r6, r7, #1
 801884e:	f7e7 fce7 	bl	8000220 <memchr>
 8018852:	2800      	cmp	r0, #0
 8018854:	d038      	beq.n	80188c8 <_svfiprintf_r+0x1c8>
 8018856:	4b24      	ldr	r3, [pc, #144]	; (80188e8 <_svfiprintf_r+0x1e8>)
 8018858:	bb13      	cbnz	r3, 80188a0 <_svfiprintf_r+0x1a0>
 801885a:	9b03      	ldr	r3, [sp, #12]
 801885c:	3307      	adds	r3, #7
 801885e:	f023 0307 	bic.w	r3, r3, #7
 8018862:	3308      	adds	r3, #8
 8018864:	9303      	str	r3, [sp, #12]
 8018866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018868:	444b      	add	r3, r9
 801886a:	9309      	str	r3, [sp, #36]	; 0x24
 801886c:	e76d      	b.n	801874a <_svfiprintf_r+0x4a>
 801886e:	fb05 3202 	mla	r2, r5, r2, r3
 8018872:	2001      	movs	r0, #1
 8018874:	460f      	mov	r7, r1
 8018876:	e7a6      	b.n	80187c6 <_svfiprintf_r+0xc6>
 8018878:	2300      	movs	r3, #0
 801887a:	3701      	adds	r7, #1
 801887c:	9305      	str	r3, [sp, #20]
 801887e:	4619      	mov	r1, r3
 8018880:	250a      	movs	r5, #10
 8018882:	4638      	mov	r0, r7
 8018884:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018888:	3a30      	subs	r2, #48	; 0x30
 801888a:	2a09      	cmp	r2, #9
 801888c:	d903      	bls.n	8018896 <_svfiprintf_r+0x196>
 801888e:	2b00      	cmp	r3, #0
 8018890:	d0c8      	beq.n	8018824 <_svfiprintf_r+0x124>
 8018892:	9105      	str	r1, [sp, #20]
 8018894:	e7c6      	b.n	8018824 <_svfiprintf_r+0x124>
 8018896:	fb05 2101 	mla	r1, r5, r1, r2
 801889a:	2301      	movs	r3, #1
 801889c:	4607      	mov	r7, r0
 801889e:	e7f0      	b.n	8018882 <_svfiprintf_r+0x182>
 80188a0:	ab03      	add	r3, sp, #12
 80188a2:	9300      	str	r3, [sp, #0]
 80188a4:	4622      	mov	r2, r4
 80188a6:	4b11      	ldr	r3, [pc, #68]	; (80188ec <_svfiprintf_r+0x1ec>)
 80188a8:	a904      	add	r1, sp, #16
 80188aa:	4640      	mov	r0, r8
 80188ac:	f3af 8000 	nop.w
 80188b0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80188b4:	4681      	mov	r9, r0
 80188b6:	d1d6      	bne.n	8018866 <_svfiprintf_r+0x166>
 80188b8:	89a3      	ldrh	r3, [r4, #12]
 80188ba:	065b      	lsls	r3, r3, #25
 80188bc:	f53f af35 	bmi.w	801872a <_svfiprintf_r+0x2a>
 80188c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80188c2:	b01d      	add	sp, #116	; 0x74
 80188c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188c8:	ab03      	add	r3, sp, #12
 80188ca:	9300      	str	r3, [sp, #0]
 80188cc:	4622      	mov	r2, r4
 80188ce:	4b07      	ldr	r3, [pc, #28]	; (80188ec <_svfiprintf_r+0x1ec>)
 80188d0:	a904      	add	r1, sp, #16
 80188d2:	4640      	mov	r0, r8
 80188d4:	f000 f9c2 	bl	8018c5c <_printf_i>
 80188d8:	e7ea      	b.n	80188b0 <_svfiprintf_r+0x1b0>
 80188da:	bf00      	nop
 80188dc:	08028704 	.word	0x08028704
 80188e0:	0802870a 	.word	0x0802870a
 80188e4:	0802870e 	.word	0x0802870e
 80188e8:	00000000 	.word	0x00000000
 80188ec:	0801864d 	.word	0x0801864d

080188f0 <__sfputc_r>:
 80188f0:	6893      	ldr	r3, [r2, #8]
 80188f2:	3b01      	subs	r3, #1
 80188f4:	2b00      	cmp	r3, #0
 80188f6:	b410      	push	{r4}
 80188f8:	6093      	str	r3, [r2, #8]
 80188fa:	da08      	bge.n	801890e <__sfputc_r+0x1e>
 80188fc:	6994      	ldr	r4, [r2, #24]
 80188fe:	42a3      	cmp	r3, r4
 8018900:	db01      	blt.n	8018906 <__sfputc_r+0x16>
 8018902:	290a      	cmp	r1, #10
 8018904:	d103      	bne.n	801890e <__sfputc_r+0x1e>
 8018906:	f85d 4b04 	ldr.w	r4, [sp], #4
 801890a:	f000 bb0d 	b.w	8018f28 <__swbuf_r>
 801890e:	6813      	ldr	r3, [r2, #0]
 8018910:	1c58      	adds	r0, r3, #1
 8018912:	6010      	str	r0, [r2, #0]
 8018914:	7019      	strb	r1, [r3, #0]
 8018916:	4608      	mov	r0, r1
 8018918:	f85d 4b04 	ldr.w	r4, [sp], #4
 801891c:	4770      	bx	lr

0801891e <__sfputs_r>:
 801891e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018920:	4606      	mov	r6, r0
 8018922:	460f      	mov	r7, r1
 8018924:	4614      	mov	r4, r2
 8018926:	18d5      	adds	r5, r2, r3
 8018928:	42ac      	cmp	r4, r5
 801892a:	d101      	bne.n	8018930 <__sfputs_r+0x12>
 801892c:	2000      	movs	r0, #0
 801892e:	e007      	b.n	8018940 <__sfputs_r+0x22>
 8018930:	463a      	mov	r2, r7
 8018932:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018936:	4630      	mov	r0, r6
 8018938:	f7ff ffda 	bl	80188f0 <__sfputc_r>
 801893c:	1c43      	adds	r3, r0, #1
 801893e:	d1f3      	bne.n	8018928 <__sfputs_r+0xa>
 8018940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018944 <_vfiprintf_r>:
 8018944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018948:	460c      	mov	r4, r1
 801894a:	b09d      	sub	sp, #116	; 0x74
 801894c:	4617      	mov	r7, r2
 801894e:	461d      	mov	r5, r3
 8018950:	4606      	mov	r6, r0
 8018952:	b118      	cbz	r0, 801895c <_vfiprintf_r+0x18>
 8018954:	6983      	ldr	r3, [r0, #24]
 8018956:	b90b      	cbnz	r3, 801895c <_vfiprintf_r+0x18>
 8018958:	f7ff fd3e 	bl	80183d8 <__sinit>
 801895c:	4b7c      	ldr	r3, [pc, #496]	; (8018b50 <_vfiprintf_r+0x20c>)
 801895e:	429c      	cmp	r4, r3
 8018960:	d158      	bne.n	8018a14 <_vfiprintf_r+0xd0>
 8018962:	6874      	ldr	r4, [r6, #4]
 8018964:	89a3      	ldrh	r3, [r4, #12]
 8018966:	0718      	lsls	r0, r3, #28
 8018968:	d55e      	bpl.n	8018a28 <_vfiprintf_r+0xe4>
 801896a:	6923      	ldr	r3, [r4, #16]
 801896c:	2b00      	cmp	r3, #0
 801896e:	d05b      	beq.n	8018a28 <_vfiprintf_r+0xe4>
 8018970:	2300      	movs	r3, #0
 8018972:	9309      	str	r3, [sp, #36]	; 0x24
 8018974:	2320      	movs	r3, #32
 8018976:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801897a:	2330      	movs	r3, #48	; 0x30
 801897c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018980:	9503      	str	r5, [sp, #12]
 8018982:	f04f 0b01 	mov.w	fp, #1
 8018986:	46b8      	mov	r8, r7
 8018988:	4645      	mov	r5, r8
 801898a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801898e:	b10b      	cbz	r3, 8018994 <_vfiprintf_r+0x50>
 8018990:	2b25      	cmp	r3, #37	; 0x25
 8018992:	d154      	bne.n	8018a3e <_vfiprintf_r+0xfa>
 8018994:	ebb8 0a07 	subs.w	sl, r8, r7
 8018998:	d00b      	beq.n	80189b2 <_vfiprintf_r+0x6e>
 801899a:	4653      	mov	r3, sl
 801899c:	463a      	mov	r2, r7
 801899e:	4621      	mov	r1, r4
 80189a0:	4630      	mov	r0, r6
 80189a2:	f7ff ffbc 	bl	801891e <__sfputs_r>
 80189a6:	3001      	adds	r0, #1
 80189a8:	f000 80c2 	beq.w	8018b30 <_vfiprintf_r+0x1ec>
 80189ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80189ae:	4453      	add	r3, sl
 80189b0:	9309      	str	r3, [sp, #36]	; 0x24
 80189b2:	f898 3000 	ldrb.w	r3, [r8]
 80189b6:	2b00      	cmp	r3, #0
 80189b8:	f000 80ba 	beq.w	8018b30 <_vfiprintf_r+0x1ec>
 80189bc:	2300      	movs	r3, #0
 80189be:	f04f 32ff 	mov.w	r2, #4294967295
 80189c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80189c6:	9304      	str	r3, [sp, #16]
 80189c8:	9307      	str	r3, [sp, #28]
 80189ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80189ce:	931a      	str	r3, [sp, #104]	; 0x68
 80189d0:	46a8      	mov	r8, r5
 80189d2:	2205      	movs	r2, #5
 80189d4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80189d8:	485e      	ldr	r0, [pc, #376]	; (8018b54 <_vfiprintf_r+0x210>)
 80189da:	f7e7 fc21 	bl	8000220 <memchr>
 80189de:	9b04      	ldr	r3, [sp, #16]
 80189e0:	bb78      	cbnz	r0, 8018a42 <_vfiprintf_r+0xfe>
 80189e2:	06d9      	lsls	r1, r3, #27
 80189e4:	bf44      	itt	mi
 80189e6:	2220      	movmi	r2, #32
 80189e8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80189ec:	071a      	lsls	r2, r3, #28
 80189ee:	bf44      	itt	mi
 80189f0:	222b      	movmi	r2, #43	; 0x2b
 80189f2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80189f6:	782a      	ldrb	r2, [r5, #0]
 80189f8:	2a2a      	cmp	r2, #42	; 0x2a
 80189fa:	d02a      	beq.n	8018a52 <_vfiprintf_r+0x10e>
 80189fc:	9a07      	ldr	r2, [sp, #28]
 80189fe:	46a8      	mov	r8, r5
 8018a00:	2000      	movs	r0, #0
 8018a02:	250a      	movs	r5, #10
 8018a04:	4641      	mov	r1, r8
 8018a06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018a0a:	3b30      	subs	r3, #48	; 0x30
 8018a0c:	2b09      	cmp	r3, #9
 8018a0e:	d969      	bls.n	8018ae4 <_vfiprintf_r+0x1a0>
 8018a10:	b360      	cbz	r0, 8018a6c <_vfiprintf_r+0x128>
 8018a12:	e024      	b.n	8018a5e <_vfiprintf_r+0x11a>
 8018a14:	4b50      	ldr	r3, [pc, #320]	; (8018b58 <_vfiprintf_r+0x214>)
 8018a16:	429c      	cmp	r4, r3
 8018a18:	d101      	bne.n	8018a1e <_vfiprintf_r+0xda>
 8018a1a:	68b4      	ldr	r4, [r6, #8]
 8018a1c:	e7a2      	b.n	8018964 <_vfiprintf_r+0x20>
 8018a1e:	4b4f      	ldr	r3, [pc, #316]	; (8018b5c <_vfiprintf_r+0x218>)
 8018a20:	429c      	cmp	r4, r3
 8018a22:	bf08      	it	eq
 8018a24:	68f4      	ldreq	r4, [r6, #12]
 8018a26:	e79d      	b.n	8018964 <_vfiprintf_r+0x20>
 8018a28:	4621      	mov	r1, r4
 8018a2a:	4630      	mov	r0, r6
 8018a2c:	f000 fae0 	bl	8018ff0 <__swsetup_r>
 8018a30:	2800      	cmp	r0, #0
 8018a32:	d09d      	beq.n	8018970 <_vfiprintf_r+0x2c>
 8018a34:	f04f 30ff 	mov.w	r0, #4294967295
 8018a38:	b01d      	add	sp, #116	; 0x74
 8018a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a3e:	46a8      	mov	r8, r5
 8018a40:	e7a2      	b.n	8018988 <_vfiprintf_r+0x44>
 8018a42:	4a44      	ldr	r2, [pc, #272]	; (8018b54 <_vfiprintf_r+0x210>)
 8018a44:	1a80      	subs	r0, r0, r2
 8018a46:	fa0b f000 	lsl.w	r0, fp, r0
 8018a4a:	4318      	orrs	r0, r3
 8018a4c:	9004      	str	r0, [sp, #16]
 8018a4e:	4645      	mov	r5, r8
 8018a50:	e7be      	b.n	80189d0 <_vfiprintf_r+0x8c>
 8018a52:	9a03      	ldr	r2, [sp, #12]
 8018a54:	1d11      	adds	r1, r2, #4
 8018a56:	6812      	ldr	r2, [r2, #0]
 8018a58:	9103      	str	r1, [sp, #12]
 8018a5a:	2a00      	cmp	r2, #0
 8018a5c:	db01      	blt.n	8018a62 <_vfiprintf_r+0x11e>
 8018a5e:	9207      	str	r2, [sp, #28]
 8018a60:	e004      	b.n	8018a6c <_vfiprintf_r+0x128>
 8018a62:	4252      	negs	r2, r2
 8018a64:	f043 0302 	orr.w	r3, r3, #2
 8018a68:	9207      	str	r2, [sp, #28]
 8018a6a:	9304      	str	r3, [sp, #16]
 8018a6c:	f898 3000 	ldrb.w	r3, [r8]
 8018a70:	2b2e      	cmp	r3, #46	; 0x2e
 8018a72:	d10e      	bne.n	8018a92 <_vfiprintf_r+0x14e>
 8018a74:	f898 3001 	ldrb.w	r3, [r8, #1]
 8018a78:	2b2a      	cmp	r3, #42	; 0x2a
 8018a7a:	d138      	bne.n	8018aee <_vfiprintf_r+0x1aa>
 8018a7c:	9b03      	ldr	r3, [sp, #12]
 8018a7e:	1d1a      	adds	r2, r3, #4
 8018a80:	681b      	ldr	r3, [r3, #0]
 8018a82:	9203      	str	r2, [sp, #12]
 8018a84:	2b00      	cmp	r3, #0
 8018a86:	bfb8      	it	lt
 8018a88:	f04f 33ff 	movlt.w	r3, #4294967295
 8018a8c:	f108 0802 	add.w	r8, r8, #2
 8018a90:	9305      	str	r3, [sp, #20]
 8018a92:	4d33      	ldr	r5, [pc, #204]	; (8018b60 <_vfiprintf_r+0x21c>)
 8018a94:	f898 1000 	ldrb.w	r1, [r8]
 8018a98:	2203      	movs	r2, #3
 8018a9a:	4628      	mov	r0, r5
 8018a9c:	f7e7 fbc0 	bl	8000220 <memchr>
 8018aa0:	b140      	cbz	r0, 8018ab4 <_vfiprintf_r+0x170>
 8018aa2:	2340      	movs	r3, #64	; 0x40
 8018aa4:	1b40      	subs	r0, r0, r5
 8018aa6:	fa03 f000 	lsl.w	r0, r3, r0
 8018aaa:	9b04      	ldr	r3, [sp, #16]
 8018aac:	4303      	orrs	r3, r0
 8018aae:	f108 0801 	add.w	r8, r8, #1
 8018ab2:	9304      	str	r3, [sp, #16]
 8018ab4:	f898 1000 	ldrb.w	r1, [r8]
 8018ab8:	482a      	ldr	r0, [pc, #168]	; (8018b64 <_vfiprintf_r+0x220>)
 8018aba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018abe:	2206      	movs	r2, #6
 8018ac0:	f108 0701 	add.w	r7, r8, #1
 8018ac4:	f7e7 fbac 	bl	8000220 <memchr>
 8018ac8:	2800      	cmp	r0, #0
 8018aca:	d037      	beq.n	8018b3c <_vfiprintf_r+0x1f8>
 8018acc:	4b26      	ldr	r3, [pc, #152]	; (8018b68 <_vfiprintf_r+0x224>)
 8018ace:	bb1b      	cbnz	r3, 8018b18 <_vfiprintf_r+0x1d4>
 8018ad0:	9b03      	ldr	r3, [sp, #12]
 8018ad2:	3307      	adds	r3, #7
 8018ad4:	f023 0307 	bic.w	r3, r3, #7
 8018ad8:	3308      	adds	r3, #8
 8018ada:	9303      	str	r3, [sp, #12]
 8018adc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018ade:	444b      	add	r3, r9
 8018ae0:	9309      	str	r3, [sp, #36]	; 0x24
 8018ae2:	e750      	b.n	8018986 <_vfiprintf_r+0x42>
 8018ae4:	fb05 3202 	mla	r2, r5, r2, r3
 8018ae8:	2001      	movs	r0, #1
 8018aea:	4688      	mov	r8, r1
 8018aec:	e78a      	b.n	8018a04 <_vfiprintf_r+0xc0>
 8018aee:	2300      	movs	r3, #0
 8018af0:	f108 0801 	add.w	r8, r8, #1
 8018af4:	9305      	str	r3, [sp, #20]
 8018af6:	4619      	mov	r1, r3
 8018af8:	250a      	movs	r5, #10
 8018afa:	4640      	mov	r0, r8
 8018afc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018b00:	3a30      	subs	r2, #48	; 0x30
 8018b02:	2a09      	cmp	r2, #9
 8018b04:	d903      	bls.n	8018b0e <_vfiprintf_r+0x1ca>
 8018b06:	2b00      	cmp	r3, #0
 8018b08:	d0c3      	beq.n	8018a92 <_vfiprintf_r+0x14e>
 8018b0a:	9105      	str	r1, [sp, #20]
 8018b0c:	e7c1      	b.n	8018a92 <_vfiprintf_r+0x14e>
 8018b0e:	fb05 2101 	mla	r1, r5, r1, r2
 8018b12:	2301      	movs	r3, #1
 8018b14:	4680      	mov	r8, r0
 8018b16:	e7f0      	b.n	8018afa <_vfiprintf_r+0x1b6>
 8018b18:	ab03      	add	r3, sp, #12
 8018b1a:	9300      	str	r3, [sp, #0]
 8018b1c:	4622      	mov	r2, r4
 8018b1e:	4b13      	ldr	r3, [pc, #76]	; (8018b6c <_vfiprintf_r+0x228>)
 8018b20:	a904      	add	r1, sp, #16
 8018b22:	4630      	mov	r0, r6
 8018b24:	f3af 8000 	nop.w
 8018b28:	f1b0 3fff 	cmp.w	r0, #4294967295
 8018b2c:	4681      	mov	r9, r0
 8018b2e:	d1d5      	bne.n	8018adc <_vfiprintf_r+0x198>
 8018b30:	89a3      	ldrh	r3, [r4, #12]
 8018b32:	065b      	lsls	r3, r3, #25
 8018b34:	f53f af7e 	bmi.w	8018a34 <_vfiprintf_r+0xf0>
 8018b38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018b3a:	e77d      	b.n	8018a38 <_vfiprintf_r+0xf4>
 8018b3c:	ab03      	add	r3, sp, #12
 8018b3e:	9300      	str	r3, [sp, #0]
 8018b40:	4622      	mov	r2, r4
 8018b42:	4b0a      	ldr	r3, [pc, #40]	; (8018b6c <_vfiprintf_r+0x228>)
 8018b44:	a904      	add	r1, sp, #16
 8018b46:	4630      	mov	r0, r6
 8018b48:	f000 f888 	bl	8018c5c <_printf_i>
 8018b4c:	e7ec      	b.n	8018b28 <_vfiprintf_r+0x1e4>
 8018b4e:	bf00      	nop
 8018b50:	080286c4 	.word	0x080286c4
 8018b54:	08028704 	.word	0x08028704
 8018b58:	080286e4 	.word	0x080286e4
 8018b5c:	080286a4 	.word	0x080286a4
 8018b60:	0802870a 	.word	0x0802870a
 8018b64:	0802870e 	.word	0x0802870e
 8018b68:	00000000 	.word	0x00000000
 8018b6c:	0801891f 	.word	0x0801891f

08018b70 <_printf_common>:
 8018b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018b74:	4691      	mov	r9, r2
 8018b76:	461f      	mov	r7, r3
 8018b78:	688a      	ldr	r2, [r1, #8]
 8018b7a:	690b      	ldr	r3, [r1, #16]
 8018b7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018b80:	4293      	cmp	r3, r2
 8018b82:	bfb8      	it	lt
 8018b84:	4613      	movlt	r3, r2
 8018b86:	f8c9 3000 	str.w	r3, [r9]
 8018b8a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018b8e:	4606      	mov	r6, r0
 8018b90:	460c      	mov	r4, r1
 8018b92:	b112      	cbz	r2, 8018b9a <_printf_common+0x2a>
 8018b94:	3301      	adds	r3, #1
 8018b96:	f8c9 3000 	str.w	r3, [r9]
 8018b9a:	6823      	ldr	r3, [r4, #0]
 8018b9c:	0699      	lsls	r1, r3, #26
 8018b9e:	bf42      	ittt	mi
 8018ba0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8018ba4:	3302      	addmi	r3, #2
 8018ba6:	f8c9 3000 	strmi.w	r3, [r9]
 8018baa:	6825      	ldr	r5, [r4, #0]
 8018bac:	f015 0506 	ands.w	r5, r5, #6
 8018bb0:	d107      	bne.n	8018bc2 <_printf_common+0x52>
 8018bb2:	f104 0a19 	add.w	sl, r4, #25
 8018bb6:	68e3      	ldr	r3, [r4, #12]
 8018bb8:	f8d9 2000 	ldr.w	r2, [r9]
 8018bbc:	1a9b      	subs	r3, r3, r2
 8018bbe:	42ab      	cmp	r3, r5
 8018bc0:	dc28      	bgt.n	8018c14 <_printf_common+0xa4>
 8018bc2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8018bc6:	6822      	ldr	r2, [r4, #0]
 8018bc8:	3300      	adds	r3, #0
 8018bca:	bf18      	it	ne
 8018bcc:	2301      	movne	r3, #1
 8018bce:	0692      	lsls	r2, r2, #26
 8018bd0:	d42d      	bmi.n	8018c2e <_printf_common+0xbe>
 8018bd2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018bd6:	4639      	mov	r1, r7
 8018bd8:	4630      	mov	r0, r6
 8018bda:	47c0      	blx	r8
 8018bdc:	3001      	adds	r0, #1
 8018bde:	d020      	beq.n	8018c22 <_printf_common+0xb2>
 8018be0:	6823      	ldr	r3, [r4, #0]
 8018be2:	68e5      	ldr	r5, [r4, #12]
 8018be4:	f8d9 2000 	ldr.w	r2, [r9]
 8018be8:	f003 0306 	and.w	r3, r3, #6
 8018bec:	2b04      	cmp	r3, #4
 8018bee:	bf08      	it	eq
 8018bf0:	1aad      	subeq	r5, r5, r2
 8018bf2:	68a3      	ldr	r3, [r4, #8]
 8018bf4:	6922      	ldr	r2, [r4, #16]
 8018bf6:	bf0c      	ite	eq
 8018bf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018bfc:	2500      	movne	r5, #0
 8018bfe:	4293      	cmp	r3, r2
 8018c00:	bfc4      	itt	gt
 8018c02:	1a9b      	subgt	r3, r3, r2
 8018c04:	18ed      	addgt	r5, r5, r3
 8018c06:	f04f 0900 	mov.w	r9, #0
 8018c0a:	341a      	adds	r4, #26
 8018c0c:	454d      	cmp	r5, r9
 8018c0e:	d11a      	bne.n	8018c46 <_printf_common+0xd6>
 8018c10:	2000      	movs	r0, #0
 8018c12:	e008      	b.n	8018c26 <_printf_common+0xb6>
 8018c14:	2301      	movs	r3, #1
 8018c16:	4652      	mov	r2, sl
 8018c18:	4639      	mov	r1, r7
 8018c1a:	4630      	mov	r0, r6
 8018c1c:	47c0      	blx	r8
 8018c1e:	3001      	adds	r0, #1
 8018c20:	d103      	bne.n	8018c2a <_printf_common+0xba>
 8018c22:	f04f 30ff 	mov.w	r0, #4294967295
 8018c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018c2a:	3501      	adds	r5, #1
 8018c2c:	e7c3      	b.n	8018bb6 <_printf_common+0x46>
 8018c2e:	18e1      	adds	r1, r4, r3
 8018c30:	1c5a      	adds	r2, r3, #1
 8018c32:	2030      	movs	r0, #48	; 0x30
 8018c34:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018c38:	4422      	add	r2, r4
 8018c3a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018c3e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018c42:	3302      	adds	r3, #2
 8018c44:	e7c5      	b.n	8018bd2 <_printf_common+0x62>
 8018c46:	2301      	movs	r3, #1
 8018c48:	4622      	mov	r2, r4
 8018c4a:	4639      	mov	r1, r7
 8018c4c:	4630      	mov	r0, r6
 8018c4e:	47c0      	blx	r8
 8018c50:	3001      	adds	r0, #1
 8018c52:	d0e6      	beq.n	8018c22 <_printf_common+0xb2>
 8018c54:	f109 0901 	add.w	r9, r9, #1
 8018c58:	e7d8      	b.n	8018c0c <_printf_common+0x9c>
	...

08018c5c <_printf_i>:
 8018c5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018c60:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8018c64:	460c      	mov	r4, r1
 8018c66:	7e09      	ldrb	r1, [r1, #24]
 8018c68:	b085      	sub	sp, #20
 8018c6a:	296e      	cmp	r1, #110	; 0x6e
 8018c6c:	4617      	mov	r7, r2
 8018c6e:	4606      	mov	r6, r0
 8018c70:	4698      	mov	r8, r3
 8018c72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018c74:	f000 80b3 	beq.w	8018dde <_printf_i+0x182>
 8018c78:	d822      	bhi.n	8018cc0 <_printf_i+0x64>
 8018c7a:	2963      	cmp	r1, #99	; 0x63
 8018c7c:	d036      	beq.n	8018cec <_printf_i+0x90>
 8018c7e:	d80a      	bhi.n	8018c96 <_printf_i+0x3a>
 8018c80:	2900      	cmp	r1, #0
 8018c82:	f000 80b9 	beq.w	8018df8 <_printf_i+0x19c>
 8018c86:	2958      	cmp	r1, #88	; 0x58
 8018c88:	f000 8083 	beq.w	8018d92 <_printf_i+0x136>
 8018c8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018c90:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8018c94:	e032      	b.n	8018cfc <_printf_i+0xa0>
 8018c96:	2964      	cmp	r1, #100	; 0x64
 8018c98:	d001      	beq.n	8018c9e <_printf_i+0x42>
 8018c9a:	2969      	cmp	r1, #105	; 0x69
 8018c9c:	d1f6      	bne.n	8018c8c <_printf_i+0x30>
 8018c9e:	6820      	ldr	r0, [r4, #0]
 8018ca0:	6813      	ldr	r3, [r2, #0]
 8018ca2:	0605      	lsls	r5, r0, #24
 8018ca4:	f103 0104 	add.w	r1, r3, #4
 8018ca8:	d52a      	bpl.n	8018d00 <_printf_i+0xa4>
 8018caa:	681b      	ldr	r3, [r3, #0]
 8018cac:	6011      	str	r1, [r2, #0]
 8018cae:	2b00      	cmp	r3, #0
 8018cb0:	da03      	bge.n	8018cba <_printf_i+0x5e>
 8018cb2:	222d      	movs	r2, #45	; 0x2d
 8018cb4:	425b      	negs	r3, r3
 8018cb6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8018cba:	486f      	ldr	r0, [pc, #444]	; (8018e78 <_printf_i+0x21c>)
 8018cbc:	220a      	movs	r2, #10
 8018cbe:	e039      	b.n	8018d34 <_printf_i+0xd8>
 8018cc0:	2973      	cmp	r1, #115	; 0x73
 8018cc2:	f000 809d 	beq.w	8018e00 <_printf_i+0x1a4>
 8018cc6:	d808      	bhi.n	8018cda <_printf_i+0x7e>
 8018cc8:	296f      	cmp	r1, #111	; 0x6f
 8018cca:	d020      	beq.n	8018d0e <_printf_i+0xb2>
 8018ccc:	2970      	cmp	r1, #112	; 0x70
 8018cce:	d1dd      	bne.n	8018c8c <_printf_i+0x30>
 8018cd0:	6823      	ldr	r3, [r4, #0]
 8018cd2:	f043 0320 	orr.w	r3, r3, #32
 8018cd6:	6023      	str	r3, [r4, #0]
 8018cd8:	e003      	b.n	8018ce2 <_printf_i+0x86>
 8018cda:	2975      	cmp	r1, #117	; 0x75
 8018cdc:	d017      	beq.n	8018d0e <_printf_i+0xb2>
 8018cde:	2978      	cmp	r1, #120	; 0x78
 8018ce0:	d1d4      	bne.n	8018c8c <_printf_i+0x30>
 8018ce2:	2378      	movs	r3, #120	; 0x78
 8018ce4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8018ce8:	4864      	ldr	r0, [pc, #400]	; (8018e7c <_printf_i+0x220>)
 8018cea:	e055      	b.n	8018d98 <_printf_i+0x13c>
 8018cec:	6813      	ldr	r3, [r2, #0]
 8018cee:	1d19      	adds	r1, r3, #4
 8018cf0:	681b      	ldr	r3, [r3, #0]
 8018cf2:	6011      	str	r1, [r2, #0]
 8018cf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018cf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018cfc:	2301      	movs	r3, #1
 8018cfe:	e08c      	b.n	8018e1a <_printf_i+0x1be>
 8018d00:	681b      	ldr	r3, [r3, #0]
 8018d02:	6011      	str	r1, [r2, #0]
 8018d04:	f010 0f40 	tst.w	r0, #64	; 0x40
 8018d08:	bf18      	it	ne
 8018d0a:	b21b      	sxthne	r3, r3
 8018d0c:	e7cf      	b.n	8018cae <_printf_i+0x52>
 8018d0e:	6813      	ldr	r3, [r2, #0]
 8018d10:	6825      	ldr	r5, [r4, #0]
 8018d12:	1d18      	adds	r0, r3, #4
 8018d14:	6010      	str	r0, [r2, #0]
 8018d16:	0628      	lsls	r0, r5, #24
 8018d18:	d501      	bpl.n	8018d1e <_printf_i+0xc2>
 8018d1a:	681b      	ldr	r3, [r3, #0]
 8018d1c:	e002      	b.n	8018d24 <_printf_i+0xc8>
 8018d1e:	0668      	lsls	r0, r5, #25
 8018d20:	d5fb      	bpl.n	8018d1a <_printf_i+0xbe>
 8018d22:	881b      	ldrh	r3, [r3, #0]
 8018d24:	4854      	ldr	r0, [pc, #336]	; (8018e78 <_printf_i+0x21c>)
 8018d26:	296f      	cmp	r1, #111	; 0x6f
 8018d28:	bf14      	ite	ne
 8018d2a:	220a      	movne	r2, #10
 8018d2c:	2208      	moveq	r2, #8
 8018d2e:	2100      	movs	r1, #0
 8018d30:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018d34:	6865      	ldr	r5, [r4, #4]
 8018d36:	60a5      	str	r5, [r4, #8]
 8018d38:	2d00      	cmp	r5, #0
 8018d3a:	f2c0 8095 	blt.w	8018e68 <_printf_i+0x20c>
 8018d3e:	6821      	ldr	r1, [r4, #0]
 8018d40:	f021 0104 	bic.w	r1, r1, #4
 8018d44:	6021      	str	r1, [r4, #0]
 8018d46:	2b00      	cmp	r3, #0
 8018d48:	d13d      	bne.n	8018dc6 <_printf_i+0x16a>
 8018d4a:	2d00      	cmp	r5, #0
 8018d4c:	f040 808e 	bne.w	8018e6c <_printf_i+0x210>
 8018d50:	4665      	mov	r5, ip
 8018d52:	2a08      	cmp	r2, #8
 8018d54:	d10b      	bne.n	8018d6e <_printf_i+0x112>
 8018d56:	6823      	ldr	r3, [r4, #0]
 8018d58:	07db      	lsls	r3, r3, #31
 8018d5a:	d508      	bpl.n	8018d6e <_printf_i+0x112>
 8018d5c:	6923      	ldr	r3, [r4, #16]
 8018d5e:	6862      	ldr	r2, [r4, #4]
 8018d60:	429a      	cmp	r2, r3
 8018d62:	bfde      	ittt	le
 8018d64:	2330      	movle	r3, #48	; 0x30
 8018d66:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018d6a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8018d6e:	ebac 0305 	sub.w	r3, ip, r5
 8018d72:	6123      	str	r3, [r4, #16]
 8018d74:	f8cd 8000 	str.w	r8, [sp]
 8018d78:	463b      	mov	r3, r7
 8018d7a:	aa03      	add	r2, sp, #12
 8018d7c:	4621      	mov	r1, r4
 8018d7e:	4630      	mov	r0, r6
 8018d80:	f7ff fef6 	bl	8018b70 <_printf_common>
 8018d84:	3001      	adds	r0, #1
 8018d86:	d14d      	bne.n	8018e24 <_printf_i+0x1c8>
 8018d88:	f04f 30ff 	mov.w	r0, #4294967295
 8018d8c:	b005      	add	sp, #20
 8018d8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018d92:	4839      	ldr	r0, [pc, #228]	; (8018e78 <_printf_i+0x21c>)
 8018d94:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8018d98:	6813      	ldr	r3, [r2, #0]
 8018d9a:	6821      	ldr	r1, [r4, #0]
 8018d9c:	1d1d      	adds	r5, r3, #4
 8018d9e:	681b      	ldr	r3, [r3, #0]
 8018da0:	6015      	str	r5, [r2, #0]
 8018da2:	060a      	lsls	r2, r1, #24
 8018da4:	d50b      	bpl.n	8018dbe <_printf_i+0x162>
 8018da6:	07ca      	lsls	r2, r1, #31
 8018da8:	bf44      	itt	mi
 8018daa:	f041 0120 	orrmi.w	r1, r1, #32
 8018dae:	6021      	strmi	r1, [r4, #0]
 8018db0:	b91b      	cbnz	r3, 8018dba <_printf_i+0x15e>
 8018db2:	6822      	ldr	r2, [r4, #0]
 8018db4:	f022 0220 	bic.w	r2, r2, #32
 8018db8:	6022      	str	r2, [r4, #0]
 8018dba:	2210      	movs	r2, #16
 8018dbc:	e7b7      	b.n	8018d2e <_printf_i+0xd2>
 8018dbe:	064d      	lsls	r5, r1, #25
 8018dc0:	bf48      	it	mi
 8018dc2:	b29b      	uxthmi	r3, r3
 8018dc4:	e7ef      	b.n	8018da6 <_printf_i+0x14a>
 8018dc6:	4665      	mov	r5, ip
 8018dc8:	fbb3 f1f2 	udiv	r1, r3, r2
 8018dcc:	fb02 3311 	mls	r3, r2, r1, r3
 8018dd0:	5cc3      	ldrb	r3, [r0, r3]
 8018dd2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8018dd6:	460b      	mov	r3, r1
 8018dd8:	2900      	cmp	r1, #0
 8018dda:	d1f5      	bne.n	8018dc8 <_printf_i+0x16c>
 8018ddc:	e7b9      	b.n	8018d52 <_printf_i+0xf6>
 8018dde:	6813      	ldr	r3, [r2, #0]
 8018de0:	6825      	ldr	r5, [r4, #0]
 8018de2:	6961      	ldr	r1, [r4, #20]
 8018de4:	1d18      	adds	r0, r3, #4
 8018de6:	6010      	str	r0, [r2, #0]
 8018de8:	0628      	lsls	r0, r5, #24
 8018dea:	681b      	ldr	r3, [r3, #0]
 8018dec:	d501      	bpl.n	8018df2 <_printf_i+0x196>
 8018dee:	6019      	str	r1, [r3, #0]
 8018df0:	e002      	b.n	8018df8 <_printf_i+0x19c>
 8018df2:	066a      	lsls	r2, r5, #25
 8018df4:	d5fb      	bpl.n	8018dee <_printf_i+0x192>
 8018df6:	8019      	strh	r1, [r3, #0]
 8018df8:	2300      	movs	r3, #0
 8018dfa:	6123      	str	r3, [r4, #16]
 8018dfc:	4665      	mov	r5, ip
 8018dfe:	e7b9      	b.n	8018d74 <_printf_i+0x118>
 8018e00:	6813      	ldr	r3, [r2, #0]
 8018e02:	1d19      	adds	r1, r3, #4
 8018e04:	6011      	str	r1, [r2, #0]
 8018e06:	681d      	ldr	r5, [r3, #0]
 8018e08:	6862      	ldr	r2, [r4, #4]
 8018e0a:	2100      	movs	r1, #0
 8018e0c:	4628      	mov	r0, r5
 8018e0e:	f7e7 fa07 	bl	8000220 <memchr>
 8018e12:	b108      	cbz	r0, 8018e18 <_printf_i+0x1bc>
 8018e14:	1b40      	subs	r0, r0, r5
 8018e16:	6060      	str	r0, [r4, #4]
 8018e18:	6863      	ldr	r3, [r4, #4]
 8018e1a:	6123      	str	r3, [r4, #16]
 8018e1c:	2300      	movs	r3, #0
 8018e1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018e22:	e7a7      	b.n	8018d74 <_printf_i+0x118>
 8018e24:	6923      	ldr	r3, [r4, #16]
 8018e26:	462a      	mov	r2, r5
 8018e28:	4639      	mov	r1, r7
 8018e2a:	4630      	mov	r0, r6
 8018e2c:	47c0      	blx	r8
 8018e2e:	3001      	adds	r0, #1
 8018e30:	d0aa      	beq.n	8018d88 <_printf_i+0x12c>
 8018e32:	6823      	ldr	r3, [r4, #0]
 8018e34:	079b      	lsls	r3, r3, #30
 8018e36:	d413      	bmi.n	8018e60 <_printf_i+0x204>
 8018e38:	68e0      	ldr	r0, [r4, #12]
 8018e3a:	9b03      	ldr	r3, [sp, #12]
 8018e3c:	4298      	cmp	r0, r3
 8018e3e:	bfb8      	it	lt
 8018e40:	4618      	movlt	r0, r3
 8018e42:	e7a3      	b.n	8018d8c <_printf_i+0x130>
 8018e44:	2301      	movs	r3, #1
 8018e46:	464a      	mov	r2, r9
 8018e48:	4639      	mov	r1, r7
 8018e4a:	4630      	mov	r0, r6
 8018e4c:	47c0      	blx	r8
 8018e4e:	3001      	adds	r0, #1
 8018e50:	d09a      	beq.n	8018d88 <_printf_i+0x12c>
 8018e52:	3501      	adds	r5, #1
 8018e54:	68e3      	ldr	r3, [r4, #12]
 8018e56:	9a03      	ldr	r2, [sp, #12]
 8018e58:	1a9b      	subs	r3, r3, r2
 8018e5a:	42ab      	cmp	r3, r5
 8018e5c:	dcf2      	bgt.n	8018e44 <_printf_i+0x1e8>
 8018e5e:	e7eb      	b.n	8018e38 <_printf_i+0x1dc>
 8018e60:	2500      	movs	r5, #0
 8018e62:	f104 0919 	add.w	r9, r4, #25
 8018e66:	e7f5      	b.n	8018e54 <_printf_i+0x1f8>
 8018e68:	2b00      	cmp	r3, #0
 8018e6a:	d1ac      	bne.n	8018dc6 <_printf_i+0x16a>
 8018e6c:	7803      	ldrb	r3, [r0, #0]
 8018e6e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018e72:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018e76:	e76c      	b.n	8018d52 <_printf_i+0xf6>
 8018e78:	08028715 	.word	0x08028715
 8018e7c:	08028726 	.word	0x08028726

08018e80 <_sbrk_r>:
 8018e80:	b538      	push	{r3, r4, r5, lr}
 8018e82:	4c06      	ldr	r4, [pc, #24]	; (8018e9c <_sbrk_r+0x1c>)
 8018e84:	2300      	movs	r3, #0
 8018e86:	4605      	mov	r5, r0
 8018e88:	4608      	mov	r0, r1
 8018e8a:	6023      	str	r3, [r4, #0]
 8018e8c:	f7e7 ff36 	bl	8000cfc <_sbrk>
 8018e90:	1c43      	adds	r3, r0, #1
 8018e92:	d102      	bne.n	8018e9a <_sbrk_r+0x1a>
 8018e94:	6823      	ldr	r3, [r4, #0]
 8018e96:	b103      	cbz	r3, 8018e9a <_sbrk_r+0x1a>
 8018e98:	602b      	str	r3, [r5, #0]
 8018e9a:	bd38      	pop	{r3, r4, r5, pc}
 8018e9c:	2000fb1c 	.word	0x2000fb1c

08018ea0 <__sread>:
 8018ea0:	b510      	push	{r4, lr}
 8018ea2:	460c      	mov	r4, r1
 8018ea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018ea8:	f000 fa6e 	bl	8019388 <_read_r>
 8018eac:	2800      	cmp	r0, #0
 8018eae:	bfab      	itete	ge
 8018eb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018eb2:	89a3      	ldrhlt	r3, [r4, #12]
 8018eb4:	181b      	addge	r3, r3, r0
 8018eb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018eba:	bfac      	ite	ge
 8018ebc:	6563      	strge	r3, [r4, #84]	; 0x54
 8018ebe:	81a3      	strhlt	r3, [r4, #12]
 8018ec0:	bd10      	pop	{r4, pc}

08018ec2 <__swrite>:
 8018ec2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ec6:	461f      	mov	r7, r3
 8018ec8:	898b      	ldrh	r3, [r1, #12]
 8018eca:	05db      	lsls	r3, r3, #23
 8018ecc:	4605      	mov	r5, r0
 8018ece:	460c      	mov	r4, r1
 8018ed0:	4616      	mov	r6, r2
 8018ed2:	d505      	bpl.n	8018ee0 <__swrite+0x1e>
 8018ed4:	2302      	movs	r3, #2
 8018ed6:	2200      	movs	r2, #0
 8018ed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018edc:	f000 f9b6 	bl	801924c <_lseek_r>
 8018ee0:	89a3      	ldrh	r3, [r4, #12]
 8018ee2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018ee6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018eea:	81a3      	strh	r3, [r4, #12]
 8018eec:	4632      	mov	r2, r6
 8018eee:	463b      	mov	r3, r7
 8018ef0:	4628      	mov	r0, r5
 8018ef2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018ef6:	f000 b869 	b.w	8018fcc <_write_r>

08018efa <__sseek>:
 8018efa:	b510      	push	{r4, lr}
 8018efc:	460c      	mov	r4, r1
 8018efe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018f02:	f000 f9a3 	bl	801924c <_lseek_r>
 8018f06:	1c43      	adds	r3, r0, #1
 8018f08:	89a3      	ldrh	r3, [r4, #12]
 8018f0a:	bf15      	itete	ne
 8018f0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8018f0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018f12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018f16:	81a3      	strheq	r3, [r4, #12]
 8018f18:	bf18      	it	ne
 8018f1a:	81a3      	strhne	r3, [r4, #12]
 8018f1c:	bd10      	pop	{r4, pc}

08018f1e <__sclose>:
 8018f1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018f22:	f000 b8d3 	b.w	80190cc <_close_r>
	...

08018f28 <__swbuf_r>:
 8018f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018f2a:	460e      	mov	r6, r1
 8018f2c:	4614      	mov	r4, r2
 8018f2e:	4605      	mov	r5, r0
 8018f30:	b118      	cbz	r0, 8018f3a <__swbuf_r+0x12>
 8018f32:	6983      	ldr	r3, [r0, #24]
 8018f34:	b90b      	cbnz	r3, 8018f3a <__swbuf_r+0x12>
 8018f36:	f7ff fa4f 	bl	80183d8 <__sinit>
 8018f3a:	4b21      	ldr	r3, [pc, #132]	; (8018fc0 <__swbuf_r+0x98>)
 8018f3c:	429c      	cmp	r4, r3
 8018f3e:	d12a      	bne.n	8018f96 <__swbuf_r+0x6e>
 8018f40:	686c      	ldr	r4, [r5, #4]
 8018f42:	69a3      	ldr	r3, [r4, #24]
 8018f44:	60a3      	str	r3, [r4, #8]
 8018f46:	89a3      	ldrh	r3, [r4, #12]
 8018f48:	071a      	lsls	r2, r3, #28
 8018f4a:	d52e      	bpl.n	8018faa <__swbuf_r+0x82>
 8018f4c:	6923      	ldr	r3, [r4, #16]
 8018f4e:	b363      	cbz	r3, 8018faa <__swbuf_r+0x82>
 8018f50:	6923      	ldr	r3, [r4, #16]
 8018f52:	6820      	ldr	r0, [r4, #0]
 8018f54:	1ac0      	subs	r0, r0, r3
 8018f56:	6963      	ldr	r3, [r4, #20]
 8018f58:	b2f6      	uxtb	r6, r6
 8018f5a:	4283      	cmp	r3, r0
 8018f5c:	4637      	mov	r7, r6
 8018f5e:	dc04      	bgt.n	8018f6a <__swbuf_r+0x42>
 8018f60:	4621      	mov	r1, r4
 8018f62:	4628      	mov	r0, r5
 8018f64:	f000 f948 	bl	80191f8 <_fflush_r>
 8018f68:	bb28      	cbnz	r0, 8018fb6 <__swbuf_r+0x8e>
 8018f6a:	68a3      	ldr	r3, [r4, #8]
 8018f6c:	3b01      	subs	r3, #1
 8018f6e:	60a3      	str	r3, [r4, #8]
 8018f70:	6823      	ldr	r3, [r4, #0]
 8018f72:	1c5a      	adds	r2, r3, #1
 8018f74:	6022      	str	r2, [r4, #0]
 8018f76:	701e      	strb	r6, [r3, #0]
 8018f78:	6963      	ldr	r3, [r4, #20]
 8018f7a:	3001      	adds	r0, #1
 8018f7c:	4283      	cmp	r3, r0
 8018f7e:	d004      	beq.n	8018f8a <__swbuf_r+0x62>
 8018f80:	89a3      	ldrh	r3, [r4, #12]
 8018f82:	07db      	lsls	r3, r3, #31
 8018f84:	d519      	bpl.n	8018fba <__swbuf_r+0x92>
 8018f86:	2e0a      	cmp	r6, #10
 8018f88:	d117      	bne.n	8018fba <__swbuf_r+0x92>
 8018f8a:	4621      	mov	r1, r4
 8018f8c:	4628      	mov	r0, r5
 8018f8e:	f000 f933 	bl	80191f8 <_fflush_r>
 8018f92:	b190      	cbz	r0, 8018fba <__swbuf_r+0x92>
 8018f94:	e00f      	b.n	8018fb6 <__swbuf_r+0x8e>
 8018f96:	4b0b      	ldr	r3, [pc, #44]	; (8018fc4 <__swbuf_r+0x9c>)
 8018f98:	429c      	cmp	r4, r3
 8018f9a:	d101      	bne.n	8018fa0 <__swbuf_r+0x78>
 8018f9c:	68ac      	ldr	r4, [r5, #8]
 8018f9e:	e7d0      	b.n	8018f42 <__swbuf_r+0x1a>
 8018fa0:	4b09      	ldr	r3, [pc, #36]	; (8018fc8 <__swbuf_r+0xa0>)
 8018fa2:	429c      	cmp	r4, r3
 8018fa4:	bf08      	it	eq
 8018fa6:	68ec      	ldreq	r4, [r5, #12]
 8018fa8:	e7cb      	b.n	8018f42 <__swbuf_r+0x1a>
 8018faa:	4621      	mov	r1, r4
 8018fac:	4628      	mov	r0, r5
 8018fae:	f000 f81f 	bl	8018ff0 <__swsetup_r>
 8018fb2:	2800      	cmp	r0, #0
 8018fb4:	d0cc      	beq.n	8018f50 <__swbuf_r+0x28>
 8018fb6:	f04f 37ff 	mov.w	r7, #4294967295
 8018fba:	4638      	mov	r0, r7
 8018fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018fbe:	bf00      	nop
 8018fc0:	080286c4 	.word	0x080286c4
 8018fc4:	080286e4 	.word	0x080286e4
 8018fc8:	080286a4 	.word	0x080286a4

08018fcc <_write_r>:
 8018fcc:	b538      	push	{r3, r4, r5, lr}
 8018fce:	4c07      	ldr	r4, [pc, #28]	; (8018fec <_write_r+0x20>)
 8018fd0:	4605      	mov	r5, r0
 8018fd2:	4608      	mov	r0, r1
 8018fd4:	4611      	mov	r1, r2
 8018fd6:	2200      	movs	r2, #0
 8018fd8:	6022      	str	r2, [r4, #0]
 8018fda:	461a      	mov	r2, r3
 8018fdc:	f7e7 fe3d 	bl	8000c5a <_write>
 8018fe0:	1c43      	adds	r3, r0, #1
 8018fe2:	d102      	bne.n	8018fea <_write_r+0x1e>
 8018fe4:	6823      	ldr	r3, [r4, #0]
 8018fe6:	b103      	cbz	r3, 8018fea <_write_r+0x1e>
 8018fe8:	602b      	str	r3, [r5, #0]
 8018fea:	bd38      	pop	{r3, r4, r5, pc}
 8018fec:	2000fb1c 	.word	0x2000fb1c

08018ff0 <__swsetup_r>:
 8018ff0:	4b32      	ldr	r3, [pc, #200]	; (80190bc <__swsetup_r+0xcc>)
 8018ff2:	b570      	push	{r4, r5, r6, lr}
 8018ff4:	681d      	ldr	r5, [r3, #0]
 8018ff6:	4606      	mov	r6, r0
 8018ff8:	460c      	mov	r4, r1
 8018ffa:	b125      	cbz	r5, 8019006 <__swsetup_r+0x16>
 8018ffc:	69ab      	ldr	r3, [r5, #24]
 8018ffe:	b913      	cbnz	r3, 8019006 <__swsetup_r+0x16>
 8019000:	4628      	mov	r0, r5
 8019002:	f7ff f9e9 	bl	80183d8 <__sinit>
 8019006:	4b2e      	ldr	r3, [pc, #184]	; (80190c0 <__swsetup_r+0xd0>)
 8019008:	429c      	cmp	r4, r3
 801900a:	d10f      	bne.n	801902c <__swsetup_r+0x3c>
 801900c:	686c      	ldr	r4, [r5, #4]
 801900e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019012:	b29a      	uxth	r2, r3
 8019014:	0715      	lsls	r5, r2, #28
 8019016:	d42c      	bmi.n	8019072 <__swsetup_r+0x82>
 8019018:	06d0      	lsls	r0, r2, #27
 801901a:	d411      	bmi.n	8019040 <__swsetup_r+0x50>
 801901c:	2209      	movs	r2, #9
 801901e:	6032      	str	r2, [r6, #0]
 8019020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019024:	81a3      	strh	r3, [r4, #12]
 8019026:	f04f 30ff 	mov.w	r0, #4294967295
 801902a:	e03e      	b.n	80190aa <__swsetup_r+0xba>
 801902c:	4b25      	ldr	r3, [pc, #148]	; (80190c4 <__swsetup_r+0xd4>)
 801902e:	429c      	cmp	r4, r3
 8019030:	d101      	bne.n	8019036 <__swsetup_r+0x46>
 8019032:	68ac      	ldr	r4, [r5, #8]
 8019034:	e7eb      	b.n	801900e <__swsetup_r+0x1e>
 8019036:	4b24      	ldr	r3, [pc, #144]	; (80190c8 <__swsetup_r+0xd8>)
 8019038:	429c      	cmp	r4, r3
 801903a:	bf08      	it	eq
 801903c:	68ec      	ldreq	r4, [r5, #12]
 801903e:	e7e6      	b.n	801900e <__swsetup_r+0x1e>
 8019040:	0751      	lsls	r1, r2, #29
 8019042:	d512      	bpl.n	801906a <__swsetup_r+0x7a>
 8019044:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019046:	b141      	cbz	r1, 801905a <__swsetup_r+0x6a>
 8019048:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801904c:	4299      	cmp	r1, r3
 801904e:	d002      	beq.n	8019056 <__swsetup_r+0x66>
 8019050:	4630      	mov	r0, r6
 8019052:	f7ff fa53 	bl	80184fc <_free_r>
 8019056:	2300      	movs	r3, #0
 8019058:	6363      	str	r3, [r4, #52]	; 0x34
 801905a:	89a3      	ldrh	r3, [r4, #12]
 801905c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019060:	81a3      	strh	r3, [r4, #12]
 8019062:	2300      	movs	r3, #0
 8019064:	6063      	str	r3, [r4, #4]
 8019066:	6923      	ldr	r3, [r4, #16]
 8019068:	6023      	str	r3, [r4, #0]
 801906a:	89a3      	ldrh	r3, [r4, #12]
 801906c:	f043 0308 	orr.w	r3, r3, #8
 8019070:	81a3      	strh	r3, [r4, #12]
 8019072:	6923      	ldr	r3, [r4, #16]
 8019074:	b94b      	cbnz	r3, 801908a <__swsetup_r+0x9a>
 8019076:	89a3      	ldrh	r3, [r4, #12]
 8019078:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801907c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019080:	d003      	beq.n	801908a <__swsetup_r+0x9a>
 8019082:	4621      	mov	r1, r4
 8019084:	4630      	mov	r0, r6
 8019086:	f000 f917 	bl	80192b8 <__smakebuf_r>
 801908a:	89a2      	ldrh	r2, [r4, #12]
 801908c:	f012 0301 	ands.w	r3, r2, #1
 8019090:	d00c      	beq.n	80190ac <__swsetup_r+0xbc>
 8019092:	2300      	movs	r3, #0
 8019094:	60a3      	str	r3, [r4, #8]
 8019096:	6963      	ldr	r3, [r4, #20]
 8019098:	425b      	negs	r3, r3
 801909a:	61a3      	str	r3, [r4, #24]
 801909c:	6923      	ldr	r3, [r4, #16]
 801909e:	b953      	cbnz	r3, 80190b6 <__swsetup_r+0xc6>
 80190a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80190a4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80190a8:	d1ba      	bne.n	8019020 <__swsetup_r+0x30>
 80190aa:	bd70      	pop	{r4, r5, r6, pc}
 80190ac:	0792      	lsls	r2, r2, #30
 80190ae:	bf58      	it	pl
 80190b0:	6963      	ldrpl	r3, [r4, #20]
 80190b2:	60a3      	str	r3, [r4, #8]
 80190b4:	e7f2      	b.n	801909c <__swsetup_r+0xac>
 80190b6:	2000      	movs	r0, #0
 80190b8:	e7f7      	b.n	80190aa <__swsetup_r+0xba>
 80190ba:	bf00      	nop
 80190bc:	20000020 	.word	0x20000020
 80190c0:	080286c4 	.word	0x080286c4
 80190c4:	080286e4 	.word	0x080286e4
 80190c8:	080286a4 	.word	0x080286a4

080190cc <_close_r>:
 80190cc:	b538      	push	{r3, r4, r5, lr}
 80190ce:	4c06      	ldr	r4, [pc, #24]	; (80190e8 <_close_r+0x1c>)
 80190d0:	2300      	movs	r3, #0
 80190d2:	4605      	mov	r5, r0
 80190d4:	4608      	mov	r0, r1
 80190d6:	6023      	str	r3, [r4, #0]
 80190d8:	f7e7 fddb 	bl	8000c92 <_close>
 80190dc:	1c43      	adds	r3, r0, #1
 80190de:	d102      	bne.n	80190e6 <_close_r+0x1a>
 80190e0:	6823      	ldr	r3, [r4, #0]
 80190e2:	b103      	cbz	r3, 80190e6 <_close_r+0x1a>
 80190e4:	602b      	str	r3, [r5, #0]
 80190e6:	bd38      	pop	{r3, r4, r5, pc}
 80190e8:	2000fb1c 	.word	0x2000fb1c

080190ec <__sflush_r>:
 80190ec:	898a      	ldrh	r2, [r1, #12]
 80190ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80190f2:	4605      	mov	r5, r0
 80190f4:	0710      	lsls	r0, r2, #28
 80190f6:	460c      	mov	r4, r1
 80190f8:	d458      	bmi.n	80191ac <__sflush_r+0xc0>
 80190fa:	684b      	ldr	r3, [r1, #4]
 80190fc:	2b00      	cmp	r3, #0
 80190fe:	dc05      	bgt.n	801910c <__sflush_r+0x20>
 8019100:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019102:	2b00      	cmp	r3, #0
 8019104:	dc02      	bgt.n	801910c <__sflush_r+0x20>
 8019106:	2000      	movs	r0, #0
 8019108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801910c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801910e:	2e00      	cmp	r6, #0
 8019110:	d0f9      	beq.n	8019106 <__sflush_r+0x1a>
 8019112:	2300      	movs	r3, #0
 8019114:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019118:	682f      	ldr	r7, [r5, #0]
 801911a:	6a21      	ldr	r1, [r4, #32]
 801911c:	602b      	str	r3, [r5, #0]
 801911e:	d032      	beq.n	8019186 <__sflush_r+0x9a>
 8019120:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019122:	89a3      	ldrh	r3, [r4, #12]
 8019124:	075a      	lsls	r2, r3, #29
 8019126:	d505      	bpl.n	8019134 <__sflush_r+0x48>
 8019128:	6863      	ldr	r3, [r4, #4]
 801912a:	1ac0      	subs	r0, r0, r3
 801912c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801912e:	b10b      	cbz	r3, 8019134 <__sflush_r+0x48>
 8019130:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019132:	1ac0      	subs	r0, r0, r3
 8019134:	2300      	movs	r3, #0
 8019136:	4602      	mov	r2, r0
 8019138:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801913a:	6a21      	ldr	r1, [r4, #32]
 801913c:	4628      	mov	r0, r5
 801913e:	47b0      	blx	r6
 8019140:	1c43      	adds	r3, r0, #1
 8019142:	89a3      	ldrh	r3, [r4, #12]
 8019144:	d106      	bne.n	8019154 <__sflush_r+0x68>
 8019146:	6829      	ldr	r1, [r5, #0]
 8019148:	291d      	cmp	r1, #29
 801914a:	d848      	bhi.n	80191de <__sflush_r+0xf2>
 801914c:	4a29      	ldr	r2, [pc, #164]	; (80191f4 <__sflush_r+0x108>)
 801914e:	40ca      	lsrs	r2, r1
 8019150:	07d6      	lsls	r6, r2, #31
 8019152:	d544      	bpl.n	80191de <__sflush_r+0xf2>
 8019154:	2200      	movs	r2, #0
 8019156:	6062      	str	r2, [r4, #4]
 8019158:	04d9      	lsls	r1, r3, #19
 801915a:	6922      	ldr	r2, [r4, #16]
 801915c:	6022      	str	r2, [r4, #0]
 801915e:	d504      	bpl.n	801916a <__sflush_r+0x7e>
 8019160:	1c42      	adds	r2, r0, #1
 8019162:	d101      	bne.n	8019168 <__sflush_r+0x7c>
 8019164:	682b      	ldr	r3, [r5, #0]
 8019166:	b903      	cbnz	r3, 801916a <__sflush_r+0x7e>
 8019168:	6560      	str	r0, [r4, #84]	; 0x54
 801916a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801916c:	602f      	str	r7, [r5, #0]
 801916e:	2900      	cmp	r1, #0
 8019170:	d0c9      	beq.n	8019106 <__sflush_r+0x1a>
 8019172:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019176:	4299      	cmp	r1, r3
 8019178:	d002      	beq.n	8019180 <__sflush_r+0x94>
 801917a:	4628      	mov	r0, r5
 801917c:	f7ff f9be 	bl	80184fc <_free_r>
 8019180:	2000      	movs	r0, #0
 8019182:	6360      	str	r0, [r4, #52]	; 0x34
 8019184:	e7c0      	b.n	8019108 <__sflush_r+0x1c>
 8019186:	2301      	movs	r3, #1
 8019188:	4628      	mov	r0, r5
 801918a:	47b0      	blx	r6
 801918c:	1c41      	adds	r1, r0, #1
 801918e:	d1c8      	bne.n	8019122 <__sflush_r+0x36>
 8019190:	682b      	ldr	r3, [r5, #0]
 8019192:	2b00      	cmp	r3, #0
 8019194:	d0c5      	beq.n	8019122 <__sflush_r+0x36>
 8019196:	2b1d      	cmp	r3, #29
 8019198:	d001      	beq.n	801919e <__sflush_r+0xb2>
 801919a:	2b16      	cmp	r3, #22
 801919c:	d101      	bne.n	80191a2 <__sflush_r+0xb6>
 801919e:	602f      	str	r7, [r5, #0]
 80191a0:	e7b1      	b.n	8019106 <__sflush_r+0x1a>
 80191a2:	89a3      	ldrh	r3, [r4, #12]
 80191a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80191a8:	81a3      	strh	r3, [r4, #12]
 80191aa:	e7ad      	b.n	8019108 <__sflush_r+0x1c>
 80191ac:	690f      	ldr	r7, [r1, #16]
 80191ae:	2f00      	cmp	r7, #0
 80191b0:	d0a9      	beq.n	8019106 <__sflush_r+0x1a>
 80191b2:	0793      	lsls	r3, r2, #30
 80191b4:	680e      	ldr	r6, [r1, #0]
 80191b6:	bf08      	it	eq
 80191b8:	694b      	ldreq	r3, [r1, #20]
 80191ba:	600f      	str	r7, [r1, #0]
 80191bc:	bf18      	it	ne
 80191be:	2300      	movne	r3, #0
 80191c0:	eba6 0807 	sub.w	r8, r6, r7
 80191c4:	608b      	str	r3, [r1, #8]
 80191c6:	f1b8 0f00 	cmp.w	r8, #0
 80191ca:	dd9c      	ble.n	8019106 <__sflush_r+0x1a>
 80191cc:	4643      	mov	r3, r8
 80191ce:	463a      	mov	r2, r7
 80191d0:	6a21      	ldr	r1, [r4, #32]
 80191d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80191d4:	4628      	mov	r0, r5
 80191d6:	47b0      	blx	r6
 80191d8:	2800      	cmp	r0, #0
 80191da:	dc06      	bgt.n	80191ea <__sflush_r+0xfe>
 80191dc:	89a3      	ldrh	r3, [r4, #12]
 80191de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80191e2:	81a3      	strh	r3, [r4, #12]
 80191e4:	f04f 30ff 	mov.w	r0, #4294967295
 80191e8:	e78e      	b.n	8019108 <__sflush_r+0x1c>
 80191ea:	4407      	add	r7, r0
 80191ec:	eba8 0800 	sub.w	r8, r8, r0
 80191f0:	e7e9      	b.n	80191c6 <__sflush_r+0xda>
 80191f2:	bf00      	nop
 80191f4:	20400001 	.word	0x20400001

080191f8 <_fflush_r>:
 80191f8:	b538      	push	{r3, r4, r5, lr}
 80191fa:	690b      	ldr	r3, [r1, #16]
 80191fc:	4605      	mov	r5, r0
 80191fe:	460c      	mov	r4, r1
 8019200:	b1db      	cbz	r3, 801923a <_fflush_r+0x42>
 8019202:	b118      	cbz	r0, 801920c <_fflush_r+0x14>
 8019204:	6983      	ldr	r3, [r0, #24]
 8019206:	b90b      	cbnz	r3, 801920c <_fflush_r+0x14>
 8019208:	f7ff f8e6 	bl	80183d8 <__sinit>
 801920c:	4b0c      	ldr	r3, [pc, #48]	; (8019240 <_fflush_r+0x48>)
 801920e:	429c      	cmp	r4, r3
 8019210:	d109      	bne.n	8019226 <_fflush_r+0x2e>
 8019212:	686c      	ldr	r4, [r5, #4]
 8019214:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019218:	b17b      	cbz	r3, 801923a <_fflush_r+0x42>
 801921a:	4621      	mov	r1, r4
 801921c:	4628      	mov	r0, r5
 801921e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019222:	f7ff bf63 	b.w	80190ec <__sflush_r>
 8019226:	4b07      	ldr	r3, [pc, #28]	; (8019244 <_fflush_r+0x4c>)
 8019228:	429c      	cmp	r4, r3
 801922a:	d101      	bne.n	8019230 <_fflush_r+0x38>
 801922c:	68ac      	ldr	r4, [r5, #8]
 801922e:	e7f1      	b.n	8019214 <_fflush_r+0x1c>
 8019230:	4b05      	ldr	r3, [pc, #20]	; (8019248 <_fflush_r+0x50>)
 8019232:	429c      	cmp	r4, r3
 8019234:	bf08      	it	eq
 8019236:	68ec      	ldreq	r4, [r5, #12]
 8019238:	e7ec      	b.n	8019214 <_fflush_r+0x1c>
 801923a:	2000      	movs	r0, #0
 801923c:	bd38      	pop	{r3, r4, r5, pc}
 801923e:	bf00      	nop
 8019240:	080286c4 	.word	0x080286c4
 8019244:	080286e4 	.word	0x080286e4
 8019248:	080286a4 	.word	0x080286a4

0801924c <_lseek_r>:
 801924c:	b538      	push	{r3, r4, r5, lr}
 801924e:	4c07      	ldr	r4, [pc, #28]	; (801926c <_lseek_r+0x20>)
 8019250:	4605      	mov	r5, r0
 8019252:	4608      	mov	r0, r1
 8019254:	4611      	mov	r1, r2
 8019256:	2200      	movs	r2, #0
 8019258:	6022      	str	r2, [r4, #0]
 801925a:	461a      	mov	r2, r3
 801925c:	f7e7 fd40 	bl	8000ce0 <_lseek>
 8019260:	1c43      	adds	r3, r0, #1
 8019262:	d102      	bne.n	801926a <_lseek_r+0x1e>
 8019264:	6823      	ldr	r3, [r4, #0]
 8019266:	b103      	cbz	r3, 801926a <_lseek_r+0x1e>
 8019268:	602b      	str	r3, [r5, #0]
 801926a:	bd38      	pop	{r3, r4, r5, pc}
 801926c:	2000fb1c 	.word	0x2000fb1c

08019270 <__swhatbuf_r>:
 8019270:	b570      	push	{r4, r5, r6, lr}
 8019272:	460e      	mov	r6, r1
 8019274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019278:	2900      	cmp	r1, #0
 801927a:	b096      	sub	sp, #88	; 0x58
 801927c:	4614      	mov	r4, r2
 801927e:	461d      	mov	r5, r3
 8019280:	da07      	bge.n	8019292 <__swhatbuf_r+0x22>
 8019282:	2300      	movs	r3, #0
 8019284:	602b      	str	r3, [r5, #0]
 8019286:	89b3      	ldrh	r3, [r6, #12]
 8019288:	061a      	lsls	r2, r3, #24
 801928a:	d410      	bmi.n	80192ae <__swhatbuf_r+0x3e>
 801928c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019290:	e00e      	b.n	80192b0 <__swhatbuf_r+0x40>
 8019292:	466a      	mov	r2, sp
 8019294:	f000 f88a 	bl	80193ac <_fstat_r>
 8019298:	2800      	cmp	r0, #0
 801929a:	dbf2      	blt.n	8019282 <__swhatbuf_r+0x12>
 801929c:	9a01      	ldr	r2, [sp, #4]
 801929e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80192a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80192a6:	425a      	negs	r2, r3
 80192a8:	415a      	adcs	r2, r3
 80192aa:	602a      	str	r2, [r5, #0]
 80192ac:	e7ee      	b.n	801928c <__swhatbuf_r+0x1c>
 80192ae:	2340      	movs	r3, #64	; 0x40
 80192b0:	2000      	movs	r0, #0
 80192b2:	6023      	str	r3, [r4, #0]
 80192b4:	b016      	add	sp, #88	; 0x58
 80192b6:	bd70      	pop	{r4, r5, r6, pc}

080192b8 <__smakebuf_r>:
 80192b8:	898b      	ldrh	r3, [r1, #12]
 80192ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80192bc:	079d      	lsls	r5, r3, #30
 80192be:	4606      	mov	r6, r0
 80192c0:	460c      	mov	r4, r1
 80192c2:	d507      	bpl.n	80192d4 <__smakebuf_r+0x1c>
 80192c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80192c8:	6023      	str	r3, [r4, #0]
 80192ca:	6123      	str	r3, [r4, #16]
 80192cc:	2301      	movs	r3, #1
 80192ce:	6163      	str	r3, [r4, #20]
 80192d0:	b002      	add	sp, #8
 80192d2:	bd70      	pop	{r4, r5, r6, pc}
 80192d4:	ab01      	add	r3, sp, #4
 80192d6:	466a      	mov	r2, sp
 80192d8:	f7ff ffca 	bl	8019270 <__swhatbuf_r>
 80192dc:	9900      	ldr	r1, [sp, #0]
 80192de:	4605      	mov	r5, r0
 80192e0:	4630      	mov	r0, r6
 80192e2:	f7ff f959 	bl	8018598 <_malloc_r>
 80192e6:	b948      	cbnz	r0, 80192fc <__smakebuf_r+0x44>
 80192e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80192ec:	059a      	lsls	r2, r3, #22
 80192ee:	d4ef      	bmi.n	80192d0 <__smakebuf_r+0x18>
 80192f0:	f023 0303 	bic.w	r3, r3, #3
 80192f4:	f043 0302 	orr.w	r3, r3, #2
 80192f8:	81a3      	strh	r3, [r4, #12]
 80192fa:	e7e3      	b.n	80192c4 <__smakebuf_r+0xc>
 80192fc:	4b0d      	ldr	r3, [pc, #52]	; (8019334 <__smakebuf_r+0x7c>)
 80192fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8019300:	89a3      	ldrh	r3, [r4, #12]
 8019302:	6020      	str	r0, [r4, #0]
 8019304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019308:	81a3      	strh	r3, [r4, #12]
 801930a:	9b00      	ldr	r3, [sp, #0]
 801930c:	6163      	str	r3, [r4, #20]
 801930e:	9b01      	ldr	r3, [sp, #4]
 8019310:	6120      	str	r0, [r4, #16]
 8019312:	b15b      	cbz	r3, 801932c <__smakebuf_r+0x74>
 8019314:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019318:	4630      	mov	r0, r6
 801931a:	f000 f859 	bl	80193d0 <_isatty_r>
 801931e:	b128      	cbz	r0, 801932c <__smakebuf_r+0x74>
 8019320:	89a3      	ldrh	r3, [r4, #12]
 8019322:	f023 0303 	bic.w	r3, r3, #3
 8019326:	f043 0301 	orr.w	r3, r3, #1
 801932a:	81a3      	strh	r3, [r4, #12]
 801932c:	89a3      	ldrh	r3, [r4, #12]
 801932e:	431d      	orrs	r5, r3
 8019330:	81a5      	strh	r5, [r4, #12]
 8019332:	e7cd      	b.n	80192d0 <__smakebuf_r+0x18>
 8019334:	080183a1 	.word	0x080183a1

08019338 <__malloc_lock>:
 8019338:	4770      	bx	lr

0801933a <__malloc_unlock>:
 801933a:	4770      	bx	lr

0801933c <_realloc_r>:
 801933c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801933e:	4607      	mov	r7, r0
 8019340:	4614      	mov	r4, r2
 8019342:	460e      	mov	r6, r1
 8019344:	b921      	cbnz	r1, 8019350 <_realloc_r+0x14>
 8019346:	4611      	mov	r1, r2
 8019348:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801934c:	f7ff b924 	b.w	8018598 <_malloc_r>
 8019350:	b922      	cbnz	r2, 801935c <_realloc_r+0x20>
 8019352:	f7ff f8d3 	bl	80184fc <_free_r>
 8019356:	4625      	mov	r5, r4
 8019358:	4628      	mov	r0, r5
 801935a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801935c:	f000 f848 	bl	80193f0 <_malloc_usable_size_r>
 8019360:	42a0      	cmp	r0, r4
 8019362:	d20f      	bcs.n	8019384 <_realloc_r+0x48>
 8019364:	4621      	mov	r1, r4
 8019366:	4638      	mov	r0, r7
 8019368:	f7ff f916 	bl	8018598 <_malloc_r>
 801936c:	4605      	mov	r5, r0
 801936e:	2800      	cmp	r0, #0
 8019370:	d0f2      	beq.n	8019358 <_realloc_r+0x1c>
 8019372:	4631      	mov	r1, r6
 8019374:	4622      	mov	r2, r4
 8019376:	f7fe fede 	bl	8018136 <memcpy>
 801937a:	4631      	mov	r1, r6
 801937c:	4638      	mov	r0, r7
 801937e:	f7ff f8bd 	bl	80184fc <_free_r>
 8019382:	e7e9      	b.n	8019358 <_realloc_r+0x1c>
 8019384:	4635      	mov	r5, r6
 8019386:	e7e7      	b.n	8019358 <_realloc_r+0x1c>

08019388 <_read_r>:
 8019388:	b538      	push	{r3, r4, r5, lr}
 801938a:	4c07      	ldr	r4, [pc, #28]	; (80193a8 <_read_r+0x20>)
 801938c:	4605      	mov	r5, r0
 801938e:	4608      	mov	r0, r1
 8019390:	4611      	mov	r1, r2
 8019392:	2200      	movs	r2, #0
 8019394:	6022      	str	r2, [r4, #0]
 8019396:	461a      	mov	r2, r3
 8019398:	f7e7 fc42 	bl	8000c20 <_read>
 801939c:	1c43      	adds	r3, r0, #1
 801939e:	d102      	bne.n	80193a6 <_read_r+0x1e>
 80193a0:	6823      	ldr	r3, [r4, #0]
 80193a2:	b103      	cbz	r3, 80193a6 <_read_r+0x1e>
 80193a4:	602b      	str	r3, [r5, #0]
 80193a6:	bd38      	pop	{r3, r4, r5, pc}
 80193a8:	2000fb1c 	.word	0x2000fb1c

080193ac <_fstat_r>:
 80193ac:	b538      	push	{r3, r4, r5, lr}
 80193ae:	4c07      	ldr	r4, [pc, #28]	; (80193cc <_fstat_r+0x20>)
 80193b0:	2300      	movs	r3, #0
 80193b2:	4605      	mov	r5, r0
 80193b4:	4608      	mov	r0, r1
 80193b6:	4611      	mov	r1, r2
 80193b8:	6023      	str	r3, [r4, #0]
 80193ba:	f7e7 fc76 	bl	8000caa <_fstat>
 80193be:	1c43      	adds	r3, r0, #1
 80193c0:	d102      	bne.n	80193c8 <_fstat_r+0x1c>
 80193c2:	6823      	ldr	r3, [r4, #0]
 80193c4:	b103      	cbz	r3, 80193c8 <_fstat_r+0x1c>
 80193c6:	602b      	str	r3, [r5, #0]
 80193c8:	bd38      	pop	{r3, r4, r5, pc}
 80193ca:	bf00      	nop
 80193cc:	2000fb1c 	.word	0x2000fb1c

080193d0 <_isatty_r>:
 80193d0:	b538      	push	{r3, r4, r5, lr}
 80193d2:	4c06      	ldr	r4, [pc, #24]	; (80193ec <_isatty_r+0x1c>)
 80193d4:	2300      	movs	r3, #0
 80193d6:	4605      	mov	r5, r0
 80193d8:	4608      	mov	r0, r1
 80193da:	6023      	str	r3, [r4, #0]
 80193dc:	f7e7 fc75 	bl	8000cca <_isatty>
 80193e0:	1c43      	adds	r3, r0, #1
 80193e2:	d102      	bne.n	80193ea <_isatty_r+0x1a>
 80193e4:	6823      	ldr	r3, [r4, #0]
 80193e6:	b103      	cbz	r3, 80193ea <_isatty_r+0x1a>
 80193e8:	602b      	str	r3, [r5, #0]
 80193ea:	bd38      	pop	{r3, r4, r5, pc}
 80193ec:	2000fb1c 	.word	0x2000fb1c

080193f0 <_malloc_usable_size_r>:
 80193f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80193f4:	1f18      	subs	r0, r3, #4
 80193f6:	2b00      	cmp	r3, #0
 80193f8:	bfbc      	itt	lt
 80193fa:	580b      	ldrlt	r3, [r1, r0]
 80193fc:	18c0      	addlt	r0, r0, r3
 80193fe:	4770      	bx	lr

08019400 <_init>:
 8019400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019402:	bf00      	nop
 8019404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019406:	bc08      	pop	{r3}
 8019408:	469e      	mov	lr, r3
 801940a:	4770      	bx	lr

0801940c <_fini>:
 801940c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801940e:	bf00      	nop
 8019410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019412:	bc08      	pop	{r3}
 8019414:	469e      	mov	lr, r3
 8019416:	4770      	bx	lr
