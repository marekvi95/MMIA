
cv9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061d4  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08006388  08006388  00016388  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065c0  080065c0  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  080065c0  080065c0  000165c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065c8  080065c8  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065c8  080065c8  000165c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065cc  080065cc  000165cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080065d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000948  200001e4  080067b4  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b2c  080067b4  00020b2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011f8e  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a6d  00000000  00000000  000321a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cb0  00000000  00000000  00034c10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b68  00000000  00000000  000358c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002596d  00000000  00000000  00036428  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cb07  00000000  00000000  0005bd95  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d54d1  00000000  00000000  0006889c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013dd6d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003870  00000000  00000000  0013dde8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800636c 	.word	0x0800636c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	0800636c 	.word	0x0800636c

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2iz>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d215      	bcs.n	8000ad2 <__aeabi_d2iz+0x36>
 8000aa6:	d511      	bpl.n	8000acc <__aeabi_d2iz+0x30>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d912      	bls.n	8000ad8 <__aeabi_d2iz+0x3c>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	4240      	negne	r0, r0
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad6:	d105      	bne.n	8000ae4 <__aeabi_d2iz+0x48>
 8000ad8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	bf08      	it	eq
 8000ade:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295
 8000b00:	f000 b972 	b.w	8000de8 <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9e08      	ldr	r6, [sp, #32]
 8000b22:	4604      	mov	r4, r0
 8000b24:	4688      	mov	r8, r1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d14b      	bne.n	8000bc2 <__udivmoddi4+0xa6>
 8000b2a:	428a      	cmp	r2, r1
 8000b2c:	4615      	mov	r5, r2
 8000b2e:	d967      	bls.n	8000c00 <__udivmoddi4+0xe4>
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	b14a      	cbz	r2, 8000b4a <__udivmoddi4+0x2e>
 8000b36:	f1c2 0720 	rsb	r7, r2, #32
 8000b3a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b3e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b42:	4095      	lsls	r5, r2
 8000b44:	ea47 0803 	orr.w	r8, r7, r3
 8000b48:	4094      	lsls	r4, r2
 8000b4a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b4e:	0c23      	lsrs	r3, r4, #16
 8000b50:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b54:	fa1f fc85 	uxth.w	ip, r5
 8000b58:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b5c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b60:	fb07 f10c 	mul.w	r1, r7, ip
 8000b64:	4299      	cmp	r1, r3
 8000b66:	d909      	bls.n	8000b7c <__udivmoddi4+0x60>
 8000b68:	18eb      	adds	r3, r5, r3
 8000b6a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b6e:	f080 811b 	bcs.w	8000da8 <__udivmoddi4+0x28c>
 8000b72:	4299      	cmp	r1, r3
 8000b74:	f240 8118 	bls.w	8000da8 <__udivmoddi4+0x28c>
 8000b78:	3f02      	subs	r7, #2
 8000b7a:	442b      	add	r3, r5
 8000b7c:	1a5b      	subs	r3, r3, r1
 8000b7e:	b2a4      	uxth	r4, r4
 8000b80:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b84:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b8c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b90:	45a4      	cmp	ip, r4
 8000b92:	d909      	bls.n	8000ba8 <__udivmoddi4+0x8c>
 8000b94:	192c      	adds	r4, r5, r4
 8000b96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b9a:	f080 8107 	bcs.w	8000dac <__udivmoddi4+0x290>
 8000b9e:	45a4      	cmp	ip, r4
 8000ba0:	f240 8104 	bls.w	8000dac <__udivmoddi4+0x290>
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	442c      	add	r4, r5
 8000ba8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bac:	eba4 040c 	sub.w	r4, r4, ip
 8000bb0:	2700      	movs	r7, #0
 8000bb2:	b11e      	cbz	r6, 8000bbc <__udivmoddi4+0xa0>
 8000bb4:	40d4      	lsrs	r4, r2
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bbc:	4639      	mov	r1, r7
 8000bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d909      	bls.n	8000bda <__udivmoddi4+0xbe>
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	f000 80eb 	beq.w	8000da2 <__udivmoddi4+0x286>
 8000bcc:	2700      	movs	r7, #0
 8000bce:	e9c6 0100 	strd	r0, r1, [r6]
 8000bd2:	4638      	mov	r0, r7
 8000bd4:	4639      	mov	r1, r7
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	fab3 f783 	clz	r7, r3
 8000bde:	2f00      	cmp	r7, #0
 8000be0:	d147      	bne.n	8000c72 <__udivmoddi4+0x156>
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d302      	bcc.n	8000bec <__udivmoddi4+0xd0>
 8000be6:	4282      	cmp	r2, r0
 8000be8:	f200 80fa 	bhi.w	8000de0 <__udivmoddi4+0x2c4>
 8000bec:	1a84      	subs	r4, r0, r2
 8000bee:	eb61 0303 	sbc.w	r3, r1, r3
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	4698      	mov	r8, r3
 8000bf6:	2e00      	cmp	r6, #0
 8000bf8:	d0e0      	beq.n	8000bbc <__udivmoddi4+0xa0>
 8000bfa:	e9c6 4800 	strd	r4, r8, [r6]
 8000bfe:	e7dd      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000c00:	b902      	cbnz	r2, 8000c04 <__udivmoddi4+0xe8>
 8000c02:	deff      	udf	#255	; 0xff
 8000c04:	fab2 f282 	clz	r2, r2
 8000c08:	2a00      	cmp	r2, #0
 8000c0a:	f040 808f 	bne.w	8000d2c <__udivmoddi4+0x210>
 8000c0e:	1b49      	subs	r1, r1, r5
 8000c10:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c14:	fa1f f885 	uxth.w	r8, r5
 8000c18:	2701      	movs	r7, #1
 8000c1a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c1e:	0c23      	lsrs	r3, r4, #16
 8000c20:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c28:	fb08 f10c 	mul.w	r1, r8, ip
 8000c2c:	4299      	cmp	r1, r3
 8000c2e:	d907      	bls.n	8000c40 <__udivmoddi4+0x124>
 8000c30:	18eb      	adds	r3, r5, r3
 8000c32:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0x122>
 8000c38:	4299      	cmp	r1, r3
 8000c3a:	f200 80cd 	bhi.w	8000dd8 <__udivmoddi4+0x2bc>
 8000c3e:	4684      	mov	ip, r0
 8000c40:	1a59      	subs	r1, r3, r1
 8000c42:	b2a3      	uxth	r3, r4
 8000c44:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c48:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c4c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c50:	fb08 f800 	mul.w	r8, r8, r0
 8000c54:	45a0      	cmp	r8, r4
 8000c56:	d907      	bls.n	8000c68 <__udivmoddi4+0x14c>
 8000c58:	192c      	adds	r4, r5, r4
 8000c5a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x14a>
 8000c60:	45a0      	cmp	r8, r4
 8000c62:	f200 80b6 	bhi.w	8000dd2 <__udivmoddi4+0x2b6>
 8000c66:	4618      	mov	r0, r3
 8000c68:	eba4 0408 	sub.w	r4, r4, r8
 8000c6c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c70:	e79f      	b.n	8000bb2 <__udivmoddi4+0x96>
 8000c72:	f1c7 0c20 	rsb	ip, r7, #32
 8000c76:	40bb      	lsls	r3, r7
 8000c78:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c7c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c80:	fa01 f407 	lsl.w	r4, r1, r7
 8000c84:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c88:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c8c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c90:	4325      	orrs	r5, r4
 8000c92:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c96:	0c2c      	lsrs	r4, r5, #16
 8000c98:	fb08 3319 	mls	r3, r8, r9, r3
 8000c9c:	fa1f fa8e 	uxth.w	sl, lr
 8000ca0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ca4:	fb09 f40a 	mul.w	r4, r9, sl
 8000ca8:	429c      	cmp	r4, r3
 8000caa:	fa02 f207 	lsl.w	r2, r2, r7
 8000cae:	fa00 f107 	lsl.w	r1, r0, r7
 8000cb2:	d90b      	bls.n	8000ccc <__udivmoddi4+0x1b0>
 8000cb4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cb8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cbc:	f080 8087 	bcs.w	8000dce <__udivmoddi4+0x2b2>
 8000cc0:	429c      	cmp	r4, r3
 8000cc2:	f240 8084 	bls.w	8000dce <__udivmoddi4+0x2b2>
 8000cc6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cca:	4473      	add	r3, lr
 8000ccc:	1b1b      	subs	r3, r3, r4
 8000cce:	b2ad      	uxth	r5, r5
 8000cd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cd8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cdc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ce0:	45a2      	cmp	sl, r4
 8000ce2:	d908      	bls.n	8000cf6 <__udivmoddi4+0x1da>
 8000ce4:	eb1e 0404 	adds.w	r4, lr, r4
 8000ce8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cec:	d26b      	bcs.n	8000dc6 <__udivmoddi4+0x2aa>
 8000cee:	45a2      	cmp	sl, r4
 8000cf0:	d969      	bls.n	8000dc6 <__udivmoddi4+0x2aa>
 8000cf2:	3802      	subs	r0, #2
 8000cf4:	4474      	add	r4, lr
 8000cf6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cfa:	fba0 8902 	umull	r8, r9, r0, r2
 8000cfe:	eba4 040a 	sub.w	r4, r4, sl
 8000d02:	454c      	cmp	r4, r9
 8000d04:	46c2      	mov	sl, r8
 8000d06:	464b      	mov	r3, r9
 8000d08:	d354      	bcc.n	8000db4 <__udivmoddi4+0x298>
 8000d0a:	d051      	beq.n	8000db0 <__udivmoddi4+0x294>
 8000d0c:	2e00      	cmp	r6, #0
 8000d0e:	d069      	beq.n	8000de4 <__udivmoddi4+0x2c8>
 8000d10:	ebb1 050a 	subs.w	r5, r1, sl
 8000d14:	eb64 0403 	sbc.w	r4, r4, r3
 8000d18:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d1c:	40fd      	lsrs	r5, r7
 8000d1e:	40fc      	lsrs	r4, r7
 8000d20:	ea4c 0505 	orr.w	r5, ip, r5
 8000d24:	e9c6 5400 	strd	r5, r4, [r6]
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e747      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f703 	lsr.w	r7, r0, r3
 8000d34:	4095      	lsls	r5, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d3e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d42:	4338      	orrs	r0, r7
 8000d44:	0c01      	lsrs	r1, r0, #16
 8000d46:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d4a:	fa1f f885 	uxth.w	r8, r5
 8000d4e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d52:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d56:	fb07 f308 	mul.w	r3, r7, r8
 8000d5a:	428b      	cmp	r3, r1
 8000d5c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d60:	d907      	bls.n	8000d72 <__udivmoddi4+0x256>
 8000d62:	1869      	adds	r1, r5, r1
 8000d64:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d68:	d22f      	bcs.n	8000dca <__udivmoddi4+0x2ae>
 8000d6a:	428b      	cmp	r3, r1
 8000d6c:	d92d      	bls.n	8000dca <__udivmoddi4+0x2ae>
 8000d6e:	3f02      	subs	r7, #2
 8000d70:	4429      	add	r1, r5
 8000d72:	1acb      	subs	r3, r1, r3
 8000d74:	b281      	uxth	r1, r0
 8000d76:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d82:	fb00 f308 	mul.w	r3, r0, r8
 8000d86:	428b      	cmp	r3, r1
 8000d88:	d907      	bls.n	8000d9a <__udivmoddi4+0x27e>
 8000d8a:	1869      	adds	r1, r5, r1
 8000d8c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d90:	d217      	bcs.n	8000dc2 <__udivmoddi4+0x2a6>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d915      	bls.n	8000dc2 <__udivmoddi4+0x2a6>
 8000d96:	3802      	subs	r0, #2
 8000d98:	4429      	add	r1, r5
 8000d9a:	1ac9      	subs	r1, r1, r3
 8000d9c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000da0:	e73b      	b.n	8000c1a <__udivmoddi4+0xfe>
 8000da2:	4637      	mov	r7, r6
 8000da4:	4630      	mov	r0, r6
 8000da6:	e709      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000da8:	4607      	mov	r7, r0
 8000daa:	e6e7      	b.n	8000b7c <__udivmoddi4+0x60>
 8000dac:	4618      	mov	r0, r3
 8000dae:	e6fb      	b.n	8000ba8 <__udivmoddi4+0x8c>
 8000db0:	4541      	cmp	r1, r8
 8000db2:	d2ab      	bcs.n	8000d0c <__udivmoddi4+0x1f0>
 8000db4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000db8:	eb69 020e 	sbc.w	r2, r9, lr
 8000dbc:	3801      	subs	r0, #1
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	e7a4      	b.n	8000d0c <__udivmoddi4+0x1f0>
 8000dc2:	4660      	mov	r0, ip
 8000dc4:	e7e9      	b.n	8000d9a <__udivmoddi4+0x27e>
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	e795      	b.n	8000cf6 <__udivmoddi4+0x1da>
 8000dca:	4667      	mov	r7, ip
 8000dcc:	e7d1      	b.n	8000d72 <__udivmoddi4+0x256>
 8000dce:	4681      	mov	r9, r0
 8000dd0:	e77c      	b.n	8000ccc <__udivmoddi4+0x1b0>
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	442c      	add	r4, r5
 8000dd6:	e747      	b.n	8000c68 <__udivmoddi4+0x14c>
 8000dd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ddc:	442b      	add	r3, r5
 8000dde:	e72f      	b.n	8000c40 <__udivmoddi4+0x124>
 8000de0:	4638      	mov	r0, r7
 8000de2:	e708      	b.n	8000bf6 <__udivmoddi4+0xda>
 8000de4:	4637      	mov	r7, r6
 8000de6:	e6e9      	b.n	8000bbc <__udivmoddi4+0xa0>

08000de8 <__aeabi_idiv0>:
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop

08000dec <step>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void step(int8_t x, int8_t y, _Bool btn)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	71fb      	strb	r3, [r7, #7]
 8000df6:	460b      	mov	r3, r1
 8000df8:	71bb      	strb	r3, [r7, #6]
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	717b      	strb	r3, [r7, #5]
	uint8_t buff[5];
	buff[0] = 0x02; // report id pro mys
 8000dfe:	2302      	movs	r3, #2
 8000e00:	723b      	strb	r3, [r7, #8]
	if (btn)
 8000e02:	797b      	ldrb	r3, [r7, #5]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d002      	beq.n	8000e0e <step+0x22>
		buff[1] = 0x01; // stiskni leve tlacitko
 8000e08:	2301      	movs	r3, #1
 8000e0a:	727b      	strb	r3, [r7, #9]
 8000e0c:	e001      	b.n	8000e12 <step+0x26>
	else
		buff[1] = 0x00;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	727b      	strb	r3, [r7, #9]

	buff[2] = x; // posun X +10
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	72bb      	strb	r3, [r7, #10]
	buff[3] = y; // posun Y -3
 8000e16:	79bb      	ldrb	r3, [r7, #6]
 8000e18:	72fb      	strb	r3, [r7, #11]
	buff[4] = 0; // bez scrollu
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	733b      	strb	r3, [r7, #12]

	USBD_HID_SendReport(&hUsbDeviceFS, buff, sizeof(buff));
 8000e1e:	f107 0308 	add.w	r3, r7, #8
 8000e22:	2205      	movs	r2, #5
 8000e24:	4619      	mov	r1, r3
 8000e26:	4807      	ldr	r0, [pc, #28]	; (8000e44 <step+0x58>)
 8000e28:	f003 fd30 	bl	800488c <USBD_HID_SendReport>
	HAL_Delay(2*USBD_HID_GetPollingInterval(&hUsbDeviceFS));
 8000e2c:	4805      	ldr	r0, [pc, #20]	; (8000e44 <step+0x58>)
 8000e2e:	f003 fd4f 	bl	80048d0 <USBD_HID_GetPollingInterval>
 8000e32:	4603      	mov	r3, r0
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	4618      	mov	r0, r3
 8000e38:	f000 fcec 	bl	8001814 <HAL_Delay>

}
 8000e3c:	bf00      	nop
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20000250 	.word	0x20000250

08000e48 <circle>:

void circle(int8_t radius)
{
 8000e48:	b5b0      	push	{r4, r5, r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	71fb      	strb	r3, [r7, #7]
	int8_t x, y;
	float angle = 0.0;
 8000e52:	f04f 0300 	mov.w	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
	float angle_stepsize = 0.1;
 8000e58:	4b31      	ldr	r3, [pc, #196]	; (8000f20 <circle+0xd8>)
 8000e5a:	613b      	str	r3, [r7, #16]

	while (angle < 2 * PI)
 8000e5c:	e04b      	b.n	8000ef6 <circle+0xae>
	{
		x = radius * cos (angle);
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fb16 	bl	8000494 <__aeabi_i2d>
 8000e68:	4604      	mov	r4, r0
 8000e6a:	460d      	mov	r5, r1
 8000e6c:	6978      	ldr	r0, [r7, #20]
 8000e6e:	f7ff fb23 	bl	80004b8 <__aeabi_f2d>
 8000e72:	4602      	mov	r2, r0
 8000e74:	460b      	mov	r3, r1
 8000e76:	ec43 2b10 	vmov	d0, r2, r3
 8000e7a:	f004 fa21 	bl	80052c0 <cos>
 8000e7e:	ec53 2b10 	vmov	r2, r3, d0
 8000e82:	4620      	mov	r0, r4
 8000e84:	4629      	mov	r1, r5
 8000e86:	f7ff fb6f 	bl	8000568 <__aeabi_dmul>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	460c      	mov	r4, r1
 8000e8e:	4618      	mov	r0, r3
 8000e90:	4621      	mov	r1, r4
 8000e92:	f7ff fe03 	bl	8000a9c <__aeabi_d2iz>
 8000e96:	4603      	mov	r3, r0
 8000e98:	73fb      	strb	r3, [r7, #15]
		y = radius * sin (angle);
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff faf8 	bl	8000494 <__aeabi_i2d>
 8000ea4:	4604      	mov	r4, r0
 8000ea6:	460d      	mov	r5, r1
 8000ea8:	6978      	ldr	r0, [r7, #20]
 8000eaa:	f7ff fb05 	bl	80004b8 <__aeabi_f2d>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	ec43 2b10 	vmov	d0, r2, r3
 8000eb6:	f004 fa47 	bl	8005348 <sin>
 8000eba:	ec53 2b10 	vmov	r2, r3, d0
 8000ebe:	4620      	mov	r0, r4
 8000ec0:	4629      	mov	r1, r5
 8000ec2:	f7ff fb51 	bl	8000568 <__aeabi_dmul>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	460c      	mov	r4, r1
 8000eca:	4618      	mov	r0, r3
 8000ecc:	4621      	mov	r1, r4
 8000ece:	f7ff fde5 	bl	8000a9c <__aeabi_d2iz>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	73bb      	strb	r3, [r7, #14]

		angle += angle_stepsize;
 8000ed6:	ed97 7a05 	vldr	s14, [r7, #20]
 8000eda:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ede:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ee2:	edc7 7a05 	vstr	s15, [r7, #20]
		step(x, y, 1);
 8000ee6:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8000eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eee:	2201      	movs	r2, #1
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff ff7b 	bl	8000dec <step>
	while (angle < 2 * PI)
 8000ef6:	6978      	ldr	r0, [r7, #20]
 8000ef8:	f7ff fade 	bl	80004b8 <__aeabi_f2d>
 8000efc:	a306      	add	r3, pc, #24	; (adr r3, 8000f18 <circle+0xd0>)
 8000efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f02:	f7ff fda3 	bl	8000a4c <__aeabi_dcmplt>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d1a8      	bne.n	8000e5e <circle+0x16>
	}

}
 8000f0c:	bf00      	nop
 8000f0e:	3718      	adds	r7, #24
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bdb0      	pop	{r4, r5, r7, pc}
 8000f14:	f3af 8000 	nop.w
 8000f18:	fc8b007a 	.word	0xfc8b007a
 8000f1c:	401921fa 	.word	0x401921fa
 8000f20:	3dcccccd 	.word	0x3dcccccd
 8000f24:	00000000 	.word	0x00000000

08000f28 <mouth>:

void mouth(int8_t radius) {
 8000f28:	b5b0      	push	{r4, r5, r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71fb      	strb	r3, [r7, #7]
	int8_t x, y;
	float angle = 0.0;
 8000f32:	f04f 0300 	mov.w	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]
	float angle_stepsize = 0.1;
 8000f38:	4b3b      	ldr	r3, [pc, #236]	; (8001028 <mouth+0x100>)
 8000f3a:	613b      	str	r3, [r7, #16]

	while (angle < 2 * PI)
 8000f3c:	e05f      	b.n	8000ffe <mouth+0xd6>
	{
		x = radius * cos (angle);
 8000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff faa6 	bl	8000494 <__aeabi_i2d>
 8000f48:	4604      	mov	r4, r0
 8000f4a:	460d      	mov	r5, r1
 8000f4c:	6978      	ldr	r0, [r7, #20]
 8000f4e:	f7ff fab3 	bl	80004b8 <__aeabi_f2d>
 8000f52:	4602      	mov	r2, r0
 8000f54:	460b      	mov	r3, r1
 8000f56:	ec43 2b10 	vmov	d0, r2, r3
 8000f5a:	f004 f9b1 	bl	80052c0 <cos>
 8000f5e:	ec53 2b10 	vmov	r2, r3, d0
 8000f62:	4620      	mov	r0, r4
 8000f64:	4629      	mov	r1, r5
 8000f66:	f7ff faff 	bl	8000568 <__aeabi_dmul>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	460c      	mov	r4, r1
 8000f6e:	4618      	mov	r0, r3
 8000f70:	4621      	mov	r1, r4
 8000f72:	f7ff fd93 	bl	8000a9c <__aeabi_d2iz>
 8000f76:	4603      	mov	r3, r0
 8000f78:	73fb      	strb	r3, [r7, #15]
		y = radius * sin (angle);
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff fa88 	bl	8000494 <__aeabi_i2d>
 8000f84:	4604      	mov	r4, r0
 8000f86:	460d      	mov	r5, r1
 8000f88:	6978      	ldr	r0, [r7, #20]
 8000f8a:	f7ff fa95 	bl	80004b8 <__aeabi_f2d>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	460b      	mov	r3, r1
 8000f92:	ec43 2b10 	vmov	d0, r2, r3
 8000f96:	f004 f9d7 	bl	8005348 <sin>
 8000f9a:	ec53 2b10 	vmov	r2, r3, d0
 8000f9e:	4620      	mov	r0, r4
 8000fa0:	4629      	mov	r1, r5
 8000fa2:	f7ff fae1 	bl	8000568 <__aeabi_dmul>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	460c      	mov	r4, r1
 8000faa:	4618      	mov	r0, r3
 8000fac:	4621      	mov	r1, r4
 8000fae:	f7ff fd75 	bl	8000a9c <__aeabi_d2iz>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	73bb      	strb	r3, [r7, #14]

		angle += angle_stepsize;
 8000fb6:	ed97 7a05 	vldr	s14, [r7, #20]
 8000fba:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fc2:	edc7 7a05 	vstr	s15, [r7, #20]
		if (angle > 2.5 && angle < 4)
 8000fc6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fca:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8000fce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fd6:	dc00      	bgt.n	8000fda <mouth+0xb2>
 8000fd8:	e011      	b.n	8000ffe <mouth+0xd6>
 8000fda:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fde:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000fe2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fea:	d400      	bmi.n	8000fee <mouth+0xc6>
 8000fec:	e007      	b.n	8000ffe <mouth+0xd6>
			step(x, y, 1);
 8000fee:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8000ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fef7 	bl	8000dec <step>
	while (angle < 2 * PI)
 8000ffe:	6978      	ldr	r0, [r7, #20]
 8001000:	f7ff fa5a 	bl	80004b8 <__aeabi_f2d>
 8001004:	a306      	add	r3, pc, #24	; (adr r3, 8001020 <mouth+0xf8>)
 8001006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100a:	f7ff fd1f 	bl	8000a4c <__aeabi_dcmplt>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d194      	bne.n	8000f3e <mouth+0x16>
	}
}
 8001014:	bf00      	nop
 8001016:	3718      	adds	r7, #24
 8001018:	46bd      	mov	sp, r7
 800101a:	bdb0      	pop	{r4, r5, r7, pc}
 800101c:	f3af 8000 	nop.w
 8001020:	fc8b007a 	.word	0xfc8b007a
 8001024:	401921fa 	.word	0x401921fa
 8001028:	3dcccccd 	.word	0x3dcccccd

0800102c <keyboard>:

void keyboard(uint8_t key1, uint8_t key2)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	460a      	mov	r2, r1
 8001036:	71fb      	strb	r3, [r7, #7]
 8001038:	4613      	mov	r3, r2
 800103a:	71bb      	strb	r3, [r7, #6]
	uint8_t buff[9];
	buff[0] = 0x01; // report id pro klavesnici
 800103c:	2301      	movs	r3, #1
 800103e:	733b      	strb	r3, [r7, #12]
	buff[1] = key2;
 8001040:	79bb      	ldrb	r3, [r7, #6]
 8001042:	737b      	strb	r3, [r7, #13]
	buff[2] = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	73bb      	strb	r3, [r7, #14]
	buff[3] = key1;
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	73fb      	strb	r3, [r7, #15]
	buff[4] = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	743b      	strb	r3, [r7, #16]
	buff[5] = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	747b      	strb	r3, [r7, #17]
	buff[6] = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	74bb      	strb	r3, [r7, #18]
	buff[7] = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	74fb      	strb	r3, [r7, #19]
	buff[8] = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	753b      	strb	r3, [r7, #20]

	USBD_HID_SendReport(&hUsbDeviceFS, buff, sizeof(buff));
 8001060:	f107 030c 	add.w	r3, r7, #12
 8001064:	2209      	movs	r2, #9
 8001066:	4619      	mov	r1, r3
 8001068:	4812      	ldr	r0, [pc, #72]	; (80010b4 <keyboard+0x88>)
 800106a:	f003 fc0f 	bl	800488c <USBD_HID_SendReport>
	HAL_Delay(3*USBD_HID_GetPollingInterval(&hUsbDeviceFS));
 800106e:	4811      	ldr	r0, [pc, #68]	; (80010b4 <keyboard+0x88>)
 8001070:	f003 fc2e 	bl	80048d0 <USBD_HID_GetPollingInterval>
 8001074:	4602      	mov	r2, r0
 8001076:	4613      	mov	r3, r2
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	4413      	add	r3, r2
 800107c:	4618      	mov	r0, r3
 800107e:	f000 fbc9 	bl	8001814 <HAL_Delay>

	buff[1] = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	737b      	strb	r3, [r7, #13]
	buff[3] = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	73fb      	strb	r3, [r7, #15]

	USBD_HID_SendReport(&hUsbDeviceFS, buff, sizeof(buff));
 800108a:	f107 030c 	add.w	r3, r7, #12
 800108e:	2209      	movs	r2, #9
 8001090:	4619      	mov	r1, r3
 8001092:	4808      	ldr	r0, [pc, #32]	; (80010b4 <keyboard+0x88>)
 8001094:	f003 fbfa 	bl	800488c <USBD_HID_SendReport>
	HAL_Delay(3*USBD_HID_GetPollingInterval(&hUsbDeviceFS));
 8001098:	4806      	ldr	r0, [pc, #24]	; (80010b4 <keyboard+0x88>)
 800109a:	f003 fc19 	bl	80048d0 <USBD_HID_GetPollingInterval>
 800109e:	4602      	mov	r2, r0
 80010a0:	4613      	mov	r3, r2
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	4413      	add	r3, r2
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 fbb4 	bl	8001814 <HAL_Delay>
}
 80010ac:	bf00      	nop
 80010ae:	3718      	adds	r7, #24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000250 	.word	0x20000250

080010b8 <smile>:

/*
 * Otevre malovani (mspaint.exe) a nakresli smajlika
 */
inline static void smile(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
    keyboard(0x15, 0x08); // Win + R
 80010bc:	2108      	movs	r1, #8
 80010be:	2015      	movs	r0, #21
 80010c0:	f7ff ffb4 	bl	800102c <keyboard>
    keyboard(0x10, 0); // m
 80010c4:	2100      	movs	r1, #0
 80010c6:	2010      	movs	r0, #16
 80010c8:	f7ff ffb0 	bl	800102c <keyboard>
    keyboard(0x16, 0); // s
 80010cc:	2100      	movs	r1, #0
 80010ce:	2016      	movs	r0, #22
 80010d0:	f7ff ffac 	bl	800102c <keyboard>
    keyboard(0x13, 0); // p
 80010d4:	2100      	movs	r1, #0
 80010d6:	2013      	movs	r0, #19
 80010d8:	f7ff ffa8 	bl	800102c <keyboard>
    keyboard(0x04, 0); // a
 80010dc:	2100      	movs	r1, #0
 80010de:	2004      	movs	r0, #4
 80010e0:	f7ff ffa4 	bl	800102c <keyboard>
    keyboard(0x0C, 0); // i
 80010e4:	2100      	movs	r1, #0
 80010e6:	200c      	movs	r0, #12
 80010e8:	f7ff ffa0 	bl	800102c <keyboard>
    keyboard(0x11, 0); // n
 80010ec:	2100      	movs	r1, #0
 80010ee:	2011      	movs	r0, #17
 80010f0:	f7ff ff9c 	bl	800102c <keyboard>
    keyboard(0x17, 0); // t
 80010f4:	2100      	movs	r1, #0
 80010f6:	2017      	movs	r0, #23
 80010f8:	f7ff ff98 	bl	800102c <keyboard>
    keyboard(0x28, 0); // Enter
 80010fc:	2100      	movs	r1, #0
 80010fe:	2028      	movs	r0, #40	; 0x28
 8001100:	f7ff ff94 	bl	800102c <keyboard>

    HAL_Delay(300);
 8001104:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001108:	f000 fb84 	bl	8001814 <HAL_Delay>

    step(0, 0, 0);
 800110c:	2200      	movs	r2, #0
 800110e:	2100      	movs	r1, #0
 8001110:	2000      	movs	r0, #0
 8001112:	f7ff fe6b 	bl	8000dec <step>
	circle(15); // hlava
 8001116:	200f      	movs	r0, #15
 8001118:	f7ff fe96 	bl	8000e48 <circle>
	step(-25,0,0);
 800111c:	2200      	movs	r2, #0
 800111e:	2100      	movs	r1, #0
 8001120:	f06f 0018 	mvn.w	r0, #24
 8001124:	f7ff fe62 	bl	8000dec <step>
	step(0,50,0);
 8001128:	2200      	movs	r2, #0
 800112a:	2132      	movs	r1, #50	; 0x32
 800112c:	2000      	movs	r0, #0
 800112e:	f7ff fe5d 	bl	8000dec <step>
	circle(4); // oko 1
 8001132:	2004      	movs	r0, #4
 8001134:	f7ff fe88 	bl	8000e48 <circle>
	step(0, 0, 0);
 8001138:	2200      	movs	r2, #0
 800113a:	2100      	movs	r1, #0
 800113c:	2000      	movs	r0, #0
 800113e:	f7ff fe55 	bl	8000dec <step>
	step(75,0,0);
 8001142:	2200      	movs	r2, #0
 8001144:	2100      	movs	r1, #0
 8001146:	204b      	movs	r0, #75	; 0x4b
 8001148:	f7ff fe50 	bl	8000dec <step>
	circle(4); // oko 2
 800114c:	2004      	movs	r0, #4
 800114e:	f7ff fe7b 	bl	8000e48 <circle>
	step(0, 0, 0);
 8001152:	2200      	movs	r2, #0
 8001154:	2100      	movs	r1, #0
 8001156:	2000      	movs	r0, #0
 8001158:	f7ff fe48 	bl	8000dec <step>
	step(-40,0,0);
 800115c:	2200      	movs	r2, #0
 800115e:	2100      	movs	r1, #0
 8001160:	f06f 0027 	mvn.w	r0, #39	; 0x27
 8001164:	f7ff fe42 	bl	8000dec <step>
	step(0, 0, 1);
 8001168:	2201      	movs	r2, #1
 800116a:	2100      	movs	r1, #0
 800116c:	2000      	movs	r0, #0
 800116e:	f7ff fe3d 	bl	8000dec <step>
	step(0,80,0);
 8001172:	2200      	movs	r2, #0
 8001174:	2150      	movs	r1, #80	; 0x50
 8001176:	2000      	movs	r0, #0
 8001178:	f7ff fe38 	bl	8000dec <step>
	step(0, 0, 0);
 800117c:	2200      	movs	r2, #0
 800117e:	2100      	movs	r1, #0
 8001180:	2000      	movs	r0, #0
 8001182:	f7ff fe33 	bl	8000dec <step>
	step(40,0,0);
 8001186:	2200      	movs	r2, #0
 8001188:	2100      	movs	r1, #0
 800118a:	2028      	movs	r0, #40	; 0x28
 800118c:	f7ff fe2e 	bl	8000dec <step>
	step(0, 0, 0);
 8001190:	2200      	movs	r2, #0
 8001192:	2100      	movs	r1, #0
 8001194:	2000      	movs	r0, #0
 8001196:	f7ff fe29 	bl	8000dec <step>
	mouth(10); // pusa
 800119a:	200a      	movs	r0, #10
 800119c:	f7ff fec4 	bl	8000f28 <mouth>
	step(0, 0, 0);
 80011a0:	2200      	movs	r2, #0
 80011a2:	2100      	movs	r1, #0
 80011a4:	2000      	movs	r0, #0
 80011a6:	f7ff fe21 	bl	8000dec <step>
	step(20, 0, 1);
 80011aa:	2201      	movs	r2, #1
 80011ac:	2100      	movs	r1, #0
 80011ae:	2014      	movs	r0, #20
 80011b0:	f7ff fe1c 	bl	8000dec <step>
	step(0, 0, 0);
 80011b4:	2200      	movs	r2, #0
 80011b6:	2100      	movs	r1, #0
 80011b8:	2000      	movs	r0, #0
 80011ba:	f7ff fe17 	bl	8000dec <step>

	HAL_Delay(300);
 80011be:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80011c2:	f000 fb27 	bl	8001814 <HAL_Delay>
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011d0:	f000 faae 	bl	8001730 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011d4:	f000 f814 	bl	8001200 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011d8:	f000 f8a6 	bl	8001328 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80011dc:	f000 f87a 	bl	80012d4 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 80011e0:	f003 fccc 	bl	8004b7c <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 80011e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011e8:	4804      	ldr	r0, [pc, #16]	; (80011fc <main+0x30>)
 80011ea:	f000 fdc5 	bl	8001d78 <HAL_GPIO_ReadPin>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d0f7      	beq.n	80011e4 <main+0x18>
		{
			//circle(10);
			//step(10, 10, 1);
			smile();
 80011f4:	f7ff ff60 	bl	80010b8 <smile>
		if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 80011f8:	e7f4      	b.n	80011e4 <main+0x18>
 80011fa:	bf00      	nop
 80011fc:	40020800 	.word	0x40020800

08001200 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b094      	sub	sp, #80	; 0x50
 8001204:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001206:	f107 0320 	add.w	r3, r7, #32
 800120a:	2230      	movs	r2, #48	; 0x30
 800120c:	2100      	movs	r1, #0
 800120e:	4618      	mov	r0, r3
 8001210:	f003 ff94 	bl	800513c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001214:	f107 030c 	add.w	r3, r7, #12
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001224:	2300      	movs	r3, #0
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	4b28      	ldr	r3, [pc, #160]	; (80012cc <SystemClock_Config+0xcc>)
 800122a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122c:	4a27      	ldr	r2, [pc, #156]	; (80012cc <SystemClock_Config+0xcc>)
 800122e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001232:	6413      	str	r3, [r2, #64]	; 0x40
 8001234:	4b25      	ldr	r3, [pc, #148]	; (80012cc <SystemClock_Config+0xcc>)
 8001236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001240:	2300      	movs	r3, #0
 8001242:	607b      	str	r3, [r7, #4]
 8001244:	4b22      	ldr	r3, [pc, #136]	; (80012d0 <SystemClock_Config+0xd0>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a21      	ldr	r2, [pc, #132]	; (80012d0 <SystemClock_Config+0xd0>)
 800124a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800124e:	6013      	str	r3, [r2, #0]
 8001250:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <SystemClock_Config+0xd0>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800125c:	2301      	movs	r3, #1
 800125e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001260:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001266:	2302      	movs	r3, #2
 8001268:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800126a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800126e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001270:	2304      	movs	r3, #4
 8001272:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001274:	23a8      	movs	r3, #168	; 0xa8
 8001276:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001278:	2302      	movs	r3, #2
 800127a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800127c:	2307      	movs	r3, #7
 800127e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001280:	f107 0320 	add.w	r3, r7, #32
 8001284:	4618      	mov	r0, r3
 8001286:	f001 f8b1 	bl	80023ec <HAL_RCC_OscConfig>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001290:	f000 f93c 	bl	800150c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001294:	230f      	movs	r3, #15
 8001296:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001298:	2302      	movs	r3, #2
 800129a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012ac:	f107 030c 	add.w	r3, r7, #12
 80012b0:	2105      	movs	r1, #5
 80012b2:	4618      	mov	r0, r3
 80012b4:	f001 fb0a 	bl	80028cc <HAL_RCC_ClockConfig>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80012be:	f000 f925 	bl	800150c <Error_Handler>
  }
}
 80012c2:	bf00      	nop
 80012c4:	3750      	adds	r7, #80	; 0x50
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40007000 	.word	0x40007000

080012d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012d8:	4b11      	ldr	r3, [pc, #68]	; (8001320 <MX_USART3_UART_Init+0x4c>)
 80012da:	4a12      	ldr	r2, [pc, #72]	; (8001324 <MX_USART3_UART_Init+0x50>)
 80012dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80012de:	4b10      	ldr	r3, [pc, #64]	; (8001320 <MX_USART3_UART_Init+0x4c>)
 80012e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012e6:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <MX_USART3_UART_Init+0x4c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012ec:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <MX_USART3_UART_Init+0x4c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012f2:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <MX_USART3_UART_Init+0x4c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012f8:	4b09      	ldr	r3, [pc, #36]	; (8001320 <MX_USART3_UART_Init+0x4c>)
 80012fa:	220c      	movs	r2, #12
 80012fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012fe:	4b08      	ldr	r3, [pc, #32]	; (8001320 <MX_USART3_UART_Init+0x4c>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <MX_USART3_UART_Init+0x4c>)
 8001306:	2200      	movs	r2, #0
 8001308:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800130a:	4805      	ldr	r0, [pc, #20]	; (8001320 <MX_USART3_UART_Init+0x4c>)
 800130c:	f001 fcd0 	bl	8002cb0 <HAL_UART_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001316:	f000 f8f9 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	2000020c 	.word	0x2000020c
 8001324:	40004800 	.word	0x40004800

08001328 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08c      	sub	sp, #48	; 0x30
 800132c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132e:	f107 031c 	add.w	r3, r7, #28
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	60da      	str	r2, [r3, #12]
 800133c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	61bb      	str	r3, [r7, #24]
 8001342:	4b6c      	ldr	r3, [pc, #432]	; (80014f4 <MX_GPIO_Init+0x1cc>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a6b      	ldr	r2, [pc, #428]	; (80014f4 <MX_GPIO_Init+0x1cc>)
 8001348:	f043 0304 	orr.w	r3, r3, #4
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b69      	ldr	r3, [pc, #420]	; (80014f4 <MX_GPIO_Init+0x1cc>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f003 0304 	and.w	r3, r3, #4
 8001356:	61bb      	str	r3, [r7, #24]
 8001358:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
 800135e:	4b65      	ldr	r3, [pc, #404]	; (80014f4 <MX_GPIO_Init+0x1cc>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	4a64      	ldr	r2, [pc, #400]	; (80014f4 <MX_GPIO_Init+0x1cc>)
 8001364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001368:	6313      	str	r3, [r2, #48]	; 0x30
 800136a:	4b62      	ldr	r3, [pc, #392]	; (80014f4 <MX_GPIO_Init+0x1cc>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001372:	617b      	str	r3, [r7, #20]
 8001374:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
 800137a:	4b5e      	ldr	r3, [pc, #376]	; (80014f4 <MX_GPIO_Init+0x1cc>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	4a5d      	ldr	r2, [pc, #372]	; (80014f4 <MX_GPIO_Init+0x1cc>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	6313      	str	r3, [r2, #48]	; 0x30
 8001386:	4b5b      	ldr	r3, [pc, #364]	; (80014f4 <MX_GPIO_Init+0x1cc>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	613b      	str	r3, [r7, #16]
 8001390:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	4b57      	ldr	r3, [pc, #348]	; (80014f4 <MX_GPIO_Init+0x1cc>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4a56      	ldr	r2, [pc, #344]	; (80014f4 <MX_GPIO_Init+0x1cc>)
 800139c:	f043 0302 	orr.w	r3, r3, #2
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
 80013a2:	4b54      	ldr	r3, [pc, #336]	; (80014f4 <MX_GPIO_Init+0x1cc>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	60bb      	str	r3, [r7, #8]
 80013b2:	4b50      	ldr	r3, [pc, #320]	; (80014f4 <MX_GPIO_Init+0x1cc>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	4a4f      	ldr	r2, [pc, #316]	; (80014f4 <MX_GPIO_Init+0x1cc>)
 80013b8:	f043 0308 	orr.w	r3, r3, #8
 80013bc:	6313      	str	r3, [r2, #48]	; 0x30
 80013be:	4b4d      	ldr	r3, [pc, #308]	; (80014f4 <MX_GPIO_Init+0x1cc>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	f003 0308 	and.w	r3, r3, #8
 80013c6:	60bb      	str	r3, [r7, #8]
 80013c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	607b      	str	r3, [r7, #4]
 80013ce:	4b49      	ldr	r3, [pc, #292]	; (80014f4 <MX_GPIO_Init+0x1cc>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	4a48      	ldr	r2, [pc, #288]	; (80014f4 <MX_GPIO_Init+0x1cc>)
 80013d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013d8:	6313      	str	r3, [r2, #48]	; 0x30
 80013da:	4b46      	ldr	r3, [pc, #280]	; (80014f4 <MX_GPIO_Init+0x1cc>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80013e6:	2200      	movs	r2, #0
 80013e8:	f244 0181 	movw	r1, #16513	; 0x4081
 80013ec:	4842      	ldr	r0, [pc, #264]	; (80014f8 <MX_GPIO_Init+0x1d0>)
 80013ee:	f000 fcdb 	bl	8001da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80013f2:	2200      	movs	r2, #0
 80013f4:	2140      	movs	r1, #64	; 0x40
 80013f6:	4841      	ldr	r0, [pc, #260]	; (80014fc <MX_GPIO_Init+0x1d4>)
 80013f8:	f000 fcd6 	bl	8001da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001400:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001402:	4b3f      	ldr	r3, [pc, #252]	; (8001500 <MX_GPIO_Init+0x1d8>)
 8001404:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800140a:	f107 031c 	add.w	r3, r7, #28
 800140e:	4619      	mov	r1, r3
 8001410:	483c      	ldr	r0, [pc, #240]	; (8001504 <MX_GPIO_Init+0x1dc>)
 8001412:	f000 fb07 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001416:	2332      	movs	r3, #50	; 0x32
 8001418:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141a:	2302      	movs	r3, #2
 800141c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001422:	2303      	movs	r3, #3
 8001424:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001426:	230b      	movs	r3, #11
 8001428:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800142a:	f107 031c 	add.w	r3, r7, #28
 800142e:	4619      	mov	r1, r3
 8001430:	4834      	ldr	r0, [pc, #208]	; (8001504 <MX_GPIO_Init+0x1dc>)
 8001432:	f000 faf7 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001436:	2386      	movs	r3, #134	; 0x86
 8001438:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143a:	2302      	movs	r3, #2
 800143c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001442:	2303      	movs	r3, #3
 8001444:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001446:	230b      	movs	r3, #11
 8001448:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144a:	f107 031c 	add.w	r3, r7, #28
 800144e:	4619      	mov	r1, r3
 8001450:	482d      	ldr	r0, [pc, #180]	; (8001508 <MX_GPIO_Init+0x1e0>)
 8001452:	f000 fae7 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001456:	f244 0381 	movw	r3, #16513	; 0x4081
 800145a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145c:	2301      	movs	r3, #1
 800145e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001464:	2300      	movs	r3, #0
 8001466:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001468:	f107 031c 	add.w	r3, r7, #28
 800146c:	4619      	mov	r1, r3
 800146e:	4822      	ldr	r0, [pc, #136]	; (80014f8 <MX_GPIO_Init+0x1d0>)
 8001470:	f000 fad8 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001474:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001478:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147a:	2302      	movs	r3, #2
 800147c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001482:	2303      	movs	r3, #3
 8001484:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001486:	230b      	movs	r3, #11
 8001488:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800148a:	f107 031c 	add.w	r3, r7, #28
 800148e:	4619      	mov	r1, r3
 8001490:	4819      	ldr	r0, [pc, #100]	; (80014f8 <MX_GPIO_Init+0x1d0>)
 8001492:	f000 fac7 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001496:	2340      	movs	r3, #64	; 0x40
 8001498:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149a:	2301      	movs	r3, #1
 800149c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a2:	2300      	movs	r3, #0
 80014a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80014a6:	f107 031c 	add.w	r3, r7, #28
 80014aa:	4619      	mov	r1, r3
 80014ac:	4813      	ldr	r0, [pc, #76]	; (80014fc <MX_GPIO_Init+0x1d4>)
 80014ae:	f000 fab9 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80014b2:	2380      	movs	r3, #128	; 0x80
 80014b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b6:	2300      	movs	r3, #0
 80014b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80014be:	f107 031c 	add.w	r3, r7, #28
 80014c2:	4619      	mov	r1, r3
 80014c4:	480d      	ldr	r0, [pc, #52]	; (80014fc <MX_GPIO_Init+0x1d4>)
 80014c6:	f000 faad 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80014ca:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80014ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d0:	2302      	movs	r3, #2
 80014d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d8:	2303      	movs	r3, #3
 80014da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014dc:	230b      	movs	r3, #11
 80014de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014e0:	f107 031c 	add.w	r3, r7, #28
 80014e4:	4619      	mov	r1, r3
 80014e6:	4805      	ldr	r0, [pc, #20]	; (80014fc <MX_GPIO_Init+0x1d4>)
 80014e8:	f000 fa9c 	bl	8001a24 <HAL_GPIO_Init>

}
 80014ec:	bf00      	nop
 80014ee:	3730      	adds	r7, #48	; 0x30
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40020400 	.word	0x40020400
 80014fc:	40021800 	.word	0x40021800
 8001500:	10110000 	.word	0x10110000
 8001504:	40020800 	.word	0x40020800
 8001508:	40020000 	.word	0x40020000

0800150c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
	...

0800151c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	4b10      	ldr	r3, [pc, #64]	; (8001568 <HAL_MspInit+0x4c>)
 8001528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152a:	4a0f      	ldr	r2, [pc, #60]	; (8001568 <HAL_MspInit+0x4c>)
 800152c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001530:	6453      	str	r3, [r2, #68]	; 0x44
 8001532:	4b0d      	ldr	r3, [pc, #52]	; (8001568 <HAL_MspInit+0x4c>)
 8001534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001536:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	603b      	str	r3, [r7, #0]
 8001542:	4b09      	ldr	r3, [pc, #36]	; (8001568 <HAL_MspInit+0x4c>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	4a08      	ldr	r2, [pc, #32]	; (8001568 <HAL_MspInit+0x4c>)
 8001548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800154c:	6413      	str	r3, [r2, #64]	; 0x40
 800154e:	4b06      	ldr	r3, [pc, #24]	; (8001568 <HAL_MspInit+0x4c>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001556:	603b      	str	r3, [r7, #0]
 8001558:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	40023800 	.word	0x40023800

0800156c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08a      	sub	sp, #40	; 0x28
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a19      	ldr	r2, [pc, #100]	; (80015f0 <HAL_UART_MspInit+0x84>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d12c      	bne.n	80015e8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	613b      	str	r3, [r7, #16]
 8001592:	4b18      	ldr	r3, [pc, #96]	; (80015f4 <HAL_UART_MspInit+0x88>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	4a17      	ldr	r2, [pc, #92]	; (80015f4 <HAL_UART_MspInit+0x88>)
 8001598:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800159c:	6413      	str	r3, [r2, #64]	; 0x40
 800159e:	4b15      	ldr	r3, [pc, #84]	; (80015f4 <HAL_UART_MspInit+0x88>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <HAL_UART_MspInit+0x88>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4a10      	ldr	r2, [pc, #64]	; (80015f4 <HAL_UART_MspInit+0x88>)
 80015b4:	f043 0308 	orr.w	r3, r3, #8
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4b0e      	ldr	r3, [pc, #56]	; (80015f4 <HAL_UART_MspInit+0x88>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f003 0308 	and.w	r3, r3, #8
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80015c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015cc:	2302      	movs	r3, #2
 80015ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d4:	2303      	movs	r3, #3
 80015d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015d8:	2307      	movs	r3, #7
 80015da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	4619      	mov	r1, r3
 80015e2:	4805      	ldr	r0, [pc, #20]	; (80015f8 <HAL_UART_MspInit+0x8c>)
 80015e4:	f000 fa1e 	bl	8001a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015e8:	bf00      	nop
 80015ea:	3728      	adds	r7, #40	; 0x28
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40004800 	.word	0x40004800
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40020c00 	.word	0x40020c00

080015fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800160e:	e7fe      	b.n	800160e <HardFault_Handler+0x4>

08001610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001614:	e7fe      	b.n	8001614 <MemManage_Handler+0x4>

08001616 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800161a:	e7fe      	b.n	800161a <BusFault_Handler+0x4>

0800161c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001620:	e7fe      	b.n	8001620 <UsageFault_Handler+0x4>

08001622 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001650:	f000 f8c0 	bl	80017d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}

08001658 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001660:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <_sbrk+0x50>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d102      	bne.n	800166e <_sbrk+0x16>
		heap_end = &end;
 8001668:	4b0f      	ldr	r3, [pc, #60]	; (80016a8 <_sbrk+0x50>)
 800166a:	4a10      	ldr	r2, [pc, #64]	; (80016ac <_sbrk+0x54>)
 800166c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800166e:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <_sbrk+0x50>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001674:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <_sbrk+0x50>)
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4413      	add	r3, r2
 800167c:	466a      	mov	r2, sp
 800167e:	4293      	cmp	r3, r2
 8001680:	d907      	bls.n	8001692 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001682:	f003 fd21 	bl	80050c8 <__errno>
 8001686:	4602      	mov	r2, r0
 8001688:	230c      	movs	r3, #12
 800168a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800168c:	f04f 33ff 	mov.w	r3, #4294967295
 8001690:	e006      	b.n	80016a0 <_sbrk+0x48>
	}

	heap_end += incr;
 8001692:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <_sbrk+0x50>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4413      	add	r3, r2
 800169a:	4a03      	ldr	r2, [pc, #12]	; (80016a8 <_sbrk+0x50>)
 800169c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800169e:	68fb      	ldr	r3, [r7, #12]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20000200 	.word	0x20000200
 80016ac:	20000b30 	.word	0x20000b30

080016b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016b4:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <SystemInit+0x28>)
 80016b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ba:	4a07      	ldr	r2, [pc, #28]	; (80016d8 <SystemInit+0x28>)
 80016bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016c4:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <SystemInit+0x28>)
 80016c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016ca:	609a      	str	r2, [r3, #8]
#endif
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80016dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001714 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80016e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80016e2:	e003      	b.n	80016ec <LoopCopyDataInit>

080016e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80016e4:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80016e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80016e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80016ea:	3104      	adds	r1, #4

080016ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80016ec:	480b      	ldr	r0, [pc, #44]	; (800171c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80016ee:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80016f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80016f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80016f4:	d3f6      	bcc.n	80016e4 <CopyDataInit>
  ldr  r2, =_sbss
 80016f6:	4a0b      	ldr	r2, [pc, #44]	; (8001724 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80016f8:	e002      	b.n	8001700 <LoopFillZerobss>

080016fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80016fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80016fc:	f842 3b04 	str.w	r3, [r2], #4

08001700 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001700:	4b09      	ldr	r3, [pc, #36]	; (8001728 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001702:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001704:	d3f9      	bcc.n	80016fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001706:	f7ff ffd3 	bl	80016b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800170a:	f003 fce3 	bl	80050d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800170e:	f7ff fd5d 	bl	80011cc <main>
  bx  lr    
 8001712:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001714:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001718:	080065d0 	.word	0x080065d0
  ldr  r0, =_sdata
 800171c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001720:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8001724:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8001728:	20000b2c 	.word	0x20000b2c

0800172c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800172c:	e7fe      	b.n	800172c <ADC_IRQHandler>
	...

08001730 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001734:	4b0e      	ldr	r3, [pc, #56]	; (8001770 <HAL_Init+0x40>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a0d      	ldr	r2, [pc, #52]	; (8001770 <HAL_Init+0x40>)
 800173a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800173e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001740:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <HAL_Init+0x40>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a0a      	ldr	r2, [pc, #40]	; (8001770 <HAL_Init+0x40>)
 8001746:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800174a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800174c:	4b08      	ldr	r3, [pc, #32]	; (8001770 <HAL_Init+0x40>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a07      	ldr	r2, [pc, #28]	; (8001770 <HAL_Init+0x40>)
 8001752:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001756:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001758:	2003      	movs	r0, #3
 800175a:	f000 f92f 	bl	80019bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800175e:	2000      	movs	r0, #0
 8001760:	f000 f808 	bl	8001774 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001764:	f7ff feda 	bl	800151c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40023c00 	.word	0x40023c00

08001774 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800177c:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <HAL_InitTick+0x54>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	4b12      	ldr	r3, [pc, #72]	; (80017cc <HAL_InitTick+0x58>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	4619      	mov	r1, r3
 8001786:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800178a:	fbb3 f3f1 	udiv	r3, r3, r1
 800178e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001792:	4618      	mov	r0, r3
 8001794:	f000 f939 	bl	8001a0a <HAL_SYSTICK_Config>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e00e      	b.n	80017c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2b0f      	cmp	r3, #15
 80017a6:	d80a      	bhi.n	80017be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017a8:	2200      	movs	r2, #0
 80017aa:	6879      	ldr	r1, [r7, #4]
 80017ac:	f04f 30ff 	mov.w	r0, #4294967295
 80017b0:	f000 f90f 	bl	80019d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017b4:	4a06      	ldr	r2, [pc, #24]	; (80017d0 <HAL_InitTick+0x5c>)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ba:	2300      	movs	r3, #0
 80017bc:	e000      	b.n	80017c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20000000 	.word	0x20000000
 80017cc:	20000008 	.word	0x20000008
 80017d0:	20000004 	.word	0x20000004

080017d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017d8:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <HAL_IncTick+0x20>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	461a      	mov	r2, r3
 80017de:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <HAL_IncTick+0x24>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4413      	add	r3, r2
 80017e4:	4a04      	ldr	r2, [pc, #16]	; (80017f8 <HAL_IncTick+0x24>)
 80017e6:	6013      	str	r3, [r2, #0]
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	20000008 	.word	0x20000008
 80017f8:	2000024c 	.word	0x2000024c

080017fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001800:	4b03      	ldr	r3, [pc, #12]	; (8001810 <HAL_GetTick+0x14>)
 8001802:	681b      	ldr	r3, [r3, #0]
}
 8001804:	4618      	mov	r0, r3
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	2000024c 	.word	0x2000024c

08001814 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800181c:	f7ff ffee 	bl	80017fc <HAL_GetTick>
 8001820:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800182c:	d005      	beq.n	800183a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800182e:	4b09      	ldr	r3, [pc, #36]	; (8001854 <HAL_Delay+0x40>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	461a      	mov	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4413      	add	r3, r2
 8001838:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800183a:	bf00      	nop
 800183c:	f7ff ffde 	bl	80017fc <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	429a      	cmp	r2, r3
 800184a:	d8f7      	bhi.n	800183c <HAL_Delay+0x28>
  {
  }
}
 800184c:	bf00      	nop
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20000008 	.word	0x20000008

08001858 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001868:	4b0c      	ldr	r3, [pc, #48]	; (800189c <__NVIC_SetPriorityGrouping+0x44>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800186e:	68ba      	ldr	r2, [r7, #8]
 8001870:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001874:	4013      	ands	r3, r2
 8001876:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001880:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001888:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800188a:	4a04      	ldr	r2, [pc, #16]	; (800189c <__NVIC_SetPriorityGrouping+0x44>)
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	60d3      	str	r3, [r2, #12]
}
 8001890:	bf00      	nop
 8001892:	3714      	adds	r7, #20
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a4:	4b04      	ldr	r3, [pc, #16]	; (80018b8 <__NVIC_GetPriorityGrouping+0x18>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	0a1b      	lsrs	r3, r3, #8
 80018aa:	f003 0307 	and.w	r3, r3, #7
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	6039      	str	r1, [r7, #0]
 80018c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	db0a      	blt.n	80018e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	490c      	ldr	r1, [pc, #48]	; (8001908 <__NVIC_SetPriority+0x4c>)
 80018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018da:	0112      	lsls	r2, r2, #4
 80018dc:	b2d2      	uxtb	r2, r2
 80018de:	440b      	add	r3, r1
 80018e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018e4:	e00a      	b.n	80018fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	4908      	ldr	r1, [pc, #32]	; (800190c <__NVIC_SetPriority+0x50>)
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	3b04      	subs	r3, #4
 80018f4:	0112      	lsls	r2, r2, #4
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	440b      	add	r3, r1
 80018fa:	761a      	strb	r2, [r3, #24]
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	e000e100 	.word	0xe000e100
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001910:	b480      	push	{r7}
 8001912:	b089      	sub	sp, #36	; 0x24
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	f1c3 0307 	rsb	r3, r3, #7
 800192a:	2b04      	cmp	r3, #4
 800192c:	bf28      	it	cs
 800192e:	2304      	movcs	r3, #4
 8001930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3304      	adds	r3, #4
 8001936:	2b06      	cmp	r3, #6
 8001938:	d902      	bls.n	8001940 <NVIC_EncodePriority+0x30>
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	3b03      	subs	r3, #3
 800193e:	e000      	b.n	8001942 <NVIC_EncodePriority+0x32>
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001944:	f04f 32ff 	mov.w	r2, #4294967295
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43da      	mvns	r2, r3
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	401a      	ands	r2, r3
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001958:	f04f 31ff 	mov.w	r1, #4294967295
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	fa01 f303 	lsl.w	r3, r1, r3
 8001962:	43d9      	mvns	r1, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001968:	4313      	orrs	r3, r2
         );
}
 800196a:	4618      	mov	r0, r3
 800196c:	3724      	adds	r7, #36	; 0x24
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
	...

08001978 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3b01      	subs	r3, #1
 8001984:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001988:	d301      	bcc.n	800198e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800198a:	2301      	movs	r3, #1
 800198c:	e00f      	b.n	80019ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800198e:	4a0a      	ldr	r2, [pc, #40]	; (80019b8 <SysTick_Config+0x40>)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3b01      	subs	r3, #1
 8001994:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001996:	210f      	movs	r1, #15
 8001998:	f04f 30ff 	mov.w	r0, #4294967295
 800199c:	f7ff ff8e 	bl	80018bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a0:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <SysTick_Config+0x40>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019a6:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <SysTick_Config+0x40>)
 80019a8:	2207      	movs	r2, #7
 80019aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	e000e010 	.word	0xe000e010

080019bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f7ff ff47 	bl	8001858 <__NVIC_SetPriorityGrouping>
}
 80019ca:	bf00      	nop
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b086      	sub	sp, #24
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	4603      	mov	r3, r0
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	607a      	str	r2, [r7, #4]
 80019de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019e4:	f7ff ff5c 	bl	80018a0 <__NVIC_GetPriorityGrouping>
 80019e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	68b9      	ldr	r1, [r7, #8]
 80019ee:	6978      	ldr	r0, [r7, #20]
 80019f0:	f7ff ff8e 	bl	8001910 <NVIC_EncodePriority>
 80019f4:	4602      	mov	r2, r0
 80019f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019fa:	4611      	mov	r1, r2
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff ff5d 	bl	80018bc <__NVIC_SetPriority>
}
 8001a02:	bf00      	nop
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff ffb0 	bl	8001978 <SysTick_Config>
 8001a18:	4603      	mov	r3, r0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
	...

08001a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b089      	sub	sp, #36	; 0x24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a32:	2300      	movs	r3, #0
 8001a34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a36:	2300      	movs	r3, #0
 8001a38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]
 8001a3e:	e177      	b.n	8001d30 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a40:	2201      	movs	r2, #1
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	4013      	ands	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	f040 8166 	bne.w	8001d2a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d00b      	beq.n	8001a7e <HAL_GPIO_Init+0x5a>
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d007      	beq.n	8001a7e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a72:	2b11      	cmp	r3, #17
 8001a74:	d003      	beq.n	8001a7e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b12      	cmp	r3, #18
 8001a7c:	d130      	bne.n	8001ae0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	2203      	movs	r2, #3
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	4013      	ands	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	68da      	ldr	r2, [r3, #12]
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	091b      	lsrs	r3, r3, #4
 8001aca:	f003 0201 	and.w	r2, r3, #1
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	2203      	movs	r2, #3
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4013      	ands	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d003      	beq.n	8001b20 <HAL_GPIO_Init+0xfc>
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2b12      	cmp	r3, #18
 8001b1e:	d123      	bne.n	8001b68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	08da      	lsrs	r2, r3, #3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3208      	adds	r2, #8
 8001b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	220f      	movs	r2, #15
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4013      	ands	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	691a      	ldr	r2, [r3, #16]
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	08da      	lsrs	r2, r3, #3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	3208      	adds	r2, #8
 8001b62:	69b9      	ldr	r1, [r7, #24]
 8001b64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	2203      	movs	r2, #3
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 0203 	and.w	r2, r3, #3
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f000 80c0 	beq.w	8001d2a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	4b65      	ldr	r3, [pc, #404]	; (8001d44 <HAL_GPIO_Init+0x320>)
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb2:	4a64      	ldr	r2, [pc, #400]	; (8001d44 <HAL_GPIO_Init+0x320>)
 8001bb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bba:	4b62      	ldr	r3, [pc, #392]	; (8001d44 <HAL_GPIO_Init+0x320>)
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bc6:	4a60      	ldr	r2, [pc, #384]	; (8001d48 <HAL_GPIO_Init+0x324>)
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	089b      	lsrs	r3, r3, #2
 8001bcc:	3302      	adds	r3, #2
 8001bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	220f      	movs	r2, #15
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43db      	mvns	r3, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4013      	ands	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a57      	ldr	r2, [pc, #348]	; (8001d4c <HAL_GPIO_Init+0x328>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d037      	beq.n	8001c62 <HAL_GPIO_Init+0x23e>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a56      	ldr	r2, [pc, #344]	; (8001d50 <HAL_GPIO_Init+0x32c>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d031      	beq.n	8001c5e <HAL_GPIO_Init+0x23a>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a55      	ldr	r2, [pc, #340]	; (8001d54 <HAL_GPIO_Init+0x330>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d02b      	beq.n	8001c5a <HAL_GPIO_Init+0x236>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a54      	ldr	r2, [pc, #336]	; (8001d58 <HAL_GPIO_Init+0x334>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d025      	beq.n	8001c56 <HAL_GPIO_Init+0x232>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a53      	ldr	r2, [pc, #332]	; (8001d5c <HAL_GPIO_Init+0x338>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d01f      	beq.n	8001c52 <HAL_GPIO_Init+0x22e>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a52      	ldr	r2, [pc, #328]	; (8001d60 <HAL_GPIO_Init+0x33c>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d019      	beq.n	8001c4e <HAL_GPIO_Init+0x22a>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a51      	ldr	r2, [pc, #324]	; (8001d64 <HAL_GPIO_Init+0x340>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d013      	beq.n	8001c4a <HAL_GPIO_Init+0x226>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a50      	ldr	r2, [pc, #320]	; (8001d68 <HAL_GPIO_Init+0x344>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d00d      	beq.n	8001c46 <HAL_GPIO_Init+0x222>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a4f      	ldr	r2, [pc, #316]	; (8001d6c <HAL_GPIO_Init+0x348>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d007      	beq.n	8001c42 <HAL_GPIO_Init+0x21e>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a4e      	ldr	r2, [pc, #312]	; (8001d70 <HAL_GPIO_Init+0x34c>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d101      	bne.n	8001c3e <HAL_GPIO_Init+0x21a>
 8001c3a:	2309      	movs	r3, #9
 8001c3c:	e012      	b.n	8001c64 <HAL_GPIO_Init+0x240>
 8001c3e:	230a      	movs	r3, #10
 8001c40:	e010      	b.n	8001c64 <HAL_GPIO_Init+0x240>
 8001c42:	2308      	movs	r3, #8
 8001c44:	e00e      	b.n	8001c64 <HAL_GPIO_Init+0x240>
 8001c46:	2307      	movs	r3, #7
 8001c48:	e00c      	b.n	8001c64 <HAL_GPIO_Init+0x240>
 8001c4a:	2306      	movs	r3, #6
 8001c4c:	e00a      	b.n	8001c64 <HAL_GPIO_Init+0x240>
 8001c4e:	2305      	movs	r3, #5
 8001c50:	e008      	b.n	8001c64 <HAL_GPIO_Init+0x240>
 8001c52:	2304      	movs	r3, #4
 8001c54:	e006      	b.n	8001c64 <HAL_GPIO_Init+0x240>
 8001c56:	2303      	movs	r3, #3
 8001c58:	e004      	b.n	8001c64 <HAL_GPIO_Init+0x240>
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	e002      	b.n	8001c64 <HAL_GPIO_Init+0x240>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <HAL_GPIO_Init+0x240>
 8001c62:	2300      	movs	r3, #0
 8001c64:	69fa      	ldr	r2, [r7, #28]
 8001c66:	f002 0203 	and.w	r2, r2, #3
 8001c6a:	0092      	lsls	r2, r2, #2
 8001c6c:	4093      	lsls	r3, r2
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c74:	4934      	ldr	r1, [pc, #208]	; (8001d48 <HAL_GPIO_Init+0x324>)
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	089b      	lsrs	r3, r3, #2
 8001c7a:	3302      	adds	r3, #2
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c82:	4b3c      	ldr	r3, [pc, #240]	; (8001d74 <HAL_GPIO_Init+0x350>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ca6:	4a33      	ldr	r2, [pc, #204]	; (8001d74 <HAL_GPIO_Init+0x350>)
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001cac:	4b31      	ldr	r3, [pc, #196]	; (8001d74 <HAL_GPIO_Init+0x350>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d003      	beq.n	8001cd0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cd0:	4a28      	ldr	r2, [pc, #160]	; (8001d74 <HAL_GPIO_Init+0x350>)
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cd6:	4b27      	ldr	r3, [pc, #156]	; (8001d74 <HAL_GPIO_Init+0x350>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cfa:	4a1e      	ldr	r2, [pc, #120]	; (8001d74 <HAL_GPIO_Init+0x350>)
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d00:	4b1c      	ldr	r3, [pc, #112]	; (8001d74 <HAL_GPIO_Init+0x350>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d24:	4a13      	ldr	r2, [pc, #76]	; (8001d74 <HAL_GPIO_Init+0x350>)
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	61fb      	str	r3, [r7, #28]
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	2b0f      	cmp	r3, #15
 8001d34:	f67f ae84 	bls.w	8001a40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d38:	bf00      	nop
 8001d3a:	3724      	adds	r7, #36	; 0x24
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	40023800 	.word	0x40023800
 8001d48:	40013800 	.word	0x40013800
 8001d4c:	40020000 	.word	0x40020000
 8001d50:	40020400 	.word	0x40020400
 8001d54:	40020800 	.word	0x40020800
 8001d58:	40020c00 	.word	0x40020c00
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	40021400 	.word	0x40021400
 8001d64:	40021800 	.word	0x40021800
 8001d68:	40021c00 	.word	0x40021c00
 8001d6c:	40022000 	.word	0x40022000
 8001d70:	40022400 	.word	0x40022400
 8001d74:	40013c00 	.word	0x40013c00

08001d78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	460b      	mov	r3, r1
 8001d82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	691a      	ldr	r2, [r3, #16]
 8001d88:	887b      	ldrh	r3, [r7, #2]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d002      	beq.n	8001d96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d90:	2301      	movs	r3, #1
 8001d92:	73fb      	strb	r3, [r7, #15]
 8001d94:	e001      	b.n	8001d9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d96:	2300      	movs	r3, #0
 8001d98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3714      	adds	r7, #20
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	460b      	mov	r3, r1
 8001db2:	807b      	strh	r3, [r7, #2]
 8001db4:	4613      	mov	r3, r2
 8001db6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001db8:	787b      	ldrb	r3, [r7, #1]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d003      	beq.n	8001dc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dbe:	887a      	ldrh	r2, [r7, #2]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dc4:	e003      	b.n	8001dce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dc6:	887b      	ldrh	r3, [r7, #2]
 8001dc8:	041a      	lsls	r2, r3, #16
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	619a      	str	r2, [r3, #24]
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001dda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ddc:	b08f      	sub	sp, #60	; 0x3c
 8001dde:	af0a      	add	r7, sp, #40	; 0x28
 8001de0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e10f      	b.n	800200c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d106      	bne.n	8001e0c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f002 ffec 	bl	8004de4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2203      	movs	r2, #3
 8001e10:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d102      	bne.n	8001e26 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f001 fb7c 	bl	8003528 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	603b      	str	r3, [r7, #0]
 8001e36:	687e      	ldr	r6, [r7, #4]
 8001e38:	466d      	mov	r5, sp
 8001e3a:	f106 0410 	add.w	r4, r6, #16
 8001e3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e46:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e4a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e4e:	1d33      	adds	r3, r6, #4
 8001e50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e52:	6838      	ldr	r0, [r7, #0]
 8001e54:	f001 faf6 	bl	8003444 <USB_CoreInit>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d005      	beq.n	8001e6a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2202      	movs	r2, #2
 8001e62:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e0d0      	b.n	800200c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2100      	movs	r1, #0
 8001e70:	4618      	mov	r0, r3
 8001e72:	f001 fb6a 	bl	800354a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e76:	2300      	movs	r3, #0
 8001e78:	73fb      	strb	r3, [r7, #15]
 8001e7a:	e04a      	b.n	8001f12 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e7c:	7bfa      	ldrb	r2, [r7, #15]
 8001e7e:	6879      	ldr	r1, [r7, #4]
 8001e80:	4613      	mov	r3, r2
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	1a9b      	subs	r3, r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	440b      	add	r3, r1
 8001e8a:	333d      	adds	r3, #61	; 0x3d
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e90:	7bfa      	ldrb	r2, [r7, #15]
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	4613      	mov	r3, r2
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	1a9b      	subs	r3, r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	333c      	adds	r3, #60	; 0x3c
 8001ea0:	7bfa      	ldrb	r2, [r7, #15]
 8001ea2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ea4:	7bfa      	ldrb	r2, [r7, #15]
 8001ea6:	7bfb      	ldrb	r3, [r7, #15]
 8001ea8:	b298      	uxth	r0, r3
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	4613      	mov	r3, r2
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	1a9b      	subs	r3, r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	3342      	adds	r3, #66	; 0x42
 8001eb8:	4602      	mov	r2, r0
 8001eba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ebc:	7bfa      	ldrb	r2, [r7, #15]
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	1a9b      	subs	r3, r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	440b      	add	r3, r1
 8001eca:	333f      	adds	r3, #63	; 0x3f
 8001ecc:	2200      	movs	r2, #0
 8001ece:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ed0:	7bfa      	ldrb	r2, [r7, #15]
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	1a9b      	subs	r3, r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	440b      	add	r3, r1
 8001ede:	3344      	adds	r3, #68	; 0x44
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ee4:	7bfa      	ldrb	r2, [r7, #15]
 8001ee6:	6879      	ldr	r1, [r7, #4]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	1a9b      	subs	r3, r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	3348      	adds	r3, #72	; 0x48
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ef8:	7bfa      	ldrb	r2, [r7, #15]
 8001efa:	6879      	ldr	r1, [r7, #4]
 8001efc:	4613      	mov	r3, r2
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	1a9b      	subs	r3, r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	440b      	add	r3, r1
 8001f06:	3350      	adds	r3, #80	; 0x50
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f0c:	7bfb      	ldrb	r3, [r7, #15]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	73fb      	strb	r3, [r7, #15]
 8001f12:	7bfa      	ldrb	r2, [r7, #15]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d3af      	bcc.n	8001e7c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	73fb      	strb	r3, [r7, #15]
 8001f20:	e044      	b.n	8001fac <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f22:	7bfa      	ldrb	r2, [r7, #15]
 8001f24:	6879      	ldr	r1, [r7, #4]
 8001f26:	4613      	mov	r3, r2
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	1a9b      	subs	r3, r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	440b      	add	r3, r1
 8001f30:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001f34:	2200      	movs	r2, #0
 8001f36:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f38:	7bfa      	ldrb	r2, [r7, #15]
 8001f3a:	6879      	ldr	r1, [r7, #4]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	1a9b      	subs	r3, r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	440b      	add	r3, r1
 8001f46:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001f4a:	7bfa      	ldrb	r2, [r7, #15]
 8001f4c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f4e:	7bfa      	ldrb	r2, [r7, #15]
 8001f50:	6879      	ldr	r1, [r7, #4]
 8001f52:	4613      	mov	r3, r2
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	1a9b      	subs	r3, r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	440b      	add	r3, r1
 8001f5c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001f60:	2200      	movs	r2, #0
 8001f62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f64:	7bfa      	ldrb	r2, [r7, #15]
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	1a9b      	subs	r3, r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	440b      	add	r3, r1
 8001f72:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001f76:	2200      	movs	r2, #0
 8001f78:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f7a:	7bfa      	ldrb	r2, [r7, #15]
 8001f7c:	6879      	ldr	r1, [r7, #4]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	1a9b      	subs	r3, r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	440b      	add	r3, r1
 8001f88:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f90:	7bfa      	ldrb	r2, [r7, #15]
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	4613      	mov	r3, r2
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	1a9b      	subs	r3, r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fa6:	7bfb      	ldrb	r3, [r7, #15]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	73fb      	strb	r3, [r7, #15]
 8001fac:	7bfa      	ldrb	r2, [r7, #15]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d3b5      	bcc.n	8001f22 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	603b      	str	r3, [r7, #0]
 8001fbc:	687e      	ldr	r6, [r7, #4]
 8001fbe:	466d      	mov	r5, sp
 8001fc0:	f106 0410 	add.w	r4, r6, #16
 8001fc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fcc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fd0:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fd4:	1d33      	adds	r3, r6, #4
 8001fd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fd8:	6838      	ldr	r0, [r7, #0]
 8001fda:	f001 fae1 	bl	80035a0 <USB_DevInit>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d005      	beq.n	8001ff0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e00d      	b.n	800200c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f002 fa45 	bl	8004494 <USB_DevDisconnect>

  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3714      	adds	r7, #20
 8002010:	46bd      	mov	sp, r7
 8002012:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002014 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002028:	2b01      	cmp	r3, #1
 800202a:	d101      	bne.n	8002030 <HAL_PCD_Start+0x1c>
 800202c:	2302      	movs	r3, #2
 800202e:	e020      	b.n	8002072 <HAL_PCD_Start+0x5e>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800203c:	2b01      	cmp	r3, #1
 800203e:	d109      	bne.n	8002054 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002044:	2b01      	cmp	r3, #1
 8002046:	d005      	beq.n	8002054 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800204c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4618      	mov	r0, r3
 800205a:	f002 fa03 	bl	8004464 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f001 fa4f 	bl	8003506 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b084      	sub	sp, #16
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
 8002082:	4608      	mov	r0, r1
 8002084:	4611      	mov	r1, r2
 8002086:	461a      	mov	r2, r3
 8002088:	4603      	mov	r3, r0
 800208a:	70fb      	strb	r3, [r7, #3]
 800208c:	460b      	mov	r3, r1
 800208e:	803b      	strh	r3, [r7, #0]
 8002090:	4613      	mov	r3, r2
 8002092:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002094:	2300      	movs	r3, #0
 8002096:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002098:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800209c:	2b00      	cmp	r3, #0
 800209e:	da0f      	bge.n	80020c0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020a0:	78fb      	ldrb	r3, [r7, #3]
 80020a2:	f003 020f 	and.w	r2, r3, #15
 80020a6:	4613      	mov	r3, r2
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	1a9b      	subs	r3, r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	3338      	adds	r3, #56	; 0x38
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	4413      	add	r3, r2
 80020b4:	3304      	adds	r3, #4
 80020b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2201      	movs	r2, #1
 80020bc:	705a      	strb	r2, [r3, #1]
 80020be:	e00f      	b.n	80020e0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020c0:	78fb      	ldrb	r3, [r7, #3]
 80020c2:	f003 020f 	and.w	r2, r3, #15
 80020c6:	4613      	mov	r3, r2
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	1a9b      	subs	r3, r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	4413      	add	r3, r2
 80020d6:	3304      	adds	r3, #4
 80020d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2200      	movs	r2, #0
 80020de:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80020e0:	78fb      	ldrb	r3, [r7, #3]
 80020e2:	f003 030f 	and.w	r3, r3, #15
 80020e6:	b2da      	uxtb	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80020ec:	883a      	ldrh	r2, [r7, #0]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	78ba      	ldrb	r2, [r7, #2]
 80020f6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	785b      	ldrb	r3, [r3, #1]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d004      	beq.n	800210a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	b29a      	uxth	r2, r3
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800210a:	78bb      	ldrb	r3, [r7, #2]
 800210c:	2b02      	cmp	r3, #2
 800210e:	d102      	bne.n	8002116 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800211c:	2b01      	cmp	r3, #1
 800211e:	d101      	bne.n	8002124 <HAL_PCD_EP_Open+0xaa>
 8002120:	2302      	movs	r3, #2
 8002122:	e00e      	b.n	8002142 <HAL_PCD_EP_Open+0xc8>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68f9      	ldr	r1, [r7, #12]
 8002132:	4618      	mov	r0, r3
 8002134:	f001 fbf9 	bl	800392a <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002140:	7afb      	ldrb	r3, [r7, #11]
}
 8002142:	4618      	mov	r0, r3
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b084      	sub	sp, #16
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
 8002152:	460b      	mov	r3, r1
 8002154:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002156:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800215a:	2b00      	cmp	r3, #0
 800215c:	da0f      	bge.n	800217e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800215e:	78fb      	ldrb	r3, [r7, #3]
 8002160:	f003 020f 	and.w	r2, r3, #15
 8002164:	4613      	mov	r3, r2
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	1a9b      	subs	r3, r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	3338      	adds	r3, #56	; 0x38
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	4413      	add	r3, r2
 8002172:	3304      	adds	r3, #4
 8002174:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2201      	movs	r2, #1
 800217a:	705a      	strb	r2, [r3, #1]
 800217c:	e00f      	b.n	800219e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800217e:	78fb      	ldrb	r3, [r7, #3]
 8002180:	f003 020f 	and.w	r2, r3, #15
 8002184:	4613      	mov	r3, r2
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	1a9b      	subs	r3, r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	4413      	add	r3, r2
 8002194:	3304      	adds	r3, #4
 8002196:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2200      	movs	r2, #0
 800219c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800219e:	78fb      	ldrb	r3, [r7, #3]
 80021a0:	f003 030f 	and.w	r3, r3, #15
 80021a4:	b2da      	uxtb	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d101      	bne.n	80021b8 <HAL_PCD_EP_Close+0x6e>
 80021b4:	2302      	movs	r3, #2
 80021b6:	e00e      	b.n	80021d6 <HAL_PCD_EP_Close+0x8c>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68f9      	ldr	r1, [r7, #12]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f001 fc36 	bl	8003a38 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b086      	sub	sp, #24
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	60f8      	str	r0, [r7, #12]
 80021e6:	607a      	str	r2, [r7, #4]
 80021e8:	603b      	str	r3, [r7, #0]
 80021ea:	460b      	mov	r3, r1
 80021ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021ee:	7afb      	ldrb	r3, [r7, #11]
 80021f0:	f003 020f 	and.w	r2, r3, #15
 80021f4:	4613      	mov	r3, r2
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	1a9b      	subs	r3, r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	3338      	adds	r3, #56	; 0x38
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	4413      	add	r3, r2
 8002202:	3304      	adds	r3, #4
 8002204:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	2200      	movs	r2, #0
 8002216:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	2201      	movs	r2, #1
 800221c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800221e:	7afb      	ldrb	r3, [r7, #11]
 8002220:	f003 030f 	and.w	r3, r3, #15
 8002224:	b2da      	uxtb	r2, r3
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d102      	bne.n	8002238 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002238:	7afb      	ldrb	r3, [r7, #11]
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	2b00      	cmp	r3, #0
 8002240:	d109      	bne.n	8002256 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6818      	ldr	r0, [r3, #0]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	b2db      	uxtb	r3, r3
 800224c:	461a      	mov	r2, r3
 800224e:	6979      	ldr	r1, [r7, #20]
 8002250:	f001 ff12 	bl	8004078 <USB_EP0StartXfer>
 8002254:	e008      	b.n	8002268 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6818      	ldr	r0, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	b2db      	uxtb	r3, r3
 8002260:	461a      	mov	r2, r3
 8002262:	6979      	ldr	r1, [r7, #20]
 8002264:	f001 fcc4 	bl	8003bf0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3718      	adds	r7, #24
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b084      	sub	sp, #16
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
 800227a:	460b      	mov	r3, r1
 800227c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800227e:	78fb      	ldrb	r3, [r7, #3]
 8002280:	f003 020f 	and.w	r2, r3, #15
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	429a      	cmp	r2, r3
 800228a:	d901      	bls.n	8002290 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e050      	b.n	8002332 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002290:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002294:	2b00      	cmp	r3, #0
 8002296:	da0f      	bge.n	80022b8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002298:	78fb      	ldrb	r3, [r7, #3]
 800229a:	f003 020f 	and.w	r2, r3, #15
 800229e:	4613      	mov	r3, r2
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	1a9b      	subs	r3, r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	3338      	adds	r3, #56	; 0x38
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	4413      	add	r3, r2
 80022ac:	3304      	adds	r3, #4
 80022ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2201      	movs	r2, #1
 80022b4:	705a      	strb	r2, [r3, #1]
 80022b6:	e00d      	b.n	80022d4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80022b8:	78fa      	ldrb	r2, [r7, #3]
 80022ba:	4613      	mov	r3, r2
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	1a9b      	subs	r3, r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	4413      	add	r3, r2
 80022ca:	3304      	adds	r3, #4
 80022cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2201      	movs	r2, #1
 80022d8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022da:	78fb      	ldrb	r3, [r7, #3]
 80022dc:	f003 030f 	and.w	r3, r3, #15
 80022e0:	b2da      	uxtb	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d101      	bne.n	80022f4 <HAL_PCD_EP_SetStall+0x82>
 80022f0:	2302      	movs	r3, #2
 80022f2:	e01e      	b.n	8002332 <HAL_PCD_EP_SetStall+0xc0>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68f9      	ldr	r1, [r7, #12]
 8002302:	4618      	mov	r0, r3
 8002304:	f002 f840 	bl	8004388 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002308:	78fb      	ldrb	r3, [r7, #3]
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	2b00      	cmp	r3, #0
 8002310:	d10a      	bne.n	8002328 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6818      	ldr	r0, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	b2d9      	uxtb	r1, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002322:	461a      	mov	r2, r3
 8002324:	f002 f8ce 	bl	80044c4 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800233a:	b480      	push	{r7}
 800233c:	b085      	sub	sp, #20
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
 8002342:	460b      	mov	r3, r1
 8002344:	70fb      	strb	r3, [r7, #3]
 8002346:	4613      	mov	r3, r2
 8002348:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002350:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002352:	78fb      	ldrb	r3, [r7, #3]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d107      	bne.n	8002368 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002358:	883b      	ldrh	r3, [r7, #0]
 800235a:	0419      	lsls	r1, r3, #16
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68ba      	ldr	r2, [r7, #8]
 8002362:	430a      	orrs	r2, r1
 8002364:	629a      	str	r2, [r3, #40]	; 0x28
 8002366:	e028      	b.n	80023ba <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236e:	0c1b      	lsrs	r3, r3, #16
 8002370:	68ba      	ldr	r2, [r7, #8]
 8002372:	4413      	add	r3, r2
 8002374:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002376:	2300      	movs	r3, #0
 8002378:	73fb      	strb	r3, [r7, #15]
 800237a:	e00d      	b.n	8002398 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	7bfb      	ldrb	r3, [r7, #15]
 8002382:	3340      	adds	r3, #64	; 0x40
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	0c1b      	lsrs	r3, r3, #16
 800238c:	68ba      	ldr	r2, [r7, #8]
 800238e:	4413      	add	r3, r2
 8002390:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002392:	7bfb      	ldrb	r3, [r7, #15]
 8002394:	3301      	adds	r3, #1
 8002396:	73fb      	strb	r3, [r7, #15]
 8002398:	7bfa      	ldrb	r2, [r7, #15]
 800239a:	78fb      	ldrb	r3, [r7, #3]
 800239c:	3b01      	subs	r3, #1
 800239e:	429a      	cmp	r2, r3
 80023a0:	d3ec      	bcc.n	800237c <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80023a2:	883b      	ldrh	r3, [r7, #0]
 80023a4:	0418      	lsls	r0, r3, #16
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6819      	ldr	r1, [r3, #0]
 80023aa:	78fb      	ldrb	r3, [r7, #3]
 80023ac:	3b01      	subs	r3, #1
 80023ae:	68ba      	ldr	r2, [r7, #8]
 80023b0:	4302      	orrs	r2, r0
 80023b2:	3340      	adds	r3, #64	; 0x40
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	440b      	add	r3, r1
 80023b8:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	460b      	mov	r3, r1
 80023d2:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	887a      	ldrh	r2, [r7, #2]
 80023da:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
	...

080023ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e25b      	b.n	80028b6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	2b00      	cmp	r3, #0
 8002408:	d075      	beq.n	80024f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800240a:	4ba3      	ldr	r3, [pc, #652]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 030c 	and.w	r3, r3, #12
 8002412:	2b04      	cmp	r3, #4
 8002414:	d00c      	beq.n	8002430 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002416:	4ba0      	ldr	r3, [pc, #640]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800241e:	2b08      	cmp	r3, #8
 8002420:	d112      	bne.n	8002448 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002422:	4b9d      	ldr	r3, [pc, #628]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800242a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800242e:	d10b      	bne.n	8002448 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002430:	4b99      	ldr	r3, [pc, #612]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d05b      	beq.n	80024f4 <HAL_RCC_OscConfig+0x108>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d157      	bne.n	80024f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e236      	b.n	80028b6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002450:	d106      	bne.n	8002460 <HAL_RCC_OscConfig+0x74>
 8002452:	4b91      	ldr	r3, [pc, #580]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a90      	ldr	r2, [pc, #576]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 8002458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	e01d      	b.n	800249c <HAL_RCC_OscConfig+0xb0>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002468:	d10c      	bne.n	8002484 <HAL_RCC_OscConfig+0x98>
 800246a:	4b8b      	ldr	r3, [pc, #556]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a8a      	ldr	r2, [pc, #552]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 8002470:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002474:	6013      	str	r3, [r2, #0]
 8002476:	4b88      	ldr	r3, [pc, #544]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a87      	ldr	r2, [pc, #540]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 800247c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	e00b      	b.n	800249c <HAL_RCC_OscConfig+0xb0>
 8002484:	4b84      	ldr	r3, [pc, #528]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a83      	ldr	r2, [pc, #524]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 800248a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800248e:	6013      	str	r3, [r2, #0]
 8002490:	4b81      	ldr	r3, [pc, #516]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a80      	ldr	r2, [pc, #512]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 8002496:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800249a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d013      	beq.n	80024cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a4:	f7ff f9aa 	bl	80017fc <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024ac:	f7ff f9a6 	bl	80017fc <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b64      	cmp	r3, #100	; 0x64
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e1fb      	b.n	80028b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024be:	4b76      	ldr	r3, [pc, #472]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d0f0      	beq.n	80024ac <HAL_RCC_OscConfig+0xc0>
 80024ca:	e014      	b.n	80024f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024cc:	f7ff f996 	bl	80017fc <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024d4:	f7ff f992 	bl	80017fc <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b64      	cmp	r3, #100	; 0x64
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e1e7      	b.n	80028b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024e6:	4b6c      	ldr	r3, [pc, #432]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1f0      	bne.n	80024d4 <HAL_RCC_OscConfig+0xe8>
 80024f2:	e000      	b.n	80024f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d063      	beq.n	80025ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002502:	4b65      	ldr	r3, [pc, #404]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f003 030c 	and.w	r3, r3, #12
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00b      	beq.n	8002526 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800250e:	4b62      	ldr	r3, [pc, #392]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002516:	2b08      	cmp	r3, #8
 8002518:	d11c      	bne.n	8002554 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800251a:	4b5f      	ldr	r3, [pc, #380]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d116      	bne.n	8002554 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002526:	4b5c      	ldr	r3, [pc, #368]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d005      	beq.n	800253e <HAL_RCC_OscConfig+0x152>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d001      	beq.n	800253e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e1bb      	b.n	80028b6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800253e:	4b56      	ldr	r3, [pc, #344]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	4952      	ldr	r1, [pc, #328]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 800254e:	4313      	orrs	r3, r2
 8002550:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002552:	e03a      	b.n	80025ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d020      	beq.n	800259e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800255c:	4b4f      	ldr	r3, [pc, #316]	; (800269c <HAL_RCC_OscConfig+0x2b0>)
 800255e:	2201      	movs	r2, #1
 8002560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002562:	f7ff f94b 	bl	80017fc <HAL_GetTick>
 8002566:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002568:	e008      	b.n	800257c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800256a:	f7ff f947 	bl	80017fc <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e19c      	b.n	80028b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800257c:	4b46      	ldr	r3, [pc, #280]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0f0      	beq.n	800256a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002588:	4b43      	ldr	r3, [pc, #268]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	4940      	ldr	r1, [pc, #256]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 8002598:	4313      	orrs	r3, r2
 800259a:	600b      	str	r3, [r1, #0]
 800259c:	e015      	b.n	80025ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800259e:	4b3f      	ldr	r3, [pc, #252]	; (800269c <HAL_RCC_OscConfig+0x2b0>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a4:	f7ff f92a 	bl	80017fc <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025ac:	f7ff f926 	bl	80017fc <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e17b      	b.n	80028b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025be:	4b36      	ldr	r3, [pc, #216]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1f0      	bne.n	80025ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d030      	beq.n	8002638 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d016      	beq.n	800260c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025de:	4b30      	ldr	r3, [pc, #192]	; (80026a0 <HAL_RCC_OscConfig+0x2b4>)
 80025e0:	2201      	movs	r2, #1
 80025e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e4:	f7ff f90a 	bl	80017fc <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025ec:	f7ff f906 	bl	80017fc <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e15b      	b.n	80028b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025fe:	4b26      	ldr	r3, [pc, #152]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 8002600:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d0f0      	beq.n	80025ec <HAL_RCC_OscConfig+0x200>
 800260a:	e015      	b.n	8002638 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800260c:	4b24      	ldr	r3, [pc, #144]	; (80026a0 <HAL_RCC_OscConfig+0x2b4>)
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002612:	f7ff f8f3 	bl	80017fc <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800261a:	f7ff f8ef 	bl	80017fc <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e144      	b.n	80028b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800262c:	4b1a      	ldr	r3, [pc, #104]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 800262e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1f0      	bne.n	800261a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b00      	cmp	r3, #0
 8002642:	f000 80a0 	beq.w	8002786 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002646:	2300      	movs	r3, #0
 8002648:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800264a:	4b13      	ldr	r3, [pc, #76]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10f      	bne.n	8002676 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	60bb      	str	r3, [r7, #8]
 800265a:	4b0f      	ldr	r3, [pc, #60]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	4a0e      	ldr	r2, [pc, #56]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 8002660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002664:	6413      	str	r3, [r2, #64]	; 0x40
 8002666:	4b0c      	ldr	r3, [pc, #48]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266e:	60bb      	str	r3, [r7, #8]
 8002670:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002672:	2301      	movs	r3, #1
 8002674:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002676:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <HAL_RCC_OscConfig+0x2b8>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800267e:	2b00      	cmp	r3, #0
 8002680:	d121      	bne.n	80026c6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002682:	4b08      	ldr	r3, [pc, #32]	; (80026a4 <HAL_RCC_OscConfig+0x2b8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a07      	ldr	r2, [pc, #28]	; (80026a4 <HAL_RCC_OscConfig+0x2b8>)
 8002688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800268c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800268e:	f7ff f8b5 	bl	80017fc <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002694:	e011      	b.n	80026ba <HAL_RCC_OscConfig+0x2ce>
 8002696:	bf00      	nop
 8002698:	40023800 	.word	0x40023800
 800269c:	42470000 	.word	0x42470000
 80026a0:	42470e80 	.word	0x42470e80
 80026a4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026a8:	f7ff f8a8 	bl	80017fc <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e0fd      	b.n	80028b6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ba:	4b81      	ldr	r3, [pc, #516]	; (80028c0 <HAL_RCC_OscConfig+0x4d4>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0f0      	beq.n	80026a8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d106      	bne.n	80026dc <HAL_RCC_OscConfig+0x2f0>
 80026ce:	4b7d      	ldr	r3, [pc, #500]	; (80028c4 <HAL_RCC_OscConfig+0x4d8>)
 80026d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d2:	4a7c      	ldr	r2, [pc, #496]	; (80028c4 <HAL_RCC_OscConfig+0x4d8>)
 80026d4:	f043 0301 	orr.w	r3, r3, #1
 80026d8:	6713      	str	r3, [r2, #112]	; 0x70
 80026da:	e01c      	b.n	8002716 <HAL_RCC_OscConfig+0x32a>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	2b05      	cmp	r3, #5
 80026e2:	d10c      	bne.n	80026fe <HAL_RCC_OscConfig+0x312>
 80026e4:	4b77      	ldr	r3, [pc, #476]	; (80028c4 <HAL_RCC_OscConfig+0x4d8>)
 80026e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e8:	4a76      	ldr	r2, [pc, #472]	; (80028c4 <HAL_RCC_OscConfig+0x4d8>)
 80026ea:	f043 0304 	orr.w	r3, r3, #4
 80026ee:	6713      	str	r3, [r2, #112]	; 0x70
 80026f0:	4b74      	ldr	r3, [pc, #464]	; (80028c4 <HAL_RCC_OscConfig+0x4d8>)
 80026f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f4:	4a73      	ldr	r2, [pc, #460]	; (80028c4 <HAL_RCC_OscConfig+0x4d8>)
 80026f6:	f043 0301 	orr.w	r3, r3, #1
 80026fa:	6713      	str	r3, [r2, #112]	; 0x70
 80026fc:	e00b      	b.n	8002716 <HAL_RCC_OscConfig+0x32a>
 80026fe:	4b71      	ldr	r3, [pc, #452]	; (80028c4 <HAL_RCC_OscConfig+0x4d8>)
 8002700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002702:	4a70      	ldr	r2, [pc, #448]	; (80028c4 <HAL_RCC_OscConfig+0x4d8>)
 8002704:	f023 0301 	bic.w	r3, r3, #1
 8002708:	6713      	str	r3, [r2, #112]	; 0x70
 800270a:	4b6e      	ldr	r3, [pc, #440]	; (80028c4 <HAL_RCC_OscConfig+0x4d8>)
 800270c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800270e:	4a6d      	ldr	r2, [pc, #436]	; (80028c4 <HAL_RCC_OscConfig+0x4d8>)
 8002710:	f023 0304 	bic.w	r3, r3, #4
 8002714:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d015      	beq.n	800274a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800271e:	f7ff f86d 	bl	80017fc <HAL_GetTick>
 8002722:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002724:	e00a      	b.n	800273c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002726:	f7ff f869 	bl	80017fc <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	f241 3288 	movw	r2, #5000	; 0x1388
 8002734:	4293      	cmp	r3, r2
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e0bc      	b.n	80028b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800273c:	4b61      	ldr	r3, [pc, #388]	; (80028c4 <HAL_RCC_OscConfig+0x4d8>)
 800273e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d0ee      	beq.n	8002726 <HAL_RCC_OscConfig+0x33a>
 8002748:	e014      	b.n	8002774 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800274a:	f7ff f857 	bl	80017fc <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002750:	e00a      	b.n	8002768 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002752:	f7ff f853 	bl	80017fc <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002760:	4293      	cmp	r3, r2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e0a6      	b.n	80028b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002768:	4b56      	ldr	r3, [pc, #344]	; (80028c4 <HAL_RCC_OscConfig+0x4d8>)
 800276a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1ee      	bne.n	8002752 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002774:	7dfb      	ldrb	r3, [r7, #23]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d105      	bne.n	8002786 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800277a:	4b52      	ldr	r3, [pc, #328]	; (80028c4 <HAL_RCC_OscConfig+0x4d8>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	4a51      	ldr	r2, [pc, #324]	; (80028c4 <HAL_RCC_OscConfig+0x4d8>)
 8002780:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002784:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 8092 	beq.w	80028b4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002790:	4b4c      	ldr	r3, [pc, #304]	; (80028c4 <HAL_RCC_OscConfig+0x4d8>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 030c 	and.w	r3, r3, #12
 8002798:	2b08      	cmp	r3, #8
 800279a:	d05c      	beq.n	8002856 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d141      	bne.n	8002828 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a4:	4b48      	ldr	r3, [pc, #288]	; (80028c8 <HAL_RCC_OscConfig+0x4dc>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027aa:	f7ff f827 	bl	80017fc <HAL_GetTick>
 80027ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027b0:	e008      	b.n	80027c4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027b2:	f7ff f823 	bl	80017fc <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e078      	b.n	80028b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027c4:	4b3f      	ldr	r3, [pc, #252]	; (80028c4 <HAL_RCC_OscConfig+0x4d8>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1f0      	bne.n	80027b2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	69da      	ldr	r2, [r3, #28]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	431a      	orrs	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	019b      	lsls	r3, r3, #6
 80027e0:	431a      	orrs	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e6:	085b      	lsrs	r3, r3, #1
 80027e8:	3b01      	subs	r3, #1
 80027ea:	041b      	lsls	r3, r3, #16
 80027ec:	431a      	orrs	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f2:	061b      	lsls	r3, r3, #24
 80027f4:	4933      	ldr	r1, [pc, #204]	; (80028c4 <HAL_RCC_OscConfig+0x4d8>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027fa:	4b33      	ldr	r3, [pc, #204]	; (80028c8 <HAL_RCC_OscConfig+0x4dc>)
 80027fc:	2201      	movs	r2, #1
 80027fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002800:	f7fe fffc 	bl	80017fc <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002808:	f7fe fff8 	bl	80017fc <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e04d      	b.n	80028b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800281a:	4b2a      	ldr	r3, [pc, #168]	; (80028c4 <HAL_RCC_OscConfig+0x4d8>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d0f0      	beq.n	8002808 <HAL_RCC_OscConfig+0x41c>
 8002826:	e045      	b.n	80028b4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002828:	4b27      	ldr	r3, [pc, #156]	; (80028c8 <HAL_RCC_OscConfig+0x4dc>)
 800282a:	2200      	movs	r2, #0
 800282c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282e:	f7fe ffe5 	bl	80017fc <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002836:	f7fe ffe1 	bl	80017fc <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e036      	b.n	80028b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002848:	4b1e      	ldr	r3, [pc, #120]	; (80028c4 <HAL_RCC_OscConfig+0x4d8>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1f0      	bne.n	8002836 <HAL_RCC_OscConfig+0x44a>
 8002854:	e02e      	b.n	80028b4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d101      	bne.n	8002862 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e029      	b.n	80028b6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002862:	4b18      	ldr	r3, [pc, #96]	; (80028c4 <HAL_RCC_OscConfig+0x4d8>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	429a      	cmp	r2, r3
 8002874:	d11c      	bne.n	80028b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002880:	429a      	cmp	r2, r3
 8002882:	d115      	bne.n	80028b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800288a:	4013      	ands	r3, r2
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002890:	4293      	cmp	r3, r2
 8002892:	d10d      	bne.n	80028b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800289e:	429a      	cmp	r2, r3
 80028a0:	d106      	bne.n	80028b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d001      	beq.n	80028b4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e000      	b.n	80028b6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40007000 	.word	0x40007000
 80028c4:	40023800 	.word	0x40023800
 80028c8:	42470060 	.word	0x42470060

080028cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d101      	bne.n	80028e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e0cc      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028e0:	4b68      	ldr	r3, [pc, #416]	; (8002a84 <HAL_RCC_ClockConfig+0x1b8>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 030f 	and.w	r3, r3, #15
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d90c      	bls.n	8002908 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ee:	4b65      	ldr	r3, [pc, #404]	; (8002a84 <HAL_RCC_ClockConfig+0x1b8>)
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	b2d2      	uxtb	r2, r2
 80028f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f6:	4b63      	ldr	r3, [pc, #396]	; (8002a84 <HAL_RCC_ClockConfig+0x1b8>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 030f 	and.w	r3, r3, #15
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	429a      	cmp	r2, r3
 8002902:	d001      	beq.n	8002908 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e0b8      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d020      	beq.n	8002956 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0304 	and.w	r3, r3, #4
 800291c:	2b00      	cmp	r3, #0
 800291e:	d005      	beq.n	800292c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002920:	4b59      	ldr	r3, [pc, #356]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	4a58      	ldr	r2, [pc, #352]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 8002926:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800292a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0308 	and.w	r3, r3, #8
 8002934:	2b00      	cmp	r3, #0
 8002936:	d005      	beq.n	8002944 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002938:	4b53      	ldr	r3, [pc, #332]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	4a52      	ldr	r2, [pc, #328]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 800293e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002942:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002944:	4b50      	ldr	r3, [pc, #320]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	494d      	ldr	r1, [pc, #308]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 8002952:	4313      	orrs	r3, r2
 8002954:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b00      	cmp	r3, #0
 8002960:	d044      	beq.n	80029ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d107      	bne.n	800297a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800296a:	4b47      	ldr	r3, [pc, #284]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d119      	bne.n	80029aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e07f      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2b02      	cmp	r3, #2
 8002980:	d003      	beq.n	800298a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002986:	2b03      	cmp	r3, #3
 8002988:	d107      	bne.n	800299a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800298a:	4b3f      	ldr	r3, [pc, #252]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d109      	bne.n	80029aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e06f      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800299a:	4b3b      	ldr	r3, [pc, #236]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e067      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029aa:	4b37      	ldr	r3, [pc, #220]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f023 0203 	bic.w	r2, r3, #3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	4934      	ldr	r1, [pc, #208]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029bc:	f7fe ff1e 	bl	80017fc <HAL_GetTick>
 80029c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c2:	e00a      	b.n	80029da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c4:	f7fe ff1a 	bl	80017fc <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e04f      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029da:	4b2b      	ldr	r3, [pc, #172]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 020c 	and.w	r2, r3, #12
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d1eb      	bne.n	80029c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029ec:	4b25      	ldr	r3, [pc, #148]	; (8002a84 <HAL_RCC_ClockConfig+0x1b8>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 030f 	and.w	r3, r3, #15
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d20c      	bcs.n	8002a14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fa:	4b22      	ldr	r3, [pc, #136]	; (8002a84 <HAL_RCC_ClockConfig+0x1b8>)
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	b2d2      	uxtb	r2, r2
 8002a00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a02:	4b20      	ldr	r3, [pc, #128]	; (8002a84 <HAL_RCC_ClockConfig+0x1b8>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 030f 	and.w	r3, r3, #15
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d001      	beq.n	8002a14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e032      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d008      	beq.n	8002a32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a20:	4b19      	ldr	r3, [pc, #100]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	4916      	ldr	r1, [pc, #88]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0308 	and.w	r3, r3, #8
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d009      	beq.n	8002a52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a3e:	4b12      	ldr	r3, [pc, #72]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	490e      	ldr	r1, [pc, #56]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a52:	f000 f821 	bl	8002a98 <HAL_RCC_GetSysClockFreq>
 8002a56:	4601      	mov	r1, r0
 8002a58:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	091b      	lsrs	r3, r3, #4
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	4a0a      	ldr	r2, [pc, #40]	; (8002a8c <HAL_RCC_ClockConfig+0x1c0>)
 8002a64:	5cd3      	ldrb	r3, [r2, r3]
 8002a66:	fa21 f303 	lsr.w	r3, r1, r3
 8002a6a:	4a09      	ldr	r2, [pc, #36]	; (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a6e:	4b09      	ldr	r3, [pc, #36]	; (8002a94 <HAL_RCC_ClockConfig+0x1c8>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7fe fe7e 	bl	8001774 <HAL_InitTick>

  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	40023c00 	.word	0x40023c00
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	080063d0 	.word	0x080063d0
 8002a90:	20000000 	.word	0x20000000
 8002a94:	20000004 	.word	0x20000004

08002a98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	607b      	str	r3, [r7, #4]
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60fb      	str	r3, [r7, #12]
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002aae:	4b63      	ldr	r3, [pc, #396]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 030c 	and.w	r3, r3, #12
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	d007      	beq.n	8002aca <HAL_RCC_GetSysClockFreq+0x32>
 8002aba:	2b08      	cmp	r3, #8
 8002abc:	d008      	beq.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x38>
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f040 80b4 	bne.w	8002c2c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ac4:	4b5e      	ldr	r3, [pc, #376]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002ac6:	60bb      	str	r3, [r7, #8]
       break;
 8002ac8:	e0b3      	b.n	8002c32 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002aca:	4b5e      	ldr	r3, [pc, #376]	; (8002c44 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002acc:	60bb      	str	r3, [r7, #8]
      break;
 8002ace:	e0b0      	b.n	8002c32 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ad0:	4b5a      	ldr	r3, [pc, #360]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ad8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ada:	4b58      	ldr	r3, [pc, #352]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d04a      	beq.n	8002b7c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ae6:	4b55      	ldr	r3, [pc, #340]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	099b      	lsrs	r3, r3, #6
 8002aec:	f04f 0400 	mov.w	r4, #0
 8002af0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002af4:	f04f 0200 	mov.w	r2, #0
 8002af8:	ea03 0501 	and.w	r5, r3, r1
 8002afc:	ea04 0602 	and.w	r6, r4, r2
 8002b00:	4629      	mov	r1, r5
 8002b02:	4632      	mov	r2, r6
 8002b04:	f04f 0300 	mov.w	r3, #0
 8002b08:	f04f 0400 	mov.w	r4, #0
 8002b0c:	0154      	lsls	r4, r2, #5
 8002b0e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b12:	014b      	lsls	r3, r1, #5
 8002b14:	4619      	mov	r1, r3
 8002b16:	4622      	mov	r2, r4
 8002b18:	1b49      	subs	r1, r1, r5
 8002b1a:	eb62 0206 	sbc.w	r2, r2, r6
 8002b1e:	f04f 0300 	mov.w	r3, #0
 8002b22:	f04f 0400 	mov.w	r4, #0
 8002b26:	0194      	lsls	r4, r2, #6
 8002b28:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002b2c:	018b      	lsls	r3, r1, #6
 8002b2e:	1a5b      	subs	r3, r3, r1
 8002b30:	eb64 0402 	sbc.w	r4, r4, r2
 8002b34:	f04f 0100 	mov.w	r1, #0
 8002b38:	f04f 0200 	mov.w	r2, #0
 8002b3c:	00e2      	lsls	r2, r4, #3
 8002b3e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002b42:	00d9      	lsls	r1, r3, #3
 8002b44:	460b      	mov	r3, r1
 8002b46:	4614      	mov	r4, r2
 8002b48:	195b      	adds	r3, r3, r5
 8002b4a:	eb44 0406 	adc.w	r4, r4, r6
 8002b4e:	f04f 0100 	mov.w	r1, #0
 8002b52:	f04f 0200 	mov.w	r2, #0
 8002b56:	0262      	lsls	r2, r4, #9
 8002b58:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002b5c:	0259      	lsls	r1, r3, #9
 8002b5e:	460b      	mov	r3, r1
 8002b60:	4614      	mov	r4, r2
 8002b62:	4618      	mov	r0, r3
 8002b64:	4621      	mov	r1, r4
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f04f 0400 	mov.w	r4, #0
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	4623      	mov	r3, r4
 8002b70:	f7fd ffbc 	bl	8000aec <__aeabi_uldivmod>
 8002b74:	4603      	mov	r3, r0
 8002b76:	460c      	mov	r4, r1
 8002b78:	60fb      	str	r3, [r7, #12]
 8002b7a:	e049      	b.n	8002c10 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b7c:	4b2f      	ldr	r3, [pc, #188]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	099b      	lsrs	r3, r3, #6
 8002b82:	f04f 0400 	mov.w	r4, #0
 8002b86:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b8a:	f04f 0200 	mov.w	r2, #0
 8002b8e:	ea03 0501 	and.w	r5, r3, r1
 8002b92:	ea04 0602 	and.w	r6, r4, r2
 8002b96:	4629      	mov	r1, r5
 8002b98:	4632      	mov	r2, r6
 8002b9a:	f04f 0300 	mov.w	r3, #0
 8002b9e:	f04f 0400 	mov.w	r4, #0
 8002ba2:	0154      	lsls	r4, r2, #5
 8002ba4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002ba8:	014b      	lsls	r3, r1, #5
 8002baa:	4619      	mov	r1, r3
 8002bac:	4622      	mov	r2, r4
 8002bae:	1b49      	subs	r1, r1, r5
 8002bb0:	eb62 0206 	sbc.w	r2, r2, r6
 8002bb4:	f04f 0300 	mov.w	r3, #0
 8002bb8:	f04f 0400 	mov.w	r4, #0
 8002bbc:	0194      	lsls	r4, r2, #6
 8002bbe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002bc2:	018b      	lsls	r3, r1, #6
 8002bc4:	1a5b      	subs	r3, r3, r1
 8002bc6:	eb64 0402 	sbc.w	r4, r4, r2
 8002bca:	f04f 0100 	mov.w	r1, #0
 8002bce:	f04f 0200 	mov.w	r2, #0
 8002bd2:	00e2      	lsls	r2, r4, #3
 8002bd4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002bd8:	00d9      	lsls	r1, r3, #3
 8002bda:	460b      	mov	r3, r1
 8002bdc:	4614      	mov	r4, r2
 8002bde:	195b      	adds	r3, r3, r5
 8002be0:	eb44 0406 	adc.w	r4, r4, r6
 8002be4:	f04f 0100 	mov.w	r1, #0
 8002be8:	f04f 0200 	mov.w	r2, #0
 8002bec:	02a2      	lsls	r2, r4, #10
 8002bee:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002bf2:	0299      	lsls	r1, r3, #10
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	4614      	mov	r4, r2
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	4621      	mov	r1, r4
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f04f 0400 	mov.w	r4, #0
 8002c02:	461a      	mov	r2, r3
 8002c04:	4623      	mov	r3, r4
 8002c06:	f7fd ff71 	bl	8000aec <__aeabi_uldivmod>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	460c      	mov	r4, r1
 8002c0e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c10:	4b0a      	ldr	r3, [pc, #40]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	0c1b      	lsrs	r3, r3, #16
 8002c16:	f003 0303 	and.w	r3, r3, #3
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c28:	60bb      	str	r3, [r7, #8]
      break;
 8002c2a:	e002      	b.n	8002c32 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c2c:	4b04      	ldr	r3, [pc, #16]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002c2e:	60bb      	str	r3, [r7, #8]
      break;
 8002c30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c32:	68bb      	ldr	r3, [r7, #8]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c3c:	40023800 	.word	0x40023800
 8002c40:	00f42400 	.word	0x00f42400
 8002c44:	007a1200 	.word	0x007a1200

08002c48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c4c:	4b03      	ldr	r3, [pc, #12]	; (8002c5c <HAL_RCC_GetHCLKFreq+0x14>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	20000000 	.word	0x20000000

08002c60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c64:	f7ff fff0 	bl	8002c48 <HAL_RCC_GetHCLKFreq>
 8002c68:	4601      	mov	r1, r0
 8002c6a:	4b05      	ldr	r3, [pc, #20]	; (8002c80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	0a9b      	lsrs	r3, r3, #10
 8002c70:	f003 0307 	and.w	r3, r3, #7
 8002c74:	4a03      	ldr	r2, [pc, #12]	; (8002c84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c76:	5cd3      	ldrb	r3, [r2, r3]
 8002c78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40023800 	.word	0x40023800
 8002c84:	080063e0 	.word	0x080063e0

08002c88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c8c:	f7ff ffdc 	bl	8002c48 <HAL_RCC_GetHCLKFreq>
 8002c90:	4601      	mov	r1, r0
 8002c92:	4b05      	ldr	r3, [pc, #20]	; (8002ca8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	0b5b      	lsrs	r3, r3, #13
 8002c98:	f003 0307 	and.w	r3, r3, #7
 8002c9c:	4a03      	ldr	r2, [pc, #12]	; (8002cac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c9e:	5cd3      	ldrb	r3, [r2, r3]
 8002ca0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	080063e0 	.word	0x080063e0

08002cb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e03f      	b.n	8002d42 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d106      	bne.n	8002cdc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7fe fc48 	bl	800156c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2224      	movs	r2, #36	; 0x24
 8002ce0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68da      	ldr	r2, [r3, #12]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cf2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 f829 	bl	8002d4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	691a      	ldr	r2, [r3, #16]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	695a      	ldr	r2, [r3, #20]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68da      	ldr	r2, [r3, #12]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2220      	movs	r2, #32
 8002d34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
	...

08002d4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d50:	b085      	sub	sp, #20
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68da      	ldr	r2, [r3, #12]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689a      	ldr	r2, [r3, #8]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	431a      	orrs	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	69db      	ldr	r3, [r3, #28]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002d8e:	f023 030c 	bic.w	r3, r3, #12
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	6812      	ldr	r2, [r2, #0]
 8002d96:	68f9      	ldr	r1, [r7, #12]
 8002d98:	430b      	orrs	r3, r1
 8002d9a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	699a      	ldr	r2, [r3, #24]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dba:	f040 818b 	bne.w	80030d4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4ac1      	ldr	r2, [pc, #772]	; (80030c8 <UART_SetConfig+0x37c>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d005      	beq.n	8002dd4 <UART_SetConfig+0x88>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4abf      	ldr	r2, [pc, #764]	; (80030cc <UART_SetConfig+0x380>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	f040 80bd 	bne.w	8002f4e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002dd4:	f7ff ff58 	bl	8002c88 <HAL_RCC_GetPCLK2Freq>
 8002dd8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	461d      	mov	r5, r3
 8002dde:	f04f 0600 	mov.w	r6, #0
 8002de2:	46a8      	mov	r8, r5
 8002de4:	46b1      	mov	r9, r6
 8002de6:	eb18 0308 	adds.w	r3, r8, r8
 8002dea:	eb49 0409 	adc.w	r4, r9, r9
 8002dee:	4698      	mov	r8, r3
 8002df0:	46a1      	mov	r9, r4
 8002df2:	eb18 0805 	adds.w	r8, r8, r5
 8002df6:	eb49 0906 	adc.w	r9, r9, r6
 8002dfa:	f04f 0100 	mov.w	r1, #0
 8002dfe:	f04f 0200 	mov.w	r2, #0
 8002e02:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002e06:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002e0a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002e0e:	4688      	mov	r8, r1
 8002e10:	4691      	mov	r9, r2
 8002e12:	eb18 0005 	adds.w	r0, r8, r5
 8002e16:	eb49 0106 	adc.w	r1, r9, r6
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	461d      	mov	r5, r3
 8002e20:	f04f 0600 	mov.w	r6, #0
 8002e24:	196b      	adds	r3, r5, r5
 8002e26:	eb46 0406 	adc.w	r4, r6, r6
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	4623      	mov	r3, r4
 8002e2e:	f7fd fe5d 	bl	8000aec <__aeabi_uldivmod>
 8002e32:	4603      	mov	r3, r0
 8002e34:	460c      	mov	r4, r1
 8002e36:	461a      	mov	r2, r3
 8002e38:	4ba5      	ldr	r3, [pc, #660]	; (80030d0 <UART_SetConfig+0x384>)
 8002e3a:	fba3 2302 	umull	r2, r3, r3, r2
 8002e3e:	095b      	lsrs	r3, r3, #5
 8002e40:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	461d      	mov	r5, r3
 8002e48:	f04f 0600 	mov.w	r6, #0
 8002e4c:	46a9      	mov	r9, r5
 8002e4e:	46b2      	mov	sl, r6
 8002e50:	eb19 0309 	adds.w	r3, r9, r9
 8002e54:	eb4a 040a 	adc.w	r4, sl, sl
 8002e58:	4699      	mov	r9, r3
 8002e5a:	46a2      	mov	sl, r4
 8002e5c:	eb19 0905 	adds.w	r9, r9, r5
 8002e60:	eb4a 0a06 	adc.w	sl, sl, r6
 8002e64:	f04f 0100 	mov.w	r1, #0
 8002e68:	f04f 0200 	mov.w	r2, #0
 8002e6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e70:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e74:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e78:	4689      	mov	r9, r1
 8002e7a:	4692      	mov	sl, r2
 8002e7c:	eb19 0005 	adds.w	r0, r9, r5
 8002e80:	eb4a 0106 	adc.w	r1, sl, r6
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	461d      	mov	r5, r3
 8002e8a:	f04f 0600 	mov.w	r6, #0
 8002e8e:	196b      	adds	r3, r5, r5
 8002e90:	eb46 0406 	adc.w	r4, r6, r6
 8002e94:	461a      	mov	r2, r3
 8002e96:	4623      	mov	r3, r4
 8002e98:	f7fd fe28 	bl	8000aec <__aeabi_uldivmod>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	460c      	mov	r4, r1
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	4b8b      	ldr	r3, [pc, #556]	; (80030d0 <UART_SetConfig+0x384>)
 8002ea4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ea8:	095b      	lsrs	r3, r3, #5
 8002eaa:	2164      	movs	r1, #100	; 0x64
 8002eac:	fb01 f303 	mul.w	r3, r1, r3
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	3332      	adds	r3, #50	; 0x32
 8002eb6:	4a86      	ldr	r2, [pc, #536]	; (80030d0 <UART_SetConfig+0x384>)
 8002eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ebc:	095b      	lsrs	r3, r3, #5
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ec4:	4498      	add	r8, r3
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	461d      	mov	r5, r3
 8002eca:	f04f 0600 	mov.w	r6, #0
 8002ece:	46a9      	mov	r9, r5
 8002ed0:	46b2      	mov	sl, r6
 8002ed2:	eb19 0309 	adds.w	r3, r9, r9
 8002ed6:	eb4a 040a 	adc.w	r4, sl, sl
 8002eda:	4699      	mov	r9, r3
 8002edc:	46a2      	mov	sl, r4
 8002ede:	eb19 0905 	adds.w	r9, r9, r5
 8002ee2:	eb4a 0a06 	adc.w	sl, sl, r6
 8002ee6:	f04f 0100 	mov.w	r1, #0
 8002eea:	f04f 0200 	mov.w	r2, #0
 8002eee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ef2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ef6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002efa:	4689      	mov	r9, r1
 8002efc:	4692      	mov	sl, r2
 8002efe:	eb19 0005 	adds.w	r0, r9, r5
 8002f02:	eb4a 0106 	adc.w	r1, sl, r6
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	461d      	mov	r5, r3
 8002f0c:	f04f 0600 	mov.w	r6, #0
 8002f10:	196b      	adds	r3, r5, r5
 8002f12:	eb46 0406 	adc.w	r4, r6, r6
 8002f16:	461a      	mov	r2, r3
 8002f18:	4623      	mov	r3, r4
 8002f1a:	f7fd fde7 	bl	8000aec <__aeabi_uldivmod>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	460c      	mov	r4, r1
 8002f22:	461a      	mov	r2, r3
 8002f24:	4b6a      	ldr	r3, [pc, #424]	; (80030d0 <UART_SetConfig+0x384>)
 8002f26:	fba3 1302 	umull	r1, r3, r3, r2
 8002f2a:	095b      	lsrs	r3, r3, #5
 8002f2c:	2164      	movs	r1, #100	; 0x64
 8002f2e:	fb01 f303 	mul.w	r3, r1, r3
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	3332      	adds	r3, #50	; 0x32
 8002f38:	4a65      	ldr	r2, [pc, #404]	; (80030d0 <UART_SetConfig+0x384>)
 8002f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3e:	095b      	lsrs	r3, r3, #5
 8002f40:	f003 0207 	and.w	r2, r3, #7
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4442      	add	r2, r8
 8002f4a:	609a      	str	r2, [r3, #8]
 8002f4c:	e26f      	b.n	800342e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f4e:	f7ff fe87 	bl	8002c60 <HAL_RCC_GetPCLK1Freq>
 8002f52:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	461d      	mov	r5, r3
 8002f58:	f04f 0600 	mov.w	r6, #0
 8002f5c:	46a8      	mov	r8, r5
 8002f5e:	46b1      	mov	r9, r6
 8002f60:	eb18 0308 	adds.w	r3, r8, r8
 8002f64:	eb49 0409 	adc.w	r4, r9, r9
 8002f68:	4698      	mov	r8, r3
 8002f6a:	46a1      	mov	r9, r4
 8002f6c:	eb18 0805 	adds.w	r8, r8, r5
 8002f70:	eb49 0906 	adc.w	r9, r9, r6
 8002f74:	f04f 0100 	mov.w	r1, #0
 8002f78:	f04f 0200 	mov.w	r2, #0
 8002f7c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002f80:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002f84:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002f88:	4688      	mov	r8, r1
 8002f8a:	4691      	mov	r9, r2
 8002f8c:	eb18 0005 	adds.w	r0, r8, r5
 8002f90:	eb49 0106 	adc.w	r1, r9, r6
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	461d      	mov	r5, r3
 8002f9a:	f04f 0600 	mov.w	r6, #0
 8002f9e:	196b      	adds	r3, r5, r5
 8002fa0:	eb46 0406 	adc.w	r4, r6, r6
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	4623      	mov	r3, r4
 8002fa8:	f7fd fda0 	bl	8000aec <__aeabi_uldivmod>
 8002fac:	4603      	mov	r3, r0
 8002fae:	460c      	mov	r4, r1
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	4b47      	ldr	r3, [pc, #284]	; (80030d0 <UART_SetConfig+0x384>)
 8002fb4:	fba3 2302 	umull	r2, r3, r3, r2
 8002fb8:	095b      	lsrs	r3, r3, #5
 8002fba:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	461d      	mov	r5, r3
 8002fc2:	f04f 0600 	mov.w	r6, #0
 8002fc6:	46a9      	mov	r9, r5
 8002fc8:	46b2      	mov	sl, r6
 8002fca:	eb19 0309 	adds.w	r3, r9, r9
 8002fce:	eb4a 040a 	adc.w	r4, sl, sl
 8002fd2:	4699      	mov	r9, r3
 8002fd4:	46a2      	mov	sl, r4
 8002fd6:	eb19 0905 	adds.w	r9, r9, r5
 8002fda:	eb4a 0a06 	adc.w	sl, sl, r6
 8002fde:	f04f 0100 	mov.w	r1, #0
 8002fe2:	f04f 0200 	mov.w	r2, #0
 8002fe6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002fee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ff2:	4689      	mov	r9, r1
 8002ff4:	4692      	mov	sl, r2
 8002ff6:	eb19 0005 	adds.w	r0, r9, r5
 8002ffa:	eb4a 0106 	adc.w	r1, sl, r6
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	461d      	mov	r5, r3
 8003004:	f04f 0600 	mov.w	r6, #0
 8003008:	196b      	adds	r3, r5, r5
 800300a:	eb46 0406 	adc.w	r4, r6, r6
 800300e:	461a      	mov	r2, r3
 8003010:	4623      	mov	r3, r4
 8003012:	f7fd fd6b 	bl	8000aec <__aeabi_uldivmod>
 8003016:	4603      	mov	r3, r0
 8003018:	460c      	mov	r4, r1
 800301a:	461a      	mov	r2, r3
 800301c:	4b2c      	ldr	r3, [pc, #176]	; (80030d0 <UART_SetConfig+0x384>)
 800301e:	fba3 1302 	umull	r1, r3, r3, r2
 8003022:	095b      	lsrs	r3, r3, #5
 8003024:	2164      	movs	r1, #100	; 0x64
 8003026:	fb01 f303 	mul.w	r3, r1, r3
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	3332      	adds	r3, #50	; 0x32
 8003030:	4a27      	ldr	r2, [pc, #156]	; (80030d0 <UART_SetConfig+0x384>)
 8003032:	fba2 2303 	umull	r2, r3, r2, r3
 8003036:	095b      	lsrs	r3, r3, #5
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800303e:	4498      	add	r8, r3
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	461d      	mov	r5, r3
 8003044:	f04f 0600 	mov.w	r6, #0
 8003048:	46a9      	mov	r9, r5
 800304a:	46b2      	mov	sl, r6
 800304c:	eb19 0309 	adds.w	r3, r9, r9
 8003050:	eb4a 040a 	adc.w	r4, sl, sl
 8003054:	4699      	mov	r9, r3
 8003056:	46a2      	mov	sl, r4
 8003058:	eb19 0905 	adds.w	r9, r9, r5
 800305c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003060:	f04f 0100 	mov.w	r1, #0
 8003064:	f04f 0200 	mov.w	r2, #0
 8003068:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800306c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003070:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003074:	4689      	mov	r9, r1
 8003076:	4692      	mov	sl, r2
 8003078:	eb19 0005 	adds.w	r0, r9, r5
 800307c:	eb4a 0106 	adc.w	r1, sl, r6
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	461d      	mov	r5, r3
 8003086:	f04f 0600 	mov.w	r6, #0
 800308a:	196b      	adds	r3, r5, r5
 800308c:	eb46 0406 	adc.w	r4, r6, r6
 8003090:	461a      	mov	r2, r3
 8003092:	4623      	mov	r3, r4
 8003094:	f7fd fd2a 	bl	8000aec <__aeabi_uldivmod>
 8003098:	4603      	mov	r3, r0
 800309a:	460c      	mov	r4, r1
 800309c:	461a      	mov	r2, r3
 800309e:	4b0c      	ldr	r3, [pc, #48]	; (80030d0 <UART_SetConfig+0x384>)
 80030a0:	fba3 1302 	umull	r1, r3, r3, r2
 80030a4:	095b      	lsrs	r3, r3, #5
 80030a6:	2164      	movs	r1, #100	; 0x64
 80030a8:	fb01 f303 	mul.w	r3, r1, r3
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	3332      	adds	r3, #50	; 0x32
 80030b2:	4a07      	ldr	r2, [pc, #28]	; (80030d0 <UART_SetConfig+0x384>)
 80030b4:	fba2 2303 	umull	r2, r3, r2, r3
 80030b8:	095b      	lsrs	r3, r3, #5
 80030ba:	f003 0207 	and.w	r2, r3, #7
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4442      	add	r2, r8
 80030c4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80030c6:	e1b2      	b.n	800342e <UART_SetConfig+0x6e2>
 80030c8:	40011000 	.word	0x40011000
 80030cc:	40011400 	.word	0x40011400
 80030d0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4ad7      	ldr	r2, [pc, #860]	; (8003438 <UART_SetConfig+0x6ec>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d005      	beq.n	80030ea <UART_SetConfig+0x39e>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4ad6      	ldr	r2, [pc, #856]	; (800343c <UART_SetConfig+0x6f0>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	f040 80d1 	bne.w	800328c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80030ea:	f7ff fdcd 	bl	8002c88 <HAL_RCC_GetPCLK2Freq>
 80030ee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	469a      	mov	sl, r3
 80030f4:	f04f 0b00 	mov.w	fp, #0
 80030f8:	46d0      	mov	r8, sl
 80030fa:	46d9      	mov	r9, fp
 80030fc:	eb18 0308 	adds.w	r3, r8, r8
 8003100:	eb49 0409 	adc.w	r4, r9, r9
 8003104:	4698      	mov	r8, r3
 8003106:	46a1      	mov	r9, r4
 8003108:	eb18 080a 	adds.w	r8, r8, sl
 800310c:	eb49 090b 	adc.w	r9, r9, fp
 8003110:	f04f 0100 	mov.w	r1, #0
 8003114:	f04f 0200 	mov.w	r2, #0
 8003118:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800311c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003120:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003124:	4688      	mov	r8, r1
 8003126:	4691      	mov	r9, r2
 8003128:	eb1a 0508 	adds.w	r5, sl, r8
 800312c:	eb4b 0609 	adc.w	r6, fp, r9
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	4619      	mov	r1, r3
 8003136:	f04f 0200 	mov.w	r2, #0
 800313a:	f04f 0300 	mov.w	r3, #0
 800313e:	f04f 0400 	mov.w	r4, #0
 8003142:	0094      	lsls	r4, r2, #2
 8003144:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003148:	008b      	lsls	r3, r1, #2
 800314a:	461a      	mov	r2, r3
 800314c:	4623      	mov	r3, r4
 800314e:	4628      	mov	r0, r5
 8003150:	4631      	mov	r1, r6
 8003152:	f7fd fccb 	bl	8000aec <__aeabi_uldivmod>
 8003156:	4603      	mov	r3, r0
 8003158:	460c      	mov	r4, r1
 800315a:	461a      	mov	r2, r3
 800315c:	4bb8      	ldr	r3, [pc, #736]	; (8003440 <UART_SetConfig+0x6f4>)
 800315e:	fba3 2302 	umull	r2, r3, r3, r2
 8003162:	095b      	lsrs	r3, r3, #5
 8003164:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	469b      	mov	fp, r3
 800316c:	f04f 0c00 	mov.w	ip, #0
 8003170:	46d9      	mov	r9, fp
 8003172:	46e2      	mov	sl, ip
 8003174:	eb19 0309 	adds.w	r3, r9, r9
 8003178:	eb4a 040a 	adc.w	r4, sl, sl
 800317c:	4699      	mov	r9, r3
 800317e:	46a2      	mov	sl, r4
 8003180:	eb19 090b 	adds.w	r9, r9, fp
 8003184:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003188:	f04f 0100 	mov.w	r1, #0
 800318c:	f04f 0200 	mov.w	r2, #0
 8003190:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003194:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003198:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800319c:	4689      	mov	r9, r1
 800319e:	4692      	mov	sl, r2
 80031a0:	eb1b 0509 	adds.w	r5, fp, r9
 80031a4:	eb4c 060a 	adc.w	r6, ip, sl
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	4619      	mov	r1, r3
 80031ae:	f04f 0200 	mov.w	r2, #0
 80031b2:	f04f 0300 	mov.w	r3, #0
 80031b6:	f04f 0400 	mov.w	r4, #0
 80031ba:	0094      	lsls	r4, r2, #2
 80031bc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80031c0:	008b      	lsls	r3, r1, #2
 80031c2:	461a      	mov	r2, r3
 80031c4:	4623      	mov	r3, r4
 80031c6:	4628      	mov	r0, r5
 80031c8:	4631      	mov	r1, r6
 80031ca:	f7fd fc8f 	bl	8000aec <__aeabi_uldivmod>
 80031ce:	4603      	mov	r3, r0
 80031d0:	460c      	mov	r4, r1
 80031d2:	461a      	mov	r2, r3
 80031d4:	4b9a      	ldr	r3, [pc, #616]	; (8003440 <UART_SetConfig+0x6f4>)
 80031d6:	fba3 1302 	umull	r1, r3, r3, r2
 80031da:	095b      	lsrs	r3, r3, #5
 80031dc:	2164      	movs	r1, #100	; 0x64
 80031de:	fb01 f303 	mul.w	r3, r1, r3
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	011b      	lsls	r3, r3, #4
 80031e6:	3332      	adds	r3, #50	; 0x32
 80031e8:	4a95      	ldr	r2, [pc, #596]	; (8003440 <UART_SetConfig+0x6f4>)
 80031ea:	fba2 2303 	umull	r2, r3, r2, r3
 80031ee:	095b      	lsrs	r3, r3, #5
 80031f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031f4:	4498      	add	r8, r3
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	469b      	mov	fp, r3
 80031fa:	f04f 0c00 	mov.w	ip, #0
 80031fe:	46d9      	mov	r9, fp
 8003200:	46e2      	mov	sl, ip
 8003202:	eb19 0309 	adds.w	r3, r9, r9
 8003206:	eb4a 040a 	adc.w	r4, sl, sl
 800320a:	4699      	mov	r9, r3
 800320c:	46a2      	mov	sl, r4
 800320e:	eb19 090b 	adds.w	r9, r9, fp
 8003212:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003216:	f04f 0100 	mov.w	r1, #0
 800321a:	f04f 0200 	mov.w	r2, #0
 800321e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003222:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003226:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800322a:	4689      	mov	r9, r1
 800322c:	4692      	mov	sl, r2
 800322e:	eb1b 0509 	adds.w	r5, fp, r9
 8003232:	eb4c 060a 	adc.w	r6, ip, sl
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	4619      	mov	r1, r3
 800323c:	f04f 0200 	mov.w	r2, #0
 8003240:	f04f 0300 	mov.w	r3, #0
 8003244:	f04f 0400 	mov.w	r4, #0
 8003248:	0094      	lsls	r4, r2, #2
 800324a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800324e:	008b      	lsls	r3, r1, #2
 8003250:	461a      	mov	r2, r3
 8003252:	4623      	mov	r3, r4
 8003254:	4628      	mov	r0, r5
 8003256:	4631      	mov	r1, r6
 8003258:	f7fd fc48 	bl	8000aec <__aeabi_uldivmod>
 800325c:	4603      	mov	r3, r0
 800325e:	460c      	mov	r4, r1
 8003260:	461a      	mov	r2, r3
 8003262:	4b77      	ldr	r3, [pc, #476]	; (8003440 <UART_SetConfig+0x6f4>)
 8003264:	fba3 1302 	umull	r1, r3, r3, r2
 8003268:	095b      	lsrs	r3, r3, #5
 800326a:	2164      	movs	r1, #100	; 0x64
 800326c:	fb01 f303 	mul.w	r3, r1, r3
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	011b      	lsls	r3, r3, #4
 8003274:	3332      	adds	r3, #50	; 0x32
 8003276:	4a72      	ldr	r2, [pc, #456]	; (8003440 <UART_SetConfig+0x6f4>)
 8003278:	fba2 2303 	umull	r2, r3, r2, r3
 800327c:	095b      	lsrs	r3, r3, #5
 800327e:	f003 020f 	and.w	r2, r3, #15
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4442      	add	r2, r8
 8003288:	609a      	str	r2, [r3, #8]
 800328a:	e0d0      	b.n	800342e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800328c:	f7ff fce8 	bl	8002c60 <HAL_RCC_GetPCLK1Freq>
 8003290:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	469a      	mov	sl, r3
 8003296:	f04f 0b00 	mov.w	fp, #0
 800329a:	46d0      	mov	r8, sl
 800329c:	46d9      	mov	r9, fp
 800329e:	eb18 0308 	adds.w	r3, r8, r8
 80032a2:	eb49 0409 	adc.w	r4, r9, r9
 80032a6:	4698      	mov	r8, r3
 80032a8:	46a1      	mov	r9, r4
 80032aa:	eb18 080a 	adds.w	r8, r8, sl
 80032ae:	eb49 090b 	adc.w	r9, r9, fp
 80032b2:	f04f 0100 	mov.w	r1, #0
 80032b6:	f04f 0200 	mov.w	r2, #0
 80032ba:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80032be:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80032c2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80032c6:	4688      	mov	r8, r1
 80032c8:	4691      	mov	r9, r2
 80032ca:	eb1a 0508 	adds.w	r5, sl, r8
 80032ce:	eb4b 0609 	adc.w	r6, fp, r9
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	4619      	mov	r1, r3
 80032d8:	f04f 0200 	mov.w	r2, #0
 80032dc:	f04f 0300 	mov.w	r3, #0
 80032e0:	f04f 0400 	mov.w	r4, #0
 80032e4:	0094      	lsls	r4, r2, #2
 80032e6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80032ea:	008b      	lsls	r3, r1, #2
 80032ec:	461a      	mov	r2, r3
 80032ee:	4623      	mov	r3, r4
 80032f0:	4628      	mov	r0, r5
 80032f2:	4631      	mov	r1, r6
 80032f4:	f7fd fbfa 	bl	8000aec <__aeabi_uldivmod>
 80032f8:	4603      	mov	r3, r0
 80032fa:	460c      	mov	r4, r1
 80032fc:	461a      	mov	r2, r3
 80032fe:	4b50      	ldr	r3, [pc, #320]	; (8003440 <UART_SetConfig+0x6f4>)
 8003300:	fba3 2302 	umull	r2, r3, r3, r2
 8003304:	095b      	lsrs	r3, r3, #5
 8003306:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	469b      	mov	fp, r3
 800330e:	f04f 0c00 	mov.w	ip, #0
 8003312:	46d9      	mov	r9, fp
 8003314:	46e2      	mov	sl, ip
 8003316:	eb19 0309 	adds.w	r3, r9, r9
 800331a:	eb4a 040a 	adc.w	r4, sl, sl
 800331e:	4699      	mov	r9, r3
 8003320:	46a2      	mov	sl, r4
 8003322:	eb19 090b 	adds.w	r9, r9, fp
 8003326:	eb4a 0a0c 	adc.w	sl, sl, ip
 800332a:	f04f 0100 	mov.w	r1, #0
 800332e:	f04f 0200 	mov.w	r2, #0
 8003332:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003336:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800333a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800333e:	4689      	mov	r9, r1
 8003340:	4692      	mov	sl, r2
 8003342:	eb1b 0509 	adds.w	r5, fp, r9
 8003346:	eb4c 060a 	adc.w	r6, ip, sl
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	4619      	mov	r1, r3
 8003350:	f04f 0200 	mov.w	r2, #0
 8003354:	f04f 0300 	mov.w	r3, #0
 8003358:	f04f 0400 	mov.w	r4, #0
 800335c:	0094      	lsls	r4, r2, #2
 800335e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003362:	008b      	lsls	r3, r1, #2
 8003364:	461a      	mov	r2, r3
 8003366:	4623      	mov	r3, r4
 8003368:	4628      	mov	r0, r5
 800336a:	4631      	mov	r1, r6
 800336c:	f7fd fbbe 	bl	8000aec <__aeabi_uldivmod>
 8003370:	4603      	mov	r3, r0
 8003372:	460c      	mov	r4, r1
 8003374:	461a      	mov	r2, r3
 8003376:	4b32      	ldr	r3, [pc, #200]	; (8003440 <UART_SetConfig+0x6f4>)
 8003378:	fba3 1302 	umull	r1, r3, r3, r2
 800337c:	095b      	lsrs	r3, r3, #5
 800337e:	2164      	movs	r1, #100	; 0x64
 8003380:	fb01 f303 	mul.w	r3, r1, r3
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	011b      	lsls	r3, r3, #4
 8003388:	3332      	adds	r3, #50	; 0x32
 800338a:	4a2d      	ldr	r2, [pc, #180]	; (8003440 <UART_SetConfig+0x6f4>)
 800338c:	fba2 2303 	umull	r2, r3, r2, r3
 8003390:	095b      	lsrs	r3, r3, #5
 8003392:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003396:	4498      	add	r8, r3
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	469b      	mov	fp, r3
 800339c:	f04f 0c00 	mov.w	ip, #0
 80033a0:	46d9      	mov	r9, fp
 80033a2:	46e2      	mov	sl, ip
 80033a4:	eb19 0309 	adds.w	r3, r9, r9
 80033a8:	eb4a 040a 	adc.w	r4, sl, sl
 80033ac:	4699      	mov	r9, r3
 80033ae:	46a2      	mov	sl, r4
 80033b0:	eb19 090b 	adds.w	r9, r9, fp
 80033b4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80033b8:	f04f 0100 	mov.w	r1, #0
 80033bc:	f04f 0200 	mov.w	r2, #0
 80033c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80033c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033cc:	4689      	mov	r9, r1
 80033ce:	4692      	mov	sl, r2
 80033d0:	eb1b 0509 	adds.w	r5, fp, r9
 80033d4:	eb4c 060a 	adc.w	r6, ip, sl
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	4619      	mov	r1, r3
 80033de:	f04f 0200 	mov.w	r2, #0
 80033e2:	f04f 0300 	mov.w	r3, #0
 80033e6:	f04f 0400 	mov.w	r4, #0
 80033ea:	0094      	lsls	r4, r2, #2
 80033ec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80033f0:	008b      	lsls	r3, r1, #2
 80033f2:	461a      	mov	r2, r3
 80033f4:	4623      	mov	r3, r4
 80033f6:	4628      	mov	r0, r5
 80033f8:	4631      	mov	r1, r6
 80033fa:	f7fd fb77 	bl	8000aec <__aeabi_uldivmod>
 80033fe:	4603      	mov	r3, r0
 8003400:	460c      	mov	r4, r1
 8003402:	461a      	mov	r2, r3
 8003404:	4b0e      	ldr	r3, [pc, #56]	; (8003440 <UART_SetConfig+0x6f4>)
 8003406:	fba3 1302 	umull	r1, r3, r3, r2
 800340a:	095b      	lsrs	r3, r3, #5
 800340c:	2164      	movs	r1, #100	; 0x64
 800340e:	fb01 f303 	mul.w	r3, r1, r3
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	011b      	lsls	r3, r3, #4
 8003416:	3332      	adds	r3, #50	; 0x32
 8003418:	4a09      	ldr	r2, [pc, #36]	; (8003440 <UART_SetConfig+0x6f4>)
 800341a:	fba2 2303 	umull	r2, r3, r2, r3
 800341e:	095b      	lsrs	r3, r3, #5
 8003420:	f003 020f 	and.w	r2, r3, #15
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4442      	add	r2, r8
 800342a:	609a      	str	r2, [r3, #8]
}
 800342c:	e7ff      	b.n	800342e <UART_SetConfig+0x6e2>
 800342e:	bf00      	nop
 8003430:	3714      	adds	r7, #20
 8003432:	46bd      	mov	sp, r7
 8003434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003438:	40011000 	.word	0x40011000
 800343c:	40011400 	.word	0x40011400
 8003440:	51eb851f 	.word	0x51eb851f

08003444 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003444:	b084      	sub	sp, #16
 8003446:	b580      	push	{r7, lr}
 8003448:	b084      	sub	sp, #16
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
 800344e:	f107 001c 	add.w	r0, r7, #28
 8003452:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003458:	2b01      	cmp	r3, #1
 800345a:	d122      	bne.n	80034a2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003460:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003470:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003484:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003486:	2b01      	cmp	r3, #1
 8003488:	d105      	bne.n	8003496 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f001 f872 	bl	8004580 <USB_CoreReset>
 800349c:	4603      	mov	r3, r0
 800349e:	73fb      	strb	r3, [r7, #15]
 80034a0:	e01a      	b.n	80034d8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f001 f866 	bl	8004580 <USB_CoreReset>
 80034b4:	4603      	mov	r3, r0
 80034b6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80034b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d106      	bne.n	80034cc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	639a      	str	r2, [r3, #56]	; 0x38
 80034ca:	e005      	b.n	80034d8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80034d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d10b      	bne.n	80034f6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f043 0206 	orr.w	r2, r3, #6
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f043 0220 	orr.w	r2, r3, #32
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80034f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3710      	adds	r7, #16
 80034fc:	46bd      	mov	sp, r7
 80034fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003502:	b004      	add	sp, #16
 8003504:	4770      	bx	lr

08003506 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003506:	b480      	push	{r7}
 8003508:	b083      	sub	sp, #12
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f043 0201 	orr.w	r2, r3, #1
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f023 0201 	bic.w	r2, r3, #1
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b082      	sub	sp, #8
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
 8003552:	460b      	mov	r3, r1
 8003554:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003562:	78fb      	ldrb	r3, [r7, #3]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d106      	bne.n	8003576 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	60da      	str	r2, [r3, #12]
 8003574:	e00b      	b.n	800358e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003576:	78fb      	ldrb	r3, [r7, #3]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d106      	bne.n	800358a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	60da      	str	r2, [r3, #12]
 8003588:	e001      	b.n	800358e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e003      	b.n	8003596 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800358e:	2032      	movs	r0, #50	; 0x32
 8003590:	f7fe f940 	bl	8001814 <HAL_Delay>

  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
	...

080035a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80035a0:	b084      	sub	sp, #16
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b086      	sub	sp, #24
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
 80035aa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80035ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80035b2:	2300      	movs	r3, #0
 80035b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80035ba:	2300      	movs	r3, #0
 80035bc:	613b      	str	r3, [r7, #16]
 80035be:	e009      	b.n	80035d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	3340      	adds	r3, #64	; 0x40
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4413      	add	r3, r2
 80035ca:	2200      	movs	r2, #0
 80035cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	3301      	adds	r3, #1
 80035d2:	613b      	str	r3, [r7, #16]
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	2b0e      	cmp	r3, #14
 80035d8:	d9f2      	bls.n	80035c0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80035da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d11c      	bne.n	800361a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035ee:	f043 0302 	orr.w	r3, r3, #2
 80035f2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003604:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003610:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	639a      	str	r2, [r3, #56]	; 0x38
 8003618:	e00b      	b.n	8003632 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003638:	461a      	mov	r2, r3
 800363a:	2300      	movs	r3, #0
 800363c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003644:	4619      	mov	r1, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800364c:	461a      	mov	r2, r3
 800364e:	680b      	ldr	r3, [r1, #0]
 8003650:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003654:	2b01      	cmp	r3, #1
 8003656:	d10c      	bne.n	8003672 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800365a:	2b00      	cmp	r3, #0
 800365c:	d104      	bne.n	8003668 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800365e:	2100      	movs	r1, #0
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f000 f949 	bl	80038f8 <USB_SetDevSpeed>
 8003666:	e008      	b.n	800367a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003668:	2101      	movs	r1, #1
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f944 	bl	80038f8 <USB_SetDevSpeed>
 8003670:	e003      	b.n	800367a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003672:	2103      	movs	r1, #3
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 f93f 	bl	80038f8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800367a:	2110      	movs	r1, #16
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 f8f3 	bl	8003868 <USB_FlushTxFifo>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 f911 	bl	80038b4 <USB_FlushRxFifo>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d001      	beq.n	800369c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036a2:	461a      	mov	r2, r3
 80036a4:	2300      	movs	r3, #0
 80036a6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ae:	461a      	mov	r2, r3
 80036b0:	2300      	movs	r3, #0
 80036b2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ba:	461a      	mov	r2, r3
 80036bc:	2300      	movs	r3, #0
 80036be:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80036c0:	2300      	movs	r3, #0
 80036c2:	613b      	str	r3, [r7, #16]
 80036c4:	e043      	b.n	800374e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	015a      	lsls	r2, r3, #5
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	4413      	add	r3, r2
 80036ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80036d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036dc:	d118      	bne.n	8003710 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10a      	bne.n	80036fa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	015a      	lsls	r2, r3, #5
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	4413      	add	r3, r2
 80036ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036f0:	461a      	mov	r2, r3
 80036f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80036f6:	6013      	str	r3, [r2, #0]
 80036f8:	e013      	b.n	8003722 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	015a      	lsls	r2, r3, #5
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	4413      	add	r3, r2
 8003702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003706:	461a      	mov	r2, r3
 8003708:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800370c:	6013      	str	r3, [r2, #0]
 800370e:	e008      	b.n	8003722 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	015a      	lsls	r2, r3, #5
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	4413      	add	r3, r2
 8003718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800371c:	461a      	mov	r2, r3
 800371e:	2300      	movs	r3, #0
 8003720:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	015a      	lsls	r2, r3, #5
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	4413      	add	r3, r2
 800372a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800372e:	461a      	mov	r2, r3
 8003730:	2300      	movs	r3, #0
 8003732:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	015a      	lsls	r2, r3, #5
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	4413      	add	r3, r2
 800373c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003740:	461a      	mov	r2, r3
 8003742:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003746:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	3301      	adds	r3, #1
 800374c:	613b      	str	r3, [r7, #16]
 800374e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	429a      	cmp	r2, r3
 8003754:	d3b7      	bcc.n	80036c6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003756:	2300      	movs	r3, #0
 8003758:	613b      	str	r3, [r7, #16]
 800375a:	e043      	b.n	80037e4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	015a      	lsls	r2, r3, #5
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	4413      	add	r3, r2
 8003764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800376e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003772:	d118      	bne.n	80037a6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d10a      	bne.n	8003790 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	015a      	lsls	r2, r3, #5
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	4413      	add	r3, r2
 8003782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003786:	461a      	mov	r2, r3
 8003788:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800378c:	6013      	str	r3, [r2, #0]
 800378e:	e013      	b.n	80037b8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	015a      	lsls	r2, r3, #5
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	4413      	add	r3, r2
 8003798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800379c:	461a      	mov	r2, r3
 800379e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80037a2:	6013      	str	r3, [r2, #0]
 80037a4:	e008      	b.n	80037b8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	015a      	lsls	r2, r3, #5
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	4413      	add	r3, r2
 80037ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037b2:	461a      	mov	r2, r3
 80037b4:	2300      	movs	r3, #0
 80037b6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	015a      	lsls	r2, r3, #5
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4413      	add	r3, r2
 80037c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037c4:	461a      	mov	r2, r3
 80037c6:	2300      	movs	r3, #0
 80037c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	015a      	lsls	r2, r3, #5
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	4413      	add	r3, r2
 80037d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037d6:	461a      	mov	r2, r3
 80037d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	3301      	adds	r3, #1
 80037e2:	613b      	str	r3, [r7, #16]
 80037e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d3b7      	bcc.n	800375c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037fe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800380c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800380e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003810:	2b00      	cmp	r3, #0
 8003812:	d105      	bne.n	8003820 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	f043 0210 	orr.w	r2, r3, #16
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	699a      	ldr	r2, [r3, #24]
 8003824:	4b0f      	ldr	r3, [pc, #60]	; (8003864 <USB_DevInit+0x2c4>)
 8003826:	4313      	orrs	r3, r2
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800382c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800382e:	2b00      	cmp	r3, #0
 8003830:	d005      	beq.n	800383e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	f043 0208 	orr.w	r2, r3, #8
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800383e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003840:	2b01      	cmp	r3, #1
 8003842:	d107      	bne.n	8003854 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800384c:	f043 0304 	orr.w	r3, r3, #4
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003854:	7dfb      	ldrb	r3, [r7, #23]
}
 8003856:	4618      	mov	r0, r3
 8003858:	3718      	adds	r7, #24
 800385a:	46bd      	mov	sp, r7
 800385c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003860:	b004      	add	sp, #16
 8003862:	4770      	bx	lr
 8003864:	803c3800 	.word	0x803c3800

08003868 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003872:	2300      	movs	r3, #0
 8003874:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	019b      	lsls	r3, r3, #6
 800387a:	f043 0220 	orr.w	r2, r3, #32
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	3301      	adds	r3, #1
 8003886:	60fb      	str	r3, [r7, #12]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4a09      	ldr	r2, [pc, #36]	; (80038b0 <USB_FlushTxFifo+0x48>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d901      	bls.n	8003894 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e006      	b.n	80038a2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	f003 0320 	and.w	r3, r3, #32
 800389c:	2b20      	cmp	r3, #32
 800389e:	d0f0      	beq.n	8003882 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3714      	adds	r7, #20
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	00030d40 	.word	0x00030d40

080038b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80038bc:	2300      	movs	r3, #0
 80038be:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2210      	movs	r2, #16
 80038c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	3301      	adds	r3, #1
 80038ca:	60fb      	str	r3, [r7, #12]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	4a09      	ldr	r2, [pc, #36]	; (80038f4 <USB_FlushRxFifo+0x40>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d901      	bls.n	80038d8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e006      	b.n	80038e6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	f003 0310 	and.w	r3, r3, #16
 80038e0:	2b10      	cmp	r3, #16
 80038e2:	d0f0      	beq.n	80038c6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3714      	adds	r7, #20
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	00030d40 	.word	0x00030d40

080038f8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	460b      	mov	r3, r1
 8003902:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	78fb      	ldrb	r3, [r7, #3]
 8003912:	68f9      	ldr	r1, [r7, #12]
 8003914:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003918:	4313      	orrs	r3, r2
 800391a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3714      	adds	r7, #20
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800392a:	b480      	push	{r7}
 800392c:	b085      	sub	sp, #20
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
 8003932:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	785b      	ldrb	r3, [r3, #1]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d13a      	bne.n	80039bc <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800394c:	69da      	ldr	r2, [r3, #28]
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	f003 030f 	and.w	r3, r3, #15
 8003956:	2101      	movs	r1, #1
 8003958:	fa01 f303 	lsl.w	r3, r1, r3
 800395c:	b29b      	uxth	r3, r3
 800395e:	68f9      	ldr	r1, [r7, #12]
 8003960:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003964:	4313      	orrs	r3, r2
 8003966:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	015a      	lsls	r2, r3, #5
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	4413      	add	r3, r2
 8003970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d155      	bne.n	8003a2a <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	015a      	lsls	r2, r3, #5
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	4413      	add	r3, r2
 8003986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	78db      	ldrb	r3, [r3, #3]
 8003998:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800399a:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	059b      	lsls	r3, r3, #22
 80039a0:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80039a2:	4313      	orrs	r3, r2
 80039a4:	68ba      	ldr	r2, [r7, #8]
 80039a6:	0151      	lsls	r1, r2, #5
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	440a      	add	r2, r1
 80039ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039b8:	6013      	str	r3, [r2, #0]
 80039ba:	e036      	b.n	8003a2a <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039c2:	69da      	ldr	r2, [r3, #28]
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	f003 030f 	and.w	r3, r3, #15
 80039cc:	2101      	movs	r1, #1
 80039ce:	fa01 f303 	lsl.w	r3, r1, r3
 80039d2:	041b      	lsls	r3, r3, #16
 80039d4:	68f9      	ldr	r1, [r7, #12]
 80039d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039da:	4313      	orrs	r3, r2
 80039dc:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	015a      	lsls	r2, r3, #5
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	4413      	add	r3, r2
 80039e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d11a      	bne.n	8003a2a <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	015a      	lsls	r2, r3, #5
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	4413      	add	r3, r2
 80039fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	78db      	ldrb	r3, [r3, #3]
 8003a0e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003a10:	430b      	orrs	r3, r1
 8003a12:	4313      	orrs	r3, r2
 8003a14:	68ba      	ldr	r2, [r7, #8]
 8003a16:	0151      	lsls	r1, r2, #5
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	440a      	add	r2, r1
 8003a1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a28:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3714      	adds	r7, #20
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	785b      	ldrb	r3, [r3, #1]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d161      	bne.n	8003b18 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	015a      	lsls	r2, r3, #5
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a6a:	d11f      	bne.n	8003aac <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	015a      	lsls	r2, r3, #5
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	4413      	add	r3, r2
 8003a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68ba      	ldr	r2, [r7, #8]
 8003a7c:	0151      	lsls	r1, r2, #5
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	440a      	add	r2, r1
 8003a82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a86:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003a8a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	015a      	lsls	r2, r3, #5
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	4413      	add	r3, r2
 8003a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68ba      	ldr	r2, [r7, #8]
 8003a9c:	0151      	lsls	r1, r2, #5
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	440a      	add	r2, r1
 8003aa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003aa6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003aaa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ab2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	f003 030f 	and.w	r3, r3, #15
 8003abc:	2101      	movs	r1, #1
 8003abe:	fa01 f303 	lsl.w	r3, r1, r3
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	68f9      	ldr	r1, [r7, #12]
 8003ac8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003acc:	4013      	ands	r3, r2
 8003ace:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ad6:	69da      	ldr	r2, [r3, #28]
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	f003 030f 	and.w	r3, r3, #15
 8003ae0:	2101      	movs	r1, #1
 8003ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	43db      	mvns	r3, r3
 8003aea:	68f9      	ldr	r1, [r7, #12]
 8003aec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003af0:	4013      	ands	r3, r2
 8003af2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	015a      	lsls	r2, r3, #5
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4413      	add	r3, r2
 8003afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	0159      	lsls	r1, r3, #5
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	440b      	add	r3, r1
 8003b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b0e:	4619      	mov	r1, r3
 8003b10:	4b35      	ldr	r3, [pc, #212]	; (8003be8 <USB_DeactivateEndpoint+0x1b0>)
 8003b12:	4013      	ands	r3, r2
 8003b14:	600b      	str	r3, [r1, #0]
 8003b16:	e060      	b.n	8003bda <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	015a      	lsls	r2, r3, #5
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	4413      	add	r3, r2
 8003b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b2e:	d11f      	bne.n	8003b70 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	015a      	lsls	r2, r3, #5
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	4413      	add	r3, r2
 8003b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	0151      	lsls	r1, r2, #5
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	440a      	add	r2, r1
 8003b46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b4a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b4e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	015a      	lsls	r2, r3, #5
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	4413      	add	r3, r2
 8003b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68ba      	ldr	r2, [r7, #8]
 8003b60:	0151      	lsls	r1, r2, #5
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	440a      	add	r2, r1
 8003b66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b6e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	f003 030f 	and.w	r3, r3, #15
 8003b80:	2101      	movs	r1, #1
 8003b82:	fa01 f303 	lsl.w	r3, r1, r3
 8003b86:	041b      	lsls	r3, r3, #16
 8003b88:	43db      	mvns	r3, r3
 8003b8a:	68f9      	ldr	r1, [r7, #12]
 8003b8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b90:	4013      	ands	r3, r2
 8003b92:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b9a:	69da      	ldr	r2, [r3, #28]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	f003 030f 	and.w	r3, r3, #15
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8003baa:	041b      	lsls	r3, r3, #16
 8003bac:	43db      	mvns	r3, r3
 8003bae:	68f9      	ldr	r1, [r7, #12]
 8003bb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	015a      	lsls	r2, r3, #5
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	0159      	lsls	r1, r3, #5
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	440b      	add	r3, r1
 8003bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	4b05      	ldr	r3, [pc, #20]	; (8003bec <USB_DeactivateEndpoint+0x1b4>)
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3714      	adds	r7, #20
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr
 8003be8:	ec337800 	.word	0xec337800
 8003bec:	eff37800 	.word	0xeff37800

08003bf0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b08a      	sub	sp, #40	; 0x28
 8003bf4:	af02      	add	r7, sp, #8
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	785b      	ldrb	r3, [r3, #1]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	f040 815c 	bne.w	8003eca <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d132      	bne.n	8003c80 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	015a      	lsls	r2, r3, #5
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	4413      	add	r3, r2
 8003c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	0151      	lsls	r1, r2, #5
 8003c2c:	69fa      	ldr	r2, [r7, #28]
 8003c2e:	440a      	add	r2, r1
 8003c30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c34:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003c38:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003c3c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	015a      	lsls	r2, r3, #5
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	4413      	add	r3, r2
 8003c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	0151      	lsls	r1, r2, #5
 8003c50:	69fa      	ldr	r2, [r7, #28]
 8003c52:	440a      	add	r2, r1
 8003c54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c5c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	015a      	lsls	r2, r3, #5
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	4413      	add	r3, r2
 8003c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	0151      	lsls	r1, r2, #5
 8003c70:	69fa      	ldr	r2, [r7, #28]
 8003c72:	440a      	add	r2, r1
 8003c74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c78:	0cdb      	lsrs	r3, r3, #19
 8003c7a:	04db      	lsls	r3, r3, #19
 8003c7c:	6113      	str	r3, [r2, #16]
 8003c7e:	e074      	b.n	8003d6a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	015a      	lsls	r2, r3, #5
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	4413      	add	r3, r2
 8003c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	0151      	lsls	r1, r2, #5
 8003c92:	69fa      	ldr	r2, [r7, #28]
 8003c94:	440a      	add	r2, r1
 8003c96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c9a:	0cdb      	lsrs	r3, r3, #19
 8003c9c:	04db      	lsls	r3, r3, #19
 8003c9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	015a      	lsls	r2, r3, #5
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	69ba      	ldr	r2, [r7, #24]
 8003cb0:	0151      	lsls	r1, r2, #5
 8003cb2:	69fa      	ldr	r2, [r7, #28]
 8003cb4:	440a      	add	r2, r1
 8003cb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003cbe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003cc2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	015a      	lsls	r2, r3, #5
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	4413      	add	r3, r2
 8003ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cd0:	691a      	ldr	r2, [r3, #16]
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	6959      	ldr	r1, [r3, #20]
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	440b      	add	r3, r1
 8003cdc:	1e59      	subs	r1, r3, #1
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ce6:	04d9      	lsls	r1, r3, #19
 8003ce8:	4b9d      	ldr	r3, [pc, #628]	; (8003f60 <USB_EPStartXfer+0x370>)
 8003cea:	400b      	ands	r3, r1
 8003cec:	69b9      	ldr	r1, [r7, #24]
 8003cee:	0148      	lsls	r0, r1, #5
 8003cf0:	69f9      	ldr	r1, [r7, #28]
 8003cf2:	4401      	add	r1, r0
 8003cf4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	015a      	lsls	r2, r3, #5
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	4413      	add	r3, r2
 8003d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d08:	691a      	ldr	r2, [r3, #16]
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d12:	69b9      	ldr	r1, [r7, #24]
 8003d14:	0148      	lsls	r0, r1, #5
 8003d16:	69f9      	ldr	r1, [r7, #28]
 8003d18:	4401      	add	r1, r0
 8003d1a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	78db      	ldrb	r3, [r3, #3]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d11f      	bne.n	8003d6a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	015a      	lsls	r2, r3, #5
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	4413      	add	r3, r2
 8003d32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	0151      	lsls	r1, r2, #5
 8003d3c:	69fa      	ldr	r2, [r7, #28]
 8003d3e:	440a      	add	r2, r1
 8003d40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d44:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003d48:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	015a      	lsls	r2, r3, #5
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	4413      	add	r3, r2
 8003d52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	0151      	lsls	r1, r2, #5
 8003d5c:	69fa      	ldr	r2, [r7, #28]
 8003d5e:	440a      	add	r2, r1
 8003d60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d64:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003d68:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003d6a:	79fb      	ldrb	r3, [r7, #7]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d14b      	bne.n	8003e08 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d009      	beq.n	8003d8c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	015a      	lsls	r2, r3, #5
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	4413      	add	r3, r2
 8003d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d84:	461a      	mov	r2, r3
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	78db      	ldrb	r3, [r3, #3]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d128      	bne.n	8003de6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d110      	bne.n	8003dc6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	015a      	lsls	r2, r3, #5
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	4413      	add	r3, r2
 8003dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	69ba      	ldr	r2, [r7, #24]
 8003db4:	0151      	lsls	r1, r2, #5
 8003db6:	69fa      	ldr	r2, [r7, #28]
 8003db8:	440a      	add	r2, r1
 8003dba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dbe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003dc2:	6013      	str	r3, [r2, #0]
 8003dc4:	e00f      	b.n	8003de6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	015a      	lsls	r2, r3, #5
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	4413      	add	r3, r2
 8003dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	0151      	lsls	r1, r2, #5
 8003dd8:	69fa      	ldr	r2, [r7, #28]
 8003dda:	440a      	add	r2, r1
 8003ddc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003de4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	015a      	lsls	r2, r3, #5
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	4413      	add	r3, r2
 8003dee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	0151      	lsls	r1, r2, #5
 8003df8:	69fa      	ldr	r2, [r7, #28]
 8003dfa:	440a      	add	r2, r1
 8003dfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e00:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003e04:	6013      	str	r3, [r2, #0]
 8003e06:	e12f      	b.n	8004068 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	015a      	lsls	r2, r3, #5
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	4413      	add	r3, r2
 8003e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	69ba      	ldr	r2, [r7, #24]
 8003e18:	0151      	lsls	r1, r2, #5
 8003e1a:	69fa      	ldr	r2, [r7, #28]
 8003e1c:	440a      	add	r2, r1
 8003e1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e22:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003e26:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	78db      	ldrb	r3, [r3, #3]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d015      	beq.n	8003e5c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f000 8117 	beq.w	8004068 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	f003 030f 	and.w	r3, r3, #15
 8003e4a:	2101      	movs	r1, #1
 8003e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e50:	69f9      	ldr	r1, [r7, #28]
 8003e52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e56:	4313      	orrs	r3, r2
 8003e58:	634b      	str	r3, [r1, #52]	; 0x34
 8003e5a:	e105      	b.n	8004068 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d110      	bne.n	8003e8e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	015a      	lsls	r2, r3, #5
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	4413      	add	r3, r2
 8003e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	69ba      	ldr	r2, [r7, #24]
 8003e7c:	0151      	lsls	r1, r2, #5
 8003e7e:	69fa      	ldr	r2, [r7, #28]
 8003e80:	440a      	add	r2, r1
 8003e82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e86:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e8a:	6013      	str	r3, [r2, #0]
 8003e8c:	e00f      	b.n	8003eae <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	015a      	lsls	r2, r3, #5
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	4413      	add	r3, r2
 8003e96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	69ba      	ldr	r2, [r7, #24]
 8003e9e:	0151      	lsls	r1, r2, #5
 8003ea0:	69fa      	ldr	r2, [r7, #28]
 8003ea2:	440a      	add	r2, r1
 8003ea4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eac:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	68d9      	ldr	r1, [r3, #12]
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	781a      	ldrb	r2, [r3, #0]
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	b298      	uxth	r0, r3
 8003ebc:	79fb      	ldrb	r3, [r7, #7]
 8003ebe:	9300      	str	r3, [sp, #0]
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f000 fa2b 	bl	800431e <USB_WritePacket>
 8003ec8:	e0ce      	b.n	8004068 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	015a      	lsls	r2, r3, #5
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	0151      	lsls	r1, r2, #5
 8003edc:	69fa      	ldr	r2, [r7, #28]
 8003ede:	440a      	add	r2, r1
 8003ee0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ee4:	0cdb      	lsrs	r3, r3, #19
 8003ee6:	04db      	lsls	r3, r3, #19
 8003ee8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	015a      	lsls	r2, r3, #5
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	0151      	lsls	r1, r2, #5
 8003efc:	69fa      	ldr	r2, [r7, #28]
 8003efe:	440a      	add	r2, r1
 8003f00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f04:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003f08:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003f0c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d126      	bne.n	8003f64 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	015a      	lsls	r2, r3, #5
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f22:	691a      	ldr	r2, [r3, #16]
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f2c:	69b9      	ldr	r1, [r7, #24]
 8003f2e:	0148      	lsls	r0, r1, #5
 8003f30:	69f9      	ldr	r1, [r7, #28]
 8003f32:	4401      	add	r1, r0
 8003f34:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	015a      	lsls	r2, r3, #5
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	4413      	add	r3, r2
 8003f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	69ba      	ldr	r2, [r7, #24]
 8003f4c:	0151      	lsls	r1, r2, #5
 8003f4e:	69fa      	ldr	r2, [r7, #28]
 8003f50:	440a      	add	r2, r1
 8003f52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f5a:	6113      	str	r3, [r2, #16]
 8003f5c:	e036      	b.n	8003fcc <USB_EPStartXfer+0x3dc>
 8003f5e:	bf00      	nop
 8003f60:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	695a      	ldr	r2, [r3, #20]
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	1e5a      	subs	r2, r3, #1
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f78:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	015a      	lsls	r2, r3, #5
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	4413      	add	r3, r2
 8003f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f86:	691a      	ldr	r2, [r3, #16]
 8003f88:	8afb      	ldrh	r3, [r7, #22]
 8003f8a:	04d9      	lsls	r1, r3, #19
 8003f8c:	4b39      	ldr	r3, [pc, #228]	; (8004074 <USB_EPStartXfer+0x484>)
 8003f8e:	400b      	ands	r3, r1
 8003f90:	69b9      	ldr	r1, [r7, #24]
 8003f92:	0148      	lsls	r0, r1, #5
 8003f94:	69f9      	ldr	r1, [r7, #28]
 8003f96:	4401      	add	r1, r0
 8003f98:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	015a      	lsls	r2, r3, #5
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fac:	691a      	ldr	r2, [r3, #16]
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	8af9      	ldrh	r1, [r7, #22]
 8003fb4:	fb01 f303 	mul.w	r3, r1, r3
 8003fb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fbc:	69b9      	ldr	r1, [r7, #24]
 8003fbe:	0148      	lsls	r0, r1, #5
 8003fc0:	69f9      	ldr	r1, [r7, #28]
 8003fc2:	4401      	add	r1, r0
 8003fc4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003fcc:	79fb      	ldrb	r3, [r7, #7]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d10d      	bne.n	8003fee <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d009      	beq.n	8003fee <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	68d9      	ldr	r1, [r3, #12]
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	015a      	lsls	r2, r3, #5
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fea:	460a      	mov	r2, r1
 8003fec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	78db      	ldrb	r3, [r3, #3]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d128      	bne.n	8004048 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004002:	2b00      	cmp	r3, #0
 8004004:	d110      	bne.n	8004028 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	015a      	lsls	r2, r3, #5
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	4413      	add	r3, r2
 800400e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	0151      	lsls	r1, r2, #5
 8004018:	69fa      	ldr	r2, [r7, #28]
 800401a:	440a      	add	r2, r1
 800401c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004020:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004024:	6013      	str	r3, [r2, #0]
 8004026:	e00f      	b.n	8004048 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	015a      	lsls	r2, r3, #5
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	4413      	add	r3, r2
 8004030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	0151      	lsls	r1, r2, #5
 800403a:	69fa      	ldr	r2, [r7, #28]
 800403c:	440a      	add	r2, r1
 800403e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004042:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004046:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	015a      	lsls	r2, r3, #5
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	4413      	add	r3, r2
 8004050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	0151      	lsls	r1, r2, #5
 800405a:	69fa      	ldr	r2, [r7, #28]
 800405c:	440a      	add	r2, r1
 800405e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004062:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004066:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3720      	adds	r7, #32
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	1ff80000 	.word	0x1ff80000

08004078 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004078:	b480      	push	{r7}
 800407a:	b087      	sub	sp, #28
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	4613      	mov	r3, r2
 8004084:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	785b      	ldrb	r3, [r3, #1]
 8004094:	2b01      	cmp	r3, #1
 8004096:	f040 80cd 	bne.w	8004234 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d132      	bne.n	8004108 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	015a      	lsls	r2, r3, #5
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	4413      	add	r3, r2
 80040aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	0151      	lsls	r1, r2, #5
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	440a      	add	r2, r1
 80040b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80040c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80040c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	015a      	lsls	r2, r3, #5
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	4413      	add	r3, r2
 80040ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	0151      	lsls	r1, r2, #5
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	440a      	add	r2, r1
 80040dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80040e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	015a      	lsls	r2, r3, #5
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	4413      	add	r3, r2
 80040ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	0151      	lsls	r1, r2, #5
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	440a      	add	r2, r1
 80040fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004100:	0cdb      	lsrs	r3, r3, #19
 8004102:	04db      	lsls	r3, r3, #19
 8004104:	6113      	str	r3, [r2, #16]
 8004106:	e04e      	b.n	80041a6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	015a      	lsls	r2, r3, #5
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	4413      	add	r3, r2
 8004110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	0151      	lsls	r1, r2, #5
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	440a      	add	r2, r1
 800411e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004122:	0cdb      	lsrs	r3, r3, #19
 8004124:	04db      	lsls	r3, r3, #19
 8004126:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	015a      	lsls	r2, r3, #5
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	4413      	add	r3, r2
 8004130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	0151      	lsls	r1, r2, #5
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	440a      	add	r2, r1
 800413e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004142:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004146:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800414a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	695a      	ldr	r2, [r3, #20]
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	429a      	cmp	r2, r3
 8004156:	d903      	bls.n	8004160 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	689a      	ldr	r2, [r3, #8]
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	015a      	lsls	r2, r3, #5
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	4413      	add	r3, r2
 8004168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	0151      	lsls	r1, r2, #5
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	440a      	add	r2, r1
 8004176:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800417a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800417e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	015a      	lsls	r2, r3, #5
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	4413      	add	r3, r2
 8004188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800418c:	691a      	ldr	r2, [r3, #16]
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004196:	6939      	ldr	r1, [r7, #16]
 8004198:	0148      	lsls	r0, r1, #5
 800419a:	6979      	ldr	r1, [r7, #20]
 800419c:	4401      	add	r1, r0
 800419e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80041a2:	4313      	orrs	r3, r2
 80041a4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80041a6:	79fb      	ldrb	r3, [r7, #7]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d11e      	bne.n	80041ea <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d009      	beq.n	80041c8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	015a      	lsls	r2, r3, #5
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041c0:	461a      	mov	r2, r3
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	015a      	lsls	r2, r3, #5
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	4413      	add	r3, r2
 80041d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	0151      	lsls	r1, r2, #5
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	440a      	add	r2, r1
 80041de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80041e6:	6013      	str	r3, [r2, #0]
 80041e8:	e092      	b.n	8004310 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	015a      	lsls	r2, r3, #5
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	4413      	add	r3, r2
 80041f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	0151      	lsls	r1, r2, #5
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	440a      	add	r2, r1
 8004200:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004204:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004208:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d07e      	beq.n	8004310 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004218:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	f003 030f 	and.w	r3, r3, #15
 8004222:	2101      	movs	r1, #1
 8004224:	fa01 f303 	lsl.w	r3, r1, r3
 8004228:	6979      	ldr	r1, [r7, #20]
 800422a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800422e:	4313      	orrs	r3, r2
 8004230:	634b      	str	r3, [r1, #52]	; 0x34
 8004232:	e06d      	b.n	8004310 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	015a      	lsls	r2, r3, #5
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	4413      	add	r3, r2
 800423c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	0151      	lsls	r1, r2, #5
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	440a      	add	r2, r1
 800424a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800424e:	0cdb      	lsrs	r3, r3, #19
 8004250:	04db      	lsls	r3, r3, #19
 8004252:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	015a      	lsls	r2, r3, #5
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	4413      	add	r3, r2
 800425c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	0151      	lsls	r1, r2, #5
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	440a      	add	r2, r1
 800426a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800426e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004272:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004276:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d003      	beq.n	8004288 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	689a      	ldr	r2, [r3, #8]
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	015a      	lsls	r2, r3, #5
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	4413      	add	r3, r2
 8004290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	0151      	lsls	r1, r2, #5
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	440a      	add	r2, r1
 800429e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042a6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	015a      	lsls	r2, r3, #5
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	4413      	add	r3, r2
 80042b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042b4:	691a      	ldr	r2, [r3, #16]
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042be:	6939      	ldr	r1, [r7, #16]
 80042c0:	0148      	lsls	r0, r1, #5
 80042c2:	6979      	ldr	r1, [r7, #20]
 80042c4:	4401      	add	r1, r0
 80042c6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80042ca:	4313      	orrs	r3, r2
 80042cc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80042ce:	79fb      	ldrb	r3, [r7, #7]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d10d      	bne.n	80042f0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d009      	beq.n	80042f0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	68d9      	ldr	r1, [r3, #12]
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	015a      	lsls	r2, r3, #5
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	4413      	add	r3, r2
 80042e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ec:	460a      	mov	r2, r1
 80042ee:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	015a      	lsls	r2, r3, #5
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	4413      	add	r3, r2
 80042f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	0151      	lsls	r1, r2, #5
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	440a      	add	r2, r1
 8004306:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800430a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800430e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	371c      	adds	r7, #28
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800431e:	b480      	push	{r7}
 8004320:	b089      	sub	sp, #36	; 0x24
 8004322:	af00      	add	r7, sp, #0
 8004324:	60f8      	str	r0, [r7, #12]
 8004326:	60b9      	str	r1, [r7, #8]
 8004328:	4611      	mov	r1, r2
 800432a:	461a      	mov	r2, r3
 800432c:	460b      	mov	r3, r1
 800432e:	71fb      	strb	r3, [r7, #7]
 8004330:	4613      	mov	r3, r2
 8004332:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800433c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004340:	2b00      	cmp	r3, #0
 8004342:	d11a      	bne.n	800437a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004344:	88bb      	ldrh	r3, [r7, #4]
 8004346:	3303      	adds	r3, #3
 8004348:	089b      	lsrs	r3, r3, #2
 800434a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800434c:	2300      	movs	r3, #0
 800434e:	61bb      	str	r3, [r7, #24]
 8004350:	e00f      	b.n	8004372 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004352:	79fb      	ldrb	r3, [r7, #7]
 8004354:	031a      	lsls	r2, r3, #12
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	4413      	add	r3, r2
 800435a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800435e:	461a      	mov	r2, r3
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	3304      	adds	r3, #4
 800436a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	3301      	adds	r3, #1
 8004370:	61bb      	str	r3, [r7, #24]
 8004372:	69ba      	ldr	r2, [r7, #24]
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	429a      	cmp	r2, r3
 8004378:	d3eb      	bcc.n	8004352 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	3724      	adds	r7, #36	; 0x24
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004388:	b480      	push	{r7}
 800438a:	b085      	sub	sp, #20
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	785b      	ldrb	r3, [r3, #1]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d12c      	bne.n	80043fe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	015a      	lsls	r2, r3, #5
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	4413      	add	r3, r2
 80043ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	db12      	blt.n	80043dc <USB_EPSetStall+0x54>
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00f      	beq.n	80043dc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	015a      	lsls	r2, r3, #5
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	4413      	add	r3, r2
 80043c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68ba      	ldr	r2, [r7, #8]
 80043cc:	0151      	lsls	r1, r2, #5
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	440a      	add	r2, r1
 80043d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80043da:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	015a      	lsls	r2, r3, #5
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	4413      	add	r3, r2
 80043e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68ba      	ldr	r2, [r7, #8]
 80043ec:	0151      	lsls	r1, r2, #5
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	440a      	add	r2, r1
 80043f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80043fa:	6013      	str	r3, [r2, #0]
 80043fc:	e02b      	b.n	8004456 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	015a      	lsls	r2, r3, #5
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	4413      	add	r3, r2
 8004406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	db12      	blt.n	8004436 <USB_EPSetStall+0xae>
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00f      	beq.n	8004436 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	015a      	lsls	r2, r3, #5
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	4413      	add	r3, r2
 800441e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68ba      	ldr	r2, [r7, #8]
 8004426:	0151      	lsls	r1, r2, #5
 8004428:	68fa      	ldr	r2, [r7, #12]
 800442a:	440a      	add	r2, r1
 800442c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004430:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004434:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	015a      	lsls	r2, r3, #5
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	4413      	add	r3, r2
 800443e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68ba      	ldr	r2, [r7, #8]
 8004446:	0151      	lsls	r1, r2, #5
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	440a      	add	r2, r1
 800444c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004450:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004454:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3714      	adds	r7, #20
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800447e:	f023 0302 	bic.w	r3, r3, #2
 8004482:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8004484:	2003      	movs	r0, #3
 8004486:	f7fd f9c5 	bl	8001814 <HAL_Delay>

  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044ae:	f043 0302 	orr.w	r3, r3, #2
 80044b2:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80044b4:	2003      	movs	r0, #3
 80044b6:	f7fd f9ad 	bl	8001814 <HAL_Delay>

  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b087      	sub	sp, #28
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	460b      	mov	r3, r1
 80044ce:	607a      	str	r2, [r7, #4]
 80044d0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	333c      	adds	r3, #60	; 0x3c
 80044da:	3304      	adds	r3, #4
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	4a26      	ldr	r2, [pc, #152]	; (800457c <USB_EP0_OutStart+0xb8>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d90a      	bls.n	80044fe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044f8:	d101      	bne.n	80044fe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80044fa:	2300      	movs	r3, #0
 80044fc:	e037      	b.n	800456e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004504:	461a      	mov	r2, r3
 8004506:	2300      	movs	r3, #0
 8004508:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004518:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800451c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800452c:	f043 0318 	orr.w	r3, r3, #24
 8004530:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	697a      	ldr	r2, [r7, #20]
 800453c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004540:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004544:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004546:	7afb      	ldrb	r3, [r7, #11]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d10f      	bne.n	800456c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004552:	461a      	mov	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004566:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800456a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	371c      	adds	r7, #28
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	4f54300a 	.word	0x4f54300a

08004580 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004588:	2300      	movs	r3, #0
 800458a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	3301      	adds	r3, #1
 8004590:	60fb      	str	r3, [r7, #12]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	4a13      	ldr	r2, [pc, #76]	; (80045e4 <USB_CoreReset+0x64>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d901      	bls.n	800459e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e01b      	b.n	80045d6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	daf2      	bge.n	800458c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80045a6:	2300      	movs	r3, #0
 80045a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	f043 0201 	orr.w	r2, r3, #1
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	3301      	adds	r3, #1
 80045ba:	60fb      	str	r3, [r7, #12]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	4a09      	ldr	r2, [pc, #36]	; (80045e4 <USB_CoreReset+0x64>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d901      	bls.n	80045c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e006      	b.n	80045d6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d0f0      	beq.n	80045b6 <USB_CoreReset+0x36>

  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3714      	adds	r7, #20
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	00030d40 	.word	0x00030d40

080045e8 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	460b      	mov	r3, r1
 80045f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80045f4:	2010      	movs	r0, #16
 80045f6:	f000 fd91 	bl	800511c <malloc>
 80045fa:	4603      	mov	r3, r0
 80045fc:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d105      	bne.n	8004610 <USBD_HID_Init+0x28>
  {
    pdev->pClassData = NULL;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800460c:	2302      	movs	r3, #2
 800460e:	e01b      	b.n	8004648 <USBD_HID_Init+0x60>
  }

  pdev->pClassData = (void *)hhid;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	7c1b      	ldrb	r3, [r3, #16]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d103      	bne.n	8004628 <USBD_HID_Init+0x40>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2207      	movs	r2, #7
 8004624:	875a      	strh	r2, [r3, #58]	; 0x3a
 8004626:	e002      	b.n	800462e <USBD_HID_Init+0x46>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	220a      	movs	r2, #10
 800462c:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

    /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800462e:	2304      	movs	r3, #4
 8004630:	2203      	movs	r2, #3
 8004632:	2181      	movs	r1, #129	; 0x81
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 fc96 	bl	8004f66 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	460b      	mov	r3, r1
 800465a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800465c:	2181      	movs	r1, #129	; 0x81
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 fca7 	bl	8004fb2 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004676:	2b00      	cmp	r3, #0
 8004678:	d009      	beq.n	800468e <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004680:	4618      	mov	r0, r3
 8004682:	f000 fd53 	bl	800512c <free>
    pdev->pClassData = NULL;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	3708      	adds	r7, #8
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b086      	sub	sp, #24
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80046a8:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80046aa:	2300      	movs	r3, #0
 80046ac:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80046ae:	2300      	movs	r3, #0
 80046b0:	817b      	strh	r3, [r7, #10]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d045      	beq.n	800474a <USBD_HID_Setup+0xb2>
 80046be:	2b20      	cmp	r3, #32
 80046c0:	f040 80d4 	bne.w	800486c <USBD_HID_Setup+0x1d4>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	785b      	ldrb	r3, [r3, #1]
 80046c8:	3b02      	subs	r3, #2
 80046ca:	2b09      	cmp	r3, #9
 80046cc:	d835      	bhi.n	800473a <USBD_HID_Setup+0xa2>
 80046ce:	a201      	add	r2, pc, #4	; (adr r2, 80046d4 <USBD_HID_Setup+0x3c>)
 80046d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d4:	0800472b 	.word	0x0800472b
 80046d8:	0800470b 	.word	0x0800470b
 80046dc:	0800473b 	.word	0x0800473b
 80046e0:	0800473b 	.word	0x0800473b
 80046e4:	0800473b 	.word	0x0800473b
 80046e8:	0800473b 	.word	0x0800473b
 80046ec:	0800473b 	.word	0x0800473b
 80046f0:	0800473b 	.word	0x0800473b
 80046f4:	08004719 	.word	0x08004719
 80046f8:	080046fd 	.word	0x080046fd
    {
    case HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	885b      	ldrh	r3, [r3, #2]
 8004700:	b2db      	uxtb	r3, r3
 8004702:	461a      	mov	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	601a      	str	r2, [r3, #0]
      break;
 8004708:	e01e      	b.n	8004748 <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2201      	movs	r2, #1
 800470e:	4619      	mov	r1, r3
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 fa17 	bl	8004b44 <USBD_CtlSendData>
      break;
 8004716:	e017      	b.n	8004748 <USBD_HID_Setup+0xb0>

    case HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	885b      	ldrh	r3, [r3, #2]
 800471c:	0a1b      	lsrs	r3, r3, #8
 800471e:	b29b      	uxth	r3, r3
 8004720:	b2db      	uxtb	r3, r3
 8004722:	461a      	mov	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	605a      	str	r2, [r3, #4]
      break;
 8004728:	e00e      	b.n	8004748 <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	3304      	adds	r3, #4
 800472e:	2201      	movs	r2, #1
 8004730:	4619      	mov	r1, r3
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 fa06 	bl	8004b44 <USBD_CtlSendData>
      break;
 8004738:	e006      	b.n	8004748 <USBD_HID_Setup+0xb0>

    default:
      USBD_CtlError(pdev, req);
 800473a:	6839      	ldr	r1, [r7, #0]
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 f990 	bl	8004a62 <USBD_CtlError>
      ret = USBD_FAIL;
 8004742:	2303      	movs	r3, #3
 8004744:	75fb      	strb	r3, [r7, #23]
      break;
 8004746:	bf00      	nop
    }
    break;
 8004748:	e097      	b.n	800487a <USBD_HID_Setup+0x1e2>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	785b      	ldrb	r3, [r3, #1]
 800474e:	2b0b      	cmp	r3, #11
 8004750:	f200 8083 	bhi.w	800485a <USBD_HID_Setup+0x1c2>
 8004754:	a201      	add	r2, pc, #4	; (adr r2, 800475c <USBD_HID_Setup+0xc4>)
 8004756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800475a:	bf00      	nop
 800475c:	0800478d 	.word	0x0800478d
 8004760:	08004869 	.word	0x08004869
 8004764:	0800485b 	.word	0x0800485b
 8004768:	0800485b 	.word	0x0800485b
 800476c:	0800485b 	.word	0x0800485b
 8004770:	0800485b 	.word	0x0800485b
 8004774:	080047b5 	.word	0x080047b5
 8004778:	0800485b 	.word	0x0800485b
 800477c:	0800485b 	.word	0x0800485b
 8004780:	0800485b 	.word	0x0800485b
 8004784:	0800480d 	.word	0x0800480d
 8004788:	08004835 	.word	0x08004835
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004792:	2b03      	cmp	r3, #3
 8004794:	d107      	bne.n	80047a6 <USBD_HID_Setup+0x10e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004796:	f107 030a 	add.w	r3, r7, #10
 800479a:	2202      	movs	r2, #2
 800479c:	4619      	mov	r1, r3
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f9d0 	bl	8004b44 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80047a4:	e061      	b.n	800486a <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 80047a6:	6839      	ldr	r1, [r7, #0]
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 f95a 	bl	8004a62 <USBD_CtlError>
        ret = USBD_FAIL;
 80047ae:	2303      	movs	r3, #3
 80047b0:	75fb      	strb	r3, [r7, #23]
      break;
 80047b2:	e05a      	b.n	800486a <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == HID_REPORT_DESC)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	885b      	ldrh	r3, [r3, #2]
 80047b8:	0a1b      	lsrs	r3, r3, #8
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	2b22      	cmp	r3, #34	; 0x22
 80047be:	d108      	bne.n	80047d2 <USBD_HID_Setup+0x13a>
      {
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	88db      	ldrh	r3, [r3, #6]
 80047c4:	2b65      	cmp	r3, #101	; 0x65
 80047c6:	bf28      	it	cs
 80047c8:	2365      	movcs	r3, #101	; 0x65
 80047ca:	82bb      	strh	r3, [r7, #20]
        pbuf = HID_MOUSE_ReportDesc;
 80047cc:	4b2d      	ldr	r3, [pc, #180]	; (8004884 <USBD_HID_Setup+0x1ec>)
 80047ce:	613b      	str	r3, [r7, #16]
 80047d0:	e015      	b.n	80047fe <USBD_HID_Setup+0x166>
      }
      else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	885b      	ldrh	r3, [r3, #2]
 80047d6:	0a1b      	lsrs	r3, r3, #8
 80047d8:	b29b      	uxth	r3, r3
 80047da:	2b21      	cmp	r3, #33	; 0x21
 80047dc:	d108      	bne.n	80047f0 <USBD_HID_Setup+0x158>
      {
        pbuf = USBD_HID_Desc;
 80047de:	4b2a      	ldr	r3, [pc, #168]	; (8004888 <USBD_HID_Setup+0x1f0>)
 80047e0:	613b      	str	r3, [r7, #16]
        len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	88db      	ldrh	r3, [r3, #6]
 80047e6:	2b09      	cmp	r3, #9
 80047e8:	bf28      	it	cs
 80047ea:	2309      	movcs	r3, #9
 80047ec:	82bb      	strh	r3, [r7, #20]
 80047ee:	e006      	b.n	80047fe <USBD_HID_Setup+0x166>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80047f0:	6839      	ldr	r1, [r7, #0]
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 f935 	bl	8004a62 <USBD_CtlError>
        ret = USBD_FAIL;
 80047f8:	2303      	movs	r3, #3
 80047fa:	75fb      	strb	r3, [r7, #23]
        break;
 80047fc:	e035      	b.n	800486a <USBD_HID_Setup+0x1d2>
      }
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80047fe:	8abb      	ldrh	r3, [r7, #20]
 8004800:	461a      	mov	r2, r3
 8004802:	6939      	ldr	r1, [r7, #16]
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 f99d 	bl	8004b44 <USBD_CtlSendData>
      break;
 800480a:	e02e      	b.n	800486a <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004812:	2b03      	cmp	r3, #3
 8004814:	d107      	bne.n	8004826 <USBD_HID_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	3308      	adds	r3, #8
 800481a:	2201      	movs	r2, #1
 800481c:	4619      	mov	r1, r3
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 f990 	bl	8004b44 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004824:	e021      	b.n	800486a <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8004826:	6839      	ldr	r1, [r7, #0]
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 f91a 	bl	8004a62 <USBD_CtlError>
        ret = USBD_FAIL;
 800482e:	2303      	movs	r3, #3
 8004830:	75fb      	strb	r3, [r7, #23]
      break;
 8004832:	e01a      	b.n	800486a <USBD_HID_Setup+0x1d2>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800483a:	2b03      	cmp	r3, #3
 800483c:	d106      	bne.n	800484c <USBD_HID_Setup+0x1b4>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	885b      	ldrh	r3, [r3, #2]
 8004842:	b2db      	uxtb	r3, r3
 8004844:	461a      	mov	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	609a      	str	r2, [r3, #8]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800484a:	e00e      	b.n	800486a <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 800484c:	6839      	ldr	r1, [r7, #0]
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 f907 	bl	8004a62 <USBD_CtlError>
        ret = USBD_FAIL;
 8004854:	2303      	movs	r3, #3
 8004856:	75fb      	strb	r3, [r7, #23]
      break;
 8004858:	e007      	b.n	800486a <USBD_HID_Setup+0x1d2>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800485a:	6839      	ldr	r1, [r7, #0]
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 f900 	bl	8004a62 <USBD_CtlError>
      ret = USBD_FAIL;
 8004862:	2303      	movs	r3, #3
 8004864:	75fb      	strb	r3, [r7, #23]
      break;
 8004866:	e000      	b.n	800486a <USBD_HID_Setup+0x1d2>
      break;
 8004868:	bf00      	nop
    }
    break;
 800486a:	e006      	b.n	800487a <USBD_HID_Setup+0x1e2>

  default:
    USBD_CtlError(pdev, req);
 800486c:	6839      	ldr	r1, [r7, #0]
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 f8f7 	bl	8004a62 <USBD_CtlError>
    ret = USBD_FAIL;
 8004874:	2303      	movs	r3, #3
 8004876:	75fb      	strb	r3, [r7, #23]
    break;
 8004878:	bf00      	nop
  }

  return (uint8_t)ret;
 800487a:	7dfb      	ldrb	r3, [r7, #23]
}
 800487c:	4618      	mov	r0, r3
 800487e:	3718      	adds	r7, #24
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	200000c8 	.word	0x200000c8
 8004888:	200000b0 	.word	0x200000b0

0800488c <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	4613      	mov	r3, r2
 8004898:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80048a0:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80048a8:	2b03      	cmp	r3, #3
 80048aa:	d10c      	bne.n	80048c6 <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	7b1b      	ldrb	r3, [r3, #12]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d108      	bne.n	80048c6 <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	2201      	movs	r2, #1
 80048b8:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 80048ba:	88fb      	ldrh	r3, [r7, #6]
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	2181      	movs	r1, #129	; 0x81
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f000 fbb4 	bl	800502e <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3718      	adds	r7, #24
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <USBD_HID_GetPollingInterval>:
  *         return polling interval from endpoint descriptor
  * @param  pdev: device instance
  * @retval polling interval
  */
uint32_t USBD_HID_GetPollingInterval(USBD_HandleTypeDef *pdev)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  uint32_t polling_interval;

  /* HIGH-speed endpoints */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	7c1b      	ldrb	r3, [r3, #16]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d102      	bne.n	80048e6 <USBD_HID_GetPollingInterval+0x16>
  {
    /* Sets the data transfer polling interval for high speed transfers.
     Values between 1..16 are allowed. Values correspond to interval
     of 2 ^ (bInterval-1). This option (8 ms, corresponds to HID_HS_BINTERVAL */
    polling_interval = (((1U << (HID_HS_BINTERVAL - 1U))) / 8U);
 80048e0:	2308      	movs	r3, #8
 80048e2:	60fb      	str	r3, [r7, #12]
 80048e4:	e001      	b.n	80048ea <USBD_HID_GetPollingInterval+0x1a>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    /* Sets the data transfer polling interval for low and full
    speed transfers */
    polling_interval =  HID_FS_BINTERVAL;
 80048e6:	230a      	movs	r3, #10
 80048e8:	60fb      	str	r3, [r7, #12]
  }

  return ((uint32_t)(polling_interval));
 80048ea:	68fb      	ldr	r3, [r7, #12]
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3714      	adds	r7, #20
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2222      	movs	r2, #34	; 0x22
 8004904:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8004906:	4b03      	ldr	r3, [pc, #12]	; (8004914 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8004908:	4618      	mov	r0, r3
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr
 8004914:	20000044 	.word	0x20000044

08004918 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2222      	movs	r2, #34	; 0x22
 8004924:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 8004926:	4b03      	ldr	r3, [pc, #12]	; (8004934 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8004928:	4618      	mov	r0, r3
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr
 8004934:	20000068 	.word	0x20000068

08004938 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2222      	movs	r2, #34	; 0x22
 8004944:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8004946:	4b03      	ldr	r3, [pc, #12]	; (8004954 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8004948:	4618      	mov	r0, r3
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr
 8004954:	2000008c 	.word	0x2000008c

08004958 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	460b      	mov	r3, r1
 8004962:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800496a:	2200      	movs	r2, #0
 800496c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	220a      	movs	r2, #10
 8004988:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800498a:	4b03      	ldr	r3, [pc, #12]	; (8004998 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800498c:	4618      	mov	r0, r3
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr
 8004998:	200000bc 	.word	0x200000bc

0800499c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b086      	sub	sp, #24
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	4613      	mov	r3, r2
 80049a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d101      	bne.n	80049b4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e025      	b.n	8004a00 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d003      	beq.n	80049d8 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d003      	beq.n	80049e6 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	68ba      	ldr	r2, [r7, #8]
 80049e2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	79fa      	ldrb	r2, [r7, #7]
 80049f2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80049f4:	68f8      	ldr	r0, [r7, #12]
 80049f6:	f000 fa4f 	bl	8004e98 <USBD_LL_Init>
 80049fa:	4603      	mov	r3, r0
 80049fc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80049fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3718      	adds	r7, #24
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004a12:	2300      	movs	r3, #0
 8004a14:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d101      	bne.n	8004a20 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e010      	b.n	8004a42 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	683a      	ldr	r2, [r7, #0]
 8004a24:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a30:	f107 020e 	add.w	r2, r7, #14
 8004a34:	4610      	mov	r0, r2
 8004a36:	4798      	blx	r3
 8004a38:	4602      	mov	r2, r0
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3710      	adds	r7, #16
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b082      	sub	sp, #8
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 fa6c 	bl	8004f30 <USBD_LL_Start>
 8004a58:	4603      	mov	r3, r0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3708      	adds	r7, #8
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b082      	sub	sp, #8
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
 8004a6a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8004a6c:	2180      	movs	r1, #128	; 0x80
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 fabe 	bl	8004ff0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8004a74:	2100      	movs	r1, #0
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 faba 	bl	8004ff0 <USBD_LL_StallEP>
}
 8004a7c:	bf00      	nop
 8004a7e:	3708      	adds	r7, #8
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b086      	sub	sp, #24
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8004a90:	2300      	movs	r3, #0
 8004a92:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d036      	beq.n	8004b08 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8004a9e:	6938      	ldr	r0, [r7, #16]
 8004aa0:	f000 f836 	bl	8004b10 <USBD_GetLen>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	005b      	lsls	r3, r3, #1
 8004aac:	b29a      	uxth	r2, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8004ab2:	7dfb      	ldrb	r3, [r7, #23]
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	7812      	ldrb	r2, [r2, #0]
 8004abc:	701a      	strb	r2, [r3, #0]
  idx++;
 8004abe:	7dfb      	ldrb	r3, [r7, #23]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8004ac4:	7dfb      	ldrb	r3, [r7, #23]
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	4413      	add	r3, r2
 8004aca:	2203      	movs	r2, #3
 8004acc:	701a      	strb	r2, [r3, #0]
  idx++;
 8004ace:	7dfb      	ldrb	r3, [r7, #23]
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8004ad4:	e013      	b.n	8004afe <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8004ad6:	7dfb      	ldrb	r3, [r7, #23]
 8004ad8:	68ba      	ldr	r2, [r7, #8]
 8004ada:	4413      	add	r3, r2
 8004adc:	693a      	ldr	r2, [r7, #16]
 8004ade:	7812      	ldrb	r2, [r2, #0]
 8004ae0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	613b      	str	r3, [r7, #16]
    idx++;
 8004ae8:	7dfb      	ldrb	r3, [r7, #23]
 8004aea:	3301      	adds	r3, #1
 8004aec:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8004aee:	7dfb      	ldrb	r3, [r7, #23]
 8004af0:	68ba      	ldr	r2, [r7, #8]
 8004af2:	4413      	add	r3, r2
 8004af4:	2200      	movs	r2, #0
 8004af6:	701a      	strb	r2, [r3, #0]
    idx++;
 8004af8:	7dfb      	ldrb	r3, [r7, #23]
 8004afa:	3301      	adds	r3, #1
 8004afc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1e7      	bne.n	8004ad6 <USBD_GetString+0x52>
 8004b06:	e000      	b.n	8004b0a <USBD_GetString+0x86>
    return;
 8004b08:	bf00      	nop
  }
}
 8004b0a:	3718      	adds	r7, #24
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8004b20:	e005      	b.n	8004b2e <USBD_GetLen+0x1e>
  {
    len++;
 8004b22:	7bfb      	ldrb	r3, [r7, #15]
 8004b24:	3301      	adds	r3, #1
 8004b26:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1f5      	bne.n	8004b22 <USBD_GetLen+0x12>
  }

  return len;
 8004b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3714      	adds	r7, #20
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2202      	movs	r2, #2
 8004b54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	68ba      	ldr	r2, [r7, #8]
 8004b68:	2100      	movs	r1, #0
 8004b6a:	68f8      	ldr	r0, [r7, #12]
 8004b6c:	f000 fa5f 	bl	800502e <USBD_LL_Transmit>

  return USBD_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3710      	adds	r7, #16
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
	...

08004b7c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8004b80:	2200      	movs	r2, #0
 8004b82:	490e      	ldr	r1, [pc, #56]	; (8004bbc <MX_USB_DEVICE_Init+0x40>)
 8004b84:	480e      	ldr	r0, [pc, #56]	; (8004bc0 <MX_USB_DEVICE_Init+0x44>)
 8004b86:	f7ff ff09 	bl	800499c <USBD_Init>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d001      	beq.n	8004b94 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8004b90:	f7fc fcbc 	bl	800150c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8004b94:	490b      	ldr	r1, [pc, #44]	; (8004bc4 <MX_USB_DEVICE_Init+0x48>)
 8004b96:	480a      	ldr	r0, [pc, #40]	; (8004bc0 <MX_USB_DEVICE_Init+0x44>)
 8004b98:	f7ff ff36 	bl	8004a08 <USBD_RegisterClass>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d001      	beq.n	8004ba6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8004ba2:	f7fc fcb3 	bl	800150c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8004ba6:	4806      	ldr	r0, [pc, #24]	; (8004bc0 <MX_USB_DEVICE_Init+0x44>)
 8004ba8:	f7ff ff4f 	bl	8004a4a <USBD_Start>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d001      	beq.n	8004bb6 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8004bb2:	f7fc fcab 	bl	800150c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8004bb6:	bf00      	nop
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	20000130 	.word	0x20000130
 8004bc0:	20000250 	.word	0x20000250
 8004bc4:	2000000c 	.word	0x2000000c

08004bc8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	4603      	mov	r3, r0
 8004bd0:	6039      	str	r1, [r7, #0]
 8004bd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	2212      	movs	r2, #18
 8004bd8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8004bda:	4b03      	ldr	r3, [pc, #12]	; (8004be8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr
 8004be8:	2000014c 	.word	0x2000014c

08004bec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	6039      	str	r1, [r7, #0]
 8004bf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	2204      	movs	r2, #4
 8004bfc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8004bfe:	4b03      	ldr	r3, [pc, #12]	; (8004c0c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr
 8004c0c:	20000160 	.word	0x20000160

08004c10 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	4603      	mov	r3, r0
 8004c18:	6039      	str	r1, [r7, #0]
 8004c1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8004c1c:	79fb      	ldrb	r3, [r7, #7]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d105      	bne.n	8004c2e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004c22:	683a      	ldr	r2, [r7, #0]
 8004c24:	4907      	ldr	r1, [pc, #28]	; (8004c44 <USBD_FS_ProductStrDescriptor+0x34>)
 8004c26:	4808      	ldr	r0, [pc, #32]	; (8004c48 <USBD_FS_ProductStrDescriptor+0x38>)
 8004c28:	f7ff ff2c 	bl	8004a84 <USBD_GetString>
 8004c2c:	e004      	b.n	8004c38 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004c2e:	683a      	ldr	r2, [r7, #0]
 8004c30:	4904      	ldr	r1, [pc, #16]	; (8004c44 <USBD_FS_ProductStrDescriptor+0x34>)
 8004c32:	4805      	ldr	r0, [pc, #20]	; (8004c48 <USBD_FS_ProductStrDescriptor+0x38>)
 8004c34:	f7ff ff26 	bl	8004a84 <USBD_GetString>
  }
  return USBD_StrDesc;
 8004c38:	4b02      	ldr	r3, [pc, #8]	; (8004c44 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3708      	adds	r7, #8
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	20000520 	.word	0x20000520
 8004c48:	08006388 	.word	0x08006388

08004c4c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	4603      	mov	r3, r0
 8004c54:	6039      	str	r1, [r7, #0]
 8004c56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004c58:	683a      	ldr	r2, [r7, #0]
 8004c5a:	4904      	ldr	r1, [pc, #16]	; (8004c6c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8004c5c:	4804      	ldr	r0, [pc, #16]	; (8004c70 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8004c5e:	f7ff ff11 	bl	8004a84 <USBD_GetString>
  return USBD_StrDesc;
 8004c62:	4b02      	ldr	r3, [pc, #8]	; (8004c6c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3708      	adds	r7, #8
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	20000520 	.word	0x20000520
 8004c70:	080063a0 	.word	0x080063a0

08004c74 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	6039      	str	r1, [r7, #0]
 8004c7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	221a      	movs	r2, #26
 8004c84:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8004c86:	f000 f843 	bl	8004d10 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8004c8a:	4b02      	ldr	r3, [pc, #8]	; (8004c94 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3708      	adds	r7, #8
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	20000164 	.word	0x20000164

08004c98 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	6039      	str	r1, [r7, #0]
 8004ca2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8004ca4:	79fb      	ldrb	r3, [r7, #7]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d105      	bne.n	8004cb6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004caa:	683a      	ldr	r2, [r7, #0]
 8004cac:	4907      	ldr	r1, [pc, #28]	; (8004ccc <USBD_FS_ConfigStrDescriptor+0x34>)
 8004cae:	4808      	ldr	r0, [pc, #32]	; (8004cd0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8004cb0:	f7ff fee8 	bl	8004a84 <USBD_GetString>
 8004cb4:	e004      	b.n	8004cc0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004cb6:	683a      	ldr	r2, [r7, #0]
 8004cb8:	4904      	ldr	r1, [pc, #16]	; (8004ccc <USBD_FS_ConfigStrDescriptor+0x34>)
 8004cba:	4805      	ldr	r0, [pc, #20]	; (8004cd0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8004cbc:	f7ff fee2 	bl	8004a84 <USBD_GetString>
  }
  return USBD_StrDesc;
 8004cc0:	4b02      	ldr	r3, [pc, #8]	; (8004ccc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3708      	adds	r7, #8
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	20000520 	.word	0x20000520
 8004cd0:	080063b4 	.word	0x080063b4

08004cd4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	4603      	mov	r3, r0
 8004cdc:	6039      	str	r1, [r7, #0]
 8004cde:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8004ce0:	79fb      	ldrb	r3, [r7, #7]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d105      	bne.n	8004cf2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	4907      	ldr	r1, [pc, #28]	; (8004d08 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8004cea:	4808      	ldr	r0, [pc, #32]	; (8004d0c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8004cec:	f7ff feca 	bl	8004a84 <USBD_GetString>
 8004cf0:	e004      	b.n	8004cfc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004cf2:	683a      	ldr	r2, [r7, #0]
 8004cf4:	4904      	ldr	r1, [pc, #16]	; (8004d08 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8004cf6:	4805      	ldr	r0, [pc, #20]	; (8004d0c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8004cf8:	f7ff fec4 	bl	8004a84 <USBD_GetString>
  }
  return USBD_StrDesc;
 8004cfc:	4b02      	ldr	r3, [pc, #8]	; (8004d08 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3708      	adds	r7, #8
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	20000520 	.word	0x20000520
 8004d0c:	080063c0 	.word	0x080063c0

08004d10 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8004d16:	4b0f      	ldr	r3, [pc, #60]	; (8004d54 <Get_SerialNum+0x44>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8004d1c:	4b0e      	ldr	r3, [pc, #56]	; (8004d58 <Get_SerialNum+0x48>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8004d22:	4b0e      	ldr	r3, [pc, #56]	; (8004d5c <Get_SerialNum+0x4c>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d009      	beq.n	8004d4a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8004d36:	2208      	movs	r2, #8
 8004d38:	4909      	ldr	r1, [pc, #36]	; (8004d60 <Get_SerialNum+0x50>)
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f000 f814 	bl	8004d68 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8004d40:	2204      	movs	r2, #4
 8004d42:	4908      	ldr	r1, [pc, #32]	; (8004d64 <Get_SerialNum+0x54>)
 8004d44:	68b8      	ldr	r0, [r7, #8]
 8004d46:	f000 f80f 	bl	8004d68 <IntToUnicode>
  }
}
 8004d4a:	bf00      	nop
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	1fff7a10 	.word	0x1fff7a10
 8004d58:	1fff7a14 	.word	0x1fff7a14
 8004d5c:	1fff7a18 	.word	0x1fff7a18
 8004d60:	20000166 	.word	0x20000166
 8004d64:	20000176 	.word	0x20000176

08004d68 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b087      	sub	sp, #28
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	4613      	mov	r3, r2
 8004d74:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8004d76:	2300      	movs	r3, #0
 8004d78:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	75fb      	strb	r3, [r7, #23]
 8004d7e:	e027      	b.n	8004dd0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	0f1b      	lsrs	r3, r3, #28
 8004d84:	2b09      	cmp	r3, #9
 8004d86:	d80b      	bhi.n	8004da0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	0f1b      	lsrs	r3, r3, #28
 8004d8c:	b2da      	uxtb	r2, r3
 8004d8e:	7dfb      	ldrb	r3, [r7, #23]
 8004d90:	005b      	lsls	r3, r3, #1
 8004d92:	4619      	mov	r1, r3
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	440b      	add	r3, r1
 8004d98:	3230      	adds	r2, #48	; 0x30
 8004d9a:	b2d2      	uxtb	r2, r2
 8004d9c:	701a      	strb	r2, [r3, #0]
 8004d9e:	e00a      	b.n	8004db6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	0f1b      	lsrs	r3, r3, #28
 8004da4:	b2da      	uxtb	r2, r3
 8004da6:	7dfb      	ldrb	r3, [r7, #23]
 8004da8:	005b      	lsls	r3, r3, #1
 8004daa:	4619      	mov	r1, r3
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	440b      	add	r3, r1
 8004db0:	3237      	adds	r2, #55	; 0x37
 8004db2:	b2d2      	uxtb	r2, r2
 8004db4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	011b      	lsls	r3, r3, #4
 8004dba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8004dbc:	7dfb      	ldrb	r3, [r7, #23]
 8004dbe:	005b      	lsls	r3, r3, #1
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8004dca:	7dfb      	ldrb	r3, [r7, #23]
 8004dcc:	3301      	adds	r3, #1
 8004dce:	75fb      	strb	r3, [r7, #23]
 8004dd0:	7dfa      	ldrb	r2, [r7, #23]
 8004dd2:	79fb      	ldrb	r3, [r7, #7]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d3d3      	bcc.n	8004d80 <IntToUnicode+0x18>
  }
}
 8004dd8:	bf00      	nop
 8004dda:	371c      	adds	r7, #28
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b08a      	sub	sp, #40	; 0x28
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dec:	f107 0314 	add.w	r3, r7, #20
 8004df0:	2200      	movs	r2, #0
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	605a      	str	r2, [r3, #4]
 8004df6:	609a      	str	r2, [r3, #8]
 8004df8:	60da      	str	r2, [r3, #12]
 8004dfa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e04:	d13f      	bne.n	8004e86 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e06:	2300      	movs	r3, #0
 8004e08:	613b      	str	r3, [r7, #16]
 8004e0a:	4b21      	ldr	r3, [pc, #132]	; (8004e90 <HAL_PCD_MspInit+0xac>)
 8004e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0e:	4a20      	ldr	r2, [pc, #128]	; (8004e90 <HAL_PCD_MspInit+0xac>)
 8004e10:	f043 0301 	orr.w	r3, r3, #1
 8004e14:	6313      	str	r3, [r2, #48]	; 0x30
 8004e16:	4b1e      	ldr	r3, [pc, #120]	; (8004e90 <HAL_PCD_MspInit+0xac>)
 8004e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1a:	f003 0301 	and.w	r3, r3, #1
 8004e1e:	613b      	str	r3, [r7, #16]
 8004e20:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8004e22:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8004e26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e28:	2302      	movs	r3, #2
 8004e2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e30:	2303      	movs	r3, #3
 8004e32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004e34:	230a      	movs	r3, #10
 8004e36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e38:	f107 0314 	add.w	r3, r7, #20
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	4815      	ldr	r0, [pc, #84]	; (8004e94 <HAL_PCD_MspInit+0xb0>)
 8004e40:	f7fc fdf0 	bl	8001a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8004e44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8004e52:	f107 0314 	add.w	r3, r7, #20
 8004e56:	4619      	mov	r1, r3
 8004e58:	480e      	ldr	r0, [pc, #56]	; (8004e94 <HAL_PCD_MspInit+0xb0>)
 8004e5a:	f7fc fde3 	bl	8001a24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004e5e:	4b0c      	ldr	r3, [pc, #48]	; (8004e90 <HAL_PCD_MspInit+0xac>)
 8004e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e62:	4a0b      	ldr	r2, [pc, #44]	; (8004e90 <HAL_PCD_MspInit+0xac>)
 8004e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e68:	6353      	str	r3, [r2, #52]	; 0x34
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	60fb      	str	r3, [r7, #12]
 8004e6e:	4b08      	ldr	r3, [pc, #32]	; (8004e90 <HAL_PCD_MspInit+0xac>)
 8004e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e72:	4a07      	ldr	r2, [pc, #28]	; (8004e90 <HAL_PCD_MspInit+0xac>)
 8004e74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e78:	6453      	str	r3, [r2, #68]	; 0x44
 8004e7a:	4b05      	ldr	r3, [pc, #20]	; (8004e90 <HAL_PCD_MspInit+0xac>)
 8004e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e82:	60fb      	str	r3, [r7, #12]
 8004e84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8004e86:	bf00      	nop
 8004e88:	3728      	adds	r7, #40	; 0x28
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	40023800 	.word	0x40023800
 8004e94:	40020000 	.word	0x40020000

08004e98 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d13c      	bne.n	8004f22 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8004ea8:	4a20      	ldr	r2, [pc, #128]	; (8004f2c <USBD_LL_Init+0x94>)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a1e      	ldr	r2, [pc, #120]	; (8004f2c <USBD_LL_Init+0x94>)
 8004eb4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004eb8:	4b1c      	ldr	r3, [pc, #112]	; (8004f2c <USBD_LL_Init+0x94>)
 8004eba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004ebe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8004ec0:	4b1a      	ldr	r3, [pc, #104]	; (8004f2c <USBD_LL_Init+0x94>)
 8004ec2:	2204      	movs	r2, #4
 8004ec4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8004ec6:	4b19      	ldr	r3, [pc, #100]	; (8004f2c <USBD_LL_Init+0x94>)
 8004ec8:	2202      	movs	r2, #2
 8004eca:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8004ecc:	4b17      	ldr	r3, [pc, #92]	; (8004f2c <USBD_LL_Init+0x94>)
 8004ece:	2200      	movs	r2, #0
 8004ed0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004ed2:	4b16      	ldr	r3, [pc, #88]	; (8004f2c <USBD_LL_Init+0x94>)
 8004ed4:	2202      	movs	r2, #2
 8004ed6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8004ed8:	4b14      	ldr	r3, [pc, #80]	; (8004f2c <USBD_LL_Init+0x94>)
 8004eda:	2201      	movs	r2, #1
 8004edc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8004ede:	4b13      	ldr	r3, [pc, #76]	; (8004f2c <USBD_LL_Init+0x94>)
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8004ee4:	4b11      	ldr	r3, [pc, #68]	; (8004f2c <USBD_LL_Init+0x94>)
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8004eea:	4b10      	ldr	r3, [pc, #64]	; (8004f2c <USBD_LL_Init+0x94>)
 8004eec:	2201      	movs	r2, #1
 8004eee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8004ef0:	4b0e      	ldr	r3, [pc, #56]	; (8004f2c <USBD_LL_Init+0x94>)
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8004ef6:	480d      	ldr	r0, [pc, #52]	; (8004f2c <USBD_LL_Init+0x94>)
 8004ef8:	f7fc ff6f 	bl	8001dda <HAL_PCD_Init>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d001      	beq.n	8004f06 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8004f02:	f7fc fb03 	bl	800150c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8004f06:	2180      	movs	r1, #128	; 0x80
 8004f08:	4808      	ldr	r0, [pc, #32]	; (8004f2c <USBD_LL_Init+0x94>)
 8004f0a:	f7fd fa5d 	bl	80023c8 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8004f0e:	2240      	movs	r2, #64	; 0x40
 8004f10:	2100      	movs	r1, #0
 8004f12:	4806      	ldr	r0, [pc, #24]	; (8004f2c <USBD_LL_Init+0x94>)
 8004f14:	f7fd fa11 	bl	800233a <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8004f18:	2280      	movs	r2, #128	; 0x80
 8004f1a:	2101      	movs	r1, #1
 8004f1c:	4803      	ldr	r0, [pc, #12]	; (8004f2c <USBD_LL_Init+0x94>)
 8004f1e:	f7fd fa0c 	bl	800233a <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3708      	adds	r7, #8
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	20000720 	.word	0x20000720

08004f30 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7fd f864 	bl	8002014 <HAL_PCD_Start>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8004f50:	7bfb      	ldrb	r3, [r7, #15]
 8004f52:	4618      	mov	r0, r3
 8004f54:	f000 f88c 	bl	8005070 <USBD_Get_USB_Status>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8004f5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b084      	sub	sp, #16
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
 8004f6e:	4608      	mov	r0, r1
 8004f70:	4611      	mov	r1, r2
 8004f72:	461a      	mov	r2, r3
 8004f74:	4603      	mov	r3, r0
 8004f76:	70fb      	strb	r3, [r7, #3]
 8004f78:	460b      	mov	r3, r1
 8004f7a:	70bb      	strb	r3, [r7, #2]
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004f80:	2300      	movs	r3, #0
 8004f82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004f84:	2300      	movs	r3, #0
 8004f86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8004f8e:	78bb      	ldrb	r3, [r7, #2]
 8004f90:	883a      	ldrh	r2, [r7, #0]
 8004f92:	78f9      	ldrb	r1, [r7, #3]
 8004f94:	f7fd f871 	bl	800207a <HAL_PCD_EP_Open>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8004f9c:	7bfb      	ldrb	r3, [r7, #15]
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 f866 	bl	8005070 <USBD_Get_USB_Status>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8004fa8:	7bbb      	ldrb	r3, [r7, #14]
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b084      	sub	sp, #16
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
 8004fba:	460b      	mov	r3, r1
 8004fbc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004fcc:	78fa      	ldrb	r2, [r7, #3]
 8004fce:	4611      	mov	r1, r2
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7fd f8ba 	bl	800214a <HAL_PCD_EP_Close>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8004fda:	7bfb      	ldrb	r3, [r7, #15]
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f000 f847 	bl	8005070 <USBD_Get_USB_Status>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8004fe6:	7bbb      	ldrb	r3, [r7, #14]
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3710      	adds	r7, #16
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005000:	2300      	movs	r3, #0
 8005002:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800500a:	78fa      	ldrb	r2, [r7, #3]
 800500c:	4611      	mov	r1, r2
 800500e:	4618      	mov	r0, r3
 8005010:	f7fd f92f 	bl	8002272 <HAL_PCD_EP_SetStall>
 8005014:	4603      	mov	r3, r0
 8005016:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005018:	7bfb      	ldrb	r3, [r7, #15]
 800501a:	4618      	mov	r0, r3
 800501c:	f000 f828 	bl	8005070 <USBD_Get_USB_Status>
 8005020:	4603      	mov	r3, r0
 8005022:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8005024:	7bbb      	ldrb	r3, [r7, #14]
}
 8005026:	4618      	mov	r0, r3
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}

0800502e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800502e:	b580      	push	{r7, lr}
 8005030:	b086      	sub	sp, #24
 8005032:	af00      	add	r7, sp, #0
 8005034:	60f8      	str	r0, [r7, #12]
 8005036:	607a      	str	r2, [r7, #4]
 8005038:	603b      	str	r3, [r7, #0]
 800503a:	460b      	mov	r3, r1
 800503c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800503e:	2300      	movs	r3, #0
 8005040:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005042:	2300      	movs	r3, #0
 8005044:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800504c:	7af9      	ldrb	r1, [r7, #11]
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	f7fd f8c4 	bl	80021de <HAL_PCD_EP_Transmit>
 8005056:	4603      	mov	r3, r0
 8005058:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800505a:	7dfb      	ldrb	r3, [r7, #23]
 800505c:	4618      	mov	r0, r3
 800505e:	f000 f807 	bl	8005070 <USBD_Get_USB_Status>
 8005062:	4603      	mov	r3, r0
 8005064:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8005066:	7dbb      	ldrb	r3, [r7, #22]
}
 8005068:	4618      	mov	r0, r3
 800506a:	3718      	adds	r7, #24
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	4603      	mov	r3, r0
 8005078:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800507a:	2300      	movs	r3, #0
 800507c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800507e:	79fb      	ldrb	r3, [r7, #7]
 8005080:	2b03      	cmp	r3, #3
 8005082:	d817      	bhi.n	80050b4 <USBD_Get_USB_Status+0x44>
 8005084:	a201      	add	r2, pc, #4	; (adr r2, 800508c <USBD_Get_USB_Status+0x1c>)
 8005086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800508a:	bf00      	nop
 800508c:	0800509d 	.word	0x0800509d
 8005090:	080050a3 	.word	0x080050a3
 8005094:	080050a9 	.word	0x080050a9
 8005098:	080050af 	.word	0x080050af
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800509c:	2300      	movs	r3, #0
 800509e:	73fb      	strb	r3, [r7, #15]
    break;
 80050a0:	e00b      	b.n	80050ba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80050a2:	2303      	movs	r3, #3
 80050a4:	73fb      	strb	r3, [r7, #15]
    break;
 80050a6:	e008      	b.n	80050ba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80050a8:	2301      	movs	r3, #1
 80050aa:	73fb      	strb	r3, [r7, #15]
    break;
 80050ac:	e005      	b.n	80050ba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80050ae:	2303      	movs	r3, #3
 80050b0:	73fb      	strb	r3, [r7, #15]
    break;
 80050b2:	e002      	b.n	80050ba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80050b4:	2303      	movs	r3, #3
 80050b6:	73fb      	strb	r3, [r7, #15]
    break;
 80050b8:	bf00      	nop
  }
  return usb_status;
 80050ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3714      	adds	r7, #20
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <__errno>:
 80050c8:	4b01      	ldr	r3, [pc, #4]	; (80050d0 <__errno+0x8>)
 80050ca:	6818      	ldr	r0, [r3, #0]
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	20000180 	.word	0x20000180

080050d4 <__libc_init_array>:
 80050d4:	b570      	push	{r4, r5, r6, lr}
 80050d6:	4e0d      	ldr	r6, [pc, #52]	; (800510c <__libc_init_array+0x38>)
 80050d8:	4c0d      	ldr	r4, [pc, #52]	; (8005110 <__libc_init_array+0x3c>)
 80050da:	1ba4      	subs	r4, r4, r6
 80050dc:	10a4      	asrs	r4, r4, #2
 80050de:	2500      	movs	r5, #0
 80050e0:	42a5      	cmp	r5, r4
 80050e2:	d109      	bne.n	80050f8 <__libc_init_array+0x24>
 80050e4:	4e0b      	ldr	r6, [pc, #44]	; (8005114 <__libc_init_array+0x40>)
 80050e6:	4c0c      	ldr	r4, [pc, #48]	; (8005118 <__libc_init_array+0x44>)
 80050e8:	f001 f940 	bl	800636c <_init>
 80050ec:	1ba4      	subs	r4, r4, r6
 80050ee:	10a4      	asrs	r4, r4, #2
 80050f0:	2500      	movs	r5, #0
 80050f2:	42a5      	cmp	r5, r4
 80050f4:	d105      	bne.n	8005102 <__libc_init_array+0x2e>
 80050f6:	bd70      	pop	{r4, r5, r6, pc}
 80050f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80050fc:	4798      	blx	r3
 80050fe:	3501      	adds	r5, #1
 8005100:	e7ee      	b.n	80050e0 <__libc_init_array+0xc>
 8005102:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005106:	4798      	blx	r3
 8005108:	3501      	adds	r5, #1
 800510a:	e7f2      	b.n	80050f2 <__libc_init_array+0x1e>
 800510c:	080065c8 	.word	0x080065c8
 8005110:	080065c8 	.word	0x080065c8
 8005114:	080065c8 	.word	0x080065c8
 8005118:	080065cc 	.word	0x080065cc

0800511c <malloc>:
 800511c:	4b02      	ldr	r3, [pc, #8]	; (8005128 <malloc+0xc>)
 800511e:	4601      	mov	r1, r0
 8005120:	6818      	ldr	r0, [r3, #0]
 8005122:	f000 b861 	b.w	80051e8 <_malloc_r>
 8005126:	bf00      	nop
 8005128:	20000180 	.word	0x20000180

0800512c <free>:
 800512c:	4b02      	ldr	r3, [pc, #8]	; (8005138 <free+0xc>)
 800512e:	4601      	mov	r1, r0
 8005130:	6818      	ldr	r0, [r3, #0]
 8005132:	f000 b80b 	b.w	800514c <_free_r>
 8005136:	bf00      	nop
 8005138:	20000180 	.word	0x20000180

0800513c <memset>:
 800513c:	4402      	add	r2, r0
 800513e:	4603      	mov	r3, r0
 8005140:	4293      	cmp	r3, r2
 8005142:	d100      	bne.n	8005146 <memset+0xa>
 8005144:	4770      	bx	lr
 8005146:	f803 1b01 	strb.w	r1, [r3], #1
 800514a:	e7f9      	b.n	8005140 <memset+0x4>

0800514c <_free_r>:
 800514c:	b538      	push	{r3, r4, r5, lr}
 800514e:	4605      	mov	r5, r0
 8005150:	2900      	cmp	r1, #0
 8005152:	d045      	beq.n	80051e0 <_free_r+0x94>
 8005154:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005158:	1f0c      	subs	r4, r1, #4
 800515a:	2b00      	cmp	r3, #0
 800515c:	bfb8      	it	lt
 800515e:	18e4      	addlt	r4, r4, r3
 8005160:	f000 f8ac 	bl	80052bc <__malloc_lock>
 8005164:	4a1f      	ldr	r2, [pc, #124]	; (80051e4 <_free_r+0x98>)
 8005166:	6813      	ldr	r3, [r2, #0]
 8005168:	4610      	mov	r0, r2
 800516a:	b933      	cbnz	r3, 800517a <_free_r+0x2e>
 800516c:	6063      	str	r3, [r4, #4]
 800516e:	6014      	str	r4, [r2, #0]
 8005170:	4628      	mov	r0, r5
 8005172:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005176:	f000 b8a2 	b.w	80052be <__malloc_unlock>
 800517a:	42a3      	cmp	r3, r4
 800517c:	d90c      	bls.n	8005198 <_free_r+0x4c>
 800517e:	6821      	ldr	r1, [r4, #0]
 8005180:	1862      	adds	r2, r4, r1
 8005182:	4293      	cmp	r3, r2
 8005184:	bf04      	itt	eq
 8005186:	681a      	ldreq	r2, [r3, #0]
 8005188:	685b      	ldreq	r3, [r3, #4]
 800518a:	6063      	str	r3, [r4, #4]
 800518c:	bf04      	itt	eq
 800518e:	1852      	addeq	r2, r2, r1
 8005190:	6022      	streq	r2, [r4, #0]
 8005192:	6004      	str	r4, [r0, #0]
 8005194:	e7ec      	b.n	8005170 <_free_r+0x24>
 8005196:	4613      	mov	r3, r2
 8005198:	685a      	ldr	r2, [r3, #4]
 800519a:	b10a      	cbz	r2, 80051a0 <_free_r+0x54>
 800519c:	42a2      	cmp	r2, r4
 800519e:	d9fa      	bls.n	8005196 <_free_r+0x4a>
 80051a0:	6819      	ldr	r1, [r3, #0]
 80051a2:	1858      	adds	r0, r3, r1
 80051a4:	42a0      	cmp	r0, r4
 80051a6:	d10b      	bne.n	80051c0 <_free_r+0x74>
 80051a8:	6820      	ldr	r0, [r4, #0]
 80051aa:	4401      	add	r1, r0
 80051ac:	1858      	adds	r0, r3, r1
 80051ae:	4282      	cmp	r2, r0
 80051b0:	6019      	str	r1, [r3, #0]
 80051b2:	d1dd      	bne.n	8005170 <_free_r+0x24>
 80051b4:	6810      	ldr	r0, [r2, #0]
 80051b6:	6852      	ldr	r2, [r2, #4]
 80051b8:	605a      	str	r2, [r3, #4]
 80051ba:	4401      	add	r1, r0
 80051bc:	6019      	str	r1, [r3, #0]
 80051be:	e7d7      	b.n	8005170 <_free_r+0x24>
 80051c0:	d902      	bls.n	80051c8 <_free_r+0x7c>
 80051c2:	230c      	movs	r3, #12
 80051c4:	602b      	str	r3, [r5, #0]
 80051c6:	e7d3      	b.n	8005170 <_free_r+0x24>
 80051c8:	6820      	ldr	r0, [r4, #0]
 80051ca:	1821      	adds	r1, r4, r0
 80051cc:	428a      	cmp	r2, r1
 80051ce:	bf04      	itt	eq
 80051d0:	6811      	ldreq	r1, [r2, #0]
 80051d2:	6852      	ldreq	r2, [r2, #4]
 80051d4:	6062      	str	r2, [r4, #4]
 80051d6:	bf04      	itt	eq
 80051d8:	1809      	addeq	r1, r1, r0
 80051da:	6021      	streq	r1, [r4, #0]
 80051dc:	605c      	str	r4, [r3, #4]
 80051de:	e7c7      	b.n	8005170 <_free_r+0x24>
 80051e0:	bd38      	pop	{r3, r4, r5, pc}
 80051e2:	bf00      	nop
 80051e4:	20000204 	.word	0x20000204

080051e8 <_malloc_r>:
 80051e8:	b570      	push	{r4, r5, r6, lr}
 80051ea:	1ccd      	adds	r5, r1, #3
 80051ec:	f025 0503 	bic.w	r5, r5, #3
 80051f0:	3508      	adds	r5, #8
 80051f2:	2d0c      	cmp	r5, #12
 80051f4:	bf38      	it	cc
 80051f6:	250c      	movcc	r5, #12
 80051f8:	2d00      	cmp	r5, #0
 80051fa:	4606      	mov	r6, r0
 80051fc:	db01      	blt.n	8005202 <_malloc_r+0x1a>
 80051fe:	42a9      	cmp	r1, r5
 8005200:	d903      	bls.n	800520a <_malloc_r+0x22>
 8005202:	230c      	movs	r3, #12
 8005204:	6033      	str	r3, [r6, #0]
 8005206:	2000      	movs	r0, #0
 8005208:	bd70      	pop	{r4, r5, r6, pc}
 800520a:	f000 f857 	bl	80052bc <__malloc_lock>
 800520e:	4a21      	ldr	r2, [pc, #132]	; (8005294 <_malloc_r+0xac>)
 8005210:	6814      	ldr	r4, [r2, #0]
 8005212:	4621      	mov	r1, r4
 8005214:	b991      	cbnz	r1, 800523c <_malloc_r+0x54>
 8005216:	4c20      	ldr	r4, [pc, #128]	; (8005298 <_malloc_r+0xb0>)
 8005218:	6823      	ldr	r3, [r4, #0]
 800521a:	b91b      	cbnz	r3, 8005224 <_malloc_r+0x3c>
 800521c:	4630      	mov	r0, r6
 800521e:	f000 f83d 	bl	800529c <_sbrk_r>
 8005222:	6020      	str	r0, [r4, #0]
 8005224:	4629      	mov	r1, r5
 8005226:	4630      	mov	r0, r6
 8005228:	f000 f838 	bl	800529c <_sbrk_r>
 800522c:	1c43      	adds	r3, r0, #1
 800522e:	d124      	bne.n	800527a <_malloc_r+0x92>
 8005230:	230c      	movs	r3, #12
 8005232:	6033      	str	r3, [r6, #0]
 8005234:	4630      	mov	r0, r6
 8005236:	f000 f842 	bl	80052be <__malloc_unlock>
 800523a:	e7e4      	b.n	8005206 <_malloc_r+0x1e>
 800523c:	680b      	ldr	r3, [r1, #0]
 800523e:	1b5b      	subs	r3, r3, r5
 8005240:	d418      	bmi.n	8005274 <_malloc_r+0x8c>
 8005242:	2b0b      	cmp	r3, #11
 8005244:	d90f      	bls.n	8005266 <_malloc_r+0x7e>
 8005246:	600b      	str	r3, [r1, #0]
 8005248:	50cd      	str	r5, [r1, r3]
 800524a:	18cc      	adds	r4, r1, r3
 800524c:	4630      	mov	r0, r6
 800524e:	f000 f836 	bl	80052be <__malloc_unlock>
 8005252:	f104 000b 	add.w	r0, r4, #11
 8005256:	1d23      	adds	r3, r4, #4
 8005258:	f020 0007 	bic.w	r0, r0, #7
 800525c:	1ac3      	subs	r3, r0, r3
 800525e:	d0d3      	beq.n	8005208 <_malloc_r+0x20>
 8005260:	425a      	negs	r2, r3
 8005262:	50e2      	str	r2, [r4, r3]
 8005264:	e7d0      	b.n	8005208 <_malloc_r+0x20>
 8005266:	428c      	cmp	r4, r1
 8005268:	684b      	ldr	r3, [r1, #4]
 800526a:	bf16      	itet	ne
 800526c:	6063      	strne	r3, [r4, #4]
 800526e:	6013      	streq	r3, [r2, #0]
 8005270:	460c      	movne	r4, r1
 8005272:	e7eb      	b.n	800524c <_malloc_r+0x64>
 8005274:	460c      	mov	r4, r1
 8005276:	6849      	ldr	r1, [r1, #4]
 8005278:	e7cc      	b.n	8005214 <_malloc_r+0x2c>
 800527a:	1cc4      	adds	r4, r0, #3
 800527c:	f024 0403 	bic.w	r4, r4, #3
 8005280:	42a0      	cmp	r0, r4
 8005282:	d005      	beq.n	8005290 <_malloc_r+0xa8>
 8005284:	1a21      	subs	r1, r4, r0
 8005286:	4630      	mov	r0, r6
 8005288:	f000 f808 	bl	800529c <_sbrk_r>
 800528c:	3001      	adds	r0, #1
 800528e:	d0cf      	beq.n	8005230 <_malloc_r+0x48>
 8005290:	6025      	str	r5, [r4, #0]
 8005292:	e7db      	b.n	800524c <_malloc_r+0x64>
 8005294:	20000204 	.word	0x20000204
 8005298:	20000208 	.word	0x20000208

0800529c <_sbrk_r>:
 800529c:	b538      	push	{r3, r4, r5, lr}
 800529e:	4c06      	ldr	r4, [pc, #24]	; (80052b8 <_sbrk_r+0x1c>)
 80052a0:	2300      	movs	r3, #0
 80052a2:	4605      	mov	r5, r0
 80052a4:	4608      	mov	r0, r1
 80052a6:	6023      	str	r3, [r4, #0]
 80052a8:	f7fc f9d6 	bl	8001658 <_sbrk>
 80052ac:	1c43      	adds	r3, r0, #1
 80052ae:	d102      	bne.n	80052b6 <_sbrk_r+0x1a>
 80052b0:	6823      	ldr	r3, [r4, #0]
 80052b2:	b103      	cbz	r3, 80052b6 <_sbrk_r+0x1a>
 80052b4:	602b      	str	r3, [r5, #0]
 80052b6:	bd38      	pop	{r3, r4, r5, pc}
 80052b8:	20000b28 	.word	0x20000b28

080052bc <__malloc_lock>:
 80052bc:	4770      	bx	lr

080052be <__malloc_unlock>:
 80052be:	4770      	bx	lr

080052c0 <cos>:
 80052c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80052c2:	ec51 0b10 	vmov	r0, r1, d0
 80052c6:	4a1e      	ldr	r2, [pc, #120]	; (8005340 <cos+0x80>)
 80052c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80052cc:	4293      	cmp	r3, r2
 80052ce:	dc06      	bgt.n	80052de <cos+0x1e>
 80052d0:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8005338 <cos+0x78>
 80052d4:	f000 fa74 	bl	80057c0 <__kernel_cos>
 80052d8:	ec51 0b10 	vmov	r0, r1, d0
 80052dc:	e007      	b.n	80052ee <cos+0x2e>
 80052de:	4a19      	ldr	r2, [pc, #100]	; (8005344 <cos+0x84>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	dd09      	ble.n	80052f8 <cos+0x38>
 80052e4:	ee10 2a10 	vmov	r2, s0
 80052e8:	460b      	mov	r3, r1
 80052ea:	f7fa ff85 	bl	80001f8 <__aeabi_dsub>
 80052ee:	ec41 0b10 	vmov	d0, r0, r1
 80052f2:	b005      	add	sp, #20
 80052f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80052f8:	4668      	mov	r0, sp
 80052fa:	f000 f86d 	bl	80053d8 <__ieee754_rem_pio2>
 80052fe:	f000 0003 	and.w	r0, r0, #3
 8005302:	2801      	cmp	r0, #1
 8005304:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005308:	ed9d 0b00 	vldr	d0, [sp]
 800530c:	d007      	beq.n	800531e <cos+0x5e>
 800530e:	2802      	cmp	r0, #2
 8005310:	d00e      	beq.n	8005330 <cos+0x70>
 8005312:	2800      	cmp	r0, #0
 8005314:	d0de      	beq.n	80052d4 <cos+0x14>
 8005316:	2001      	movs	r0, #1
 8005318:	f000 fe5a 	bl	8005fd0 <__kernel_sin>
 800531c:	e7dc      	b.n	80052d8 <cos+0x18>
 800531e:	f000 fe57 	bl	8005fd0 <__kernel_sin>
 8005322:	ec53 2b10 	vmov	r2, r3, d0
 8005326:	ee10 0a10 	vmov	r0, s0
 800532a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800532e:	e7de      	b.n	80052ee <cos+0x2e>
 8005330:	f000 fa46 	bl	80057c0 <__kernel_cos>
 8005334:	e7f5      	b.n	8005322 <cos+0x62>
 8005336:	bf00      	nop
	...
 8005340:	3fe921fb 	.word	0x3fe921fb
 8005344:	7fefffff 	.word	0x7fefffff

08005348 <sin>:
 8005348:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800534a:	ec51 0b10 	vmov	r0, r1, d0
 800534e:	4a20      	ldr	r2, [pc, #128]	; (80053d0 <sin+0x88>)
 8005350:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005354:	4293      	cmp	r3, r2
 8005356:	dc07      	bgt.n	8005368 <sin+0x20>
 8005358:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80053c8 <sin+0x80>
 800535c:	2000      	movs	r0, #0
 800535e:	f000 fe37 	bl	8005fd0 <__kernel_sin>
 8005362:	ec51 0b10 	vmov	r0, r1, d0
 8005366:	e007      	b.n	8005378 <sin+0x30>
 8005368:	4a1a      	ldr	r2, [pc, #104]	; (80053d4 <sin+0x8c>)
 800536a:	4293      	cmp	r3, r2
 800536c:	dd09      	ble.n	8005382 <sin+0x3a>
 800536e:	ee10 2a10 	vmov	r2, s0
 8005372:	460b      	mov	r3, r1
 8005374:	f7fa ff40 	bl	80001f8 <__aeabi_dsub>
 8005378:	ec41 0b10 	vmov	d0, r0, r1
 800537c:	b005      	add	sp, #20
 800537e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005382:	4668      	mov	r0, sp
 8005384:	f000 f828 	bl	80053d8 <__ieee754_rem_pio2>
 8005388:	f000 0003 	and.w	r0, r0, #3
 800538c:	2801      	cmp	r0, #1
 800538e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005392:	ed9d 0b00 	vldr	d0, [sp]
 8005396:	d004      	beq.n	80053a2 <sin+0x5a>
 8005398:	2802      	cmp	r0, #2
 800539a:	d005      	beq.n	80053a8 <sin+0x60>
 800539c:	b970      	cbnz	r0, 80053bc <sin+0x74>
 800539e:	2001      	movs	r0, #1
 80053a0:	e7dd      	b.n	800535e <sin+0x16>
 80053a2:	f000 fa0d 	bl	80057c0 <__kernel_cos>
 80053a6:	e7dc      	b.n	8005362 <sin+0x1a>
 80053a8:	2001      	movs	r0, #1
 80053aa:	f000 fe11 	bl	8005fd0 <__kernel_sin>
 80053ae:	ec53 2b10 	vmov	r2, r3, d0
 80053b2:	ee10 0a10 	vmov	r0, s0
 80053b6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80053ba:	e7dd      	b.n	8005378 <sin+0x30>
 80053bc:	f000 fa00 	bl	80057c0 <__kernel_cos>
 80053c0:	e7f5      	b.n	80053ae <sin+0x66>
 80053c2:	bf00      	nop
 80053c4:	f3af 8000 	nop.w
	...
 80053d0:	3fe921fb 	.word	0x3fe921fb
 80053d4:	7fefffff 	.word	0x7fefffff

080053d8 <__ieee754_rem_pio2>:
 80053d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053dc:	ec57 6b10 	vmov	r6, r7, d0
 80053e0:	4bc3      	ldr	r3, [pc, #780]	; (80056f0 <__ieee754_rem_pio2+0x318>)
 80053e2:	b08d      	sub	sp, #52	; 0x34
 80053e4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80053e8:	4598      	cmp	r8, r3
 80053ea:	4604      	mov	r4, r0
 80053ec:	9704      	str	r7, [sp, #16]
 80053ee:	dc07      	bgt.n	8005400 <__ieee754_rem_pio2+0x28>
 80053f0:	2200      	movs	r2, #0
 80053f2:	2300      	movs	r3, #0
 80053f4:	ed84 0b00 	vstr	d0, [r4]
 80053f8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80053fc:	2500      	movs	r5, #0
 80053fe:	e027      	b.n	8005450 <__ieee754_rem_pio2+0x78>
 8005400:	4bbc      	ldr	r3, [pc, #752]	; (80056f4 <__ieee754_rem_pio2+0x31c>)
 8005402:	4598      	cmp	r8, r3
 8005404:	dc75      	bgt.n	80054f2 <__ieee754_rem_pio2+0x11a>
 8005406:	9b04      	ldr	r3, [sp, #16]
 8005408:	4dbb      	ldr	r5, [pc, #748]	; (80056f8 <__ieee754_rem_pio2+0x320>)
 800540a:	2b00      	cmp	r3, #0
 800540c:	ee10 0a10 	vmov	r0, s0
 8005410:	a3a9      	add	r3, pc, #676	; (adr r3, 80056b8 <__ieee754_rem_pio2+0x2e0>)
 8005412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005416:	4639      	mov	r1, r7
 8005418:	dd36      	ble.n	8005488 <__ieee754_rem_pio2+0xb0>
 800541a:	f7fa feed 	bl	80001f8 <__aeabi_dsub>
 800541e:	45a8      	cmp	r8, r5
 8005420:	4606      	mov	r6, r0
 8005422:	460f      	mov	r7, r1
 8005424:	d018      	beq.n	8005458 <__ieee754_rem_pio2+0x80>
 8005426:	a3a6      	add	r3, pc, #664	; (adr r3, 80056c0 <__ieee754_rem_pio2+0x2e8>)
 8005428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542c:	f7fa fee4 	bl	80001f8 <__aeabi_dsub>
 8005430:	4602      	mov	r2, r0
 8005432:	460b      	mov	r3, r1
 8005434:	e9c4 2300 	strd	r2, r3, [r4]
 8005438:	4630      	mov	r0, r6
 800543a:	4639      	mov	r1, r7
 800543c:	f7fa fedc 	bl	80001f8 <__aeabi_dsub>
 8005440:	a39f      	add	r3, pc, #636	; (adr r3, 80056c0 <__ieee754_rem_pio2+0x2e8>)
 8005442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005446:	f7fa fed7 	bl	80001f8 <__aeabi_dsub>
 800544a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800544e:	2501      	movs	r5, #1
 8005450:	4628      	mov	r0, r5
 8005452:	b00d      	add	sp, #52	; 0x34
 8005454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005458:	a39b      	add	r3, pc, #620	; (adr r3, 80056c8 <__ieee754_rem_pio2+0x2f0>)
 800545a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800545e:	f7fa fecb 	bl	80001f8 <__aeabi_dsub>
 8005462:	a39b      	add	r3, pc, #620	; (adr r3, 80056d0 <__ieee754_rem_pio2+0x2f8>)
 8005464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005468:	4606      	mov	r6, r0
 800546a:	460f      	mov	r7, r1
 800546c:	f7fa fec4 	bl	80001f8 <__aeabi_dsub>
 8005470:	4602      	mov	r2, r0
 8005472:	460b      	mov	r3, r1
 8005474:	e9c4 2300 	strd	r2, r3, [r4]
 8005478:	4630      	mov	r0, r6
 800547a:	4639      	mov	r1, r7
 800547c:	f7fa febc 	bl	80001f8 <__aeabi_dsub>
 8005480:	a393      	add	r3, pc, #588	; (adr r3, 80056d0 <__ieee754_rem_pio2+0x2f8>)
 8005482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005486:	e7de      	b.n	8005446 <__ieee754_rem_pio2+0x6e>
 8005488:	f7fa feb8 	bl	80001fc <__adddf3>
 800548c:	45a8      	cmp	r8, r5
 800548e:	4606      	mov	r6, r0
 8005490:	460f      	mov	r7, r1
 8005492:	d016      	beq.n	80054c2 <__ieee754_rem_pio2+0xea>
 8005494:	a38a      	add	r3, pc, #552	; (adr r3, 80056c0 <__ieee754_rem_pio2+0x2e8>)
 8005496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549a:	f7fa feaf 	bl	80001fc <__adddf3>
 800549e:	4602      	mov	r2, r0
 80054a0:	460b      	mov	r3, r1
 80054a2:	e9c4 2300 	strd	r2, r3, [r4]
 80054a6:	4630      	mov	r0, r6
 80054a8:	4639      	mov	r1, r7
 80054aa:	f7fa fea5 	bl	80001f8 <__aeabi_dsub>
 80054ae:	a384      	add	r3, pc, #528	; (adr r3, 80056c0 <__ieee754_rem_pio2+0x2e8>)
 80054b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b4:	f7fa fea2 	bl	80001fc <__adddf3>
 80054b8:	f04f 35ff 	mov.w	r5, #4294967295
 80054bc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80054c0:	e7c6      	b.n	8005450 <__ieee754_rem_pio2+0x78>
 80054c2:	a381      	add	r3, pc, #516	; (adr r3, 80056c8 <__ieee754_rem_pio2+0x2f0>)
 80054c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c8:	f7fa fe98 	bl	80001fc <__adddf3>
 80054cc:	a380      	add	r3, pc, #512	; (adr r3, 80056d0 <__ieee754_rem_pio2+0x2f8>)
 80054ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d2:	4606      	mov	r6, r0
 80054d4:	460f      	mov	r7, r1
 80054d6:	f7fa fe91 	bl	80001fc <__adddf3>
 80054da:	4602      	mov	r2, r0
 80054dc:	460b      	mov	r3, r1
 80054de:	e9c4 2300 	strd	r2, r3, [r4]
 80054e2:	4630      	mov	r0, r6
 80054e4:	4639      	mov	r1, r7
 80054e6:	f7fa fe87 	bl	80001f8 <__aeabi_dsub>
 80054ea:	a379      	add	r3, pc, #484	; (adr r3, 80056d0 <__ieee754_rem_pio2+0x2f8>)
 80054ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f0:	e7e0      	b.n	80054b4 <__ieee754_rem_pio2+0xdc>
 80054f2:	4b82      	ldr	r3, [pc, #520]	; (80056fc <__ieee754_rem_pio2+0x324>)
 80054f4:	4598      	cmp	r8, r3
 80054f6:	f300 80d0 	bgt.w	800569a <__ieee754_rem_pio2+0x2c2>
 80054fa:	f000 fe23 	bl	8006144 <fabs>
 80054fe:	ec57 6b10 	vmov	r6, r7, d0
 8005502:	ee10 0a10 	vmov	r0, s0
 8005506:	a374      	add	r3, pc, #464	; (adr r3, 80056d8 <__ieee754_rem_pio2+0x300>)
 8005508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800550c:	4639      	mov	r1, r7
 800550e:	f7fb f82b 	bl	8000568 <__aeabi_dmul>
 8005512:	2200      	movs	r2, #0
 8005514:	4b7a      	ldr	r3, [pc, #488]	; (8005700 <__ieee754_rem_pio2+0x328>)
 8005516:	f7fa fe71 	bl	80001fc <__adddf3>
 800551a:	f7fb fabf 	bl	8000a9c <__aeabi_d2iz>
 800551e:	4605      	mov	r5, r0
 8005520:	f7fa ffb8 	bl	8000494 <__aeabi_i2d>
 8005524:	a364      	add	r3, pc, #400	; (adr r3, 80056b8 <__ieee754_rem_pio2+0x2e0>)
 8005526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800552e:	f7fb f81b 	bl	8000568 <__aeabi_dmul>
 8005532:	4602      	mov	r2, r0
 8005534:	460b      	mov	r3, r1
 8005536:	4630      	mov	r0, r6
 8005538:	4639      	mov	r1, r7
 800553a:	f7fa fe5d 	bl	80001f8 <__aeabi_dsub>
 800553e:	a360      	add	r3, pc, #384	; (adr r3, 80056c0 <__ieee754_rem_pio2+0x2e8>)
 8005540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005544:	4682      	mov	sl, r0
 8005546:	468b      	mov	fp, r1
 8005548:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800554c:	f7fb f80c 	bl	8000568 <__aeabi_dmul>
 8005550:	2d1f      	cmp	r5, #31
 8005552:	4606      	mov	r6, r0
 8005554:	460f      	mov	r7, r1
 8005556:	dc0c      	bgt.n	8005572 <__ieee754_rem_pio2+0x19a>
 8005558:	1e6a      	subs	r2, r5, #1
 800555a:	4b6a      	ldr	r3, [pc, #424]	; (8005704 <__ieee754_rem_pio2+0x32c>)
 800555c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005560:	4543      	cmp	r3, r8
 8005562:	d006      	beq.n	8005572 <__ieee754_rem_pio2+0x19a>
 8005564:	4632      	mov	r2, r6
 8005566:	463b      	mov	r3, r7
 8005568:	4650      	mov	r0, sl
 800556a:	4659      	mov	r1, fp
 800556c:	f7fa fe44 	bl	80001f8 <__aeabi_dsub>
 8005570:	e00e      	b.n	8005590 <__ieee754_rem_pio2+0x1b8>
 8005572:	4632      	mov	r2, r6
 8005574:	463b      	mov	r3, r7
 8005576:	4650      	mov	r0, sl
 8005578:	4659      	mov	r1, fp
 800557a:	f7fa fe3d 	bl	80001f8 <__aeabi_dsub>
 800557e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005582:	9305      	str	r3, [sp, #20]
 8005584:	9a05      	ldr	r2, [sp, #20]
 8005586:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	2b10      	cmp	r3, #16
 800558e:	dc02      	bgt.n	8005596 <__ieee754_rem_pio2+0x1be>
 8005590:	e9c4 0100 	strd	r0, r1, [r4]
 8005594:	e039      	b.n	800560a <__ieee754_rem_pio2+0x232>
 8005596:	a34c      	add	r3, pc, #304	; (adr r3, 80056c8 <__ieee754_rem_pio2+0x2f0>)
 8005598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055a0:	f7fa ffe2 	bl	8000568 <__aeabi_dmul>
 80055a4:	4606      	mov	r6, r0
 80055a6:	460f      	mov	r7, r1
 80055a8:	4602      	mov	r2, r0
 80055aa:	460b      	mov	r3, r1
 80055ac:	4650      	mov	r0, sl
 80055ae:	4659      	mov	r1, fp
 80055b0:	f7fa fe22 	bl	80001f8 <__aeabi_dsub>
 80055b4:	4602      	mov	r2, r0
 80055b6:	460b      	mov	r3, r1
 80055b8:	4680      	mov	r8, r0
 80055ba:	4689      	mov	r9, r1
 80055bc:	4650      	mov	r0, sl
 80055be:	4659      	mov	r1, fp
 80055c0:	f7fa fe1a 	bl	80001f8 <__aeabi_dsub>
 80055c4:	4632      	mov	r2, r6
 80055c6:	463b      	mov	r3, r7
 80055c8:	f7fa fe16 	bl	80001f8 <__aeabi_dsub>
 80055cc:	a340      	add	r3, pc, #256	; (adr r3, 80056d0 <__ieee754_rem_pio2+0x2f8>)
 80055ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d2:	4606      	mov	r6, r0
 80055d4:	460f      	mov	r7, r1
 80055d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055da:	f7fa ffc5 	bl	8000568 <__aeabi_dmul>
 80055de:	4632      	mov	r2, r6
 80055e0:	463b      	mov	r3, r7
 80055e2:	f7fa fe09 	bl	80001f8 <__aeabi_dsub>
 80055e6:	4602      	mov	r2, r0
 80055e8:	460b      	mov	r3, r1
 80055ea:	4606      	mov	r6, r0
 80055ec:	460f      	mov	r7, r1
 80055ee:	4640      	mov	r0, r8
 80055f0:	4649      	mov	r1, r9
 80055f2:	f7fa fe01 	bl	80001f8 <__aeabi_dsub>
 80055f6:	9a05      	ldr	r2, [sp, #20]
 80055f8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	2b31      	cmp	r3, #49	; 0x31
 8005600:	dc20      	bgt.n	8005644 <__ieee754_rem_pio2+0x26c>
 8005602:	e9c4 0100 	strd	r0, r1, [r4]
 8005606:	46c2      	mov	sl, r8
 8005608:	46cb      	mov	fp, r9
 800560a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800560e:	4650      	mov	r0, sl
 8005610:	4642      	mov	r2, r8
 8005612:	464b      	mov	r3, r9
 8005614:	4659      	mov	r1, fp
 8005616:	f7fa fdef 	bl	80001f8 <__aeabi_dsub>
 800561a:	463b      	mov	r3, r7
 800561c:	4632      	mov	r2, r6
 800561e:	f7fa fdeb 	bl	80001f8 <__aeabi_dsub>
 8005622:	9b04      	ldr	r3, [sp, #16]
 8005624:	2b00      	cmp	r3, #0
 8005626:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800562a:	f6bf af11 	bge.w	8005450 <__ieee754_rem_pio2+0x78>
 800562e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005632:	6063      	str	r3, [r4, #4]
 8005634:	f8c4 8000 	str.w	r8, [r4]
 8005638:	60a0      	str	r0, [r4, #8]
 800563a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800563e:	60e3      	str	r3, [r4, #12]
 8005640:	426d      	negs	r5, r5
 8005642:	e705      	b.n	8005450 <__ieee754_rem_pio2+0x78>
 8005644:	a326      	add	r3, pc, #152	; (adr r3, 80056e0 <__ieee754_rem_pio2+0x308>)
 8005646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800564a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800564e:	f7fa ff8b 	bl	8000568 <__aeabi_dmul>
 8005652:	4606      	mov	r6, r0
 8005654:	460f      	mov	r7, r1
 8005656:	4602      	mov	r2, r0
 8005658:	460b      	mov	r3, r1
 800565a:	4640      	mov	r0, r8
 800565c:	4649      	mov	r1, r9
 800565e:	f7fa fdcb 	bl	80001f8 <__aeabi_dsub>
 8005662:	4602      	mov	r2, r0
 8005664:	460b      	mov	r3, r1
 8005666:	4682      	mov	sl, r0
 8005668:	468b      	mov	fp, r1
 800566a:	4640      	mov	r0, r8
 800566c:	4649      	mov	r1, r9
 800566e:	f7fa fdc3 	bl	80001f8 <__aeabi_dsub>
 8005672:	4632      	mov	r2, r6
 8005674:	463b      	mov	r3, r7
 8005676:	f7fa fdbf 	bl	80001f8 <__aeabi_dsub>
 800567a:	a31b      	add	r3, pc, #108	; (adr r3, 80056e8 <__ieee754_rem_pio2+0x310>)
 800567c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005680:	4606      	mov	r6, r0
 8005682:	460f      	mov	r7, r1
 8005684:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005688:	f7fa ff6e 	bl	8000568 <__aeabi_dmul>
 800568c:	4632      	mov	r2, r6
 800568e:	463b      	mov	r3, r7
 8005690:	f7fa fdb2 	bl	80001f8 <__aeabi_dsub>
 8005694:	4606      	mov	r6, r0
 8005696:	460f      	mov	r7, r1
 8005698:	e764      	b.n	8005564 <__ieee754_rem_pio2+0x18c>
 800569a:	4b1b      	ldr	r3, [pc, #108]	; (8005708 <__ieee754_rem_pio2+0x330>)
 800569c:	4598      	cmp	r8, r3
 800569e:	dd35      	ble.n	800570c <__ieee754_rem_pio2+0x334>
 80056a0:	ee10 2a10 	vmov	r2, s0
 80056a4:	463b      	mov	r3, r7
 80056a6:	4630      	mov	r0, r6
 80056a8:	4639      	mov	r1, r7
 80056aa:	f7fa fda5 	bl	80001f8 <__aeabi_dsub>
 80056ae:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80056b2:	e9c4 0100 	strd	r0, r1, [r4]
 80056b6:	e6a1      	b.n	80053fc <__ieee754_rem_pio2+0x24>
 80056b8:	54400000 	.word	0x54400000
 80056bc:	3ff921fb 	.word	0x3ff921fb
 80056c0:	1a626331 	.word	0x1a626331
 80056c4:	3dd0b461 	.word	0x3dd0b461
 80056c8:	1a600000 	.word	0x1a600000
 80056cc:	3dd0b461 	.word	0x3dd0b461
 80056d0:	2e037073 	.word	0x2e037073
 80056d4:	3ba3198a 	.word	0x3ba3198a
 80056d8:	6dc9c883 	.word	0x6dc9c883
 80056dc:	3fe45f30 	.word	0x3fe45f30
 80056e0:	2e000000 	.word	0x2e000000
 80056e4:	3ba3198a 	.word	0x3ba3198a
 80056e8:	252049c1 	.word	0x252049c1
 80056ec:	397b839a 	.word	0x397b839a
 80056f0:	3fe921fb 	.word	0x3fe921fb
 80056f4:	4002d97b 	.word	0x4002d97b
 80056f8:	3ff921fb 	.word	0x3ff921fb
 80056fc:	413921fb 	.word	0x413921fb
 8005700:	3fe00000 	.word	0x3fe00000
 8005704:	080063e8 	.word	0x080063e8
 8005708:	7fefffff 	.word	0x7fefffff
 800570c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8005710:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8005714:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8005718:	4630      	mov	r0, r6
 800571a:	460f      	mov	r7, r1
 800571c:	f7fb f9be 	bl	8000a9c <__aeabi_d2iz>
 8005720:	f7fa feb8 	bl	8000494 <__aeabi_i2d>
 8005724:	4602      	mov	r2, r0
 8005726:	460b      	mov	r3, r1
 8005728:	4630      	mov	r0, r6
 800572a:	4639      	mov	r1, r7
 800572c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005730:	f7fa fd62 	bl	80001f8 <__aeabi_dsub>
 8005734:	2200      	movs	r2, #0
 8005736:	4b1f      	ldr	r3, [pc, #124]	; (80057b4 <__ieee754_rem_pio2+0x3dc>)
 8005738:	f7fa ff16 	bl	8000568 <__aeabi_dmul>
 800573c:	460f      	mov	r7, r1
 800573e:	4606      	mov	r6, r0
 8005740:	f7fb f9ac 	bl	8000a9c <__aeabi_d2iz>
 8005744:	f7fa fea6 	bl	8000494 <__aeabi_i2d>
 8005748:	4602      	mov	r2, r0
 800574a:	460b      	mov	r3, r1
 800574c:	4630      	mov	r0, r6
 800574e:	4639      	mov	r1, r7
 8005750:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005754:	f7fa fd50 	bl	80001f8 <__aeabi_dsub>
 8005758:	2200      	movs	r2, #0
 800575a:	4b16      	ldr	r3, [pc, #88]	; (80057b4 <__ieee754_rem_pio2+0x3dc>)
 800575c:	f7fa ff04 	bl	8000568 <__aeabi_dmul>
 8005760:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005764:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8005768:	f04f 0803 	mov.w	r8, #3
 800576c:	2600      	movs	r6, #0
 800576e:	2700      	movs	r7, #0
 8005770:	4632      	mov	r2, r6
 8005772:	463b      	mov	r3, r7
 8005774:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8005778:	f108 3aff 	add.w	sl, r8, #4294967295
 800577c:	f7fb f95c 	bl	8000a38 <__aeabi_dcmpeq>
 8005780:	b9b0      	cbnz	r0, 80057b0 <__ieee754_rem_pio2+0x3d8>
 8005782:	4b0d      	ldr	r3, [pc, #52]	; (80057b8 <__ieee754_rem_pio2+0x3e0>)
 8005784:	9301      	str	r3, [sp, #4]
 8005786:	2302      	movs	r3, #2
 8005788:	9300      	str	r3, [sp, #0]
 800578a:	462a      	mov	r2, r5
 800578c:	4643      	mov	r3, r8
 800578e:	4621      	mov	r1, r4
 8005790:	a806      	add	r0, sp, #24
 8005792:	f000 f8dd 	bl	8005950 <__kernel_rem_pio2>
 8005796:	9b04      	ldr	r3, [sp, #16]
 8005798:	2b00      	cmp	r3, #0
 800579a:	4605      	mov	r5, r0
 800579c:	f6bf ae58 	bge.w	8005450 <__ieee754_rem_pio2+0x78>
 80057a0:	6863      	ldr	r3, [r4, #4]
 80057a2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80057a6:	6063      	str	r3, [r4, #4]
 80057a8:	68e3      	ldr	r3, [r4, #12]
 80057aa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80057ae:	e746      	b.n	800563e <__ieee754_rem_pio2+0x266>
 80057b0:	46d0      	mov	r8, sl
 80057b2:	e7dd      	b.n	8005770 <__ieee754_rem_pio2+0x398>
 80057b4:	41700000 	.word	0x41700000
 80057b8:	08006468 	.word	0x08006468
 80057bc:	00000000 	.word	0x00000000

080057c0 <__kernel_cos>:
 80057c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057c4:	ec59 8b10 	vmov	r8, r9, d0
 80057c8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80057cc:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80057d0:	ed2d 8b02 	vpush	{d8}
 80057d4:	eeb0 8a41 	vmov.f32	s16, s2
 80057d8:	eef0 8a61 	vmov.f32	s17, s3
 80057dc:	da07      	bge.n	80057ee <__kernel_cos+0x2e>
 80057de:	ee10 0a10 	vmov	r0, s0
 80057e2:	4649      	mov	r1, r9
 80057e4:	f7fb f95a 	bl	8000a9c <__aeabi_d2iz>
 80057e8:	2800      	cmp	r0, #0
 80057ea:	f000 8089 	beq.w	8005900 <__kernel_cos+0x140>
 80057ee:	4642      	mov	r2, r8
 80057f0:	464b      	mov	r3, r9
 80057f2:	4640      	mov	r0, r8
 80057f4:	4649      	mov	r1, r9
 80057f6:	f7fa feb7 	bl	8000568 <__aeabi_dmul>
 80057fa:	2200      	movs	r2, #0
 80057fc:	4b4e      	ldr	r3, [pc, #312]	; (8005938 <__kernel_cos+0x178>)
 80057fe:	4604      	mov	r4, r0
 8005800:	460d      	mov	r5, r1
 8005802:	f7fa feb1 	bl	8000568 <__aeabi_dmul>
 8005806:	a340      	add	r3, pc, #256	; (adr r3, 8005908 <__kernel_cos+0x148>)
 8005808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580c:	4682      	mov	sl, r0
 800580e:	468b      	mov	fp, r1
 8005810:	4620      	mov	r0, r4
 8005812:	4629      	mov	r1, r5
 8005814:	f7fa fea8 	bl	8000568 <__aeabi_dmul>
 8005818:	a33d      	add	r3, pc, #244	; (adr r3, 8005910 <__kernel_cos+0x150>)
 800581a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581e:	f7fa fced 	bl	80001fc <__adddf3>
 8005822:	4622      	mov	r2, r4
 8005824:	462b      	mov	r3, r5
 8005826:	f7fa fe9f 	bl	8000568 <__aeabi_dmul>
 800582a:	a33b      	add	r3, pc, #236	; (adr r3, 8005918 <__kernel_cos+0x158>)
 800582c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005830:	f7fa fce2 	bl	80001f8 <__aeabi_dsub>
 8005834:	4622      	mov	r2, r4
 8005836:	462b      	mov	r3, r5
 8005838:	f7fa fe96 	bl	8000568 <__aeabi_dmul>
 800583c:	a338      	add	r3, pc, #224	; (adr r3, 8005920 <__kernel_cos+0x160>)
 800583e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005842:	f7fa fcdb 	bl	80001fc <__adddf3>
 8005846:	4622      	mov	r2, r4
 8005848:	462b      	mov	r3, r5
 800584a:	f7fa fe8d 	bl	8000568 <__aeabi_dmul>
 800584e:	a336      	add	r3, pc, #216	; (adr r3, 8005928 <__kernel_cos+0x168>)
 8005850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005854:	f7fa fcd0 	bl	80001f8 <__aeabi_dsub>
 8005858:	4622      	mov	r2, r4
 800585a:	462b      	mov	r3, r5
 800585c:	f7fa fe84 	bl	8000568 <__aeabi_dmul>
 8005860:	a333      	add	r3, pc, #204	; (adr r3, 8005930 <__kernel_cos+0x170>)
 8005862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005866:	f7fa fcc9 	bl	80001fc <__adddf3>
 800586a:	4622      	mov	r2, r4
 800586c:	462b      	mov	r3, r5
 800586e:	f7fa fe7b 	bl	8000568 <__aeabi_dmul>
 8005872:	4622      	mov	r2, r4
 8005874:	462b      	mov	r3, r5
 8005876:	f7fa fe77 	bl	8000568 <__aeabi_dmul>
 800587a:	ec53 2b18 	vmov	r2, r3, d8
 800587e:	4604      	mov	r4, r0
 8005880:	460d      	mov	r5, r1
 8005882:	4640      	mov	r0, r8
 8005884:	4649      	mov	r1, r9
 8005886:	f7fa fe6f 	bl	8000568 <__aeabi_dmul>
 800588a:	460b      	mov	r3, r1
 800588c:	4602      	mov	r2, r0
 800588e:	4629      	mov	r1, r5
 8005890:	4620      	mov	r0, r4
 8005892:	f7fa fcb1 	bl	80001f8 <__aeabi_dsub>
 8005896:	4b29      	ldr	r3, [pc, #164]	; (800593c <__kernel_cos+0x17c>)
 8005898:	429e      	cmp	r6, r3
 800589a:	4680      	mov	r8, r0
 800589c:	4689      	mov	r9, r1
 800589e:	dc11      	bgt.n	80058c4 <__kernel_cos+0x104>
 80058a0:	4602      	mov	r2, r0
 80058a2:	460b      	mov	r3, r1
 80058a4:	4650      	mov	r0, sl
 80058a6:	4659      	mov	r1, fp
 80058a8:	f7fa fca6 	bl	80001f8 <__aeabi_dsub>
 80058ac:	460b      	mov	r3, r1
 80058ae:	4924      	ldr	r1, [pc, #144]	; (8005940 <__kernel_cos+0x180>)
 80058b0:	4602      	mov	r2, r0
 80058b2:	2000      	movs	r0, #0
 80058b4:	f7fa fca0 	bl	80001f8 <__aeabi_dsub>
 80058b8:	ecbd 8b02 	vpop	{d8}
 80058bc:	ec41 0b10 	vmov	d0, r0, r1
 80058c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058c4:	4b1f      	ldr	r3, [pc, #124]	; (8005944 <__kernel_cos+0x184>)
 80058c6:	491e      	ldr	r1, [pc, #120]	; (8005940 <__kernel_cos+0x180>)
 80058c8:	429e      	cmp	r6, r3
 80058ca:	bfcc      	ite	gt
 80058cc:	4d1e      	ldrgt	r5, [pc, #120]	; (8005948 <__kernel_cos+0x188>)
 80058ce:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80058d2:	2400      	movs	r4, #0
 80058d4:	4622      	mov	r2, r4
 80058d6:	462b      	mov	r3, r5
 80058d8:	2000      	movs	r0, #0
 80058da:	f7fa fc8d 	bl	80001f8 <__aeabi_dsub>
 80058de:	4622      	mov	r2, r4
 80058e0:	4606      	mov	r6, r0
 80058e2:	460f      	mov	r7, r1
 80058e4:	462b      	mov	r3, r5
 80058e6:	4650      	mov	r0, sl
 80058e8:	4659      	mov	r1, fp
 80058ea:	f7fa fc85 	bl	80001f8 <__aeabi_dsub>
 80058ee:	4642      	mov	r2, r8
 80058f0:	464b      	mov	r3, r9
 80058f2:	f7fa fc81 	bl	80001f8 <__aeabi_dsub>
 80058f6:	4602      	mov	r2, r0
 80058f8:	460b      	mov	r3, r1
 80058fa:	4630      	mov	r0, r6
 80058fc:	4639      	mov	r1, r7
 80058fe:	e7d9      	b.n	80058b4 <__kernel_cos+0xf4>
 8005900:	2000      	movs	r0, #0
 8005902:	490f      	ldr	r1, [pc, #60]	; (8005940 <__kernel_cos+0x180>)
 8005904:	e7d8      	b.n	80058b8 <__kernel_cos+0xf8>
 8005906:	bf00      	nop
 8005908:	be8838d4 	.word	0xbe8838d4
 800590c:	bda8fae9 	.word	0xbda8fae9
 8005910:	bdb4b1c4 	.word	0xbdb4b1c4
 8005914:	3e21ee9e 	.word	0x3e21ee9e
 8005918:	809c52ad 	.word	0x809c52ad
 800591c:	3e927e4f 	.word	0x3e927e4f
 8005920:	19cb1590 	.word	0x19cb1590
 8005924:	3efa01a0 	.word	0x3efa01a0
 8005928:	16c15177 	.word	0x16c15177
 800592c:	3f56c16c 	.word	0x3f56c16c
 8005930:	5555554c 	.word	0x5555554c
 8005934:	3fa55555 	.word	0x3fa55555
 8005938:	3fe00000 	.word	0x3fe00000
 800593c:	3fd33332 	.word	0x3fd33332
 8005940:	3ff00000 	.word	0x3ff00000
 8005944:	3fe90000 	.word	0x3fe90000
 8005948:	3fd20000 	.word	0x3fd20000
 800594c:	00000000 	.word	0x00000000

08005950 <__kernel_rem_pio2>:
 8005950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005954:	ed2d 8b02 	vpush	{d8}
 8005958:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800595c:	1ed4      	subs	r4, r2, #3
 800595e:	9308      	str	r3, [sp, #32]
 8005960:	9101      	str	r1, [sp, #4]
 8005962:	4bc5      	ldr	r3, [pc, #788]	; (8005c78 <__kernel_rem_pio2+0x328>)
 8005964:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8005966:	9009      	str	r0, [sp, #36]	; 0x24
 8005968:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800596c:	9304      	str	r3, [sp, #16]
 800596e:	9b08      	ldr	r3, [sp, #32]
 8005970:	3b01      	subs	r3, #1
 8005972:	9307      	str	r3, [sp, #28]
 8005974:	2318      	movs	r3, #24
 8005976:	fb94 f4f3 	sdiv	r4, r4, r3
 800597a:	f06f 0317 	mvn.w	r3, #23
 800597e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8005982:	fb04 3303 	mla	r3, r4, r3, r3
 8005986:	eb03 0a02 	add.w	sl, r3, r2
 800598a:	9b04      	ldr	r3, [sp, #16]
 800598c:	9a07      	ldr	r2, [sp, #28]
 800598e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8005c68 <__kernel_rem_pio2+0x318>
 8005992:	eb03 0802 	add.w	r8, r3, r2
 8005996:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005998:	1aa7      	subs	r7, r4, r2
 800599a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800599e:	ae22      	add	r6, sp, #136	; 0x88
 80059a0:	2500      	movs	r5, #0
 80059a2:	4545      	cmp	r5, r8
 80059a4:	dd13      	ble.n	80059ce <__kernel_rem_pio2+0x7e>
 80059a6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8005c68 <__kernel_rem_pio2+0x318>
 80059aa:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80059ae:	2600      	movs	r6, #0
 80059b0:	9b04      	ldr	r3, [sp, #16]
 80059b2:	429e      	cmp	r6, r3
 80059b4:	dc32      	bgt.n	8005a1c <__kernel_rem_pio2+0xcc>
 80059b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059b8:	9302      	str	r3, [sp, #8]
 80059ba:	9b08      	ldr	r3, [sp, #32]
 80059bc:	199d      	adds	r5, r3, r6
 80059be:	ab22      	add	r3, sp, #136	; 0x88
 80059c0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80059c4:	9306      	str	r3, [sp, #24]
 80059c6:	ec59 8b18 	vmov	r8, r9, d8
 80059ca:	2700      	movs	r7, #0
 80059cc:	e01f      	b.n	8005a0e <__kernel_rem_pio2+0xbe>
 80059ce:	42ef      	cmn	r7, r5
 80059d0:	d407      	bmi.n	80059e2 <__kernel_rem_pio2+0x92>
 80059d2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80059d6:	f7fa fd5d 	bl	8000494 <__aeabi_i2d>
 80059da:	e8e6 0102 	strd	r0, r1, [r6], #8
 80059de:	3501      	adds	r5, #1
 80059e0:	e7df      	b.n	80059a2 <__kernel_rem_pio2+0x52>
 80059e2:	ec51 0b18 	vmov	r0, r1, d8
 80059e6:	e7f8      	b.n	80059da <__kernel_rem_pio2+0x8a>
 80059e8:	9906      	ldr	r1, [sp, #24]
 80059ea:	9d02      	ldr	r5, [sp, #8]
 80059ec:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80059f0:	9106      	str	r1, [sp, #24]
 80059f2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80059f6:	9502      	str	r5, [sp, #8]
 80059f8:	f7fa fdb6 	bl	8000568 <__aeabi_dmul>
 80059fc:	4602      	mov	r2, r0
 80059fe:	460b      	mov	r3, r1
 8005a00:	4640      	mov	r0, r8
 8005a02:	4649      	mov	r1, r9
 8005a04:	f7fa fbfa 	bl	80001fc <__adddf3>
 8005a08:	3701      	adds	r7, #1
 8005a0a:	4680      	mov	r8, r0
 8005a0c:	4689      	mov	r9, r1
 8005a0e:	9b07      	ldr	r3, [sp, #28]
 8005a10:	429f      	cmp	r7, r3
 8005a12:	dde9      	ble.n	80059e8 <__kernel_rem_pio2+0x98>
 8005a14:	e8eb 8902 	strd	r8, r9, [fp], #8
 8005a18:	3601      	adds	r6, #1
 8005a1a:	e7c9      	b.n	80059b0 <__kernel_rem_pio2+0x60>
 8005a1c:	9b04      	ldr	r3, [sp, #16]
 8005a1e:	aa0e      	add	r2, sp, #56	; 0x38
 8005a20:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005a24:	930c      	str	r3, [sp, #48]	; 0x30
 8005a26:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005a28:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005a2c:	9c04      	ldr	r4, [sp, #16]
 8005a2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a30:	ab9a      	add	r3, sp, #616	; 0x268
 8005a32:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8005a36:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005a3a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005a3e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8005a42:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8005a46:	ab9a      	add	r3, sp, #616	; 0x268
 8005a48:	445b      	add	r3, fp
 8005a4a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8005a4e:	2500      	movs	r5, #0
 8005a50:	1b63      	subs	r3, r4, r5
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	dc78      	bgt.n	8005b48 <__kernel_rem_pio2+0x1f8>
 8005a56:	4650      	mov	r0, sl
 8005a58:	ec49 8b10 	vmov	d0, r8, r9
 8005a5c:	f000 fc00 	bl	8006260 <scalbn>
 8005a60:	ec57 6b10 	vmov	r6, r7, d0
 8005a64:	2200      	movs	r2, #0
 8005a66:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005a6a:	ee10 0a10 	vmov	r0, s0
 8005a6e:	4639      	mov	r1, r7
 8005a70:	f7fa fd7a 	bl	8000568 <__aeabi_dmul>
 8005a74:	ec41 0b10 	vmov	d0, r0, r1
 8005a78:	f000 fb6e 	bl	8006158 <floor>
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	ec51 0b10 	vmov	r0, r1, d0
 8005a82:	4b7e      	ldr	r3, [pc, #504]	; (8005c7c <__kernel_rem_pio2+0x32c>)
 8005a84:	f7fa fd70 	bl	8000568 <__aeabi_dmul>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	4630      	mov	r0, r6
 8005a8e:	4639      	mov	r1, r7
 8005a90:	f7fa fbb2 	bl	80001f8 <__aeabi_dsub>
 8005a94:	460f      	mov	r7, r1
 8005a96:	4606      	mov	r6, r0
 8005a98:	f7fb f800 	bl	8000a9c <__aeabi_d2iz>
 8005a9c:	9006      	str	r0, [sp, #24]
 8005a9e:	f7fa fcf9 	bl	8000494 <__aeabi_i2d>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	4630      	mov	r0, r6
 8005aa8:	4639      	mov	r1, r7
 8005aaa:	f7fa fba5 	bl	80001f8 <__aeabi_dsub>
 8005aae:	f1ba 0f00 	cmp.w	sl, #0
 8005ab2:	4606      	mov	r6, r0
 8005ab4:	460f      	mov	r7, r1
 8005ab6:	dd6c      	ble.n	8005b92 <__kernel_rem_pio2+0x242>
 8005ab8:	1e62      	subs	r2, r4, #1
 8005aba:	ab0e      	add	r3, sp, #56	; 0x38
 8005abc:	f1ca 0118 	rsb	r1, sl, #24
 8005ac0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005ac4:	9d06      	ldr	r5, [sp, #24]
 8005ac6:	fa40 f301 	asr.w	r3, r0, r1
 8005aca:	441d      	add	r5, r3
 8005acc:	408b      	lsls	r3, r1
 8005ace:	1ac0      	subs	r0, r0, r3
 8005ad0:	ab0e      	add	r3, sp, #56	; 0x38
 8005ad2:	9506      	str	r5, [sp, #24]
 8005ad4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8005ad8:	f1ca 0317 	rsb	r3, sl, #23
 8005adc:	fa40 f303 	asr.w	r3, r0, r3
 8005ae0:	9302      	str	r3, [sp, #8]
 8005ae2:	9b02      	ldr	r3, [sp, #8]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	dd62      	ble.n	8005bae <__kernel_rem_pio2+0x25e>
 8005ae8:	9b06      	ldr	r3, [sp, #24]
 8005aea:	2200      	movs	r2, #0
 8005aec:	3301      	adds	r3, #1
 8005aee:	9306      	str	r3, [sp, #24]
 8005af0:	4615      	mov	r5, r2
 8005af2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005af6:	4294      	cmp	r4, r2
 8005af8:	f300 8095 	bgt.w	8005c26 <__kernel_rem_pio2+0x2d6>
 8005afc:	f1ba 0f00 	cmp.w	sl, #0
 8005b00:	dd07      	ble.n	8005b12 <__kernel_rem_pio2+0x1c2>
 8005b02:	f1ba 0f01 	cmp.w	sl, #1
 8005b06:	f000 80a2 	beq.w	8005c4e <__kernel_rem_pio2+0x2fe>
 8005b0a:	f1ba 0f02 	cmp.w	sl, #2
 8005b0e:	f000 80c1 	beq.w	8005c94 <__kernel_rem_pio2+0x344>
 8005b12:	9b02      	ldr	r3, [sp, #8]
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d14a      	bne.n	8005bae <__kernel_rem_pio2+0x25e>
 8005b18:	4632      	mov	r2, r6
 8005b1a:	463b      	mov	r3, r7
 8005b1c:	2000      	movs	r0, #0
 8005b1e:	4958      	ldr	r1, [pc, #352]	; (8005c80 <__kernel_rem_pio2+0x330>)
 8005b20:	f7fa fb6a 	bl	80001f8 <__aeabi_dsub>
 8005b24:	4606      	mov	r6, r0
 8005b26:	460f      	mov	r7, r1
 8005b28:	2d00      	cmp	r5, #0
 8005b2a:	d040      	beq.n	8005bae <__kernel_rem_pio2+0x25e>
 8005b2c:	4650      	mov	r0, sl
 8005b2e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8005c70 <__kernel_rem_pio2+0x320>
 8005b32:	f000 fb95 	bl	8006260 <scalbn>
 8005b36:	4630      	mov	r0, r6
 8005b38:	4639      	mov	r1, r7
 8005b3a:	ec53 2b10 	vmov	r2, r3, d0
 8005b3e:	f7fa fb5b 	bl	80001f8 <__aeabi_dsub>
 8005b42:	4606      	mov	r6, r0
 8005b44:	460f      	mov	r7, r1
 8005b46:	e032      	b.n	8005bae <__kernel_rem_pio2+0x25e>
 8005b48:	2200      	movs	r2, #0
 8005b4a:	4b4e      	ldr	r3, [pc, #312]	; (8005c84 <__kernel_rem_pio2+0x334>)
 8005b4c:	4640      	mov	r0, r8
 8005b4e:	4649      	mov	r1, r9
 8005b50:	f7fa fd0a 	bl	8000568 <__aeabi_dmul>
 8005b54:	f7fa ffa2 	bl	8000a9c <__aeabi_d2iz>
 8005b58:	f7fa fc9c 	bl	8000494 <__aeabi_i2d>
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	4b4a      	ldr	r3, [pc, #296]	; (8005c88 <__kernel_rem_pio2+0x338>)
 8005b60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b64:	f7fa fd00 	bl	8000568 <__aeabi_dmul>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	4640      	mov	r0, r8
 8005b6e:	4649      	mov	r1, r9
 8005b70:	f7fa fb42 	bl	80001f8 <__aeabi_dsub>
 8005b74:	f7fa ff92 	bl	8000a9c <__aeabi_d2iz>
 8005b78:	ab0e      	add	r3, sp, #56	; 0x38
 8005b7a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8005b7e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8005b82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b86:	f7fa fb39 	bl	80001fc <__adddf3>
 8005b8a:	3501      	adds	r5, #1
 8005b8c:	4680      	mov	r8, r0
 8005b8e:	4689      	mov	r9, r1
 8005b90:	e75e      	b.n	8005a50 <__kernel_rem_pio2+0x100>
 8005b92:	d105      	bne.n	8005ba0 <__kernel_rem_pio2+0x250>
 8005b94:	1e63      	subs	r3, r4, #1
 8005b96:	aa0e      	add	r2, sp, #56	; 0x38
 8005b98:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005b9c:	15c3      	asrs	r3, r0, #23
 8005b9e:	e79f      	b.n	8005ae0 <__kernel_rem_pio2+0x190>
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	4b3a      	ldr	r3, [pc, #232]	; (8005c8c <__kernel_rem_pio2+0x33c>)
 8005ba4:	f7fa ff66 	bl	8000a74 <__aeabi_dcmpge>
 8005ba8:	2800      	cmp	r0, #0
 8005baa:	d139      	bne.n	8005c20 <__kernel_rem_pio2+0x2d0>
 8005bac:	9002      	str	r0, [sp, #8]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	4630      	mov	r0, r6
 8005bb4:	4639      	mov	r1, r7
 8005bb6:	f7fa ff3f 	bl	8000a38 <__aeabi_dcmpeq>
 8005bba:	2800      	cmp	r0, #0
 8005bbc:	f000 80c7 	beq.w	8005d4e <__kernel_rem_pio2+0x3fe>
 8005bc0:	1e65      	subs	r5, r4, #1
 8005bc2:	462b      	mov	r3, r5
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	9904      	ldr	r1, [sp, #16]
 8005bc8:	428b      	cmp	r3, r1
 8005bca:	da6a      	bge.n	8005ca2 <__kernel_rem_pio2+0x352>
 8005bcc:	2a00      	cmp	r2, #0
 8005bce:	f000 8088 	beq.w	8005ce2 <__kernel_rem_pio2+0x392>
 8005bd2:	ab0e      	add	r3, sp, #56	; 0x38
 8005bd4:	f1aa 0a18 	sub.w	sl, sl, #24
 8005bd8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	f000 80b4 	beq.w	8005d4a <__kernel_rem_pio2+0x3fa>
 8005be2:	4650      	mov	r0, sl
 8005be4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8005c70 <__kernel_rem_pio2+0x320>
 8005be8:	f000 fb3a 	bl	8006260 <scalbn>
 8005bec:	00ec      	lsls	r4, r5, #3
 8005bee:	ab72      	add	r3, sp, #456	; 0x1c8
 8005bf0:	191e      	adds	r6, r3, r4
 8005bf2:	ec59 8b10 	vmov	r8, r9, d0
 8005bf6:	f106 0a08 	add.w	sl, r6, #8
 8005bfa:	462f      	mov	r7, r5
 8005bfc:	2f00      	cmp	r7, #0
 8005bfe:	f280 80df 	bge.w	8005dc0 <__kernel_rem_pio2+0x470>
 8005c02:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8005c68 <__kernel_rem_pio2+0x318>
 8005c06:	f04f 0a00 	mov.w	sl, #0
 8005c0a:	eba5 030a 	sub.w	r3, r5, sl
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	f2c0 810a 	blt.w	8005e28 <__kernel_rem_pio2+0x4d8>
 8005c14:	f8df b078 	ldr.w	fp, [pc, #120]	; 8005c90 <__kernel_rem_pio2+0x340>
 8005c18:	ec59 8b18 	vmov	r8, r9, d8
 8005c1c:	2700      	movs	r7, #0
 8005c1e:	e0f5      	b.n	8005e0c <__kernel_rem_pio2+0x4bc>
 8005c20:	2302      	movs	r3, #2
 8005c22:	9302      	str	r3, [sp, #8]
 8005c24:	e760      	b.n	8005ae8 <__kernel_rem_pio2+0x198>
 8005c26:	ab0e      	add	r3, sp, #56	; 0x38
 8005c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c2c:	b94d      	cbnz	r5, 8005c42 <__kernel_rem_pio2+0x2f2>
 8005c2e:	b12b      	cbz	r3, 8005c3c <__kernel_rem_pio2+0x2ec>
 8005c30:	a80e      	add	r0, sp, #56	; 0x38
 8005c32:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005c36:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	3201      	adds	r2, #1
 8005c3e:	461d      	mov	r5, r3
 8005c40:	e759      	b.n	8005af6 <__kernel_rem_pio2+0x1a6>
 8005c42:	a80e      	add	r0, sp, #56	; 0x38
 8005c44:	1acb      	subs	r3, r1, r3
 8005c46:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8005c4a:	462b      	mov	r3, r5
 8005c4c:	e7f6      	b.n	8005c3c <__kernel_rem_pio2+0x2ec>
 8005c4e:	1e62      	subs	r2, r4, #1
 8005c50:	ab0e      	add	r3, sp, #56	; 0x38
 8005c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c56:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005c5a:	a90e      	add	r1, sp, #56	; 0x38
 8005c5c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005c60:	e757      	b.n	8005b12 <__kernel_rem_pio2+0x1c2>
 8005c62:	bf00      	nop
 8005c64:	f3af 8000 	nop.w
	...
 8005c74:	3ff00000 	.word	0x3ff00000
 8005c78:	080065b0 	.word	0x080065b0
 8005c7c:	40200000 	.word	0x40200000
 8005c80:	3ff00000 	.word	0x3ff00000
 8005c84:	3e700000 	.word	0x3e700000
 8005c88:	41700000 	.word	0x41700000
 8005c8c:	3fe00000 	.word	0x3fe00000
 8005c90:	08006570 	.word	0x08006570
 8005c94:	1e62      	subs	r2, r4, #1
 8005c96:	ab0e      	add	r3, sp, #56	; 0x38
 8005c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c9c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005ca0:	e7db      	b.n	8005c5a <__kernel_rem_pio2+0x30a>
 8005ca2:	a90e      	add	r1, sp, #56	; 0x38
 8005ca4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	430a      	orrs	r2, r1
 8005cac:	e78b      	b.n	8005bc6 <__kernel_rem_pio2+0x276>
 8005cae:	3301      	adds	r3, #1
 8005cb0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005cb4:	2900      	cmp	r1, #0
 8005cb6:	d0fa      	beq.n	8005cae <__kernel_rem_pio2+0x35e>
 8005cb8:	9a08      	ldr	r2, [sp, #32]
 8005cba:	4422      	add	r2, r4
 8005cbc:	00d2      	lsls	r2, r2, #3
 8005cbe:	a922      	add	r1, sp, #136	; 0x88
 8005cc0:	18e3      	adds	r3, r4, r3
 8005cc2:	9206      	str	r2, [sp, #24]
 8005cc4:	440a      	add	r2, r1
 8005cc6:	9302      	str	r3, [sp, #8]
 8005cc8:	f10b 0108 	add.w	r1, fp, #8
 8005ccc:	f102 0308 	add.w	r3, r2, #8
 8005cd0:	1c66      	adds	r6, r4, #1
 8005cd2:	910a      	str	r1, [sp, #40]	; 0x28
 8005cd4:	2500      	movs	r5, #0
 8005cd6:	930d      	str	r3, [sp, #52]	; 0x34
 8005cd8:	9b02      	ldr	r3, [sp, #8]
 8005cda:	42b3      	cmp	r3, r6
 8005cdc:	da04      	bge.n	8005ce8 <__kernel_rem_pio2+0x398>
 8005cde:	461c      	mov	r4, r3
 8005ce0:	e6a6      	b.n	8005a30 <__kernel_rem_pio2+0xe0>
 8005ce2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e7e3      	b.n	8005cb0 <__kernel_rem_pio2+0x360>
 8005ce8:	9b06      	ldr	r3, [sp, #24]
 8005cea:	18ef      	adds	r7, r5, r3
 8005cec:	ab22      	add	r3, sp, #136	; 0x88
 8005cee:	441f      	add	r7, r3
 8005cf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cf2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005cf6:	f7fa fbcd 	bl	8000494 <__aeabi_i2d>
 8005cfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cfc:	461c      	mov	r4, r3
 8005cfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d00:	e9c7 0100 	strd	r0, r1, [r7]
 8005d04:	eb03 0b05 	add.w	fp, r3, r5
 8005d08:	2700      	movs	r7, #0
 8005d0a:	f04f 0800 	mov.w	r8, #0
 8005d0e:	f04f 0900 	mov.w	r9, #0
 8005d12:	9b07      	ldr	r3, [sp, #28]
 8005d14:	429f      	cmp	r7, r3
 8005d16:	dd08      	ble.n	8005d2a <__kernel_rem_pio2+0x3da>
 8005d18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d1a:	aa72      	add	r2, sp, #456	; 0x1c8
 8005d1c:	18eb      	adds	r3, r5, r3
 8005d1e:	4413      	add	r3, r2
 8005d20:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8005d24:	3601      	adds	r6, #1
 8005d26:	3508      	adds	r5, #8
 8005d28:	e7d6      	b.n	8005cd8 <__kernel_rem_pio2+0x388>
 8005d2a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8005d2e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8005d32:	f7fa fc19 	bl	8000568 <__aeabi_dmul>
 8005d36:	4602      	mov	r2, r0
 8005d38:	460b      	mov	r3, r1
 8005d3a:	4640      	mov	r0, r8
 8005d3c:	4649      	mov	r1, r9
 8005d3e:	f7fa fa5d 	bl	80001fc <__adddf3>
 8005d42:	3701      	adds	r7, #1
 8005d44:	4680      	mov	r8, r0
 8005d46:	4689      	mov	r9, r1
 8005d48:	e7e3      	b.n	8005d12 <__kernel_rem_pio2+0x3c2>
 8005d4a:	3d01      	subs	r5, #1
 8005d4c:	e741      	b.n	8005bd2 <__kernel_rem_pio2+0x282>
 8005d4e:	f1ca 0000 	rsb	r0, sl, #0
 8005d52:	ec47 6b10 	vmov	d0, r6, r7
 8005d56:	f000 fa83 	bl	8006260 <scalbn>
 8005d5a:	ec57 6b10 	vmov	r6, r7, d0
 8005d5e:	2200      	movs	r2, #0
 8005d60:	4b99      	ldr	r3, [pc, #612]	; (8005fc8 <__kernel_rem_pio2+0x678>)
 8005d62:	ee10 0a10 	vmov	r0, s0
 8005d66:	4639      	mov	r1, r7
 8005d68:	f7fa fe84 	bl	8000a74 <__aeabi_dcmpge>
 8005d6c:	b1f8      	cbz	r0, 8005dae <__kernel_rem_pio2+0x45e>
 8005d6e:	2200      	movs	r2, #0
 8005d70:	4b96      	ldr	r3, [pc, #600]	; (8005fcc <__kernel_rem_pio2+0x67c>)
 8005d72:	4630      	mov	r0, r6
 8005d74:	4639      	mov	r1, r7
 8005d76:	f7fa fbf7 	bl	8000568 <__aeabi_dmul>
 8005d7a:	f7fa fe8f 	bl	8000a9c <__aeabi_d2iz>
 8005d7e:	4680      	mov	r8, r0
 8005d80:	f7fa fb88 	bl	8000494 <__aeabi_i2d>
 8005d84:	2200      	movs	r2, #0
 8005d86:	4b90      	ldr	r3, [pc, #576]	; (8005fc8 <__kernel_rem_pio2+0x678>)
 8005d88:	f7fa fbee 	bl	8000568 <__aeabi_dmul>
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	4602      	mov	r2, r0
 8005d90:	4639      	mov	r1, r7
 8005d92:	4630      	mov	r0, r6
 8005d94:	f7fa fa30 	bl	80001f8 <__aeabi_dsub>
 8005d98:	f7fa fe80 	bl	8000a9c <__aeabi_d2iz>
 8005d9c:	1c65      	adds	r5, r4, #1
 8005d9e:	ab0e      	add	r3, sp, #56	; 0x38
 8005da0:	f10a 0a18 	add.w	sl, sl, #24
 8005da4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005da8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8005dac:	e719      	b.n	8005be2 <__kernel_rem_pio2+0x292>
 8005dae:	4630      	mov	r0, r6
 8005db0:	4639      	mov	r1, r7
 8005db2:	f7fa fe73 	bl	8000a9c <__aeabi_d2iz>
 8005db6:	ab0e      	add	r3, sp, #56	; 0x38
 8005db8:	4625      	mov	r5, r4
 8005dba:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005dbe:	e710      	b.n	8005be2 <__kernel_rem_pio2+0x292>
 8005dc0:	ab0e      	add	r3, sp, #56	; 0x38
 8005dc2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8005dc6:	f7fa fb65 	bl	8000494 <__aeabi_i2d>
 8005dca:	4642      	mov	r2, r8
 8005dcc:	464b      	mov	r3, r9
 8005dce:	f7fa fbcb 	bl	8000568 <__aeabi_dmul>
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8005dd8:	4b7c      	ldr	r3, [pc, #496]	; (8005fcc <__kernel_rem_pio2+0x67c>)
 8005dda:	4640      	mov	r0, r8
 8005ddc:	4649      	mov	r1, r9
 8005dde:	f7fa fbc3 	bl	8000568 <__aeabi_dmul>
 8005de2:	3f01      	subs	r7, #1
 8005de4:	4680      	mov	r8, r0
 8005de6:	4689      	mov	r9, r1
 8005de8:	e708      	b.n	8005bfc <__kernel_rem_pio2+0x2ac>
 8005dea:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8005dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8005df6:	f7fa fbb7 	bl	8000568 <__aeabi_dmul>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	4640      	mov	r0, r8
 8005e00:	4649      	mov	r1, r9
 8005e02:	f7fa f9fb 	bl	80001fc <__adddf3>
 8005e06:	3701      	adds	r7, #1
 8005e08:	4680      	mov	r8, r0
 8005e0a:	4689      	mov	r9, r1
 8005e0c:	9b04      	ldr	r3, [sp, #16]
 8005e0e:	429f      	cmp	r7, r3
 8005e10:	dc01      	bgt.n	8005e16 <__kernel_rem_pio2+0x4c6>
 8005e12:	45ba      	cmp	sl, r7
 8005e14:	dae9      	bge.n	8005dea <__kernel_rem_pio2+0x49a>
 8005e16:	ab4a      	add	r3, sp, #296	; 0x128
 8005e18:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005e1c:	e9c3 8900 	strd	r8, r9, [r3]
 8005e20:	f10a 0a01 	add.w	sl, sl, #1
 8005e24:	3e08      	subs	r6, #8
 8005e26:	e6f0      	b.n	8005c0a <__kernel_rem_pio2+0x2ba>
 8005e28:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005e2a:	2b03      	cmp	r3, #3
 8005e2c:	d85b      	bhi.n	8005ee6 <__kernel_rem_pio2+0x596>
 8005e2e:	e8df f003 	tbb	[pc, r3]
 8005e32:	264a      	.short	0x264a
 8005e34:	0226      	.short	0x0226
 8005e36:	ab9a      	add	r3, sp, #616	; 0x268
 8005e38:	441c      	add	r4, r3
 8005e3a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8005e3e:	46a2      	mov	sl, r4
 8005e40:	46ab      	mov	fp, r5
 8005e42:	f1bb 0f00 	cmp.w	fp, #0
 8005e46:	dc6c      	bgt.n	8005f22 <__kernel_rem_pio2+0x5d2>
 8005e48:	46a2      	mov	sl, r4
 8005e4a:	46ab      	mov	fp, r5
 8005e4c:	f1bb 0f01 	cmp.w	fp, #1
 8005e50:	f300 8086 	bgt.w	8005f60 <__kernel_rem_pio2+0x610>
 8005e54:	2000      	movs	r0, #0
 8005e56:	2100      	movs	r1, #0
 8005e58:	2d01      	cmp	r5, #1
 8005e5a:	f300 80a0 	bgt.w	8005f9e <__kernel_rem_pio2+0x64e>
 8005e5e:	9b02      	ldr	r3, [sp, #8]
 8005e60:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8005e64:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	f040 809e 	bne.w	8005faa <__kernel_rem_pio2+0x65a>
 8005e6e:	9b01      	ldr	r3, [sp, #4]
 8005e70:	e9c3 7800 	strd	r7, r8, [r3]
 8005e74:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8005e78:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005e7c:	e033      	b.n	8005ee6 <__kernel_rem_pio2+0x596>
 8005e7e:	3408      	adds	r4, #8
 8005e80:	ab4a      	add	r3, sp, #296	; 0x128
 8005e82:	441c      	add	r4, r3
 8005e84:	462e      	mov	r6, r5
 8005e86:	2000      	movs	r0, #0
 8005e88:	2100      	movs	r1, #0
 8005e8a:	2e00      	cmp	r6, #0
 8005e8c:	da3a      	bge.n	8005f04 <__kernel_rem_pio2+0x5b4>
 8005e8e:	9b02      	ldr	r3, [sp, #8]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d03d      	beq.n	8005f10 <__kernel_rem_pio2+0x5c0>
 8005e94:	4602      	mov	r2, r0
 8005e96:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005e9a:	9c01      	ldr	r4, [sp, #4]
 8005e9c:	e9c4 2300 	strd	r2, r3, [r4]
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	460b      	mov	r3, r1
 8005ea4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8005ea8:	f7fa f9a6 	bl	80001f8 <__aeabi_dsub>
 8005eac:	ae4c      	add	r6, sp, #304	; 0x130
 8005eae:	2401      	movs	r4, #1
 8005eb0:	42a5      	cmp	r5, r4
 8005eb2:	da30      	bge.n	8005f16 <__kernel_rem_pio2+0x5c6>
 8005eb4:	9b02      	ldr	r3, [sp, #8]
 8005eb6:	b113      	cbz	r3, 8005ebe <__kernel_rem_pio2+0x56e>
 8005eb8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	9b01      	ldr	r3, [sp, #4]
 8005ec0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005ec4:	e00f      	b.n	8005ee6 <__kernel_rem_pio2+0x596>
 8005ec6:	ab9a      	add	r3, sp, #616	; 0x268
 8005ec8:	441c      	add	r4, r3
 8005eca:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8005ece:	2000      	movs	r0, #0
 8005ed0:	2100      	movs	r1, #0
 8005ed2:	2d00      	cmp	r5, #0
 8005ed4:	da10      	bge.n	8005ef8 <__kernel_rem_pio2+0x5a8>
 8005ed6:	9b02      	ldr	r3, [sp, #8]
 8005ed8:	b113      	cbz	r3, 8005ee0 <__kernel_rem_pio2+0x590>
 8005eda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ede:	4619      	mov	r1, r3
 8005ee0:	9b01      	ldr	r3, [sp, #4]
 8005ee2:	e9c3 0100 	strd	r0, r1, [r3]
 8005ee6:	9b06      	ldr	r3, [sp, #24]
 8005ee8:	f003 0007 	and.w	r0, r3, #7
 8005eec:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8005ef0:	ecbd 8b02 	vpop	{d8}
 8005ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ef8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005efc:	f7fa f97e 	bl	80001fc <__adddf3>
 8005f00:	3d01      	subs	r5, #1
 8005f02:	e7e6      	b.n	8005ed2 <__kernel_rem_pio2+0x582>
 8005f04:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005f08:	f7fa f978 	bl	80001fc <__adddf3>
 8005f0c:	3e01      	subs	r6, #1
 8005f0e:	e7bc      	b.n	8005e8a <__kernel_rem_pio2+0x53a>
 8005f10:	4602      	mov	r2, r0
 8005f12:	460b      	mov	r3, r1
 8005f14:	e7c1      	b.n	8005e9a <__kernel_rem_pio2+0x54a>
 8005f16:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8005f1a:	f7fa f96f 	bl	80001fc <__adddf3>
 8005f1e:	3401      	adds	r4, #1
 8005f20:	e7c6      	b.n	8005eb0 <__kernel_rem_pio2+0x560>
 8005f22:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8005f26:	ed3a 7b02 	vldmdb	sl!, {d7}
 8005f2a:	4640      	mov	r0, r8
 8005f2c:	ec53 2b17 	vmov	r2, r3, d7
 8005f30:	4649      	mov	r1, r9
 8005f32:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005f36:	f7fa f961 	bl	80001fc <__adddf3>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	4606      	mov	r6, r0
 8005f40:	460f      	mov	r7, r1
 8005f42:	4640      	mov	r0, r8
 8005f44:	4649      	mov	r1, r9
 8005f46:	f7fa f957 	bl	80001f8 <__aeabi_dsub>
 8005f4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f4e:	f7fa f955 	bl	80001fc <__adddf3>
 8005f52:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005f56:	e9ca 0100 	strd	r0, r1, [sl]
 8005f5a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8005f5e:	e770      	b.n	8005e42 <__kernel_rem_pio2+0x4f2>
 8005f60:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8005f64:	ed3a 7b02 	vldmdb	sl!, {d7}
 8005f68:	4630      	mov	r0, r6
 8005f6a:	ec53 2b17 	vmov	r2, r3, d7
 8005f6e:	4639      	mov	r1, r7
 8005f70:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005f74:	f7fa f942 	bl	80001fc <__adddf3>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	4680      	mov	r8, r0
 8005f7e:	4689      	mov	r9, r1
 8005f80:	4630      	mov	r0, r6
 8005f82:	4639      	mov	r1, r7
 8005f84:	f7fa f938 	bl	80001f8 <__aeabi_dsub>
 8005f88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f8c:	f7fa f936 	bl	80001fc <__adddf3>
 8005f90:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005f94:	e9ca 0100 	strd	r0, r1, [sl]
 8005f98:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8005f9c:	e756      	b.n	8005e4c <__kernel_rem_pio2+0x4fc>
 8005f9e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005fa2:	f7fa f92b 	bl	80001fc <__adddf3>
 8005fa6:	3d01      	subs	r5, #1
 8005fa8:	e756      	b.n	8005e58 <__kernel_rem_pio2+0x508>
 8005faa:	9b01      	ldr	r3, [sp, #4]
 8005fac:	9a01      	ldr	r2, [sp, #4]
 8005fae:	601f      	str	r7, [r3, #0]
 8005fb0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8005fb4:	605c      	str	r4, [r3, #4]
 8005fb6:	609d      	str	r5, [r3, #8]
 8005fb8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005fbc:	60d3      	str	r3, [r2, #12]
 8005fbe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005fc2:	6110      	str	r0, [r2, #16]
 8005fc4:	6153      	str	r3, [r2, #20]
 8005fc6:	e78e      	b.n	8005ee6 <__kernel_rem_pio2+0x596>
 8005fc8:	41700000 	.word	0x41700000
 8005fcc:	3e700000 	.word	0x3e700000

08005fd0 <__kernel_sin>:
 8005fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fd4:	ec55 4b10 	vmov	r4, r5, d0
 8005fd8:	b085      	sub	sp, #20
 8005fda:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005fde:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005fe2:	ed8d 1b00 	vstr	d1, [sp]
 8005fe6:	9002      	str	r0, [sp, #8]
 8005fe8:	da06      	bge.n	8005ff8 <__kernel_sin+0x28>
 8005fea:	ee10 0a10 	vmov	r0, s0
 8005fee:	4629      	mov	r1, r5
 8005ff0:	f7fa fd54 	bl	8000a9c <__aeabi_d2iz>
 8005ff4:	2800      	cmp	r0, #0
 8005ff6:	d051      	beq.n	800609c <__kernel_sin+0xcc>
 8005ff8:	4622      	mov	r2, r4
 8005ffa:	462b      	mov	r3, r5
 8005ffc:	4620      	mov	r0, r4
 8005ffe:	4629      	mov	r1, r5
 8006000:	f7fa fab2 	bl	8000568 <__aeabi_dmul>
 8006004:	4682      	mov	sl, r0
 8006006:	468b      	mov	fp, r1
 8006008:	4602      	mov	r2, r0
 800600a:	460b      	mov	r3, r1
 800600c:	4620      	mov	r0, r4
 800600e:	4629      	mov	r1, r5
 8006010:	f7fa faaa 	bl	8000568 <__aeabi_dmul>
 8006014:	a341      	add	r3, pc, #260	; (adr r3, 800611c <__kernel_sin+0x14c>)
 8006016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800601a:	4680      	mov	r8, r0
 800601c:	4689      	mov	r9, r1
 800601e:	4650      	mov	r0, sl
 8006020:	4659      	mov	r1, fp
 8006022:	f7fa faa1 	bl	8000568 <__aeabi_dmul>
 8006026:	a33f      	add	r3, pc, #252	; (adr r3, 8006124 <__kernel_sin+0x154>)
 8006028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800602c:	f7fa f8e4 	bl	80001f8 <__aeabi_dsub>
 8006030:	4652      	mov	r2, sl
 8006032:	465b      	mov	r3, fp
 8006034:	f7fa fa98 	bl	8000568 <__aeabi_dmul>
 8006038:	a33c      	add	r3, pc, #240	; (adr r3, 800612c <__kernel_sin+0x15c>)
 800603a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603e:	f7fa f8dd 	bl	80001fc <__adddf3>
 8006042:	4652      	mov	r2, sl
 8006044:	465b      	mov	r3, fp
 8006046:	f7fa fa8f 	bl	8000568 <__aeabi_dmul>
 800604a:	a33a      	add	r3, pc, #232	; (adr r3, 8006134 <__kernel_sin+0x164>)
 800604c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006050:	f7fa f8d2 	bl	80001f8 <__aeabi_dsub>
 8006054:	4652      	mov	r2, sl
 8006056:	465b      	mov	r3, fp
 8006058:	f7fa fa86 	bl	8000568 <__aeabi_dmul>
 800605c:	a337      	add	r3, pc, #220	; (adr r3, 800613c <__kernel_sin+0x16c>)
 800605e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006062:	f7fa f8cb 	bl	80001fc <__adddf3>
 8006066:	9b02      	ldr	r3, [sp, #8]
 8006068:	4606      	mov	r6, r0
 800606a:	460f      	mov	r7, r1
 800606c:	b9db      	cbnz	r3, 80060a6 <__kernel_sin+0xd6>
 800606e:	4602      	mov	r2, r0
 8006070:	460b      	mov	r3, r1
 8006072:	4650      	mov	r0, sl
 8006074:	4659      	mov	r1, fp
 8006076:	f7fa fa77 	bl	8000568 <__aeabi_dmul>
 800607a:	a325      	add	r3, pc, #148	; (adr r3, 8006110 <__kernel_sin+0x140>)
 800607c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006080:	f7fa f8ba 	bl	80001f8 <__aeabi_dsub>
 8006084:	4642      	mov	r2, r8
 8006086:	464b      	mov	r3, r9
 8006088:	f7fa fa6e 	bl	8000568 <__aeabi_dmul>
 800608c:	4602      	mov	r2, r0
 800608e:	460b      	mov	r3, r1
 8006090:	4620      	mov	r0, r4
 8006092:	4629      	mov	r1, r5
 8006094:	f7fa f8b2 	bl	80001fc <__adddf3>
 8006098:	4604      	mov	r4, r0
 800609a:	460d      	mov	r5, r1
 800609c:	ec45 4b10 	vmov	d0, r4, r5
 80060a0:	b005      	add	sp, #20
 80060a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060a6:	2200      	movs	r2, #0
 80060a8:	4b1b      	ldr	r3, [pc, #108]	; (8006118 <__kernel_sin+0x148>)
 80060aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80060ae:	f7fa fa5b 	bl	8000568 <__aeabi_dmul>
 80060b2:	4632      	mov	r2, r6
 80060b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060b8:	463b      	mov	r3, r7
 80060ba:	4640      	mov	r0, r8
 80060bc:	4649      	mov	r1, r9
 80060be:	f7fa fa53 	bl	8000568 <__aeabi_dmul>
 80060c2:	4602      	mov	r2, r0
 80060c4:	460b      	mov	r3, r1
 80060c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060ca:	f7fa f895 	bl	80001f8 <__aeabi_dsub>
 80060ce:	4652      	mov	r2, sl
 80060d0:	465b      	mov	r3, fp
 80060d2:	f7fa fa49 	bl	8000568 <__aeabi_dmul>
 80060d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060da:	f7fa f88d 	bl	80001f8 <__aeabi_dsub>
 80060de:	a30c      	add	r3, pc, #48	; (adr r3, 8006110 <__kernel_sin+0x140>)
 80060e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e4:	4606      	mov	r6, r0
 80060e6:	460f      	mov	r7, r1
 80060e8:	4640      	mov	r0, r8
 80060ea:	4649      	mov	r1, r9
 80060ec:	f7fa fa3c 	bl	8000568 <__aeabi_dmul>
 80060f0:	4602      	mov	r2, r0
 80060f2:	460b      	mov	r3, r1
 80060f4:	4630      	mov	r0, r6
 80060f6:	4639      	mov	r1, r7
 80060f8:	f7fa f880 	bl	80001fc <__adddf3>
 80060fc:	4602      	mov	r2, r0
 80060fe:	460b      	mov	r3, r1
 8006100:	4620      	mov	r0, r4
 8006102:	4629      	mov	r1, r5
 8006104:	f7fa f878 	bl	80001f8 <__aeabi_dsub>
 8006108:	e7c6      	b.n	8006098 <__kernel_sin+0xc8>
 800610a:	bf00      	nop
 800610c:	f3af 8000 	nop.w
 8006110:	55555549 	.word	0x55555549
 8006114:	3fc55555 	.word	0x3fc55555
 8006118:	3fe00000 	.word	0x3fe00000
 800611c:	5acfd57c 	.word	0x5acfd57c
 8006120:	3de5d93a 	.word	0x3de5d93a
 8006124:	8a2b9ceb 	.word	0x8a2b9ceb
 8006128:	3e5ae5e6 	.word	0x3e5ae5e6
 800612c:	57b1fe7d 	.word	0x57b1fe7d
 8006130:	3ec71de3 	.word	0x3ec71de3
 8006134:	19c161d5 	.word	0x19c161d5
 8006138:	3f2a01a0 	.word	0x3f2a01a0
 800613c:	1110f8a6 	.word	0x1110f8a6
 8006140:	3f811111 	.word	0x3f811111

08006144 <fabs>:
 8006144:	ec51 0b10 	vmov	r0, r1, d0
 8006148:	ee10 2a10 	vmov	r2, s0
 800614c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006150:	ec43 2b10 	vmov	d0, r2, r3
 8006154:	4770      	bx	lr
	...

08006158 <floor>:
 8006158:	ec51 0b10 	vmov	r0, r1, d0
 800615c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006160:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8006164:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8006168:	2e13      	cmp	r6, #19
 800616a:	460c      	mov	r4, r1
 800616c:	ee10 5a10 	vmov	r5, s0
 8006170:	4680      	mov	r8, r0
 8006172:	dc34      	bgt.n	80061de <floor+0x86>
 8006174:	2e00      	cmp	r6, #0
 8006176:	da16      	bge.n	80061a6 <floor+0x4e>
 8006178:	a335      	add	r3, pc, #212	; (adr r3, 8006250 <floor+0xf8>)
 800617a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617e:	f7fa f83d 	bl	80001fc <__adddf3>
 8006182:	2200      	movs	r2, #0
 8006184:	2300      	movs	r3, #0
 8006186:	f7fa fc7f 	bl	8000a88 <__aeabi_dcmpgt>
 800618a:	b148      	cbz	r0, 80061a0 <floor+0x48>
 800618c:	2c00      	cmp	r4, #0
 800618e:	da59      	bge.n	8006244 <floor+0xec>
 8006190:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006194:	4a30      	ldr	r2, [pc, #192]	; (8006258 <floor+0x100>)
 8006196:	432b      	orrs	r3, r5
 8006198:	2500      	movs	r5, #0
 800619a:	42ab      	cmp	r3, r5
 800619c:	bf18      	it	ne
 800619e:	4614      	movne	r4, r2
 80061a0:	4621      	mov	r1, r4
 80061a2:	4628      	mov	r0, r5
 80061a4:	e025      	b.n	80061f2 <floor+0x9a>
 80061a6:	4f2d      	ldr	r7, [pc, #180]	; (800625c <floor+0x104>)
 80061a8:	4137      	asrs	r7, r6
 80061aa:	ea01 0307 	and.w	r3, r1, r7
 80061ae:	4303      	orrs	r3, r0
 80061b0:	d01f      	beq.n	80061f2 <floor+0x9a>
 80061b2:	a327      	add	r3, pc, #156	; (adr r3, 8006250 <floor+0xf8>)
 80061b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b8:	f7fa f820 	bl	80001fc <__adddf3>
 80061bc:	2200      	movs	r2, #0
 80061be:	2300      	movs	r3, #0
 80061c0:	f7fa fc62 	bl	8000a88 <__aeabi_dcmpgt>
 80061c4:	2800      	cmp	r0, #0
 80061c6:	d0eb      	beq.n	80061a0 <floor+0x48>
 80061c8:	2c00      	cmp	r4, #0
 80061ca:	bfbe      	ittt	lt
 80061cc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80061d0:	fa43 f606 	asrlt.w	r6, r3, r6
 80061d4:	19a4      	addlt	r4, r4, r6
 80061d6:	ea24 0407 	bic.w	r4, r4, r7
 80061da:	2500      	movs	r5, #0
 80061dc:	e7e0      	b.n	80061a0 <floor+0x48>
 80061de:	2e33      	cmp	r6, #51	; 0x33
 80061e0:	dd0b      	ble.n	80061fa <floor+0xa2>
 80061e2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80061e6:	d104      	bne.n	80061f2 <floor+0x9a>
 80061e8:	ee10 2a10 	vmov	r2, s0
 80061ec:	460b      	mov	r3, r1
 80061ee:	f7fa f805 	bl	80001fc <__adddf3>
 80061f2:	ec41 0b10 	vmov	d0, r0, r1
 80061f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061fa:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80061fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006202:	fa23 f707 	lsr.w	r7, r3, r7
 8006206:	4207      	tst	r7, r0
 8006208:	d0f3      	beq.n	80061f2 <floor+0x9a>
 800620a:	a311      	add	r3, pc, #68	; (adr r3, 8006250 <floor+0xf8>)
 800620c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006210:	f7f9 fff4 	bl	80001fc <__adddf3>
 8006214:	2200      	movs	r2, #0
 8006216:	2300      	movs	r3, #0
 8006218:	f7fa fc36 	bl	8000a88 <__aeabi_dcmpgt>
 800621c:	2800      	cmp	r0, #0
 800621e:	d0bf      	beq.n	80061a0 <floor+0x48>
 8006220:	2c00      	cmp	r4, #0
 8006222:	da02      	bge.n	800622a <floor+0xd2>
 8006224:	2e14      	cmp	r6, #20
 8006226:	d103      	bne.n	8006230 <floor+0xd8>
 8006228:	3401      	adds	r4, #1
 800622a:	ea25 0507 	bic.w	r5, r5, r7
 800622e:	e7b7      	b.n	80061a0 <floor+0x48>
 8006230:	2301      	movs	r3, #1
 8006232:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006236:	fa03 f606 	lsl.w	r6, r3, r6
 800623a:	4435      	add	r5, r6
 800623c:	4545      	cmp	r5, r8
 800623e:	bf38      	it	cc
 8006240:	18e4      	addcc	r4, r4, r3
 8006242:	e7f2      	b.n	800622a <floor+0xd2>
 8006244:	2500      	movs	r5, #0
 8006246:	462c      	mov	r4, r5
 8006248:	e7aa      	b.n	80061a0 <floor+0x48>
 800624a:	bf00      	nop
 800624c:	f3af 8000 	nop.w
 8006250:	8800759c 	.word	0x8800759c
 8006254:	7e37e43c 	.word	0x7e37e43c
 8006258:	bff00000 	.word	0xbff00000
 800625c:	000fffff 	.word	0x000fffff

08006260 <scalbn>:
 8006260:	b570      	push	{r4, r5, r6, lr}
 8006262:	ec55 4b10 	vmov	r4, r5, d0
 8006266:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800626a:	4606      	mov	r6, r0
 800626c:	462b      	mov	r3, r5
 800626e:	b9aa      	cbnz	r2, 800629c <scalbn+0x3c>
 8006270:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006274:	4323      	orrs	r3, r4
 8006276:	d03b      	beq.n	80062f0 <scalbn+0x90>
 8006278:	4b31      	ldr	r3, [pc, #196]	; (8006340 <scalbn+0xe0>)
 800627a:	4629      	mov	r1, r5
 800627c:	2200      	movs	r2, #0
 800627e:	ee10 0a10 	vmov	r0, s0
 8006282:	f7fa f971 	bl	8000568 <__aeabi_dmul>
 8006286:	4b2f      	ldr	r3, [pc, #188]	; (8006344 <scalbn+0xe4>)
 8006288:	429e      	cmp	r6, r3
 800628a:	4604      	mov	r4, r0
 800628c:	460d      	mov	r5, r1
 800628e:	da12      	bge.n	80062b6 <scalbn+0x56>
 8006290:	a327      	add	r3, pc, #156	; (adr r3, 8006330 <scalbn+0xd0>)
 8006292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006296:	f7fa f967 	bl	8000568 <__aeabi_dmul>
 800629a:	e009      	b.n	80062b0 <scalbn+0x50>
 800629c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80062a0:	428a      	cmp	r2, r1
 80062a2:	d10c      	bne.n	80062be <scalbn+0x5e>
 80062a4:	ee10 2a10 	vmov	r2, s0
 80062a8:	4620      	mov	r0, r4
 80062aa:	4629      	mov	r1, r5
 80062ac:	f7f9 ffa6 	bl	80001fc <__adddf3>
 80062b0:	4604      	mov	r4, r0
 80062b2:	460d      	mov	r5, r1
 80062b4:	e01c      	b.n	80062f0 <scalbn+0x90>
 80062b6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80062ba:	460b      	mov	r3, r1
 80062bc:	3a36      	subs	r2, #54	; 0x36
 80062be:	4432      	add	r2, r6
 80062c0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80062c4:	428a      	cmp	r2, r1
 80062c6:	dd0b      	ble.n	80062e0 <scalbn+0x80>
 80062c8:	ec45 4b11 	vmov	d1, r4, r5
 80062cc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8006338 <scalbn+0xd8>
 80062d0:	f000 f83c 	bl	800634c <copysign>
 80062d4:	a318      	add	r3, pc, #96	; (adr r3, 8006338 <scalbn+0xd8>)
 80062d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062da:	ec51 0b10 	vmov	r0, r1, d0
 80062de:	e7da      	b.n	8006296 <scalbn+0x36>
 80062e0:	2a00      	cmp	r2, #0
 80062e2:	dd08      	ble.n	80062f6 <scalbn+0x96>
 80062e4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80062e8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80062ec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80062f0:	ec45 4b10 	vmov	d0, r4, r5
 80062f4:	bd70      	pop	{r4, r5, r6, pc}
 80062f6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80062fa:	da0d      	bge.n	8006318 <scalbn+0xb8>
 80062fc:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006300:	429e      	cmp	r6, r3
 8006302:	ec45 4b11 	vmov	d1, r4, r5
 8006306:	dce1      	bgt.n	80062cc <scalbn+0x6c>
 8006308:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8006330 <scalbn+0xd0>
 800630c:	f000 f81e 	bl	800634c <copysign>
 8006310:	a307      	add	r3, pc, #28	; (adr r3, 8006330 <scalbn+0xd0>)
 8006312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006316:	e7e0      	b.n	80062da <scalbn+0x7a>
 8006318:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800631c:	3236      	adds	r2, #54	; 0x36
 800631e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006322:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006326:	4620      	mov	r0, r4
 8006328:	4629      	mov	r1, r5
 800632a:	2200      	movs	r2, #0
 800632c:	4b06      	ldr	r3, [pc, #24]	; (8006348 <scalbn+0xe8>)
 800632e:	e7b2      	b.n	8006296 <scalbn+0x36>
 8006330:	c2f8f359 	.word	0xc2f8f359
 8006334:	01a56e1f 	.word	0x01a56e1f
 8006338:	8800759c 	.word	0x8800759c
 800633c:	7e37e43c 	.word	0x7e37e43c
 8006340:	43500000 	.word	0x43500000
 8006344:	ffff3cb0 	.word	0xffff3cb0
 8006348:	3c900000 	.word	0x3c900000

0800634c <copysign>:
 800634c:	ec51 0b10 	vmov	r0, r1, d0
 8006350:	ee11 0a90 	vmov	r0, s3
 8006354:	ee10 2a10 	vmov	r2, s0
 8006358:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800635c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006360:	ea41 0300 	orr.w	r3, r1, r0
 8006364:	ec43 2b10 	vmov	d0, r2, r3
 8006368:	4770      	bx	lr
	...

0800636c <_init>:
 800636c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800636e:	bf00      	nop
 8006370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006372:	bc08      	pop	{r3}
 8006374:	469e      	mov	lr, r3
 8006376:	4770      	bx	lr

08006378 <_fini>:
 8006378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800637a:	bf00      	nop
 800637c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800637e:	bc08      	pop	{r3}
 8006380:	469e      	mov	lr, r3
 8006382:	4770      	bx	lr
