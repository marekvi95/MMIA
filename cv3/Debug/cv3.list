
cv3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001ec  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002ac  080002b4  000102b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002ac  080002ac  000102b4  2**0
                  CONTENTS
  4 .ARM          00000000  080002ac  080002ac  000102b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002ac  080002b4  000102b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002b0  080002b0  000102b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000102b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080002b4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080002b4  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000102b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000060f  00000000  00000000  000102dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000002bc  00000000  00000000  000108eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000098  00000000  00000000  00010ba8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000060  00000000  00000000  00010c40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000853f  00000000  00000000  00010ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000df2  00000000  00000000  000191df  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0002c367  00000000  00000000  00019fd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00046338  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000f4  00000000  00000000  000463b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000294 	.word	0x08000294

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	08000294 	.word	0x08000294

08000108 <main>:
#include "sct.h"



int main(void)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	b082      	sub	sp, #8
 800010c:	af00      	add	r7, sp, #0
	sct_init();
 800010e:	f000 f83b 	bl	8000188 <sct_init>
	sct_led(0x7A5C36DE);
 8000112:	4b07      	ldr	r3, [pc, #28]	; (8000130 <main+0x28>)
 8000114:	0018      	movs	r0, r3
 8000116:	f000 f80f 	bl	8000138 <sct_led>
	for (volatile uint32_t i = 0; i < 1000000; i++);
 800011a:	2300      	movs	r3, #0
 800011c:	607b      	str	r3, [r7, #4]
 800011e:	e002      	b.n	8000126 <main+0x1e>
 8000120:	687b      	ldr	r3, [r7, #4]
 8000122:	3301      	adds	r3, #1
 8000124:	607b      	str	r3, [r7, #4]
 8000126:	687b      	ldr	r3, [r7, #4]
 8000128:	4a02      	ldr	r2, [pc, #8]	; (8000134 <main+0x2c>)
 800012a:	4293      	cmp	r3, r2
 800012c:	d9f8      	bls.n	8000120 <main+0x18>

	while(1) {
 800012e:	e7fe      	b.n	800012e <main+0x26>
 8000130:	7a5c36de 	.word	0x7a5c36de
 8000134:	000f423f 	.word	0x000f423f

08000138 <sct_led>:
#define sct_clk(x) do { if (x) GPIOB->BSRR = (1 << 3); else GPIOB->BRR = (1 << 3); } while (0)
#define sct_noe(x) do { if (x) GPIOB->BSRR = (1 << 10); else GPIOB->BRR = (1 << 10); } while (0)


void sct_led(uint32_t value)
{
 8000138:	b580      	push	{r7, lr}
 800013a:	b082      	sub	sp, #8
 800013c:	af00      	add	r7, sp, #0
 800013e:	6078      	str	r0, [r7, #4]
	while(value) {
 8000140:	e013      	b.n	800016a <sct_led+0x32>

		if (value & 1)
 8000142:	687b      	ldr	r3, [r7, #4]
 8000144:	2201      	movs	r2, #1
 8000146:	4013      	ands	r3, r2
 8000148:	d003      	beq.n	8000152 <sct_led+0x1a>
			sct_sdi(1); // set
 800014a:	4b0e      	ldr	r3, [pc, #56]	; (8000184 <sct_led+0x4c>)
 800014c:	2210      	movs	r2, #16
 800014e:	619a      	str	r2, [r3, #24]
 8000150:	e002      	b.n	8000158 <sct_led+0x20>
		else
			sct_sdi(0);
 8000152:	4b0c      	ldr	r3, [pc, #48]	; (8000184 <sct_led+0x4c>)
 8000154:	2210      	movs	r2, #16
 8000156:	629a      	str	r2, [r3, #40]	; 0x28
//		for (volatile uint32_t i = 0; i < 10000; i++);
		sct_clk(1);
 8000158:	4b0a      	ldr	r3, [pc, #40]	; (8000184 <sct_led+0x4c>)
 800015a:	2208      	movs	r2, #8
 800015c:	619a      	str	r2, [r3, #24]
//		for (volatile uint32_t i = 0; i < 10000; i++);
		sct_clk(0);
 800015e:	4b09      	ldr	r3, [pc, #36]	; (8000184 <sct_led+0x4c>)
 8000160:	2208      	movs	r2, #8
 8000162:	629a      	str	r2, [r3, #40]	; 0x28
//		for (volatile uint32_t i = 0; i < 10000; i++);
		value >>= 1;
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	085b      	lsrs	r3, r3, #1
 8000168:	607b      	str	r3, [r7, #4]
	while(value) {
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	2b00      	cmp	r3, #0
 800016e:	d1e8      	bne.n	8000142 <sct_led+0xa>
	}
	sct_nla(1);
 8000170:	4b04      	ldr	r3, [pc, #16]	; (8000184 <sct_led+0x4c>)
 8000172:	2220      	movs	r2, #32
 8000174:	619a      	str	r2, [r3, #24]
	sct_nla(0);
 8000176:	4b03      	ldr	r3, [pc, #12]	; (8000184 <sct_led+0x4c>)
 8000178:	2220      	movs	r2, #32
 800017a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800017c:	46c0      	nop			; (mov r8, r8)
 800017e:	46bd      	mov	sp, r7
 8000180:	b002      	add	sp, #8
 8000182:	bd80      	pop	{r7, pc}
 8000184:	48000400 	.word	0x48000400

08000188 <sct_init>:

void sct_init(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN; // enable
 800018c:	4b15      	ldr	r3, [pc, #84]	; (80001e4 <sct_init+0x5c>)
 800018e:	695a      	ldr	r2, [r3, #20]
 8000190:	4b14      	ldr	r3, [pc, #80]	; (80001e4 <sct_init+0x5c>)
 8000192:	2180      	movs	r1, #128	; 0x80
 8000194:	02c9      	lsls	r1, r1, #11
 8000196:	430a      	orrs	r2, r1
 8000198:	615a      	str	r2, [r3, #20]
	GPIOB -> MODER |= GPIO_MODER_MODER3_0;
 800019a:	4b13      	ldr	r3, [pc, #76]	; (80001e8 <sct_init+0x60>)
 800019c:	681a      	ldr	r2, [r3, #0]
 800019e:	4b12      	ldr	r3, [pc, #72]	; (80001e8 <sct_init+0x60>)
 80001a0:	2140      	movs	r1, #64	; 0x40
 80001a2:	430a      	orrs	r2, r1
 80001a4:	601a      	str	r2, [r3, #0]
	GPIOB -> MODER |= GPIO_MODER_MODER4_0;
 80001a6:	4b10      	ldr	r3, [pc, #64]	; (80001e8 <sct_init+0x60>)
 80001a8:	681a      	ldr	r2, [r3, #0]
 80001aa:	4b0f      	ldr	r3, [pc, #60]	; (80001e8 <sct_init+0x60>)
 80001ac:	2180      	movs	r1, #128	; 0x80
 80001ae:	0049      	lsls	r1, r1, #1
 80001b0:	430a      	orrs	r2, r1
 80001b2:	601a      	str	r2, [r3, #0]
	GPIOB -> MODER |= GPIO_MODER_MODER5_0;
 80001b4:	4b0c      	ldr	r3, [pc, #48]	; (80001e8 <sct_init+0x60>)
 80001b6:	681a      	ldr	r2, [r3, #0]
 80001b8:	4b0b      	ldr	r3, [pc, #44]	; (80001e8 <sct_init+0x60>)
 80001ba:	2180      	movs	r1, #128	; 0x80
 80001bc:	00c9      	lsls	r1, r1, #3
 80001be:	430a      	orrs	r2, r1
 80001c0:	601a      	str	r2, [r3, #0]
	GPIOB -> MODER |= GPIO_MODER_MODER10_0;
 80001c2:	4b09      	ldr	r3, [pc, #36]	; (80001e8 <sct_init+0x60>)
 80001c4:	681a      	ldr	r2, [r3, #0]
 80001c6:	4b08      	ldr	r3, [pc, #32]	; (80001e8 <sct_init+0x60>)
 80001c8:	2180      	movs	r1, #128	; 0x80
 80001ca:	0349      	lsls	r1, r1, #13
 80001cc:	430a      	orrs	r2, r1
 80001ce:	601a      	str	r2, [r3, #0]
	sct_led(0);
 80001d0:	2000      	movs	r0, #0
 80001d2:	f7ff ffb1 	bl	8000138 <sct_led>
	sct_noe(0);
 80001d6:	4b04      	ldr	r3, [pc, #16]	; (80001e8 <sct_init+0x60>)
 80001d8:	2280      	movs	r2, #128	; 0x80
 80001da:	00d2      	lsls	r2, r2, #3
 80001dc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80001de:	46c0      	nop			; (mov r8, r8)
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bd80      	pop	{r7, pc}
 80001e4:	40021000 	.word	0x40021000
 80001e8:	48000400 	.word	0x48000400

080001ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80001f0:	46c0      	nop			; (mov r8, r8)
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bd80      	pop	{r7, pc}
	...

080001f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001f8:	480d      	ldr	r0, [pc, #52]	; (8000230 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001fa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001fc:	480d      	ldr	r0, [pc, #52]	; (8000234 <LoopForever+0x6>)
  ldr r1, =_edata
 80001fe:	490e      	ldr	r1, [pc, #56]	; (8000238 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000200:	4a0e      	ldr	r2, [pc, #56]	; (800023c <LoopForever+0xe>)
  movs r3, #0
 8000202:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000204:	e002      	b.n	800020c <LoopCopyDataInit>

08000206 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000206:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000208:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800020a:	3304      	adds	r3, #4

0800020c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800020c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800020e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000210:	d3f9      	bcc.n	8000206 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000212:	4a0b      	ldr	r2, [pc, #44]	; (8000240 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000214:	4c0b      	ldr	r4, [pc, #44]	; (8000244 <LoopForever+0x16>)
  movs r3, #0
 8000216:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000218:	e001      	b.n	800021e <LoopFillZerobss>

0800021a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800021a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800021c:	3204      	adds	r2, #4

0800021e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800021e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000220:	d3fb      	bcc.n	800021a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000222:	f7ff ffe3 	bl	80001ec <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000226:	f000 f811 	bl	800024c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800022a:	f7ff ff6d 	bl	8000108 <main>

0800022e <LoopForever>:

LoopForever:
    b LoopForever
 800022e:	e7fe      	b.n	800022e <LoopForever>
  ldr   r0, =_estack
 8000230:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000234:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000238:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800023c:	080002b4 	.word	0x080002b4
  ldr r2, =_sbss
 8000240:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000244:	2000001c 	.word	0x2000001c

08000248 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000248:	e7fe      	b.n	8000248 <ADC_IRQHandler>
	...

0800024c <__libc_init_array>:
 800024c:	b570      	push	{r4, r5, r6, lr}
 800024e:	2600      	movs	r6, #0
 8000250:	4d0c      	ldr	r5, [pc, #48]	; (8000284 <__libc_init_array+0x38>)
 8000252:	4c0d      	ldr	r4, [pc, #52]	; (8000288 <__libc_init_array+0x3c>)
 8000254:	1b64      	subs	r4, r4, r5
 8000256:	10a4      	asrs	r4, r4, #2
 8000258:	42a6      	cmp	r6, r4
 800025a:	d109      	bne.n	8000270 <__libc_init_array+0x24>
 800025c:	2600      	movs	r6, #0
 800025e:	f000 f819 	bl	8000294 <_init>
 8000262:	4d0a      	ldr	r5, [pc, #40]	; (800028c <__libc_init_array+0x40>)
 8000264:	4c0a      	ldr	r4, [pc, #40]	; (8000290 <__libc_init_array+0x44>)
 8000266:	1b64      	subs	r4, r4, r5
 8000268:	10a4      	asrs	r4, r4, #2
 800026a:	42a6      	cmp	r6, r4
 800026c:	d105      	bne.n	800027a <__libc_init_array+0x2e>
 800026e:	bd70      	pop	{r4, r5, r6, pc}
 8000270:	00b3      	lsls	r3, r6, #2
 8000272:	58eb      	ldr	r3, [r5, r3]
 8000274:	4798      	blx	r3
 8000276:	3601      	adds	r6, #1
 8000278:	e7ee      	b.n	8000258 <__libc_init_array+0xc>
 800027a:	00b3      	lsls	r3, r6, #2
 800027c:	58eb      	ldr	r3, [r5, r3]
 800027e:	4798      	blx	r3
 8000280:	3601      	adds	r6, #1
 8000282:	e7f2      	b.n	800026a <__libc_init_array+0x1e>
 8000284:	080002ac 	.word	0x080002ac
 8000288:	080002ac 	.word	0x080002ac
 800028c:	080002ac 	.word	0x080002ac
 8000290:	080002b0 	.word	0x080002b0

08000294 <_init>:
 8000294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000296:	46c0      	nop			; (mov r8, r8)
 8000298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800029a:	bc08      	pop	{r3}
 800029c:	469e      	mov	lr, r3
 800029e:	4770      	bx	lr

080002a0 <_fini>:
 80002a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002a2:	46c0      	nop			; (mov r8, r8)
 80002a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002a6:	bc08      	pop	{r3}
 80002a8:	469e      	mov	lr, r3
 80002aa:	4770      	bx	lr
