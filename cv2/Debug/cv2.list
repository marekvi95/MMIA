
cv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000204  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002c4  080002cc  000102cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002c4  080002c4  000102cc  2**0
                  CONTENTS
  4 .ARM          00000000  080002c4  080002c4  000102cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002c4  080002cc  000102cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002c4  080002c4  000102c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002c8  080002c8  000102c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000102cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080002cc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080002cc  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000102cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000078d  00000000  00000000  000102f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000285  00000000  00000000  00010a81  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000080  00000000  00000000  00010d08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000058  00000000  00000000  00010d88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000845a  00000000  00000000  00010de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000972  00000000  00000000  0001923a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0002c3bc  00000000  00000000  00019bac  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00045f68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000e0  00000000  00000000  00045fe4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080002ac 	.word	0x080002ac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	080002ac 	.word	0x080002ac

08000108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	b082      	sub	sp, #8
 800010c:	af00      	add	r7, sp, #0
 800010e:	0002      	movs	r2, r0
 8000110:	1dfb      	adds	r3, r7, #7
 8000112:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000114:	1dfb      	adds	r3, r7, #7
 8000116:	781b      	ldrb	r3, [r3, #0]
 8000118:	2b7f      	cmp	r3, #127	; 0x7f
 800011a:	d809      	bhi.n	8000130 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800011c:	1dfb      	adds	r3, r7, #7
 800011e:	781b      	ldrb	r3, [r3, #0]
 8000120:	001a      	movs	r2, r3
 8000122:	231f      	movs	r3, #31
 8000124:	401a      	ands	r2, r3
 8000126:	4b04      	ldr	r3, [pc, #16]	; (8000138 <__NVIC_EnableIRQ+0x30>)
 8000128:	2101      	movs	r1, #1
 800012a:	4091      	lsls	r1, r2
 800012c:	000a      	movs	r2, r1
 800012e:	601a      	str	r2, [r3, #0]
  }
}
 8000130:	46c0      	nop			; (mov r8, r8)
 8000132:	46bd      	mov	sp, r7
 8000134:	b002      	add	sp, #8
 8000136:	bd80      	pop	{r7, pc}
 8000138:	e000e100 	.word	0xe000e100

0800013c <EXTI0_1_IRQHandler>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void EXTI0_1_IRQHandler(void)
{
 800013c:	b580      	push	{r7, lr}
 800013e:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR0) { // check line 0 has triggered the IT
 8000140:	4b09      	ldr	r3, [pc, #36]	; (8000168 <EXTI0_1_IRQHandler+0x2c>)
 8000142:	695b      	ldr	r3, [r3, #20]
 8000144:	2201      	movs	r2, #1
 8000146:	4013      	ands	r3, r2
 8000148:	d00b      	beq.n	8000162 <EXTI0_1_IRQHandler+0x26>
		EXTI->PR |= EXTI_PR_PR0; // clear the pending bit
 800014a:	4b07      	ldr	r3, [pc, #28]	; (8000168 <EXTI0_1_IRQHandler+0x2c>)
 800014c:	695a      	ldr	r2, [r3, #20]
 800014e:	4b06      	ldr	r3, [pc, #24]	; (8000168 <EXTI0_1_IRQHandler+0x2c>)
 8000150:	2101      	movs	r1, #1
 8000152:	430a      	orrs	r2, r1
 8000154:	615a      	str	r2, [r3, #20]
		GPIOB->ODR ^= (1<<0);
 8000156:	4b05      	ldr	r3, [pc, #20]	; (800016c <EXTI0_1_IRQHandler+0x30>)
 8000158:	695a      	ldr	r2, [r3, #20]
 800015a:	4b04      	ldr	r3, [pc, #16]	; (800016c <EXTI0_1_IRQHandler+0x30>)
 800015c:	2101      	movs	r1, #1
 800015e:	404a      	eors	r2, r1
 8000160:	615a      	str	r2, [r3, #20]
	}
}
 8000162:	46c0      	nop			; (mov r8, r8)
 8000164:	46bd      	mov	sp, r7
 8000166:	bd80      	pop	{r7, pc}
 8000168:	40010400 	.word	0x40010400
 800016c:	48000400 	.word	0x48000400

08000170 <main>:

int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOBEN | RCC_AHBENR_GPIOCEN; // enable
 8000174:	4b1e      	ldr	r3, [pc, #120]	; (80001f0 <main+0x80>)
 8000176:	695a      	ldr	r2, [r3, #20]
 8000178:	4b1d      	ldr	r3, [pc, #116]	; (80001f0 <main+0x80>)
 800017a:	21e0      	movs	r1, #224	; 0xe0
 800017c:	0309      	lsls	r1, r1, #12
 800017e:	430a      	orrs	r2, r1
 8000180:	615a      	str	r2, [r3, #20]
	GPIOA->MODER |= GPIO_MODER_MODER4_0; // LED1 = PA4, output
 8000182:	2390      	movs	r3, #144	; 0x90
 8000184:	05db      	lsls	r3, r3, #23
 8000186:	681a      	ldr	r2, [r3, #0]
 8000188:	2390      	movs	r3, #144	; 0x90
 800018a:	05db      	lsls	r3, r3, #23
 800018c:	2180      	movs	r1, #128	; 0x80
 800018e:	0049      	lsls	r1, r1, #1
 8000190:	430a      	orrs	r2, r1
 8000192:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= GPIO_MODER_MODER0_0; // LED2 = PB0, output
 8000194:	4b17      	ldr	r3, [pc, #92]	; (80001f4 <main+0x84>)
 8000196:	681a      	ldr	r2, [r3, #0]
 8000198:	4b16      	ldr	r3, [pc, #88]	; (80001f4 <main+0x84>)
 800019a:	2101      	movs	r1, #1
 800019c:	430a      	orrs	r2, r1
 800019e:	601a      	str	r2, [r3, #0]
	GPIOC->PUPDR |= GPIO_PUPDR_PUPDR0_0; // S2 = PC0, pullup
 80001a0:	4b15      	ldr	r3, [pc, #84]	; (80001f8 <main+0x88>)
 80001a2:	68da      	ldr	r2, [r3, #12]
 80001a4:	4b14      	ldr	r3, [pc, #80]	; (80001f8 <main+0x88>)
 80001a6:	2101      	movs	r1, #1
 80001a8:	430a      	orrs	r2, r1
 80001aa:	60da      	str	r2, [r3, #12]
	GPIOC->PUPDR |= GPIO_PUPDR_PUPDR1_0; // S1 = PC1, pullup
 80001ac:	4b12      	ldr	r3, [pc, #72]	; (80001f8 <main+0x88>)
 80001ae:	68da      	ldr	r2, [r3, #12]
 80001b0:	4b11      	ldr	r3, [pc, #68]	; (80001f8 <main+0x88>)
 80001b2:	2104      	movs	r1, #4
 80001b4:	430a      	orrs	r2, r1
 80001b6:	60da      	str	r2, [r3, #12]

	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN; // enable clock for syscfg
 80001b8:	4b0d      	ldr	r3, [pc, #52]	; (80001f0 <main+0x80>)
 80001ba:	699a      	ldr	r2, [r3, #24]
 80001bc:	4b0c      	ldr	r3, [pc, #48]	; (80001f0 <main+0x80>)
 80001be:	2101      	movs	r1, #1
 80001c0:	430a      	orrs	r2, r1
 80001c2:	619a      	str	r2, [r3, #24]
	SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PC; // select PC0 for EXTI0
 80001c4:	4b0d      	ldr	r3, [pc, #52]	; (80001fc <main+0x8c>)
 80001c6:	689a      	ldr	r2, [r3, #8]
 80001c8:	4b0c      	ldr	r3, [pc, #48]	; (80001fc <main+0x8c>)
 80001ca:	2102      	movs	r1, #2
 80001cc:	430a      	orrs	r2, r1
 80001ce:	609a      	str	r2, [r3, #8]
	EXTI->IMR |= EXTI_IMR_MR0; // mask
 80001d0:	4b0b      	ldr	r3, [pc, #44]	; (8000200 <main+0x90>)
 80001d2:	681a      	ldr	r2, [r3, #0]
 80001d4:	4b0a      	ldr	r3, [pc, #40]	; (8000200 <main+0x90>)
 80001d6:	2101      	movs	r1, #1
 80001d8:	430a      	orrs	r2, r1
 80001da:	601a      	str	r2, [r3, #0]
	EXTI->FTSR |= EXTI_FTSR_TR0; // trigger on falling edge
 80001dc:	4b08      	ldr	r3, [pc, #32]	; (8000200 <main+0x90>)
 80001de:	68da      	ldr	r2, [r3, #12]
 80001e0:	4b07      	ldr	r3, [pc, #28]	; (8000200 <main+0x90>)
 80001e2:	2101      	movs	r1, #1
 80001e4:	430a      	orrs	r2, r1
 80001e6:	60da      	str	r2, [r3, #12]
	NVIC_EnableIRQ(EXTI0_1_IRQn); // enable EXTI0_1
 80001e8:	2005      	movs	r0, #5
 80001ea:	f7ff ff8d 	bl	8000108 <__NVIC_EnableIRQ>

	while(1) {
 80001ee:	e7fe      	b.n	80001ee <main+0x7e>
 80001f0:	40021000 	.word	0x40021000
 80001f4:	48000400 	.word	0x48000400
 80001f8:	48000800 	.word	0x48000800
 80001fc:	40010000 	.word	0x40010000
 8000200:	40010400 	.word	0x40010400

08000204 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000208:	46c0      	nop			; (mov r8, r8)
 800020a:	46bd      	mov	sp, r7
 800020c:	bd80      	pop	{r7, pc}
	...

08000210 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000210:	480d      	ldr	r0, [pc, #52]	; (8000248 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000212:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000214:	480d      	ldr	r0, [pc, #52]	; (800024c <LoopForever+0x6>)
  ldr r1, =_edata
 8000216:	490e      	ldr	r1, [pc, #56]	; (8000250 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000218:	4a0e      	ldr	r2, [pc, #56]	; (8000254 <LoopForever+0xe>)
  movs r3, #0
 800021a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800021c:	e002      	b.n	8000224 <LoopCopyDataInit>

0800021e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800021e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000220:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000222:	3304      	adds	r3, #4

08000224 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000224:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000226:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000228:	d3f9      	bcc.n	800021e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800022a:	4a0b      	ldr	r2, [pc, #44]	; (8000258 <LoopForever+0x12>)
  ldr r4, =_ebss
 800022c:	4c0b      	ldr	r4, [pc, #44]	; (800025c <LoopForever+0x16>)
  movs r3, #0
 800022e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000230:	e001      	b.n	8000236 <LoopFillZerobss>

08000232 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000232:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000234:	3204      	adds	r2, #4

08000236 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000236:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000238:	d3fb      	bcc.n	8000232 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800023a:	f7ff ffe3 	bl	8000204 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800023e:	f000 f811 	bl	8000264 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000242:	f7ff ff95 	bl	8000170 <main>

08000246 <LoopForever>:

LoopForever:
    b LoopForever
 8000246:	e7fe      	b.n	8000246 <LoopForever>
  ldr   r0, =_estack
 8000248:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800024c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000250:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000254:	080002cc 	.word	0x080002cc
  ldr r2, =_sbss
 8000258:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800025c:	2000001c 	.word	0x2000001c

08000260 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000260:	e7fe      	b.n	8000260 <ADC_IRQHandler>
	...

08000264 <__libc_init_array>:
 8000264:	b570      	push	{r4, r5, r6, lr}
 8000266:	2600      	movs	r6, #0
 8000268:	4d0c      	ldr	r5, [pc, #48]	; (800029c <__libc_init_array+0x38>)
 800026a:	4c0d      	ldr	r4, [pc, #52]	; (80002a0 <__libc_init_array+0x3c>)
 800026c:	1b64      	subs	r4, r4, r5
 800026e:	10a4      	asrs	r4, r4, #2
 8000270:	42a6      	cmp	r6, r4
 8000272:	d109      	bne.n	8000288 <__libc_init_array+0x24>
 8000274:	2600      	movs	r6, #0
 8000276:	f000 f819 	bl	80002ac <_init>
 800027a:	4d0a      	ldr	r5, [pc, #40]	; (80002a4 <__libc_init_array+0x40>)
 800027c:	4c0a      	ldr	r4, [pc, #40]	; (80002a8 <__libc_init_array+0x44>)
 800027e:	1b64      	subs	r4, r4, r5
 8000280:	10a4      	asrs	r4, r4, #2
 8000282:	42a6      	cmp	r6, r4
 8000284:	d105      	bne.n	8000292 <__libc_init_array+0x2e>
 8000286:	bd70      	pop	{r4, r5, r6, pc}
 8000288:	00b3      	lsls	r3, r6, #2
 800028a:	58eb      	ldr	r3, [r5, r3]
 800028c:	4798      	blx	r3
 800028e:	3601      	adds	r6, #1
 8000290:	e7ee      	b.n	8000270 <__libc_init_array+0xc>
 8000292:	00b3      	lsls	r3, r6, #2
 8000294:	58eb      	ldr	r3, [r5, r3]
 8000296:	4798      	blx	r3
 8000298:	3601      	adds	r6, #1
 800029a:	e7f2      	b.n	8000282 <__libc_init_array+0x1e>
 800029c:	080002c4 	.word	0x080002c4
 80002a0:	080002c4 	.word	0x080002c4
 80002a4:	080002c4 	.word	0x080002c4
 80002a8:	080002c8 	.word	0x080002c8

080002ac <_init>:
 80002ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ae:	46c0      	nop			; (mov r8, r8)
 80002b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002b2:	bc08      	pop	{r3}
 80002b4:	469e      	mov	lr, r3
 80002b6:	4770      	bx	lr

080002b8 <_fini>:
 80002b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ba:	46c0      	nop			; (mov r8, r8)
 80002bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002be:	bc08      	pop	{r3}
 80002c0:	469e      	mov	lr, r3
 80002c2:	4770      	bx	lr
