
cv1_baremetal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000184  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000244  0800024c  0001024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000244  08000244  0001024c  2**0
                  CONTENTS
  4 .ARM          00000000  08000244  08000244  0001024c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000244  0800024c  0001024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000244  08000244  00010244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000248  08000248  00010248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800024c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800024c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001024c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000507  00000000  00000000  00010274  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000221  00000000  00000000  0001077b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000070  00000000  00000000  000109a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000048  00000000  00000000  00010a10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000845a  00000000  00000000  00010a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000957  00000000  00000000  00018eb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0002c1d1  00000000  00000000  00019809  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000459da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000a8  00000000  00000000  00045a58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800022c 	.word	0x0800022c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	0800022c 	.word	0x0800022c

08000108 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	b084      	sub	sp, #16
 800010c:	af00      	add	r7, sp, #0

	//uint8_t blink_values[32] = {1,0,1,0,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,0,1,0,1,0,1,0,0,0,0,0,0,0};
	uint32_t blink_sequence = 0b10101001110111011100101010000000;
 800010e:	4b1a      	ldr	r3, [pc, #104]	; (8000178 <main+0x70>)
 8000110:	60fb      	str	r3, [r7, #12]
	uint8_t i = 0;
 8000112:	230b      	movs	r3, #11
 8000114:	18fb      	adds	r3, r7, r3
 8000116:	2200      	movs	r2, #0
 8000118:	701a      	strb	r2, [r3, #0]
	while(1) {
		// setup peripherals
		RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 800011a:	4b18      	ldr	r3, [pc, #96]	; (800017c <main+0x74>)
 800011c:	695a      	ldr	r2, [r3, #20]
 800011e:	4b17      	ldr	r3, [pc, #92]	; (800017c <main+0x74>)
 8000120:	2180      	movs	r1, #128	; 0x80
 8000122:	0289      	lsls	r1, r1, #10
 8000124:	430a      	orrs	r2, r1
 8000126:	615a      	str	r2, [r3, #20]
		GPIOA->MODER |= GPIO_MODER_MODER5_0;
 8000128:	2390      	movs	r3, #144	; 0x90
 800012a:	05db      	lsls	r3, r3, #23
 800012c:	681a      	ldr	r2, [r3, #0]
 800012e:	2390      	movs	r3, #144	; 0x90
 8000130:	05db      	lsls	r3, r3, #23
 8000132:	2180      	movs	r1, #128	; 0x80
 8000134:	00c9      	lsls	r1, r1, #3
 8000136:	430a      	orrs	r2, r1
 8000138:	601a      	str	r2, [r3, #0]
//			else
//				GPIOA->BRR = (1<<5);
//			for (volatile uint32_t i = 0; i < 100000; i++);
//
//		}
		while(blink_sequence) {
 800013a:	e019      	b.n	8000170 <main+0x68>
			if (blink_sequence & 1)
 800013c:	68fb      	ldr	r3, [r7, #12]
 800013e:	2201      	movs	r2, #1
 8000140:	4013      	ands	r3, r2
 8000142:	d004      	beq.n	800014e <main+0x46>
				GPIOA->BSRR = (1<<5); // set
 8000144:	2390      	movs	r3, #144	; 0x90
 8000146:	05db      	lsls	r3, r3, #23
 8000148:	2220      	movs	r2, #32
 800014a:	619a      	str	r2, [r3, #24]
 800014c:	e003      	b.n	8000156 <main+0x4e>
			else
				GPIOA->BRR = (1<<5);
 800014e:	2390      	movs	r3, #144	; 0x90
 8000150:	05db      	lsls	r3, r3, #23
 8000152:	2220      	movs	r2, #32
 8000154:	629a      	str	r2, [r3, #40]	; 0x28
			for (volatile uint32_t i = 0; i < 100000; i++);
 8000156:	2300      	movs	r3, #0
 8000158:	607b      	str	r3, [r7, #4]
 800015a:	e002      	b.n	8000162 <main+0x5a>
 800015c:	687b      	ldr	r3, [r7, #4]
 800015e:	3301      	adds	r3, #1
 8000160:	607b      	str	r3, [r7, #4]
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	4a06      	ldr	r2, [pc, #24]	; (8000180 <main+0x78>)
 8000166:	4293      	cmp	r3, r2
 8000168:	d9f8      	bls.n	800015c <main+0x54>
			blink_sequence >>= 1;
 800016a:	68fb      	ldr	r3, [r7, #12]
 800016c:	085b      	lsrs	r3, r3, #1
 800016e:	60fb      	str	r3, [r7, #12]
		while(blink_sequence) {
 8000170:	68fb      	ldr	r3, [r7, #12]
 8000172:	2b00      	cmp	r3, #0
 8000174:	d1e2      	bne.n	800013c <main+0x34>
		RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000176:	e7d0      	b.n	800011a <main+0x12>
 8000178:	a9ddca80 	.word	0xa9ddca80
 800017c:	40021000 	.word	0x40021000
 8000180:	0001869f 	.word	0x0001869f

08000184 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000188:	46c0      	nop			; (mov r8, r8)
 800018a:	46bd      	mov	sp, r7
 800018c:	bd80      	pop	{r7, pc}
	...

08000190 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000190:	480d      	ldr	r0, [pc, #52]	; (80001c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000192:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000194:	480d      	ldr	r0, [pc, #52]	; (80001cc <LoopForever+0x6>)
  ldr r1, =_edata
 8000196:	490e      	ldr	r1, [pc, #56]	; (80001d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000198:	4a0e      	ldr	r2, [pc, #56]	; (80001d4 <LoopForever+0xe>)
  movs r3, #0
 800019a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800019c:	e002      	b.n	80001a4 <LoopCopyDataInit>

0800019e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800019e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001a2:	3304      	adds	r3, #4

080001a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001a8:	d3f9      	bcc.n	800019e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001aa:	4a0b      	ldr	r2, [pc, #44]	; (80001d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80001ac:	4c0b      	ldr	r4, [pc, #44]	; (80001dc <LoopForever+0x16>)
  movs r3, #0
 80001ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001b0:	e001      	b.n	80001b6 <LoopFillZerobss>

080001b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80001b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001b4:	3204      	adds	r2, #4

080001b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001b8:	d3fb      	bcc.n	80001b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80001ba:	f7ff ffe3 	bl	8000184 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80001be:	f000 f811 	bl	80001e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80001c2:	f7ff ffa1 	bl	8000108 <main>

080001c6 <LoopForever>:

LoopForever:
    b LoopForever
 80001c6:	e7fe      	b.n	80001c6 <LoopForever>
  ldr   r0, =_estack
 80001c8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80001cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80001d0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80001d4:	0800024c 	.word	0x0800024c
  ldr r2, =_sbss
 80001d8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80001dc:	2000001c 	.word	0x2000001c

080001e0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80001e0:	e7fe      	b.n	80001e0 <ADC_IRQHandler>
	...

080001e4 <__libc_init_array>:
 80001e4:	b570      	push	{r4, r5, r6, lr}
 80001e6:	2600      	movs	r6, #0
 80001e8:	4d0c      	ldr	r5, [pc, #48]	; (800021c <__libc_init_array+0x38>)
 80001ea:	4c0d      	ldr	r4, [pc, #52]	; (8000220 <__libc_init_array+0x3c>)
 80001ec:	1b64      	subs	r4, r4, r5
 80001ee:	10a4      	asrs	r4, r4, #2
 80001f0:	42a6      	cmp	r6, r4
 80001f2:	d109      	bne.n	8000208 <__libc_init_array+0x24>
 80001f4:	2600      	movs	r6, #0
 80001f6:	f000 f819 	bl	800022c <_init>
 80001fa:	4d0a      	ldr	r5, [pc, #40]	; (8000224 <__libc_init_array+0x40>)
 80001fc:	4c0a      	ldr	r4, [pc, #40]	; (8000228 <__libc_init_array+0x44>)
 80001fe:	1b64      	subs	r4, r4, r5
 8000200:	10a4      	asrs	r4, r4, #2
 8000202:	42a6      	cmp	r6, r4
 8000204:	d105      	bne.n	8000212 <__libc_init_array+0x2e>
 8000206:	bd70      	pop	{r4, r5, r6, pc}
 8000208:	00b3      	lsls	r3, r6, #2
 800020a:	58eb      	ldr	r3, [r5, r3]
 800020c:	4798      	blx	r3
 800020e:	3601      	adds	r6, #1
 8000210:	e7ee      	b.n	80001f0 <__libc_init_array+0xc>
 8000212:	00b3      	lsls	r3, r6, #2
 8000214:	58eb      	ldr	r3, [r5, r3]
 8000216:	4798      	blx	r3
 8000218:	3601      	adds	r6, #1
 800021a:	e7f2      	b.n	8000202 <__libc_init_array+0x1e>
 800021c:	08000244 	.word	0x08000244
 8000220:	08000244 	.word	0x08000244
 8000224:	08000244 	.word	0x08000244
 8000228:	08000248 	.word	0x08000248

0800022c <_init>:
 800022c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800022e:	46c0      	nop			; (mov r8, r8)
 8000230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000232:	bc08      	pop	{r3}
 8000234:	469e      	mov	lr, r3
 8000236:	4770      	bx	lr

08000238 <_fini>:
 8000238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800023a:	46c0      	nop			; (mov r8, r8)
 800023c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800023e:	bc08      	pop	{r3}
 8000240:	469e      	mov	lr, r3
 8000242:	4770      	bx	lr
