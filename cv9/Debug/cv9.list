
cv9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004398  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08004544  08004544  00014544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045a4  080045a4  000201c8  2**0
                  CONTENTS
  4 .ARM          00000008  080045a4  080045a4  000145a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045ac  080045ac  000201c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045ac  080045ac  000145ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045b0  080045b0  000145b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  080045b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000948  200001c8  0800477c  000201c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b10  0800477c  00020b10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ecc  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a48  00000000  00000000  000320c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c98  00000000  00000000  00034b10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b50  00000000  00000000  000357a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002596d  00000000  00000000  000362f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ca90  00000000  00000000  0005bc65  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d54bd  00000000  00000000  000686f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013dbb2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003410  00000000  00000000  0013dc30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200001c8 	.word	0x200001c8
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800452c 	.word	0x0800452c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200001cc 	.word	0x200001cc
 80001e8:	0800452c 	.word	0x0800452c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b972 	b.w	80004e8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	4688      	mov	r8, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14b      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022a:	428a      	cmp	r2, r1
 800022c:	4615      	mov	r5, r2
 800022e:	d967      	bls.n	8000300 <__udivmoddi4+0xe4>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0720 	rsb	r7, r2, #32
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	fa20 f707 	lsr.w	r7, r0, r7
 8000242:	4095      	lsls	r5, r2
 8000244:	ea47 0803 	orr.w	r8, r7, r3
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbb8 f7fe 	udiv	r7, r8, lr
 8000254:	fa1f fc85 	uxth.w	ip, r5
 8000258:	fb0e 8817 	mls	r8, lr, r7, r8
 800025c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000260:	fb07 f10c 	mul.w	r1, r7, ip
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18eb      	adds	r3, r5, r3
 800026a:	f107 30ff 	add.w	r0, r7, #4294967295
 800026e:	f080 811b 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8118 	bls.w	80004a8 <__udivmoddi4+0x28c>
 8000278:	3f02      	subs	r7, #2
 800027a:	442b      	add	r3, r5
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0fe 	udiv	r0, r3, lr
 8000284:	fb0e 3310 	mls	r3, lr, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000290:	45a4      	cmp	ip, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	192c      	adds	r4, r5, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x290>
 800029e:	45a4      	cmp	ip, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x290>
 80002a4:	3802      	subs	r0, #2
 80002a6:	442c      	add	r4, r5
 80002a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ac:	eba4 040c 	sub.w	r4, r4, ip
 80002b0:	2700      	movs	r7, #0
 80002b2:	b11e      	cbz	r6, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c6 4300 	strd	r4, r3, [r6]
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xbe>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80eb 	beq.w	80004a2 <__udivmoddi4+0x286>
 80002cc:	2700      	movs	r7, #0
 80002ce:	e9c6 0100 	strd	r0, r1, [r6]
 80002d2:	4638      	mov	r0, r7
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f783 	clz	r7, r3
 80002de:	2f00      	cmp	r7, #0
 80002e0:	d147      	bne.n	8000372 <__udivmoddi4+0x156>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd0>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2c4>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	4698      	mov	r8, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa0>
 80002fa:	e9c6 4800 	strd	r4, r8, [r6]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa0>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xe8>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 808f 	bne.w	800042c <__udivmoddi4+0x210>
 800030e:	1b49      	subs	r1, r1, r5
 8000310:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000314:	fa1f f885 	uxth.w	r8, r5
 8000318:	2701      	movs	r7, #1
 800031a:	fbb1 fcfe 	udiv	ip, r1, lr
 800031e:	0c23      	lsrs	r3, r4, #16
 8000320:	fb0e 111c 	mls	r1, lr, ip, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb08 f10c 	mul.w	r1, r8, ip
 800032c:	4299      	cmp	r1, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x124>
 8000330:	18eb      	adds	r3, r5, r3
 8000332:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4299      	cmp	r1, r3
 800033a:	f200 80cd 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 800033e:	4684      	mov	ip, r0
 8000340:	1a59      	subs	r1, r3, r1
 8000342:	b2a3      	uxth	r3, r4
 8000344:	fbb1 f0fe 	udiv	r0, r1, lr
 8000348:	fb0e 1410 	mls	r4, lr, r0, r1
 800034c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000350:	fb08 f800 	mul.w	r8, r8, r0
 8000354:	45a0      	cmp	r8, r4
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x14c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x14a>
 8000360:	45a0      	cmp	r8, r4
 8000362:	f200 80b6 	bhi.w	80004d2 <__udivmoddi4+0x2b6>
 8000366:	4618      	mov	r0, r3
 8000368:	eba4 0408 	sub.w	r4, r4, r8
 800036c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000370:	e79f      	b.n	80002b2 <__udivmoddi4+0x96>
 8000372:	f1c7 0c20 	rsb	ip, r7, #32
 8000376:	40bb      	lsls	r3, r7
 8000378:	fa22 fe0c 	lsr.w	lr, r2, ip
 800037c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000380:	fa01 f407 	lsl.w	r4, r1, r7
 8000384:	fa20 f50c 	lsr.w	r5, r0, ip
 8000388:	fa21 f30c 	lsr.w	r3, r1, ip
 800038c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000390:	4325      	orrs	r5, r4
 8000392:	fbb3 f9f8 	udiv	r9, r3, r8
 8000396:	0c2c      	lsrs	r4, r5, #16
 8000398:	fb08 3319 	mls	r3, r8, r9, r3
 800039c:	fa1f fa8e 	uxth.w	sl, lr
 80003a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a4:	fb09 f40a 	mul.w	r4, r9, sl
 80003a8:	429c      	cmp	r4, r3
 80003aa:	fa02 f207 	lsl.w	r2, r2, r7
 80003ae:	fa00 f107 	lsl.w	r1, r0, r7
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1e 0303 	adds.w	r3, lr, r3
 80003b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003bc:	f080 8087 	bcs.w	80004ce <__udivmoddi4+0x2b2>
 80003c0:	429c      	cmp	r4, r3
 80003c2:	f240 8084 	bls.w	80004ce <__udivmoddi4+0x2b2>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4473      	add	r3, lr
 80003cc:	1b1b      	subs	r3, r3, r4
 80003ce:	b2ad      	uxth	r5, r5
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3310 	mls	r3, r8, r0, r3
 80003d8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003dc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1e 0404 	adds.w	r4, lr, r4
 80003e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ec:	d26b      	bcs.n	80004c6 <__udivmoddi4+0x2aa>
 80003ee:	45a2      	cmp	sl, r4
 80003f0:	d969      	bls.n	80004c6 <__udivmoddi4+0x2aa>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4474      	add	r4, lr
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	fba0 8902 	umull	r8, r9, r0, r2
 80003fe:	eba4 040a 	sub.w	r4, r4, sl
 8000402:	454c      	cmp	r4, r9
 8000404:	46c2      	mov	sl, r8
 8000406:	464b      	mov	r3, r9
 8000408:	d354      	bcc.n	80004b4 <__udivmoddi4+0x298>
 800040a:	d051      	beq.n	80004b0 <__udivmoddi4+0x294>
 800040c:	2e00      	cmp	r6, #0
 800040e:	d069      	beq.n	80004e4 <__udivmoddi4+0x2c8>
 8000410:	ebb1 050a 	subs.w	r5, r1, sl
 8000414:	eb64 0403 	sbc.w	r4, r4, r3
 8000418:	fa04 fc0c 	lsl.w	ip, r4, ip
 800041c:	40fd      	lsrs	r5, r7
 800041e:	40fc      	lsrs	r4, r7
 8000420:	ea4c 0505 	orr.w	r5, ip, r5
 8000424:	e9c6 5400 	strd	r5, r4, [r6]
 8000428:	2700      	movs	r7, #0
 800042a:	e747      	b.n	80002bc <__udivmoddi4+0xa0>
 800042c:	f1c2 0320 	rsb	r3, r2, #32
 8000430:	fa20 f703 	lsr.w	r7, r0, r3
 8000434:	4095      	lsls	r5, r2
 8000436:	fa01 f002 	lsl.w	r0, r1, r2
 800043a:	fa21 f303 	lsr.w	r3, r1, r3
 800043e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000442:	4338      	orrs	r0, r7
 8000444:	0c01      	lsrs	r1, r0, #16
 8000446:	fbb3 f7fe 	udiv	r7, r3, lr
 800044a:	fa1f f885 	uxth.w	r8, r5
 800044e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb07 f308 	mul.w	r3, r7, r8
 800045a:	428b      	cmp	r3, r1
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x256>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f107 3cff 	add.w	ip, r7, #4294967295
 8000468:	d22f      	bcs.n	80004ca <__udivmoddi4+0x2ae>
 800046a:	428b      	cmp	r3, r1
 800046c:	d92d      	bls.n	80004ca <__udivmoddi4+0x2ae>
 800046e:	3f02      	subs	r7, #2
 8000470:	4429      	add	r1, r5
 8000472:	1acb      	subs	r3, r1, r3
 8000474:	b281      	uxth	r1, r0
 8000476:	fbb3 f0fe 	udiv	r0, r3, lr
 800047a:	fb0e 3310 	mls	r3, lr, r0, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb00 f308 	mul.w	r3, r0, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x27e>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000490:	d217      	bcs.n	80004c2 <__udivmoddi4+0x2a6>
 8000492:	428b      	cmp	r3, r1
 8000494:	d915      	bls.n	80004c2 <__udivmoddi4+0x2a6>
 8000496:	3802      	subs	r0, #2
 8000498:	4429      	add	r1, r5
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a0:	e73b      	b.n	800031a <__udivmoddi4+0xfe>
 80004a2:	4637      	mov	r7, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e709      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a8:	4607      	mov	r7, r0
 80004aa:	e6e7      	b.n	800027c <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004b0:	4541      	cmp	r1, r8
 80004b2:	d2ab      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b8:	eb69 020e 	sbc.w	r2, r9, lr
 80004bc:	3801      	subs	r0, #1
 80004be:	4613      	mov	r3, r2
 80004c0:	e7a4      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c2:	4660      	mov	r0, ip
 80004c4:	e7e9      	b.n	800049a <__udivmoddi4+0x27e>
 80004c6:	4618      	mov	r0, r3
 80004c8:	e795      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004ca:	4667      	mov	r7, ip
 80004cc:	e7d1      	b.n	8000472 <__udivmoddi4+0x256>
 80004ce:	4681      	mov	r9, r0
 80004d0:	e77c      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d2:	3802      	subs	r0, #2
 80004d4:	442c      	add	r4, r5
 80004d6:	e747      	b.n	8000368 <__udivmoddi4+0x14c>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	442b      	add	r3, r5
 80004de:	e72f      	b.n	8000340 <__udivmoddi4+0x124>
 80004e0:	4638      	mov	r0, r7
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xda>
 80004e4:	4637      	mov	r7, r6
 80004e6:	e6e9      	b.n	80002bc <__udivmoddi4+0xa0>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f0:	f000 faa2 	bl	8000a38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f4:	f000 f808 	bl	8000508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f8:	f000 f89a 	bl	8000630 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80004fc:	f000 f86e 	bl	80005dc <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8000500:	f003 fc72 	bl	8003de8 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000504:	e7fe      	b.n	8000504 <main+0x18>
	...

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b094      	sub	sp, #80	; 0x50
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	f107 0320 	add.w	r3, r7, #32
 8000512:	2230      	movs	r2, #48	; 0x30
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f003 ff46 	bl	80043a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051c:	f107 030c 	add.w	r3, r7, #12
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
 800052a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800052c:	2300      	movs	r3, #0
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	4b28      	ldr	r3, [pc, #160]	; (80005d4 <SystemClock_Config+0xcc>)
 8000532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000534:	4a27      	ldr	r2, [pc, #156]	; (80005d4 <SystemClock_Config+0xcc>)
 8000536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053a:	6413      	str	r3, [r2, #64]	; 0x40
 800053c:	4b25      	ldr	r3, [pc, #148]	; (80005d4 <SystemClock_Config+0xcc>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000548:	2300      	movs	r3, #0
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	4b22      	ldr	r3, [pc, #136]	; (80005d8 <SystemClock_Config+0xd0>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a21      	ldr	r2, [pc, #132]	; (80005d8 <SystemClock_Config+0xd0>)
 8000552:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000556:	6013      	str	r3, [r2, #0]
 8000558:	4b1f      	ldr	r3, [pc, #124]	; (80005d8 <SystemClock_Config+0xd0>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000564:	2301      	movs	r3, #1
 8000566:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000568:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800056c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056e:	2302      	movs	r3, #2
 8000570:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000572:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000576:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000578:	2304      	movs	r3, #4
 800057a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800057c:	23a8      	movs	r3, #168	; 0xa8
 800057e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000580:	2302      	movs	r3, #2
 8000582:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000584:	2307      	movs	r3, #7
 8000586:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000588:	f107 0320 	add.w	r3, r7, #32
 800058c:	4618      	mov	r0, r3
 800058e:	f001 f899 	bl	80016c4 <HAL_RCC_OscConfig>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000598:	f000 f93c 	bl	8000814 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059c:	230f      	movs	r3, #15
 800059e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a0:	2302      	movs	r3, #2
 80005a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	2105      	movs	r1, #5
 80005ba:	4618      	mov	r0, r3
 80005bc:	f001 faf2 	bl	8001ba4 <HAL_RCC_ClockConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005c6:	f000 f925 	bl	8000814 <Error_Handler>
  }
}
 80005ca:	bf00      	nop
 80005cc:	3750      	adds	r7, #80	; 0x50
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40007000 	.word	0x40007000

080005dc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80005e0:	4b11      	ldr	r3, [pc, #68]	; (8000628 <MX_USART3_UART_Init+0x4c>)
 80005e2:	4a12      	ldr	r2, [pc, #72]	; (800062c <MX_USART3_UART_Init+0x50>)
 80005e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80005e6:	4b10      	ldr	r3, [pc, #64]	; (8000628 <MX_USART3_UART_Init+0x4c>)
 80005e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <MX_USART3_UART_Init+0x4c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <MX_USART3_UART_Init+0x4c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80005fa:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <MX_USART3_UART_Init+0x4c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000600:	4b09      	ldr	r3, [pc, #36]	; (8000628 <MX_USART3_UART_Init+0x4c>)
 8000602:	220c      	movs	r2, #12
 8000604:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000606:	4b08      	ldr	r3, [pc, #32]	; (8000628 <MX_USART3_UART_Init+0x4c>)
 8000608:	2200      	movs	r2, #0
 800060a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <MX_USART3_UART_Init+0x4c>)
 800060e:	2200      	movs	r2, #0
 8000610:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000612:	4805      	ldr	r0, [pc, #20]	; (8000628 <MX_USART3_UART_Init+0x4c>)
 8000614:	f001 fcb8 	bl	8001f88 <HAL_UART_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800061e:	f000 f8f9 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	200001f0 	.word	0x200001f0
 800062c:	40004800 	.word	0x40004800

08000630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b08c      	sub	sp, #48	; 0x30
 8000634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	f107 031c 	add.w	r3, r7, #28
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	61bb      	str	r3, [r7, #24]
 800064a:	4b6c      	ldr	r3, [pc, #432]	; (80007fc <MX_GPIO_Init+0x1cc>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a6b      	ldr	r2, [pc, #428]	; (80007fc <MX_GPIO_Init+0x1cc>)
 8000650:	f043 0304 	orr.w	r3, r3, #4
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
 8000656:	4b69      	ldr	r3, [pc, #420]	; (80007fc <MX_GPIO_Init+0x1cc>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f003 0304 	and.w	r3, r3, #4
 800065e:	61bb      	str	r3, [r7, #24]
 8000660:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	617b      	str	r3, [r7, #20]
 8000666:	4b65      	ldr	r3, [pc, #404]	; (80007fc <MX_GPIO_Init+0x1cc>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a64      	ldr	r2, [pc, #400]	; (80007fc <MX_GPIO_Init+0x1cc>)
 800066c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b62      	ldr	r3, [pc, #392]	; (80007fc <MX_GPIO_Init+0x1cc>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800067a:	617b      	str	r3, [r7, #20]
 800067c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	613b      	str	r3, [r7, #16]
 8000682:	4b5e      	ldr	r3, [pc, #376]	; (80007fc <MX_GPIO_Init+0x1cc>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a5d      	ldr	r2, [pc, #372]	; (80007fc <MX_GPIO_Init+0x1cc>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4b5b      	ldr	r3, [pc, #364]	; (80007fc <MX_GPIO_Init+0x1cc>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	613b      	str	r3, [r7, #16]
 8000698:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	4b57      	ldr	r3, [pc, #348]	; (80007fc <MX_GPIO_Init+0x1cc>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a56      	ldr	r2, [pc, #344]	; (80007fc <MX_GPIO_Init+0x1cc>)
 80006a4:	f043 0302 	orr.w	r3, r3, #2
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b54      	ldr	r3, [pc, #336]	; (80007fc <MX_GPIO_Init+0x1cc>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f003 0302 	and.w	r3, r3, #2
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	4b50      	ldr	r3, [pc, #320]	; (80007fc <MX_GPIO_Init+0x1cc>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a4f      	ldr	r2, [pc, #316]	; (80007fc <MX_GPIO_Init+0x1cc>)
 80006c0:	f043 0308 	orr.w	r3, r3, #8
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b4d      	ldr	r3, [pc, #308]	; (80007fc <MX_GPIO_Init+0x1cc>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0308 	and.w	r3, r3, #8
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	4b49      	ldr	r3, [pc, #292]	; (80007fc <MX_GPIO_Init+0x1cc>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a48      	ldr	r2, [pc, #288]	; (80007fc <MX_GPIO_Init+0x1cc>)
 80006dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b46      	ldr	r3, [pc, #280]	; (80007fc <MX_GPIO_Init+0x1cc>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	f244 0181 	movw	r1, #16513	; 0x4081
 80006f4:	4842      	ldr	r0, [pc, #264]	; (8000800 <MX_GPIO_Init+0x1d0>)
 80006f6:	f000 fcc3 	bl	8001080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2140      	movs	r1, #64	; 0x40
 80006fe:	4841      	ldr	r0, [pc, #260]	; (8000804 <MX_GPIO_Init+0x1d4>)
 8000700:	f000 fcbe 	bl	8001080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000704:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800070a:	4b3f      	ldr	r3, [pc, #252]	; (8000808 <MX_GPIO_Init+0x1d8>)
 800070c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000712:	f107 031c 	add.w	r3, r7, #28
 8000716:	4619      	mov	r1, r3
 8000718:	483c      	ldr	r0, [pc, #240]	; (800080c <MX_GPIO_Init+0x1dc>)
 800071a:	f000 fb07 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800071e:	2332      	movs	r3, #50	; 0x32
 8000720:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000722:	2302      	movs	r3, #2
 8000724:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800072a:	2303      	movs	r3, #3
 800072c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800072e:	230b      	movs	r3, #11
 8000730:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000732:	f107 031c 	add.w	r3, r7, #28
 8000736:	4619      	mov	r1, r3
 8000738:	4834      	ldr	r0, [pc, #208]	; (800080c <MX_GPIO_Init+0x1dc>)
 800073a:	f000 faf7 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800073e:	2386      	movs	r3, #134	; 0x86
 8000740:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000742:	2302      	movs	r3, #2
 8000744:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800074a:	2303      	movs	r3, #3
 800074c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800074e:	230b      	movs	r3, #11
 8000750:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000752:	f107 031c 	add.w	r3, r7, #28
 8000756:	4619      	mov	r1, r3
 8000758:	482d      	ldr	r0, [pc, #180]	; (8000810 <MX_GPIO_Init+0x1e0>)
 800075a:	f000 fae7 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800075e:	f244 0381 	movw	r3, #16513	; 0x4081
 8000762:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000764:	2301      	movs	r3, #1
 8000766:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076c:	2300      	movs	r3, #0
 800076e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000770:	f107 031c 	add.w	r3, r7, #28
 8000774:	4619      	mov	r1, r3
 8000776:	4822      	ldr	r0, [pc, #136]	; (8000800 <MX_GPIO_Init+0x1d0>)
 8000778:	f000 fad8 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800077c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000780:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000782:	2302      	movs	r3, #2
 8000784:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800078a:	2303      	movs	r3, #3
 800078c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800078e:	230b      	movs	r3, #11
 8000790:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	4619      	mov	r1, r3
 8000798:	4819      	ldr	r0, [pc, #100]	; (8000800 <MX_GPIO_Init+0x1d0>)
 800079a:	f000 fac7 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800079e:	2340      	movs	r3, #64	; 0x40
 80007a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a2:	2301      	movs	r3, #1
 80007a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007aa:	2300      	movs	r3, #0
 80007ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007ae:	f107 031c 	add.w	r3, r7, #28
 80007b2:	4619      	mov	r1, r3
 80007b4:	4813      	ldr	r0, [pc, #76]	; (8000804 <MX_GPIO_Init+0x1d4>)
 80007b6:	f000 fab9 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007ba:	2380      	movs	r3, #128	; 0x80
 80007bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007be:	2300      	movs	r3, #0
 80007c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007c6:	f107 031c 	add.w	r3, r7, #28
 80007ca:	4619      	mov	r1, r3
 80007cc:	480d      	ldr	r0, [pc, #52]	; (8000804 <MX_GPIO_Init+0x1d4>)
 80007ce:	f000 faad 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007d2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d8:	2302      	movs	r3, #2
 80007da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e0:	2303      	movs	r3, #3
 80007e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007e4:	230b      	movs	r3, #11
 80007e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007e8:	f107 031c 	add.w	r3, r7, #28
 80007ec:	4619      	mov	r1, r3
 80007ee:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_GPIO_Init+0x1d4>)
 80007f0:	f000 fa9c 	bl	8000d2c <HAL_GPIO_Init>

}
 80007f4:	bf00      	nop
 80007f6:	3730      	adds	r7, #48	; 0x30
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40023800 	.word	0x40023800
 8000800:	40020400 	.word	0x40020400
 8000804:	40021800 	.word	0x40021800
 8000808:	10110000 	.word	0x10110000
 800080c:	40020800 	.word	0x40020800
 8000810:	40020000 	.word	0x40020000

08000814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
	...

08000824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	4b10      	ldr	r3, [pc, #64]	; (8000870 <HAL_MspInit+0x4c>)
 8000830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000832:	4a0f      	ldr	r2, [pc, #60]	; (8000870 <HAL_MspInit+0x4c>)
 8000834:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000838:	6453      	str	r3, [r2, #68]	; 0x44
 800083a:	4b0d      	ldr	r3, [pc, #52]	; (8000870 <HAL_MspInit+0x4c>)
 800083c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	603b      	str	r3, [r7, #0]
 800084a:	4b09      	ldr	r3, [pc, #36]	; (8000870 <HAL_MspInit+0x4c>)
 800084c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084e:	4a08      	ldr	r2, [pc, #32]	; (8000870 <HAL_MspInit+0x4c>)
 8000850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000854:	6413      	str	r3, [r2, #64]	; 0x40
 8000856:	4b06      	ldr	r3, [pc, #24]	; (8000870 <HAL_MspInit+0x4c>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800085e:	603b      	str	r3, [r7, #0]
 8000860:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000862:	bf00      	nop
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	40023800 	.word	0x40023800

08000874 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08a      	sub	sp, #40	; 0x28
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a19      	ldr	r2, [pc, #100]	; (80008f8 <HAL_UART_MspInit+0x84>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d12c      	bne.n	80008f0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	613b      	str	r3, [r7, #16]
 800089a:	4b18      	ldr	r3, [pc, #96]	; (80008fc <HAL_UART_MspInit+0x88>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089e:	4a17      	ldr	r2, [pc, #92]	; (80008fc <HAL_UART_MspInit+0x88>)
 80008a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008a4:	6413      	str	r3, [r2, #64]	; 0x40
 80008a6:	4b15      	ldr	r3, [pc, #84]	; (80008fc <HAL_UART_MspInit+0x88>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008ae:	613b      	str	r3, [r7, #16]
 80008b0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
 80008b6:	4b11      	ldr	r3, [pc, #68]	; (80008fc <HAL_UART_MspInit+0x88>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a10      	ldr	r2, [pc, #64]	; (80008fc <HAL_UART_MspInit+0x88>)
 80008bc:	f043 0308 	orr.w	r3, r3, #8
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <HAL_UART_MspInit+0x88>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0308 	and.w	r3, r3, #8
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80008ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d4:	2302      	movs	r3, #2
 80008d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008dc:	2303      	movs	r3, #3
 80008de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80008e0:	2307      	movs	r3, #7
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	4619      	mov	r1, r3
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <HAL_UART_MspInit+0x8c>)
 80008ec:	f000 fa1e 	bl	8000d2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80008f0:	bf00      	nop
 80008f2:	3728      	adds	r7, #40	; 0x28
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40004800 	.word	0x40004800
 80008fc:	40023800 	.word	0x40023800
 8000900:	40020c00 	.word	0x40020c00

08000904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000916:	e7fe      	b.n	8000916 <HardFault_Handler+0x4>

08000918 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800091c:	e7fe      	b.n	800091c <MemManage_Handler+0x4>

0800091e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000922:	e7fe      	b.n	8000922 <BusFault_Handler+0x4>

08000924 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000928:	e7fe      	b.n	8000928 <UsageFault_Handler+0x4>

0800092a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr

08000946 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr

08000954 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000958:	f000 f8c0 	bl	8000adc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}

08000960 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000968:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <_sbrk+0x50>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d102      	bne.n	8000976 <_sbrk+0x16>
		heap_end = &end;
 8000970:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <_sbrk+0x50>)
 8000972:	4a10      	ldr	r2, [pc, #64]	; (80009b4 <_sbrk+0x54>)
 8000974:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <_sbrk+0x50>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <_sbrk+0x50>)
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4413      	add	r3, r2
 8000984:	466a      	mov	r2, sp
 8000986:	4293      	cmp	r3, r2
 8000988:	d907      	bls.n	800099a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800098a:	f003 fcd3 	bl	8004334 <__errno>
 800098e:	4602      	mov	r2, r0
 8000990:	230c      	movs	r3, #12
 8000992:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000994:	f04f 33ff 	mov.w	r3, #4294967295
 8000998:	e006      	b.n	80009a8 <_sbrk+0x48>
	}

	heap_end += incr;
 800099a:	4b05      	ldr	r3, [pc, #20]	; (80009b0 <_sbrk+0x50>)
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4413      	add	r3, r2
 80009a2:	4a03      	ldr	r2, [pc, #12]	; (80009b0 <_sbrk+0x50>)
 80009a4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80009a6:	68fb      	ldr	r3, [r7, #12]
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3710      	adds	r7, #16
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	200001e4 	.word	0x200001e4
 80009b4:	20000b10 	.word	0x20000b10

080009b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009bc:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <SystemInit+0x28>)
 80009be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009c2:	4a07      	ldr	r2, [pc, #28]	; (80009e0 <SystemInit+0x28>)
 80009c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009cc:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <SystemInit+0x28>)
 80009ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009d2:	609a      	str	r2, [r3, #8]
#endif
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80009e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a1c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80009e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80009ea:	e003      	b.n	80009f4 <LoopCopyDataInit>

080009ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80009ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80009f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80009f2:	3104      	adds	r1, #4

080009f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80009f4:	480b      	ldr	r0, [pc, #44]	; (8000a24 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80009f6:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80009f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80009fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80009fc:	d3f6      	bcc.n	80009ec <CopyDataInit>
  ldr  r2, =_sbss
 80009fe:	4a0b      	ldr	r2, [pc, #44]	; (8000a2c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a00:	e002      	b.n	8000a08 <LoopFillZerobss>

08000a02 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a02:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a04:	f842 3b04 	str.w	r3, [r2], #4

08000a08 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a08:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a0a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a0c:	d3f9      	bcc.n	8000a02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a0e:	f7ff ffd3 	bl	80009b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a12:	f003 fc95 	bl	8004340 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a16:	f7ff fd69 	bl	80004ec <main>
  bx  lr    
 8000a1a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000a1c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000a20:	080045b4 	.word	0x080045b4
  ldr  r0, =_sdata
 8000a24:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a28:	200001c8 	.word	0x200001c8
  ldr  r2, =_sbss
 8000a2c:	200001c8 	.word	0x200001c8
  ldr  r3, = _ebss
 8000a30:	20000b10 	.word	0x20000b10

08000a34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a34:	e7fe      	b.n	8000a34 <ADC_IRQHandler>
	...

08000a38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a3c:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <HAL_Init+0x40>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a0d      	ldr	r2, [pc, #52]	; (8000a78 <HAL_Init+0x40>)
 8000a42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a48:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <HAL_Init+0x40>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a0a      	ldr	r2, [pc, #40]	; (8000a78 <HAL_Init+0x40>)
 8000a4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a54:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <HAL_Init+0x40>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a07      	ldr	r2, [pc, #28]	; (8000a78 <HAL_Init+0x40>)
 8000a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a60:	2003      	movs	r0, #3
 8000a62:	f000 f92f 	bl	8000cc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a66:	2000      	movs	r0, #0
 8000a68:	f000 f808 	bl	8000a7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a6c:	f7ff feda 	bl	8000824 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40023c00 	.word	0x40023c00

08000a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <HAL_InitTick+0x54>)
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <HAL_InitTick+0x58>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 f939 	bl	8000d12 <HAL_SYSTICK_Config>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e00e      	b.n	8000ac8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2b0f      	cmp	r3, #15
 8000aae:	d80a      	bhi.n	8000ac6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	6879      	ldr	r1, [r7, #4]
 8000ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab8:	f000 f90f 	bl	8000cda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000abc:	4a06      	ldr	r2, [pc, #24]	; (8000ad8 <HAL_InitTick+0x5c>)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	e000      	b.n	8000ac8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ac6:	2301      	movs	r3, #1
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20000000 	.word	0x20000000
 8000ad4:	20000008 	.word	0x20000008
 8000ad8:	20000004 	.word	0x20000004

08000adc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <HAL_IncTick+0x20>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <HAL_IncTick+0x24>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4413      	add	r3, r2
 8000aec:	4a04      	ldr	r2, [pc, #16]	; (8000b00 <HAL_IncTick+0x24>)
 8000aee:	6013      	str	r3, [r2, #0]
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	20000008 	.word	0x20000008
 8000b00:	20000230 	.word	0x20000230

08000b04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  return uwTick;
 8000b08:	4b03      	ldr	r3, [pc, #12]	; (8000b18 <HAL_GetTick+0x14>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	20000230 	.word	0x20000230

08000b1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b24:	f7ff ffee 	bl	8000b04 <HAL_GetTick>
 8000b28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b34:	d005      	beq.n	8000b42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b36:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <HAL_Delay+0x40>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	4413      	add	r3, r2
 8000b40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b42:	bf00      	nop
 8000b44:	f7ff ffde 	bl	8000b04 <HAL_GetTick>
 8000b48:	4602      	mov	r2, r0
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	1ad3      	subs	r3, r2, r3
 8000b4e:	68fa      	ldr	r2, [r7, #12]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d8f7      	bhi.n	8000b44 <HAL_Delay+0x28>
  {
  }
}
 8000b54:	bf00      	nop
 8000b56:	3710      	adds	r7, #16
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20000008 	.word	0x20000008

08000b60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f003 0307 	and.w	r3, r3, #7
 8000b6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b70:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b76:	68ba      	ldr	r2, [r7, #8]
 8000b78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b92:	4a04      	ldr	r2, [pc, #16]	; (8000ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	60d3      	str	r3, [r2, #12]
}
 8000b98:	bf00      	nop
 8000b9a:	3714      	adds	r7, #20
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bac:	4b04      	ldr	r3, [pc, #16]	; (8000bc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	0a1b      	lsrs	r3, r3, #8
 8000bb2:	f003 0307 	and.w	r3, r3, #7
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	6039      	str	r1, [r7, #0]
 8000bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	db0a      	blt.n	8000bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	b2da      	uxtb	r2, r3
 8000bdc:	490c      	ldr	r1, [pc, #48]	; (8000c10 <__NVIC_SetPriority+0x4c>)
 8000bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be2:	0112      	lsls	r2, r2, #4
 8000be4:	b2d2      	uxtb	r2, r2
 8000be6:	440b      	add	r3, r1
 8000be8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bec:	e00a      	b.n	8000c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	4908      	ldr	r1, [pc, #32]	; (8000c14 <__NVIC_SetPriority+0x50>)
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	f003 030f 	and.w	r3, r3, #15
 8000bfa:	3b04      	subs	r3, #4
 8000bfc:	0112      	lsls	r2, r2, #4
 8000bfe:	b2d2      	uxtb	r2, r2
 8000c00:	440b      	add	r3, r1
 8000c02:	761a      	strb	r2, [r3, #24]
}
 8000c04:	bf00      	nop
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	e000e100 	.word	0xe000e100
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b089      	sub	sp, #36	; 0x24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	f003 0307 	and.w	r3, r3, #7
 8000c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	f1c3 0307 	rsb	r3, r3, #7
 8000c32:	2b04      	cmp	r3, #4
 8000c34:	bf28      	it	cs
 8000c36:	2304      	movcs	r3, #4
 8000c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	3304      	adds	r3, #4
 8000c3e:	2b06      	cmp	r3, #6
 8000c40:	d902      	bls.n	8000c48 <NVIC_EncodePriority+0x30>
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	3b03      	subs	r3, #3
 8000c46:	e000      	b.n	8000c4a <NVIC_EncodePriority+0x32>
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c50:	69bb      	ldr	r3, [r7, #24]
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	43da      	mvns	r2, r3
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	401a      	ands	r2, r3
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c60:	f04f 31ff 	mov.w	r1, #4294967295
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6a:	43d9      	mvns	r1, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c70:	4313      	orrs	r3, r2
         );
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3724      	adds	r7, #36	; 0x24
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
	...

08000c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c90:	d301      	bcc.n	8000c96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c92:	2301      	movs	r3, #1
 8000c94:	e00f      	b.n	8000cb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c96:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <SysTick_Config+0x40>)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c9e:	210f      	movs	r1, #15
 8000ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca4:	f7ff ff8e 	bl	8000bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca8:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <SysTick_Config+0x40>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cae:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <SysTick_Config+0x40>)
 8000cb0:	2207      	movs	r2, #7
 8000cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	e000e010 	.word	0xe000e010

08000cc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f7ff ff47 	bl	8000b60 <__NVIC_SetPriorityGrouping>
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b086      	sub	sp, #24
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	60b9      	str	r1, [r7, #8]
 8000ce4:	607a      	str	r2, [r7, #4]
 8000ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cec:	f7ff ff5c 	bl	8000ba8 <__NVIC_GetPriorityGrouping>
 8000cf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	68b9      	ldr	r1, [r7, #8]
 8000cf6:	6978      	ldr	r0, [r7, #20]
 8000cf8:	f7ff ff8e 	bl	8000c18 <NVIC_EncodePriority>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d02:	4611      	mov	r1, r2
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff ff5d 	bl	8000bc4 <__NVIC_SetPriority>
}
 8000d0a:	bf00      	nop
 8000d0c:	3718      	adds	r7, #24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b082      	sub	sp, #8
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f7ff ffb0 	bl	8000c80 <SysTick_Config>
 8000d20:	4603      	mov	r3, r0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
	...

08000d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b089      	sub	sp, #36	; 0x24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]
 8000d46:	e177      	b.n	8001038 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d48:	2201      	movs	r2, #1
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	697a      	ldr	r2, [r7, #20]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	f040 8166 	bne.w	8001032 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d00b      	beq.n	8000d86 <HAL_GPIO_Init+0x5a>
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d007      	beq.n	8000d86 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d7a:	2b11      	cmp	r3, #17
 8000d7c:	d003      	beq.n	8000d86 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	2b12      	cmp	r3, #18
 8000d84:	d130      	bne.n	8000de8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	2203      	movs	r2, #3
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	43db      	mvns	r3, r3
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	68da      	ldr	r2, [r3, #12]
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	091b      	lsrs	r3, r3, #4
 8000dd2:	f003 0201 	and.w	r2, r3, #1
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	2203      	movs	r2, #3
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	689a      	ldr	r2, [r3, #8]
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d003      	beq.n	8000e28 <HAL_GPIO_Init+0xfc>
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	2b12      	cmp	r3, #18
 8000e26:	d123      	bne.n	8000e70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	08da      	lsrs	r2, r3, #3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3208      	adds	r2, #8
 8000e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	f003 0307 	and.w	r3, r3, #7
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	220f      	movs	r2, #15
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	43db      	mvns	r3, r3
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	691a      	ldr	r2, [r3, #16]
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	08da      	lsrs	r2, r3, #3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	3208      	adds	r2, #8
 8000e6a:	69b9      	ldr	r1, [r7, #24]
 8000e6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	4013      	ands	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f003 0203 	and.w	r2, r3, #3
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	f000 80c0 	beq.w	8001032 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	4b65      	ldr	r3, [pc, #404]	; (800104c <HAL_GPIO_Init+0x320>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eba:	4a64      	ldr	r2, [pc, #400]	; (800104c <HAL_GPIO_Init+0x320>)
 8000ebc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ec2:	4b62      	ldr	r3, [pc, #392]	; (800104c <HAL_GPIO_Init+0x320>)
 8000ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ece:	4a60      	ldr	r2, [pc, #384]	; (8001050 <HAL_GPIO_Init+0x324>)
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	089b      	lsrs	r3, r3, #2
 8000ed4:	3302      	adds	r3, #2
 8000ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	f003 0303 	and.w	r3, r3, #3
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	220f      	movs	r2, #15
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43db      	mvns	r3, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a57      	ldr	r2, [pc, #348]	; (8001054 <HAL_GPIO_Init+0x328>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d037      	beq.n	8000f6a <HAL_GPIO_Init+0x23e>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a56      	ldr	r2, [pc, #344]	; (8001058 <HAL_GPIO_Init+0x32c>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d031      	beq.n	8000f66 <HAL_GPIO_Init+0x23a>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a55      	ldr	r2, [pc, #340]	; (800105c <HAL_GPIO_Init+0x330>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d02b      	beq.n	8000f62 <HAL_GPIO_Init+0x236>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a54      	ldr	r2, [pc, #336]	; (8001060 <HAL_GPIO_Init+0x334>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d025      	beq.n	8000f5e <HAL_GPIO_Init+0x232>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a53      	ldr	r2, [pc, #332]	; (8001064 <HAL_GPIO_Init+0x338>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d01f      	beq.n	8000f5a <HAL_GPIO_Init+0x22e>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a52      	ldr	r2, [pc, #328]	; (8001068 <HAL_GPIO_Init+0x33c>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d019      	beq.n	8000f56 <HAL_GPIO_Init+0x22a>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a51      	ldr	r2, [pc, #324]	; (800106c <HAL_GPIO_Init+0x340>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d013      	beq.n	8000f52 <HAL_GPIO_Init+0x226>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a50      	ldr	r2, [pc, #320]	; (8001070 <HAL_GPIO_Init+0x344>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d00d      	beq.n	8000f4e <HAL_GPIO_Init+0x222>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a4f      	ldr	r2, [pc, #316]	; (8001074 <HAL_GPIO_Init+0x348>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d007      	beq.n	8000f4a <HAL_GPIO_Init+0x21e>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a4e      	ldr	r2, [pc, #312]	; (8001078 <HAL_GPIO_Init+0x34c>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d101      	bne.n	8000f46 <HAL_GPIO_Init+0x21a>
 8000f42:	2309      	movs	r3, #9
 8000f44:	e012      	b.n	8000f6c <HAL_GPIO_Init+0x240>
 8000f46:	230a      	movs	r3, #10
 8000f48:	e010      	b.n	8000f6c <HAL_GPIO_Init+0x240>
 8000f4a:	2308      	movs	r3, #8
 8000f4c:	e00e      	b.n	8000f6c <HAL_GPIO_Init+0x240>
 8000f4e:	2307      	movs	r3, #7
 8000f50:	e00c      	b.n	8000f6c <HAL_GPIO_Init+0x240>
 8000f52:	2306      	movs	r3, #6
 8000f54:	e00a      	b.n	8000f6c <HAL_GPIO_Init+0x240>
 8000f56:	2305      	movs	r3, #5
 8000f58:	e008      	b.n	8000f6c <HAL_GPIO_Init+0x240>
 8000f5a:	2304      	movs	r3, #4
 8000f5c:	e006      	b.n	8000f6c <HAL_GPIO_Init+0x240>
 8000f5e:	2303      	movs	r3, #3
 8000f60:	e004      	b.n	8000f6c <HAL_GPIO_Init+0x240>
 8000f62:	2302      	movs	r3, #2
 8000f64:	e002      	b.n	8000f6c <HAL_GPIO_Init+0x240>
 8000f66:	2301      	movs	r3, #1
 8000f68:	e000      	b.n	8000f6c <HAL_GPIO_Init+0x240>
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	69fa      	ldr	r2, [r7, #28]
 8000f6e:	f002 0203 	and.w	r2, r2, #3
 8000f72:	0092      	lsls	r2, r2, #2
 8000f74:	4093      	lsls	r3, r2
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f7c:	4934      	ldr	r1, [pc, #208]	; (8001050 <HAL_GPIO_Init+0x324>)
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	089b      	lsrs	r3, r3, #2
 8000f82:	3302      	adds	r3, #2
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f8a:	4b3c      	ldr	r3, [pc, #240]	; (800107c <HAL_GPIO_Init+0x350>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	43db      	mvns	r3, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4013      	ands	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fae:	4a33      	ldr	r2, [pc, #204]	; (800107c <HAL_GPIO_Init+0x350>)
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fb4:	4b31      	ldr	r3, [pc, #196]	; (800107c <HAL_GPIO_Init+0x350>)
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d003      	beq.n	8000fd8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fd8:	4a28      	ldr	r2, [pc, #160]	; (800107c <HAL_GPIO_Init+0x350>)
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fde:	4b27      	ldr	r3, [pc, #156]	; (800107c <HAL_GPIO_Init+0x350>)
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4013      	ands	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d003      	beq.n	8001002 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001002:	4a1e      	ldr	r2, [pc, #120]	; (800107c <HAL_GPIO_Init+0x350>)
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001008:	4b1c      	ldr	r3, [pc, #112]	; (800107c <HAL_GPIO_Init+0x350>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	43db      	mvns	r3, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4013      	ands	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d003      	beq.n	800102c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	4313      	orrs	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800102c:	4a13      	ldr	r2, [pc, #76]	; (800107c <HAL_GPIO_Init+0x350>)
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3301      	adds	r3, #1
 8001036:	61fb      	str	r3, [r7, #28]
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	2b0f      	cmp	r3, #15
 800103c:	f67f ae84 	bls.w	8000d48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001040:	bf00      	nop
 8001042:	3724      	adds	r7, #36	; 0x24
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	40023800 	.word	0x40023800
 8001050:	40013800 	.word	0x40013800
 8001054:	40020000 	.word	0x40020000
 8001058:	40020400 	.word	0x40020400
 800105c:	40020800 	.word	0x40020800
 8001060:	40020c00 	.word	0x40020c00
 8001064:	40021000 	.word	0x40021000
 8001068:	40021400 	.word	0x40021400
 800106c:	40021800 	.word	0x40021800
 8001070:	40021c00 	.word	0x40021c00
 8001074:	40022000 	.word	0x40022000
 8001078:	40022400 	.word	0x40022400
 800107c:	40013c00 	.word	0x40013c00

08001080 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	460b      	mov	r3, r1
 800108a:	807b      	strh	r3, [r7, #2]
 800108c:	4613      	mov	r3, r2
 800108e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001090:	787b      	ldrb	r3, [r7, #1]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001096:	887a      	ldrh	r2, [r7, #2]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800109c:	e003      	b.n	80010a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800109e:	887b      	ldrh	r3, [r7, #2]
 80010a0:	041a      	lsls	r2, r3, #16
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	619a      	str	r2, [r3, #24]
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010b4:	b08f      	sub	sp, #60	; 0x3c
 80010b6:	af0a      	add	r7, sp, #40	; 0x28
 80010b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d101      	bne.n	80010c4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	e10f      	b.n	80012e4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d106      	bne.n	80010e4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2200      	movs	r2, #0
 80010da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f002 ffb6 	bl	8004050 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2203      	movs	r2, #3
 80010e8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d102      	bne.n	80010fe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4618      	mov	r0, r3
 8001104:	f001 fb7c 	bl	8002800 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	603b      	str	r3, [r7, #0]
 800110e:	687e      	ldr	r6, [r7, #4]
 8001110:	466d      	mov	r5, sp
 8001112:	f106 0410 	add.w	r4, r6, #16
 8001116:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001118:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800111a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800111c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800111e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001122:	e885 0003 	stmia.w	r5, {r0, r1}
 8001126:	1d33      	adds	r3, r6, #4
 8001128:	cb0e      	ldmia	r3, {r1, r2, r3}
 800112a:	6838      	ldr	r0, [r7, #0]
 800112c:	f001 faf6 	bl	800271c <USB_CoreInit>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d005      	beq.n	8001142 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2202      	movs	r2, #2
 800113a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e0d0      	b.n	80012e4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2100      	movs	r1, #0
 8001148:	4618      	mov	r0, r3
 800114a:	f001 fb6a 	bl	8002822 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800114e:	2300      	movs	r3, #0
 8001150:	73fb      	strb	r3, [r7, #15]
 8001152:	e04a      	b.n	80011ea <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001154:	7bfa      	ldrb	r2, [r7, #15]
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	4613      	mov	r3, r2
 800115a:	00db      	lsls	r3, r3, #3
 800115c:	1a9b      	subs	r3, r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	440b      	add	r3, r1
 8001162:	333d      	adds	r3, #61	; 0x3d
 8001164:	2201      	movs	r2, #1
 8001166:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001168:	7bfa      	ldrb	r2, [r7, #15]
 800116a:	6879      	ldr	r1, [r7, #4]
 800116c:	4613      	mov	r3, r2
 800116e:	00db      	lsls	r3, r3, #3
 8001170:	1a9b      	subs	r3, r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	440b      	add	r3, r1
 8001176:	333c      	adds	r3, #60	; 0x3c
 8001178:	7bfa      	ldrb	r2, [r7, #15]
 800117a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800117c:	7bfa      	ldrb	r2, [r7, #15]
 800117e:	7bfb      	ldrb	r3, [r7, #15]
 8001180:	b298      	uxth	r0, r3
 8001182:	6879      	ldr	r1, [r7, #4]
 8001184:	4613      	mov	r3, r2
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	1a9b      	subs	r3, r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	440b      	add	r3, r1
 800118e:	3342      	adds	r3, #66	; 0x42
 8001190:	4602      	mov	r2, r0
 8001192:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001194:	7bfa      	ldrb	r2, [r7, #15]
 8001196:	6879      	ldr	r1, [r7, #4]
 8001198:	4613      	mov	r3, r2
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	1a9b      	subs	r3, r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	440b      	add	r3, r1
 80011a2:	333f      	adds	r3, #63	; 0x3f
 80011a4:	2200      	movs	r2, #0
 80011a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80011a8:	7bfa      	ldrb	r2, [r7, #15]
 80011aa:	6879      	ldr	r1, [r7, #4]
 80011ac:	4613      	mov	r3, r2
 80011ae:	00db      	lsls	r3, r3, #3
 80011b0:	1a9b      	subs	r3, r3, r2
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	440b      	add	r3, r1
 80011b6:	3344      	adds	r3, #68	; 0x44
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011bc:	7bfa      	ldrb	r2, [r7, #15]
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	4613      	mov	r3, r2
 80011c2:	00db      	lsls	r3, r3, #3
 80011c4:	1a9b      	subs	r3, r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	440b      	add	r3, r1
 80011ca:	3348      	adds	r3, #72	; 0x48
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80011d0:	7bfa      	ldrb	r2, [r7, #15]
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	4613      	mov	r3, r2
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	1a9b      	subs	r3, r3, r2
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	440b      	add	r3, r1
 80011de:	3350      	adds	r3, #80	; 0x50
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	3301      	adds	r3, #1
 80011e8:	73fb      	strb	r3, [r7, #15]
 80011ea:	7bfa      	ldrb	r2, [r7, #15]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d3af      	bcc.n	8001154 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011f4:	2300      	movs	r3, #0
 80011f6:	73fb      	strb	r3, [r7, #15]
 80011f8:	e044      	b.n	8001284 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80011fa:	7bfa      	ldrb	r2, [r7, #15]
 80011fc:	6879      	ldr	r1, [r7, #4]
 80011fe:	4613      	mov	r3, r2
 8001200:	00db      	lsls	r3, r3, #3
 8001202:	1a9b      	subs	r3, r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	440b      	add	r3, r1
 8001208:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800120c:	2200      	movs	r2, #0
 800120e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001210:	7bfa      	ldrb	r2, [r7, #15]
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	4613      	mov	r3, r2
 8001216:	00db      	lsls	r3, r3, #3
 8001218:	1a9b      	subs	r3, r3, r2
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	440b      	add	r3, r1
 800121e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001222:	7bfa      	ldrb	r2, [r7, #15]
 8001224:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001226:	7bfa      	ldrb	r2, [r7, #15]
 8001228:	6879      	ldr	r1, [r7, #4]
 800122a:	4613      	mov	r3, r2
 800122c:	00db      	lsls	r3, r3, #3
 800122e:	1a9b      	subs	r3, r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	440b      	add	r3, r1
 8001234:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001238:	2200      	movs	r2, #0
 800123a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800123c:	7bfa      	ldrb	r2, [r7, #15]
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	4613      	mov	r3, r2
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	1a9b      	subs	r3, r3, r2
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	440b      	add	r3, r1
 800124a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001252:	7bfa      	ldrb	r2, [r7, #15]
 8001254:	6879      	ldr	r1, [r7, #4]
 8001256:	4613      	mov	r3, r2
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	1a9b      	subs	r3, r3, r2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	440b      	add	r3, r1
 8001260:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001268:	7bfa      	ldrb	r2, [r7, #15]
 800126a:	6879      	ldr	r1, [r7, #4]
 800126c:	4613      	mov	r3, r2
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	1a9b      	subs	r3, r3, r2
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	440b      	add	r3, r1
 8001276:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800127e:	7bfb      	ldrb	r3, [r7, #15]
 8001280:	3301      	adds	r3, #1
 8001282:	73fb      	strb	r3, [r7, #15]
 8001284:	7bfa      	ldrb	r2, [r7, #15]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	429a      	cmp	r2, r3
 800128c:	d3b5      	bcc.n	80011fa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	687e      	ldr	r6, [r7, #4]
 8001296:	466d      	mov	r5, sp
 8001298:	f106 0410 	add.w	r4, r6, #16
 800129c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800129e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80012ac:	1d33      	adds	r3, r6, #4
 80012ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012b0:	6838      	ldr	r0, [r7, #0]
 80012b2:	f001 fae1 	bl	8002878 <USB_DevInit>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d005      	beq.n	80012c8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2202      	movs	r2, #2
 80012c0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e00d      	b.n	80012e4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2201      	movs	r2, #1
 80012d4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f002 fa45 	bl	800376c <USB_DevDisconnect>

  return HAL_OK;
 80012e2:	2300      	movs	r3, #0
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012ec <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001300:	2b01      	cmp	r3, #1
 8001302:	d101      	bne.n	8001308 <HAL_PCD_Start+0x1c>
 8001304:	2302      	movs	r3, #2
 8001306:	e020      	b.n	800134a <HAL_PCD_Start+0x5e>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2201      	movs	r2, #1
 800130c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001314:	2b01      	cmp	r3, #1
 8001316:	d109      	bne.n	800132c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800131c:	2b01      	cmp	r3, #1
 800131e:	d005      	beq.n	800132c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001324:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f002 fa03 	bl	800373c <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4618      	mov	r0, r3
 800133c:	f001 fa4f 	bl	80027de <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b084      	sub	sp, #16
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
 800135a:	4608      	mov	r0, r1
 800135c:	4611      	mov	r1, r2
 800135e:	461a      	mov	r2, r3
 8001360:	4603      	mov	r3, r0
 8001362:	70fb      	strb	r3, [r7, #3]
 8001364:	460b      	mov	r3, r1
 8001366:	803b      	strh	r3, [r7, #0]
 8001368:	4613      	mov	r3, r2
 800136a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800136c:	2300      	movs	r3, #0
 800136e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001370:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001374:	2b00      	cmp	r3, #0
 8001376:	da0f      	bge.n	8001398 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001378:	78fb      	ldrb	r3, [r7, #3]
 800137a:	f003 020f 	and.w	r2, r3, #15
 800137e:	4613      	mov	r3, r2
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	1a9b      	subs	r3, r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	3338      	adds	r3, #56	; 0x38
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	4413      	add	r3, r2
 800138c:	3304      	adds	r3, #4
 800138e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2201      	movs	r2, #1
 8001394:	705a      	strb	r2, [r3, #1]
 8001396:	e00f      	b.n	80013b8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001398:	78fb      	ldrb	r3, [r7, #3]
 800139a:	f003 020f 	and.w	r2, r3, #15
 800139e:	4613      	mov	r3, r2
 80013a0:	00db      	lsls	r3, r3, #3
 80013a2:	1a9b      	subs	r3, r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	4413      	add	r3, r2
 80013ae:	3304      	adds	r3, #4
 80013b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	2200      	movs	r2, #0
 80013b6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80013b8:	78fb      	ldrb	r3, [r7, #3]
 80013ba:	f003 030f 	and.w	r3, r3, #15
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80013c4:	883a      	ldrh	r2, [r7, #0]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	78ba      	ldrb	r2, [r7, #2]
 80013ce:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	785b      	ldrb	r3, [r3, #1]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d004      	beq.n	80013e2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	b29a      	uxth	r2, r3
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80013e2:	78bb      	ldrb	r3, [r7, #2]
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d102      	bne.n	80013ee <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2200      	movs	r2, #0
 80013ec:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d101      	bne.n	80013fc <HAL_PCD_EP_Open+0xaa>
 80013f8:	2302      	movs	r3, #2
 80013fa:	e00e      	b.n	800141a <HAL_PCD_EP_Open+0xc8>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2201      	movs	r2, #1
 8001400:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	68f9      	ldr	r1, [r7, #12]
 800140a:	4618      	mov	r0, r3
 800140c:	f001 fbf9 	bl	8002c02 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001418:	7afb      	ldrb	r3, [r7, #11]
}
 800141a:	4618      	mov	r0, r3
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b084      	sub	sp, #16
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
 800142a:	460b      	mov	r3, r1
 800142c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800142e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001432:	2b00      	cmp	r3, #0
 8001434:	da0f      	bge.n	8001456 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001436:	78fb      	ldrb	r3, [r7, #3]
 8001438:	f003 020f 	and.w	r2, r3, #15
 800143c:	4613      	mov	r3, r2
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	1a9b      	subs	r3, r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	3338      	adds	r3, #56	; 0x38
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	4413      	add	r3, r2
 800144a:	3304      	adds	r3, #4
 800144c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	2201      	movs	r2, #1
 8001452:	705a      	strb	r2, [r3, #1]
 8001454:	e00f      	b.n	8001476 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001456:	78fb      	ldrb	r3, [r7, #3]
 8001458:	f003 020f 	and.w	r2, r3, #15
 800145c:	4613      	mov	r3, r2
 800145e:	00db      	lsls	r3, r3, #3
 8001460:	1a9b      	subs	r3, r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	4413      	add	r3, r2
 800146c:	3304      	adds	r3, #4
 800146e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2200      	movs	r2, #0
 8001474:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001476:	78fb      	ldrb	r3, [r7, #3]
 8001478:	f003 030f 	and.w	r3, r3, #15
 800147c:	b2da      	uxtb	r2, r3
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001488:	2b01      	cmp	r3, #1
 800148a:	d101      	bne.n	8001490 <HAL_PCD_EP_Close+0x6e>
 800148c:	2302      	movs	r3, #2
 800148e:	e00e      	b.n	80014ae <HAL_PCD_EP_Close+0x8c>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2201      	movs	r2, #1
 8001494:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	68f9      	ldr	r1, [r7, #12]
 800149e:	4618      	mov	r0, r3
 80014a0:	f001 fc36 	bl	8002d10 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b086      	sub	sp, #24
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	60f8      	str	r0, [r7, #12]
 80014be:	607a      	str	r2, [r7, #4]
 80014c0:	603b      	str	r3, [r7, #0]
 80014c2:	460b      	mov	r3, r1
 80014c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014c6:	7afb      	ldrb	r3, [r7, #11]
 80014c8:	f003 020f 	and.w	r2, r3, #15
 80014cc:	4613      	mov	r3, r2
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	1a9b      	subs	r3, r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	3338      	adds	r3, #56	; 0x38
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	4413      	add	r3, r2
 80014da:	3304      	adds	r3, #4
 80014dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	683a      	ldr	r2, [r7, #0]
 80014e8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	2201      	movs	r2, #1
 80014f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80014f6:	7afb      	ldrb	r3, [r7, #11]
 80014f8:	f003 030f 	and.w	r3, r3, #15
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	691b      	ldr	r3, [r3, #16]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d102      	bne.n	8001510 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001510:	7afb      	ldrb	r3, [r7, #11]
 8001512:	f003 030f 	and.w	r3, r3, #15
 8001516:	2b00      	cmp	r3, #0
 8001518:	d109      	bne.n	800152e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	6818      	ldr	r0, [r3, #0]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	b2db      	uxtb	r3, r3
 8001524:	461a      	mov	r2, r3
 8001526:	6979      	ldr	r1, [r7, #20]
 8001528:	f001 ff12 	bl	8003350 <USB_EP0StartXfer>
 800152c:	e008      	b.n	8001540 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	6818      	ldr	r0, [r3, #0]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	691b      	ldr	r3, [r3, #16]
 8001536:	b2db      	uxtb	r3, r3
 8001538:	461a      	mov	r2, r3
 800153a:	6979      	ldr	r1, [r7, #20]
 800153c:	f001 fcc4 	bl	8002ec8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b084      	sub	sp, #16
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
 8001552:	460b      	mov	r3, r1
 8001554:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001556:	78fb      	ldrb	r3, [r7, #3]
 8001558:	f003 020f 	and.w	r2, r3, #15
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	429a      	cmp	r2, r3
 8001562:	d901      	bls.n	8001568 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e050      	b.n	800160a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001568:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800156c:	2b00      	cmp	r3, #0
 800156e:	da0f      	bge.n	8001590 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001570:	78fb      	ldrb	r3, [r7, #3]
 8001572:	f003 020f 	and.w	r2, r3, #15
 8001576:	4613      	mov	r3, r2
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	1a9b      	subs	r3, r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	3338      	adds	r3, #56	; 0x38
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	4413      	add	r3, r2
 8001584:	3304      	adds	r3, #4
 8001586:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2201      	movs	r2, #1
 800158c:	705a      	strb	r2, [r3, #1]
 800158e:	e00d      	b.n	80015ac <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001590:	78fa      	ldrb	r2, [r7, #3]
 8001592:	4613      	mov	r3, r2
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	1a9b      	subs	r3, r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	3304      	adds	r3, #4
 80015a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2200      	movs	r2, #0
 80015aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2201      	movs	r2, #1
 80015b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015b2:	78fb      	ldrb	r3, [r7, #3]
 80015b4:	f003 030f 	and.w	r3, r3, #15
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d101      	bne.n	80015cc <HAL_PCD_EP_SetStall+0x82>
 80015c8:	2302      	movs	r3, #2
 80015ca:	e01e      	b.n	800160a <HAL_PCD_EP_SetStall+0xc0>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2201      	movs	r2, #1
 80015d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	68f9      	ldr	r1, [r7, #12]
 80015da:	4618      	mov	r0, r3
 80015dc:	f002 f840 	bl	8003660 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80015e0:	78fb      	ldrb	r3, [r7, #3]
 80015e2:	f003 030f 	and.w	r3, r3, #15
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d10a      	bne.n	8001600 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6818      	ldr	r0, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	691b      	ldr	r3, [r3, #16]
 80015f2:	b2d9      	uxtb	r1, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80015fa:	461a      	mov	r2, r3
 80015fc:	f002 f8ce 	bl	800379c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001612:	b480      	push	{r7}
 8001614:	b085      	sub	sp, #20
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
 800161a:	460b      	mov	r3, r1
 800161c:	70fb      	strb	r3, [r7, #3]
 800161e:	4613      	mov	r3, r2
 8001620:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001628:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800162a:	78fb      	ldrb	r3, [r7, #3]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d107      	bne.n	8001640 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001630:	883b      	ldrh	r3, [r7, #0]
 8001632:	0419      	lsls	r1, r3, #16
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	68ba      	ldr	r2, [r7, #8]
 800163a:	430a      	orrs	r2, r1
 800163c:	629a      	str	r2, [r3, #40]	; 0x28
 800163e:	e028      	b.n	8001692 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001646:	0c1b      	lsrs	r3, r3, #16
 8001648:	68ba      	ldr	r2, [r7, #8]
 800164a:	4413      	add	r3, r2
 800164c:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800164e:	2300      	movs	r3, #0
 8001650:	73fb      	strb	r3, [r7, #15]
 8001652:	e00d      	b.n	8001670 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	7bfb      	ldrb	r3, [r7, #15]
 800165a:	3340      	adds	r3, #64	; 0x40
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4413      	add	r3, r2
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	0c1b      	lsrs	r3, r3, #16
 8001664:	68ba      	ldr	r2, [r7, #8]
 8001666:	4413      	add	r3, r2
 8001668:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800166a:	7bfb      	ldrb	r3, [r7, #15]
 800166c:	3301      	adds	r3, #1
 800166e:	73fb      	strb	r3, [r7, #15]
 8001670:	7bfa      	ldrb	r2, [r7, #15]
 8001672:	78fb      	ldrb	r3, [r7, #3]
 8001674:	3b01      	subs	r3, #1
 8001676:	429a      	cmp	r2, r3
 8001678:	d3ec      	bcc.n	8001654 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800167a:	883b      	ldrh	r3, [r7, #0]
 800167c:	0418      	lsls	r0, r3, #16
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6819      	ldr	r1, [r3, #0]
 8001682:	78fb      	ldrb	r3, [r7, #3]
 8001684:	3b01      	subs	r3, #1
 8001686:	68ba      	ldr	r2, [r7, #8]
 8001688:	4302      	orrs	r2, r0
 800168a:	3340      	adds	r3, #64	; 0x40
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	440b      	add	r3, r1
 8001690:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8001692:	2300      	movs	r3, #0
}
 8001694:	4618      	mov	r0, r3
 8001696:	3714      	adds	r7, #20
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	460b      	mov	r3, r1
 80016aa:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	887a      	ldrh	r2, [r7, #2]
 80016b2:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
	...

080016c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d101      	bne.n	80016d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e25b      	b.n	8001b8e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d075      	beq.n	80017ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016e2:	4ba3      	ldr	r3, [pc, #652]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f003 030c 	and.w	r3, r3, #12
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	d00c      	beq.n	8001708 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016ee:	4ba0      	ldr	r3, [pc, #640]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016f6:	2b08      	cmp	r3, #8
 80016f8:	d112      	bne.n	8001720 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016fa:	4b9d      	ldr	r3, [pc, #628]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001702:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001706:	d10b      	bne.n	8001720 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001708:	4b99      	ldr	r3, [pc, #612]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d05b      	beq.n	80017cc <HAL_RCC_OscConfig+0x108>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d157      	bne.n	80017cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e236      	b.n	8001b8e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001728:	d106      	bne.n	8001738 <HAL_RCC_OscConfig+0x74>
 800172a:	4b91      	ldr	r3, [pc, #580]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a90      	ldr	r2, [pc, #576]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 8001730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001734:	6013      	str	r3, [r2, #0]
 8001736:	e01d      	b.n	8001774 <HAL_RCC_OscConfig+0xb0>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001740:	d10c      	bne.n	800175c <HAL_RCC_OscConfig+0x98>
 8001742:	4b8b      	ldr	r3, [pc, #556]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a8a      	ldr	r2, [pc, #552]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 8001748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	4b88      	ldr	r3, [pc, #544]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a87      	ldr	r2, [pc, #540]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 8001754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	e00b      	b.n	8001774 <HAL_RCC_OscConfig+0xb0>
 800175c:	4b84      	ldr	r3, [pc, #528]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a83      	ldr	r2, [pc, #524]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 8001762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001766:	6013      	str	r3, [r2, #0]
 8001768:	4b81      	ldr	r3, [pc, #516]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a80      	ldr	r2, [pc, #512]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 800176e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001772:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d013      	beq.n	80017a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177c:	f7ff f9c2 	bl	8000b04 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001784:	f7ff f9be 	bl	8000b04 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b64      	cmp	r3, #100	; 0x64
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e1fb      	b.n	8001b8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001796:	4b76      	ldr	r3, [pc, #472]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d0f0      	beq.n	8001784 <HAL_RCC_OscConfig+0xc0>
 80017a2:	e014      	b.n	80017ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a4:	f7ff f9ae 	bl	8000b04 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017ac:	f7ff f9aa 	bl	8000b04 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b64      	cmp	r3, #100	; 0x64
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e1e7      	b.n	8001b8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017be:	4b6c      	ldr	r3, [pc, #432]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1f0      	bne.n	80017ac <HAL_RCC_OscConfig+0xe8>
 80017ca:	e000      	b.n	80017ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d063      	beq.n	80018a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017da:	4b65      	ldr	r3, [pc, #404]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f003 030c 	and.w	r3, r3, #12
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d00b      	beq.n	80017fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017e6:	4b62      	ldr	r3, [pc, #392]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017ee:	2b08      	cmp	r3, #8
 80017f0:	d11c      	bne.n	800182c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017f2:	4b5f      	ldr	r3, [pc, #380]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d116      	bne.n	800182c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017fe:	4b5c      	ldr	r3, [pc, #368]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d005      	beq.n	8001816 <HAL_RCC_OscConfig+0x152>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d001      	beq.n	8001816 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e1bb      	b.n	8001b8e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001816:	4b56      	ldr	r3, [pc, #344]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	4952      	ldr	r1, [pc, #328]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 8001826:	4313      	orrs	r3, r2
 8001828:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800182a:	e03a      	b.n	80018a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d020      	beq.n	8001876 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001834:	4b4f      	ldr	r3, [pc, #316]	; (8001974 <HAL_RCC_OscConfig+0x2b0>)
 8001836:	2201      	movs	r2, #1
 8001838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183a:	f7ff f963 	bl	8000b04 <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001840:	e008      	b.n	8001854 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001842:	f7ff f95f 	bl	8000b04 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e19c      	b.n	8001b8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001854:	4b46      	ldr	r3, [pc, #280]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d0f0      	beq.n	8001842 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001860:	4b43      	ldr	r3, [pc, #268]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	4940      	ldr	r1, [pc, #256]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 8001870:	4313      	orrs	r3, r2
 8001872:	600b      	str	r3, [r1, #0]
 8001874:	e015      	b.n	80018a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001876:	4b3f      	ldr	r3, [pc, #252]	; (8001974 <HAL_RCC_OscConfig+0x2b0>)
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187c:	f7ff f942 	bl	8000b04 <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001884:	f7ff f93e 	bl	8000b04 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e17b      	b.n	8001b8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001896:	4b36      	ldr	r3, [pc, #216]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1f0      	bne.n	8001884 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0308 	and.w	r3, r3, #8
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d030      	beq.n	8001910 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d016      	beq.n	80018e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018b6:	4b30      	ldr	r3, [pc, #192]	; (8001978 <HAL_RCC_OscConfig+0x2b4>)
 80018b8:	2201      	movs	r2, #1
 80018ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018bc:	f7ff f922 	bl	8000b04 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018c4:	f7ff f91e 	bl	8000b04 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e15b      	b.n	8001b8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018d6:	4b26      	ldr	r3, [pc, #152]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 80018d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d0f0      	beq.n	80018c4 <HAL_RCC_OscConfig+0x200>
 80018e2:	e015      	b.n	8001910 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018e4:	4b24      	ldr	r3, [pc, #144]	; (8001978 <HAL_RCC_OscConfig+0x2b4>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ea:	f7ff f90b 	bl	8000b04 <HAL_GetTick>
 80018ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018f2:	f7ff f907 	bl	8000b04 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e144      	b.n	8001b8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001904:	4b1a      	ldr	r3, [pc, #104]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 8001906:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001908:	f003 0302 	and.w	r3, r3, #2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d1f0      	bne.n	80018f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0304 	and.w	r3, r3, #4
 8001918:	2b00      	cmp	r3, #0
 800191a:	f000 80a0 	beq.w	8001a5e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800191e:	2300      	movs	r3, #0
 8001920:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001922:	4b13      	ldr	r3, [pc, #76]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d10f      	bne.n	800194e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	60bb      	str	r3, [r7, #8]
 8001932:	4b0f      	ldr	r3, [pc, #60]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	4a0e      	ldr	r2, [pc, #56]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 8001938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800193c:	6413      	str	r3, [r2, #64]	; 0x40
 800193e:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <HAL_RCC_OscConfig+0x2ac>)
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001946:	60bb      	str	r3, [r7, #8]
 8001948:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800194a:	2301      	movs	r3, #1
 800194c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800194e:	4b0b      	ldr	r3, [pc, #44]	; (800197c <HAL_RCC_OscConfig+0x2b8>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001956:	2b00      	cmp	r3, #0
 8001958:	d121      	bne.n	800199e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800195a:	4b08      	ldr	r3, [pc, #32]	; (800197c <HAL_RCC_OscConfig+0x2b8>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a07      	ldr	r2, [pc, #28]	; (800197c <HAL_RCC_OscConfig+0x2b8>)
 8001960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001964:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001966:	f7ff f8cd 	bl	8000b04 <HAL_GetTick>
 800196a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800196c:	e011      	b.n	8001992 <HAL_RCC_OscConfig+0x2ce>
 800196e:	bf00      	nop
 8001970:	40023800 	.word	0x40023800
 8001974:	42470000 	.word	0x42470000
 8001978:	42470e80 	.word	0x42470e80
 800197c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001980:	f7ff f8c0 	bl	8000b04 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e0fd      	b.n	8001b8e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001992:	4b81      	ldr	r3, [pc, #516]	; (8001b98 <HAL_RCC_OscConfig+0x4d4>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800199a:	2b00      	cmp	r3, #0
 800199c:	d0f0      	beq.n	8001980 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d106      	bne.n	80019b4 <HAL_RCC_OscConfig+0x2f0>
 80019a6:	4b7d      	ldr	r3, [pc, #500]	; (8001b9c <HAL_RCC_OscConfig+0x4d8>)
 80019a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019aa:	4a7c      	ldr	r2, [pc, #496]	; (8001b9c <HAL_RCC_OscConfig+0x4d8>)
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	6713      	str	r3, [r2, #112]	; 0x70
 80019b2:	e01c      	b.n	80019ee <HAL_RCC_OscConfig+0x32a>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	2b05      	cmp	r3, #5
 80019ba:	d10c      	bne.n	80019d6 <HAL_RCC_OscConfig+0x312>
 80019bc:	4b77      	ldr	r3, [pc, #476]	; (8001b9c <HAL_RCC_OscConfig+0x4d8>)
 80019be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c0:	4a76      	ldr	r2, [pc, #472]	; (8001b9c <HAL_RCC_OscConfig+0x4d8>)
 80019c2:	f043 0304 	orr.w	r3, r3, #4
 80019c6:	6713      	str	r3, [r2, #112]	; 0x70
 80019c8:	4b74      	ldr	r3, [pc, #464]	; (8001b9c <HAL_RCC_OscConfig+0x4d8>)
 80019ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019cc:	4a73      	ldr	r2, [pc, #460]	; (8001b9c <HAL_RCC_OscConfig+0x4d8>)
 80019ce:	f043 0301 	orr.w	r3, r3, #1
 80019d2:	6713      	str	r3, [r2, #112]	; 0x70
 80019d4:	e00b      	b.n	80019ee <HAL_RCC_OscConfig+0x32a>
 80019d6:	4b71      	ldr	r3, [pc, #452]	; (8001b9c <HAL_RCC_OscConfig+0x4d8>)
 80019d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019da:	4a70      	ldr	r2, [pc, #448]	; (8001b9c <HAL_RCC_OscConfig+0x4d8>)
 80019dc:	f023 0301 	bic.w	r3, r3, #1
 80019e0:	6713      	str	r3, [r2, #112]	; 0x70
 80019e2:	4b6e      	ldr	r3, [pc, #440]	; (8001b9c <HAL_RCC_OscConfig+0x4d8>)
 80019e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e6:	4a6d      	ldr	r2, [pc, #436]	; (8001b9c <HAL_RCC_OscConfig+0x4d8>)
 80019e8:	f023 0304 	bic.w	r3, r3, #4
 80019ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d015      	beq.n	8001a22 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f6:	f7ff f885 	bl	8000b04 <HAL_GetTick>
 80019fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019fc:	e00a      	b.n	8001a14 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019fe:	f7ff f881 	bl	8000b04 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e0bc      	b.n	8001b8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a14:	4b61      	ldr	r3, [pc, #388]	; (8001b9c <HAL_RCC_OscConfig+0x4d8>)
 8001a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0ee      	beq.n	80019fe <HAL_RCC_OscConfig+0x33a>
 8001a20:	e014      	b.n	8001a4c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a22:	f7ff f86f 	bl	8000b04 <HAL_GetTick>
 8001a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a28:	e00a      	b.n	8001a40 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a2a:	f7ff f86b 	bl	8000b04 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e0a6      	b.n	8001b8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a40:	4b56      	ldr	r3, [pc, #344]	; (8001b9c <HAL_RCC_OscConfig+0x4d8>)
 8001a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1ee      	bne.n	8001a2a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a4c:	7dfb      	ldrb	r3, [r7, #23]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d105      	bne.n	8001a5e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a52:	4b52      	ldr	r3, [pc, #328]	; (8001b9c <HAL_RCC_OscConfig+0x4d8>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	4a51      	ldr	r2, [pc, #324]	; (8001b9c <HAL_RCC_OscConfig+0x4d8>)
 8001a58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a5c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f000 8092 	beq.w	8001b8c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a68:	4b4c      	ldr	r3, [pc, #304]	; (8001b9c <HAL_RCC_OscConfig+0x4d8>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f003 030c 	and.w	r3, r3, #12
 8001a70:	2b08      	cmp	r3, #8
 8001a72:	d05c      	beq.n	8001b2e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d141      	bne.n	8001b00 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a7c:	4b48      	ldr	r3, [pc, #288]	; (8001ba0 <HAL_RCC_OscConfig+0x4dc>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a82:	f7ff f83f 	bl	8000b04 <HAL_GetTick>
 8001a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a88:	e008      	b.n	8001a9c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a8a:	f7ff f83b 	bl	8000b04 <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e078      	b.n	8001b8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a9c:	4b3f      	ldr	r3, [pc, #252]	; (8001b9c <HAL_RCC_OscConfig+0x4d8>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1f0      	bne.n	8001a8a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	69da      	ldr	r2, [r3, #28]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a1b      	ldr	r3, [r3, #32]
 8001ab0:	431a      	orrs	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab6:	019b      	lsls	r3, r3, #6
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001abe:	085b      	lsrs	r3, r3, #1
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	041b      	lsls	r3, r3, #16
 8001ac4:	431a      	orrs	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aca:	061b      	lsls	r3, r3, #24
 8001acc:	4933      	ldr	r1, [pc, #204]	; (8001b9c <HAL_RCC_OscConfig+0x4d8>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ad2:	4b33      	ldr	r3, [pc, #204]	; (8001ba0 <HAL_RCC_OscConfig+0x4dc>)
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad8:	f7ff f814 	bl	8000b04 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ae0:	f7ff f810 	bl	8000b04 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e04d      	b.n	8001b8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001af2:	4b2a      	ldr	r3, [pc, #168]	; (8001b9c <HAL_RCC_OscConfig+0x4d8>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d0f0      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x41c>
 8001afe:	e045      	b.n	8001b8c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b00:	4b27      	ldr	r3, [pc, #156]	; (8001ba0 <HAL_RCC_OscConfig+0x4dc>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b06:	f7fe fffd 	bl	8000b04 <HAL_GetTick>
 8001b0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b0c:	e008      	b.n	8001b20 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b0e:	f7fe fff9 	bl	8000b04 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e036      	b.n	8001b8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b20:	4b1e      	ldr	r3, [pc, #120]	; (8001b9c <HAL_RCC_OscConfig+0x4d8>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1f0      	bne.n	8001b0e <HAL_RCC_OscConfig+0x44a>
 8001b2c:	e02e      	b.n	8001b8c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d101      	bne.n	8001b3a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e029      	b.n	8001b8e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b3a:	4b18      	ldr	r3, [pc, #96]	; (8001b9c <HAL_RCC_OscConfig+0x4d8>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d11c      	bne.n	8001b88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d115      	bne.n	8001b88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001b5c:	68fa      	ldr	r2, [r7, #12]
 8001b5e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b62:	4013      	ands	r3, r2
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d10d      	bne.n	8001b88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d106      	bne.n	8001b88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d001      	beq.n	8001b8c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e000      	b.n	8001b8e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3718      	adds	r7, #24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40007000 	.word	0x40007000
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	42470060 	.word	0x42470060

08001ba4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e0cc      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bb8:	4b68      	ldr	r3, [pc, #416]	; (8001d5c <HAL_RCC_ClockConfig+0x1b8>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 030f 	and.w	r3, r3, #15
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d90c      	bls.n	8001be0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc6:	4b65      	ldr	r3, [pc, #404]	; (8001d5c <HAL_RCC_ClockConfig+0x1b8>)
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bce:	4b63      	ldr	r3, [pc, #396]	; (8001d5c <HAL_RCC_ClockConfig+0x1b8>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 030f 	and.w	r3, r3, #15
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d001      	beq.n	8001be0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e0b8      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d020      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d005      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bf8:	4b59      	ldr	r3, [pc, #356]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	4a58      	ldr	r2, [pc, #352]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0308 	and.w	r3, r3, #8
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d005      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c10:	4b53      	ldr	r3, [pc, #332]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	4a52      	ldr	r2, [pc, #328]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c1c:	4b50      	ldr	r3, [pc, #320]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	494d      	ldr	r1, [pc, #308]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d044      	beq.n	8001cc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d107      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c42:	4b47      	ldr	r3, [pc, #284]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d119      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e07f      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d003      	beq.n	8001c62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c5e:	2b03      	cmp	r3, #3
 8001c60:	d107      	bne.n	8001c72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c62:	4b3f      	ldr	r3, [pc, #252]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d109      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e06f      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c72:	4b3b      	ldr	r3, [pc, #236]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e067      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c82:	4b37      	ldr	r3, [pc, #220]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f023 0203 	bic.w	r2, r3, #3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	4934      	ldr	r1, [pc, #208]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c94:	f7fe ff36 	bl	8000b04 <HAL_GetTick>
 8001c98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c9a:	e00a      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c9c:	f7fe ff32 	bl	8000b04 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e04f      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cb2:	4b2b      	ldr	r3, [pc, #172]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f003 020c 	and.w	r2, r3, #12
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d1eb      	bne.n	8001c9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cc4:	4b25      	ldr	r3, [pc, #148]	; (8001d5c <HAL_RCC_ClockConfig+0x1b8>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 030f 	and.w	r3, r3, #15
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d20c      	bcs.n	8001cec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd2:	4b22      	ldr	r3, [pc, #136]	; (8001d5c <HAL_RCC_ClockConfig+0x1b8>)
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cda:	4b20      	ldr	r3, [pc, #128]	; (8001d5c <HAL_RCC_ClockConfig+0x1b8>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 030f 	and.w	r3, r3, #15
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d001      	beq.n	8001cec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e032      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0304 	and.w	r3, r3, #4
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d008      	beq.n	8001d0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cf8:	4b19      	ldr	r3, [pc, #100]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	4916      	ldr	r1, [pc, #88]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001d06:	4313      	orrs	r3, r2
 8001d08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0308 	and.w	r3, r3, #8
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d009      	beq.n	8001d2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d16:	4b12      	ldr	r3, [pc, #72]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	490e      	ldr	r1, [pc, #56]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d2a:	f000 f821 	bl	8001d70 <HAL_RCC_GetSysClockFreq>
 8001d2e:	4601      	mov	r1, r0
 8001d30:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	091b      	lsrs	r3, r3, #4
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	4a0a      	ldr	r2, [pc, #40]	; (8001d64 <HAL_RCC_ClockConfig+0x1c0>)
 8001d3c:	5cd3      	ldrb	r3, [r2, r3]
 8001d3e:	fa21 f303 	lsr.w	r3, r1, r3
 8001d42:	4a09      	ldr	r2, [pc, #36]	; (8001d68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d46:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <HAL_RCC_ClockConfig+0x1c8>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7fe fe96 	bl	8000a7c <HAL_InitTick>

  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40023c00 	.word	0x40023c00
 8001d60:	40023800 	.word	0x40023800
 8001d64:	0800458c 	.word	0x0800458c
 8001d68:	20000000 	.word	0x20000000
 8001d6c:	20000004 	.word	0x20000004

08001d70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d76:	2300      	movs	r3, #0
 8001d78:	607b      	str	r3, [r7, #4]
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	2300      	movs	r3, #0
 8001d80:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001d82:	2300      	movs	r3, #0
 8001d84:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d86:	4b63      	ldr	r3, [pc, #396]	; (8001f14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 030c 	and.w	r3, r3, #12
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	d007      	beq.n	8001da2 <HAL_RCC_GetSysClockFreq+0x32>
 8001d92:	2b08      	cmp	r3, #8
 8001d94:	d008      	beq.n	8001da8 <HAL_RCC_GetSysClockFreq+0x38>
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f040 80b4 	bne.w	8001f04 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d9c:	4b5e      	ldr	r3, [pc, #376]	; (8001f18 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001d9e:	60bb      	str	r3, [r7, #8]
       break;
 8001da0:	e0b3      	b.n	8001f0a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001da2:	4b5e      	ldr	r3, [pc, #376]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001da4:	60bb      	str	r3, [r7, #8]
      break;
 8001da6:	e0b0      	b.n	8001f0a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001da8:	4b5a      	ldr	r3, [pc, #360]	; (8001f14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001db0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001db2:	4b58      	ldr	r3, [pc, #352]	; (8001f14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d04a      	beq.n	8001e54 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dbe:	4b55      	ldr	r3, [pc, #340]	; (8001f14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	099b      	lsrs	r3, r3, #6
 8001dc4:	f04f 0400 	mov.w	r4, #0
 8001dc8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001dcc:	f04f 0200 	mov.w	r2, #0
 8001dd0:	ea03 0501 	and.w	r5, r3, r1
 8001dd4:	ea04 0602 	and.w	r6, r4, r2
 8001dd8:	4629      	mov	r1, r5
 8001dda:	4632      	mov	r2, r6
 8001ddc:	f04f 0300 	mov.w	r3, #0
 8001de0:	f04f 0400 	mov.w	r4, #0
 8001de4:	0154      	lsls	r4, r2, #5
 8001de6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001dea:	014b      	lsls	r3, r1, #5
 8001dec:	4619      	mov	r1, r3
 8001dee:	4622      	mov	r2, r4
 8001df0:	1b49      	subs	r1, r1, r5
 8001df2:	eb62 0206 	sbc.w	r2, r2, r6
 8001df6:	f04f 0300 	mov.w	r3, #0
 8001dfa:	f04f 0400 	mov.w	r4, #0
 8001dfe:	0194      	lsls	r4, r2, #6
 8001e00:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001e04:	018b      	lsls	r3, r1, #6
 8001e06:	1a5b      	subs	r3, r3, r1
 8001e08:	eb64 0402 	sbc.w	r4, r4, r2
 8001e0c:	f04f 0100 	mov.w	r1, #0
 8001e10:	f04f 0200 	mov.w	r2, #0
 8001e14:	00e2      	lsls	r2, r4, #3
 8001e16:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001e1a:	00d9      	lsls	r1, r3, #3
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	4614      	mov	r4, r2
 8001e20:	195b      	adds	r3, r3, r5
 8001e22:	eb44 0406 	adc.w	r4, r4, r6
 8001e26:	f04f 0100 	mov.w	r1, #0
 8001e2a:	f04f 0200 	mov.w	r2, #0
 8001e2e:	0262      	lsls	r2, r4, #9
 8001e30:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001e34:	0259      	lsls	r1, r3, #9
 8001e36:	460b      	mov	r3, r1
 8001e38:	4614      	mov	r4, r2
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	4621      	mov	r1, r4
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f04f 0400 	mov.w	r4, #0
 8001e44:	461a      	mov	r2, r3
 8001e46:	4623      	mov	r3, r4
 8001e48:	f7fe f9d0 	bl	80001ec <__aeabi_uldivmod>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	460c      	mov	r4, r1
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	e049      	b.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e54:	4b2f      	ldr	r3, [pc, #188]	; (8001f14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	099b      	lsrs	r3, r3, #6
 8001e5a:	f04f 0400 	mov.w	r4, #0
 8001e5e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001e62:	f04f 0200 	mov.w	r2, #0
 8001e66:	ea03 0501 	and.w	r5, r3, r1
 8001e6a:	ea04 0602 	and.w	r6, r4, r2
 8001e6e:	4629      	mov	r1, r5
 8001e70:	4632      	mov	r2, r6
 8001e72:	f04f 0300 	mov.w	r3, #0
 8001e76:	f04f 0400 	mov.w	r4, #0
 8001e7a:	0154      	lsls	r4, r2, #5
 8001e7c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e80:	014b      	lsls	r3, r1, #5
 8001e82:	4619      	mov	r1, r3
 8001e84:	4622      	mov	r2, r4
 8001e86:	1b49      	subs	r1, r1, r5
 8001e88:	eb62 0206 	sbc.w	r2, r2, r6
 8001e8c:	f04f 0300 	mov.w	r3, #0
 8001e90:	f04f 0400 	mov.w	r4, #0
 8001e94:	0194      	lsls	r4, r2, #6
 8001e96:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001e9a:	018b      	lsls	r3, r1, #6
 8001e9c:	1a5b      	subs	r3, r3, r1
 8001e9e:	eb64 0402 	sbc.w	r4, r4, r2
 8001ea2:	f04f 0100 	mov.w	r1, #0
 8001ea6:	f04f 0200 	mov.w	r2, #0
 8001eaa:	00e2      	lsls	r2, r4, #3
 8001eac:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001eb0:	00d9      	lsls	r1, r3, #3
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	4614      	mov	r4, r2
 8001eb6:	195b      	adds	r3, r3, r5
 8001eb8:	eb44 0406 	adc.w	r4, r4, r6
 8001ebc:	f04f 0100 	mov.w	r1, #0
 8001ec0:	f04f 0200 	mov.w	r2, #0
 8001ec4:	02a2      	lsls	r2, r4, #10
 8001ec6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001eca:	0299      	lsls	r1, r3, #10
 8001ecc:	460b      	mov	r3, r1
 8001ece:	4614      	mov	r4, r2
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	4621      	mov	r1, r4
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f04f 0400 	mov.w	r4, #0
 8001eda:	461a      	mov	r2, r3
 8001edc:	4623      	mov	r3, r4
 8001ede:	f7fe f985 	bl	80001ec <__aeabi_uldivmod>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	460c      	mov	r4, r1
 8001ee6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ee8:	4b0a      	ldr	r3, [pc, #40]	; (8001f14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	0c1b      	lsrs	r3, r3, #16
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f00:	60bb      	str	r3, [r7, #8]
      break;
 8001f02:	e002      	b.n	8001f0a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f04:	4b04      	ldr	r3, [pc, #16]	; (8001f18 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001f06:	60bb      	str	r3, [r7, #8]
      break;
 8001f08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f0a:	68bb      	ldr	r3, [r7, #8]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3714      	adds	r7, #20
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f14:	40023800 	.word	0x40023800
 8001f18:	00f42400 	.word	0x00f42400
 8001f1c:	007a1200 	.word	0x007a1200

08001f20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f24:	4b03      	ldr	r3, [pc, #12]	; (8001f34 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f26:	681b      	ldr	r3, [r3, #0]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	20000000 	.word	0x20000000

08001f38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f3c:	f7ff fff0 	bl	8001f20 <HAL_RCC_GetHCLKFreq>
 8001f40:	4601      	mov	r1, r0
 8001f42:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	0a9b      	lsrs	r3, r3, #10
 8001f48:	f003 0307 	and.w	r3, r3, #7
 8001f4c:	4a03      	ldr	r2, [pc, #12]	; (8001f5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f4e:	5cd3      	ldrb	r3, [r2, r3]
 8001f50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	0800459c 	.word	0x0800459c

08001f60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f64:	f7ff ffdc 	bl	8001f20 <HAL_RCC_GetHCLKFreq>
 8001f68:	4601      	mov	r1, r0
 8001f6a:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	0b5b      	lsrs	r3, r3, #13
 8001f70:	f003 0307 	and.w	r3, r3, #7
 8001f74:	4a03      	ldr	r2, [pc, #12]	; (8001f84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f76:	5cd3      	ldrb	r3, [r2, r3]
 8001f78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40023800 	.word	0x40023800
 8001f84:	0800459c 	.word	0x0800459c

08001f88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e03f      	b.n	800201a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d106      	bne.n	8001fb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f7fe fc60 	bl	8000874 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2224      	movs	r2, #36	; 0x24
 8001fb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68da      	ldr	r2, [r3, #12]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 f829 	bl	8002024 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	691a      	ldr	r2, [r3, #16]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fe0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	695a      	ldr	r2, [r3, #20]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ff0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68da      	ldr	r2, [r3, #12]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002000:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2220      	movs	r2, #32
 800200c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2220      	movs	r2, #32
 8002014:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
	...

08002024 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002028:	b085      	sub	sp, #20
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68da      	ldr	r2, [r3, #12]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	430a      	orrs	r2, r1
 8002042:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	431a      	orrs	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	431a      	orrs	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	69db      	ldr	r3, [r3, #28]
 8002058:	4313      	orrs	r3, r2
 800205a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002066:	f023 030c 	bic.w	r3, r3, #12
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	6812      	ldr	r2, [r2, #0]
 800206e:	68f9      	ldr	r1, [r7, #12]
 8002070:	430b      	orrs	r3, r1
 8002072:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	699a      	ldr	r2, [r3, #24]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	430a      	orrs	r2, r1
 8002088:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002092:	f040 818b 	bne.w	80023ac <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4ac1      	ldr	r2, [pc, #772]	; (80023a0 <UART_SetConfig+0x37c>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d005      	beq.n	80020ac <UART_SetConfig+0x88>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4abf      	ldr	r2, [pc, #764]	; (80023a4 <UART_SetConfig+0x380>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	f040 80bd 	bne.w	8002226 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80020ac:	f7ff ff58 	bl	8001f60 <HAL_RCC_GetPCLK2Freq>
 80020b0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	461d      	mov	r5, r3
 80020b6:	f04f 0600 	mov.w	r6, #0
 80020ba:	46a8      	mov	r8, r5
 80020bc:	46b1      	mov	r9, r6
 80020be:	eb18 0308 	adds.w	r3, r8, r8
 80020c2:	eb49 0409 	adc.w	r4, r9, r9
 80020c6:	4698      	mov	r8, r3
 80020c8:	46a1      	mov	r9, r4
 80020ca:	eb18 0805 	adds.w	r8, r8, r5
 80020ce:	eb49 0906 	adc.w	r9, r9, r6
 80020d2:	f04f 0100 	mov.w	r1, #0
 80020d6:	f04f 0200 	mov.w	r2, #0
 80020da:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80020de:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80020e2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80020e6:	4688      	mov	r8, r1
 80020e8:	4691      	mov	r9, r2
 80020ea:	eb18 0005 	adds.w	r0, r8, r5
 80020ee:	eb49 0106 	adc.w	r1, r9, r6
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	461d      	mov	r5, r3
 80020f8:	f04f 0600 	mov.w	r6, #0
 80020fc:	196b      	adds	r3, r5, r5
 80020fe:	eb46 0406 	adc.w	r4, r6, r6
 8002102:	461a      	mov	r2, r3
 8002104:	4623      	mov	r3, r4
 8002106:	f7fe f871 	bl	80001ec <__aeabi_uldivmod>
 800210a:	4603      	mov	r3, r0
 800210c:	460c      	mov	r4, r1
 800210e:	461a      	mov	r2, r3
 8002110:	4ba5      	ldr	r3, [pc, #660]	; (80023a8 <UART_SetConfig+0x384>)
 8002112:	fba3 2302 	umull	r2, r3, r3, r2
 8002116:	095b      	lsrs	r3, r3, #5
 8002118:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	461d      	mov	r5, r3
 8002120:	f04f 0600 	mov.w	r6, #0
 8002124:	46a9      	mov	r9, r5
 8002126:	46b2      	mov	sl, r6
 8002128:	eb19 0309 	adds.w	r3, r9, r9
 800212c:	eb4a 040a 	adc.w	r4, sl, sl
 8002130:	4699      	mov	r9, r3
 8002132:	46a2      	mov	sl, r4
 8002134:	eb19 0905 	adds.w	r9, r9, r5
 8002138:	eb4a 0a06 	adc.w	sl, sl, r6
 800213c:	f04f 0100 	mov.w	r1, #0
 8002140:	f04f 0200 	mov.w	r2, #0
 8002144:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002148:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800214c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002150:	4689      	mov	r9, r1
 8002152:	4692      	mov	sl, r2
 8002154:	eb19 0005 	adds.w	r0, r9, r5
 8002158:	eb4a 0106 	adc.w	r1, sl, r6
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	461d      	mov	r5, r3
 8002162:	f04f 0600 	mov.w	r6, #0
 8002166:	196b      	adds	r3, r5, r5
 8002168:	eb46 0406 	adc.w	r4, r6, r6
 800216c:	461a      	mov	r2, r3
 800216e:	4623      	mov	r3, r4
 8002170:	f7fe f83c 	bl	80001ec <__aeabi_uldivmod>
 8002174:	4603      	mov	r3, r0
 8002176:	460c      	mov	r4, r1
 8002178:	461a      	mov	r2, r3
 800217a:	4b8b      	ldr	r3, [pc, #556]	; (80023a8 <UART_SetConfig+0x384>)
 800217c:	fba3 1302 	umull	r1, r3, r3, r2
 8002180:	095b      	lsrs	r3, r3, #5
 8002182:	2164      	movs	r1, #100	; 0x64
 8002184:	fb01 f303 	mul.w	r3, r1, r3
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	3332      	adds	r3, #50	; 0x32
 800218e:	4a86      	ldr	r2, [pc, #536]	; (80023a8 <UART_SetConfig+0x384>)
 8002190:	fba2 2303 	umull	r2, r3, r2, r3
 8002194:	095b      	lsrs	r3, r3, #5
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800219c:	4498      	add	r8, r3
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	461d      	mov	r5, r3
 80021a2:	f04f 0600 	mov.w	r6, #0
 80021a6:	46a9      	mov	r9, r5
 80021a8:	46b2      	mov	sl, r6
 80021aa:	eb19 0309 	adds.w	r3, r9, r9
 80021ae:	eb4a 040a 	adc.w	r4, sl, sl
 80021b2:	4699      	mov	r9, r3
 80021b4:	46a2      	mov	sl, r4
 80021b6:	eb19 0905 	adds.w	r9, r9, r5
 80021ba:	eb4a 0a06 	adc.w	sl, sl, r6
 80021be:	f04f 0100 	mov.w	r1, #0
 80021c2:	f04f 0200 	mov.w	r2, #0
 80021c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80021ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80021d2:	4689      	mov	r9, r1
 80021d4:	4692      	mov	sl, r2
 80021d6:	eb19 0005 	adds.w	r0, r9, r5
 80021da:	eb4a 0106 	adc.w	r1, sl, r6
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	461d      	mov	r5, r3
 80021e4:	f04f 0600 	mov.w	r6, #0
 80021e8:	196b      	adds	r3, r5, r5
 80021ea:	eb46 0406 	adc.w	r4, r6, r6
 80021ee:	461a      	mov	r2, r3
 80021f0:	4623      	mov	r3, r4
 80021f2:	f7fd fffb 	bl	80001ec <__aeabi_uldivmod>
 80021f6:	4603      	mov	r3, r0
 80021f8:	460c      	mov	r4, r1
 80021fa:	461a      	mov	r2, r3
 80021fc:	4b6a      	ldr	r3, [pc, #424]	; (80023a8 <UART_SetConfig+0x384>)
 80021fe:	fba3 1302 	umull	r1, r3, r3, r2
 8002202:	095b      	lsrs	r3, r3, #5
 8002204:	2164      	movs	r1, #100	; 0x64
 8002206:	fb01 f303 	mul.w	r3, r1, r3
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	3332      	adds	r3, #50	; 0x32
 8002210:	4a65      	ldr	r2, [pc, #404]	; (80023a8 <UART_SetConfig+0x384>)
 8002212:	fba2 2303 	umull	r2, r3, r2, r3
 8002216:	095b      	lsrs	r3, r3, #5
 8002218:	f003 0207 	and.w	r2, r3, #7
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4442      	add	r2, r8
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	e26f      	b.n	8002706 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002226:	f7ff fe87 	bl	8001f38 <HAL_RCC_GetPCLK1Freq>
 800222a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	461d      	mov	r5, r3
 8002230:	f04f 0600 	mov.w	r6, #0
 8002234:	46a8      	mov	r8, r5
 8002236:	46b1      	mov	r9, r6
 8002238:	eb18 0308 	adds.w	r3, r8, r8
 800223c:	eb49 0409 	adc.w	r4, r9, r9
 8002240:	4698      	mov	r8, r3
 8002242:	46a1      	mov	r9, r4
 8002244:	eb18 0805 	adds.w	r8, r8, r5
 8002248:	eb49 0906 	adc.w	r9, r9, r6
 800224c:	f04f 0100 	mov.w	r1, #0
 8002250:	f04f 0200 	mov.w	r2, #0
 8002254:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002258:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800225c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002260:	4688      	mov	r8, r1
 8002262:	4691      	mov	r9, r2
 8002264:	eb18 0005 	adds.w	r0, r8, r5
 8002268:	eb49 0106 	adc.w	r1, r9, r6
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	461d      	mov	r5, r3
 8002272:	f04f 0600 	mov.w	r6, #0
 8002276:	196b      	adds	r3, r5, r5
 8002278:	eb46 0406 	adc.w	r4, r6, r6
 800227c:	461a      	mov	r2, r3
 800227e:	4623      	mov	r3, r4
 8002280:	f7fd ffb4 	bl	80001ec <__aeabi_uldivmod>
 8002284:	4603      	mov	r3, r0
 8002286:	460c      	mov	r4, r1
 8002288:	461a      	mov	r2, r3
 800228a:	4b47      	ldr	r3, [pc, #284]	; (80023a8 <UART_SetConfig+0x384>)
 800228c:	fba3 2302 	umull	r2, r3, r3, r2
 8002290:	095b      	lsrs	r3, r3, #5
 8002292:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	461d      	mov	r5, r3
 800229a:	f04f 0600 	mov.w	r6, #0
 800229e:	46a9      	mov	r9, r5
 80022a0:	46b2      	mov	sl, r6
 80022a2:	eb19 0309 	adds.w	r3, r9, r9
 80022a6:	eb4a 040a 	adc.w	r4, sl, sl
 80022aa:	4699      	mov	r9, r3
 80022ac:	46a2      	mov	sl, r4
 80022ae:	eb19 0905 	adds.w	r9, r9, r5
 80022b2:	eb4a 0a06 	adc.w	sl, sl, r6
 80022b6:	f04f 0100 	mov.w	r1, #0
 80022ba:	f04f 0200 	mov.w	r2, #0
 80022be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80022c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80022ca:	4689      	mov	r9, r1
 80022cc:	4692      	mov	sl, r2
 80022ce:	eb19 0005 	adds.w	r0, r9, r5
 80022d2:	eb4a 0106 	adc.w	r1, sl, r6
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	461d      	mov	r5, r3
 80022dc:	f04f 0600 	mov.w	r6, #0
 80022e0:	196b      	adds	r3, r5, r5
 80022e2:	eb46 0406 	adc.w	r4, r6, r6
 80022e6:	461a      	mov	r2, r3
 80022e8:	4623      	mov	r3, r4
 80022ea:	f7fd ff7f 	bl	80001ec <__aeabi_uldivmod>
 80022ee:	4603      	mov	r3, r0
 80022f0:	460c      	mov	r4, r1
 80022f2:	461a      	mov	r2, r3
 80022f4:	4b2c      	ldr	r3, [pc, #176]	; (80023a8 <UART_SetConfig+0x384>)
 80022f6:	fba3 1302 	umull	r1, r3, r3, r2
 80022fa:	095b      	lsrs	r3, r3, #5
 80022fc:	2164      	movs	r1, #100	; 0x64
 80022fe:	fb01 f303 	mul.w	r3, r1, r3
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	3332      	adds	r3, #50	; 0x32
 8002308:	4a27      	ldr	r2, [pc, #156]	; (80023a8 <UART_SetConfig+0x384>)
 800230a:	fba2 2303 	umull	r2, r3, r2, r3
 800230e:	095b      	lsrs	r3, r3, #5
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002316:	4498      	add	r8, r3
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	461d      	mov	r5, r3
 800231c:	f04f 0600 	mov.w	r6, #0
 8002320:	46a9      	mov	r9, r5
 8002322:	46b2      	mov	sl, r6
 8002324:	eb19 0309 	adds.w	r3, r9, r9
 8002328:	eb4a 040a 	adc.w	r4, sl, sl
 800232c:	4699      	mov	r9, r3
 800232e:	46a2      	mov	sl, r4
 8002330:	eb19 0905 	adds.w	r9, r9, r5
 8002334:	eb4a 0a06 	adc.w	sl, sl, r6
 8002338:	f04f 0100 	mov.w	r1, #0
 800233c:	f04f 0200 	mov.w	r2, #0
 8002340:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002344:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002348:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800234c:	4689      	mov	r9, r1
 800234e:	4692      	mov	sl, r2
 8002350:	eb19 0005 	adds.w	r0, r9, r5
 8002354:	eb4a 0106 	adc.w	r1, sl, r6
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	461d      	mov	r5, r3
 800235e:	f04f 0600 	mov.w	r6, #0
 8002362:	196b      	adds	r3, r5, r5
 8002364:	eb46 0406 	adc.w	r4, r6, r6
 8002368:	461a      	mov	r2, r3
 800236a:	4623      	mov	r3, r4
 800236c:	f7fd ff3e 	bl	80001ec <__aeabi_uldivmod>
 8002370:	4603      	mov	r3, r0
 8002372:	460c      	mov	r4, r1
 8002374:	461a      	mov	r2, r3
 8002376:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <UART_SetConfig+0x384>)
 8002378:	fba3 1302 	umull	r1, r3, r3, r2
 800237c:	095b      	lsrs	r3, r3, #5
 800237e:	2164      	movs	r1, #100	; 0x64
 8002380:	fb01 f303 	mul.w	r3, r1, r3
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	3332      	adds	r3, #50	; 0x32
 800238a:	4a07      	ldr	r2, [pc, #28]	; (80023a8 <UART_SetConfig+0x384>)
 800238c:	fba2 2303 	umull	r2, r3, r2, r3
 8002390:	095b      	lsrs	r3, r3, #5
 8002392:	f003 0207 	and.w	r2, r3, #7
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4442      	add	r2, r8
 800239c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800239e:	e1b2      	b.n	8002706 <UART_SetConfig+0x6e2>
 80023a0:	40011000 	.word	0x40011000
 80023a4:	40011400 	.word	0x40011400
 80023a8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4ad7      	ldr	r2, [pc, #860]	; (8002710 <UART_SetConfig+0x6ec>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d005      	beq.n	80023c2 <UART_SetConfig+0x39e>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4ad6      	ldr	r2, [pc, #856]	; (8002714 <UART_SetConfig+0x6f0>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	f040 80d1 	bne.w	8002564 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80023c2:	f7ff fdcd 	bl	8001f60 <HAL_RCC_GetPCLK2Freq>
 80023c6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	469a      	mov	sl, r3
 80023cc:	f04f 0b00 	mov.w	fp, #0
 80023d0:	46d0      	mov	r8, sl
 80023d2:	46d9      	mov	r9, fp
 80023d4:	eb18 0308 	adds.w	r3, r8, r8
 80023d8:	eb49 0409 	adc.w	r4, r9, r9
 80023dc:	4698      	mov	r8, r3
 80023de:	46a1      	mov	r9, r4
 80023e0:	eb18 080a 	adds.w	r8, r8, sl
 80023e4:	eb49 090b 	adc.w	r9, r9, fp
 80023e8:	f04f 0100 	mov.w	r1, #0
 80023ec:	f04f 0200 	mov.w	r2, #0
 80023f0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80023f4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80023f8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80023fc:	4688      	mov	r8, r1
 80023fe:	4691      	mov	r9, r2
 8002400:	eb1a 0508 	adds.w	r5, sl, r8
 8002404:	eb4b 0609 	adc.w	r6, fp, r9
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	4619      	mov	r1, r3
 800240e:	f04f 0200 	mov.w	r2, #0
 8002412:	f04f 0300 	mov.w	r3, #0
 8002416:	f04f 0400 	mov.w	r4, #0
 800241a:	0094      	lsls	r4, r2, #2
 800241c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002420:	008b      	lsls	r3, r1, #2
 8002422:	461a      	mov	r2, r3
 8002424:	4623      	mov	r3, r4
 8002426:	4628      	mov	r0, r5
 8002428:	4631      	mov	r1, r6
 800242a:	f7fd fedf 	bl	80001ec <__aeabi_uldivmod>
 800242e:	4603      	mov	r3, r0
 8002430:	460c      	mov	r4, r1
 8002432:	461a      	mov	r2, r3
 8002434:	4bb8      	ldr	r3, [pc, #736]	; (8002718 <UART_SetConfig+0x6f4>)
 8002436:	fba3 2302 	umull	r2, r3, r3, r2
 800243a:	095b      	lsrs	r3, r3, #5
 800243c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	469b      	mov	fp, r3
 8002444:	f04f 0c00 	mov.w	ip, #0
 8002448:	46d9      	mov	r9, fp
 800244a:	46e2      	mov	sl, ip
 800244c:	eb19 0309 	adds.w	r3, r9, r9
 8002450:	eb4a 040a 	adc.w	r4, sl, sl
 8002454:	4699      	mov	r9, r3
 8002456:	46a2      	mov	sl, r4
 8002458:	eb19 090b 	adds.w	r9, r9, fp
 800245c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002460:	f04f 0100 	mov.w	r1, #0
 8002464:	f04f 0200 	mov.w	r2, #0
 8002468:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800246c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002470:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002474:	4689      	mov	r9, r1
 8002476:	4692      	mov	sl, r2
 8002478:	eb1b 0509 	adds.w	r5, fp, r9
 800247c:	eb4c 060a 	adc.w	r6, ip, sl
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	4619      	mov	r1, r3
 8002486:	f04f 0200 	mov.w	r2, #0
 800248a:	f04f 0300 	mov.w	r3, #0
 800248e:	f04f 0400 	mov.w	r4, #0
 8002492:	0094      	lsls	r4, r2, #2
 8002494:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002498:	008b      	lsls	r3, r1, #2
 800249a:	461a      	mov	r2, r3
 800249c:	4623      	mov	r3, r4
 800249e:	4628      	mov	r0, r5
 80024a0:	4631      	mov	r1, r6
 80024a2:	f7fd fea3 	bl	80001ec <__aeabi_uldivmod>
 80024a6:	4603      	mov	r3, r0
 80024a8:	460c      	mov	r4, r1
 80024aa:	461a      	mov	r2, r3
 80024ac:	4b9a      	ldr	r3, [pc, #616]	; (8002718 <UART_SetConfig+0x6f4>)
 80024ae:	fba3 1302 	umull	r1, r3, r3, r2
 80024b2:	095b      	lsrs	r3, r3, #5
 80024b4:	2164      	movs	r1, #100	; 0x64
 80024b6:	fb01 f303 	mul.w	r3, r1, r3
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	011b      	lsls	r3, r3, #4
 80024be:	3332      	adds	r3, #50	; 0x32
 80024c0:	4a95      	ldr	r2, [pc, #596]	; (8002718 <UART_SetConfig+0x6f4>)
 80024c2:	fba2 2303 	umull	r2, r3, r2, r3
 80024c6:	095b      	lsrs	r3, r3, #5
 80024c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024cc:	4498      	add	r8, r3
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	469b      	mov	fp, r3
 80024d2:	f04f 0c00 	mov.w	ip, #0
 80024d6:	46d9      	mov	r9, fp
 80024d8:	46e2      	mov	sl, ip
 80024da:	eb19 0309 	adds.w	r3, r9, r9
 80024de:	eb4a 040a 	adc.w	r4, sl, sl
 80024e2:	4699      	mov	r9, r3
 80024e4:	46a2      	mov	sl, r4
 80024e6:	eb19 090b 	adds.w	r9, r9, fp
 80024ea:	eb4a 0a0c 	adc.w	sl, sl, ip
 80024ee:	f04f 0100 	mov.w	r1, #0
 80024f2:	f04f 0200 	mov.w	r2, #0
 80024f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80024fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002502:	4689      	mov	r9, r1
 8002504:	4692      	mov	sl, r2
 8002506:	eb1b 0509 	adds.w	r5, fp, r9
 800250a:	eb4c 060a 	adc.w	r6, ip, sl
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	4619      	mov	r1, r3
 8002514:	f04f 0200 	mov.w	r2, #0
 8002518:	f04f 0300 	mov.w	r3, #0
 800251c:	f04f 0400 	mov.w	r4, #0
 8002520:	0094      	lsls	r4, r2, #2
 8002522:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002526:	008b      	lsls	r3, r1, #2
 8002528:	461a      	mov	r2, r3
 800252a:	4623      	mov	r3, r4
 800252c:	4628      	mov	r0, r5
 800252e:	4631      	mov	r1, r6
 8002530:	f7fd fe5c 	bl	80001ec <__aeabi_uldivmod>
 8002534:	4603      	mov	r3, r0
 8002536:	460c      	mov	r4, r1
 8002538:	461a      	mov	r2, r3
 800253a:	4b77      	ldr	r3, [pc, #476]	; (8002718 <UART_SetConfig+0x6f4>)
 800253c:	fba3 1302 	umull	r1, r3, r3, r2
 8002540:	095b      	lsrs	r3, r3, #5
 8002542:	2164      	movs	r1, #100	; 0x64
 8002544:	fb01 f303 	mul.w	r3, r1, r3
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	011b      	lsls	r3, r3, #4
 800254c:	3332      	adds	r3, #50	; 0x32
 800254e:	4a72      	ldr	r2, [pc, #456]	; (8002718 <UART_SetConfig+0x6f4>)
 8002550:	fba2 2303 	umull	r2, r3, r2, r3
 8002554:	095b      	lsrs	r3, r3, #5
 8002556:	f003 020f 	and.w	r2, r3, #15
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4442      	add	r2, r8
 8002560:	609a      	str	r2, [r3, #8]
 8002562:	e0d0      	b.n	8002706 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002564:	f7ff fce8 	bl	8001f38 <HAL_RCC_GetPCLK1Freq>
 8002568:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	469a      	mov	sl, r3
 800256e:	f04f 0b00 	mov.w	fp, #0
 8002572:	46d0      	mov	r8, sl
 8002574:	46d9      	mov	r9, fp
 8002576:	eb18 0308 	adds.w	r3, r8, r8
 800257a:	eb49 0409 	adc.w	r4, r9, r9
 800257e:	4698      	mov	r8, r3
 8002580:	46a1      	mov	r9, r4
 8002582:	eb18 080a 	adds.w	r8, r8, sl
 8002586:	eb49 090b 	adc.w	r9, r9, fp
 800258a:	f04f 0100 	mov.w	r1, #0
 800258e:	f04f 0200 	mov.w	r2, #0
 8002592:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002596:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800259a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800259e:	4688      	mov	r8, r1
 80025a0:	4691      	mov	r9, r2
 80025a2:	eb1a 0508 	adds.w	r5, sl, r8
 80025a6:	eb4b 0609 	adc.w	r6, fp, r9
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	4619      	mov	r1, r3
 80025b0:	f04f 0200 	mov.w	r2, #0
 80025b4:	f04f 0300 	mov.w	r3, #0
 80025b8:	f04f 0400 	mov.w	r4, #0
 80025bc:	0094      	lsls	r4, r2, #2
 80025be:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80025c2:	008b      	lsls	r3, r1, #2
 80025c4:	461a      	mov	r2, r3
 80025c6:	4623      	mov	r3, r4
 80025c8:	4628      	mov	r0, r5
 80025ca:	4631      	mov	r1, r6
 80025cc:	f7fd fe0e 	bl	80001ec <__aeabi_uldivmod>
 80025d0:	4603      	mov	r3, r0
 80025d2:	460c      	mov	r4, r1
 80025d4:	461a      	mov	r2, r3
 80025d6:	4b50      	ldr	r3, [pc, #320]	; (8002718 <UART_SetConfig+0x6f4>)
 80025d8:	fba3 2302 	umull	r2, r3, r3, r2
 80025dc:	095b      	lsrs	r3, r3, #5
 80025de:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	469b      	mov	fp, r3
 80025e6:	f04f 0c00 	mov.w	ip, #0
 80025ea:	46d9      	mov	r9, fp
 80025ec:	46e2      	mov	sl, ip
 80025ee:	eb19 0309 	adds.w	r3, r9, r9
 80025f2:	eb4a 040a 	adc.w	r4, sl, sl
 80025f6:	4699      	mov	r9, r3
 80025f8:	46a2      	mov	sl, r4
 80025fa:	eb19 090b 	adds.w	r9, r9, fp
 80025fe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002602:	f04f 0100 	mov.w	r1, #0
 8002606:	f04f 0200 	mov.w	r2, #0
 800260a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800260e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002612:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002616:	4689      	mov	r9, r1
 8002618:	4692      	mov	sl, r2
 800261a:	eb1b 0509 	adds.w	r5, fp, r9
 800261e:	eb4c 060a 	adc.w	r6, ip, sl
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	4619      	mov	r1, r3
 8002628:	f04f 0200 	mov.w	r2, #0
 800262c:	f04f 0300 	mov.w	r3, #0
 8002630:	f04f 0400 	mov.w	r4, #0
 8002634:	0094      	lsls	r4, r2, #2
 8002636:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800263a:	008b      	lsls	r3, r1, #2
 800263c:	461a      	mov	r2, r3
 800263e:	4623      	mov	r3, r4
 8002640:	4628      	mov	r0, r5
 8002642:	4631      	mov	r1, r6
 8002644:	f7fd fdd2 	bl	80001ec <__aeabi_uldivmod>
 8002648:	4603      	mov	r3, r0
 800264a:	460c      	mov	r4, r1
 800264c:	461a      	mov	r2, r3
 800264e:	4b32      	ldr	r3, [pc, #200]	; (8002718 <UART_SetConfig+0x6f4>)
 8002650:	fba3 1302 	umull	r1, r3, r3, r2
 8002654:	095b      	lsrs	r3, r3, #5
 8002656:	2164      	movs	r1, #100	; 0x64
 8002658:	fb01 f303 	mul.w	r3, r1, r3
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	011b      	lsls	r3, r3, #4
 8002660:	3332      	adds	r3, #50	; 0x32
 8002662:	4a2d      	ldr	r2, [pc, #180]	; (8002718 <UART_SetConfig+0x6f4>)
 8002664:	fba2 2303 	umull	r2, r3, r2, r3
 8002668:	095b      	lsrs	r3, r3, #5
 800266a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800266e:	4498      	add	r8, r3
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	469b      	mov	fp, r3
 8002674:	f04f 0c00 	mov.w	ip, #0
 8002678:	46d9      	mov	r9, fp
 800267a:	46e2      	mov	sl, ip
 800267c:	eb19 0309 	adds.w	r3, r9, r9
 8002680:	eb4a 040a 	adc.w	r4, sl, sl
 8002684:	4699      	mov	r9, r3
 8002686:	46a2      	mov	sl, r4
 8002688:	eb19 090b 	adds.w	r9, r9, fp
 800268c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002690:	f04f 0100 	mov.w	r1, #0
 8002694:	f04f 0200 	mov.w	r2, #0
 8002698:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800269c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80026a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80026a4:	4689      	mov	r9, r1
 80026a6:	4692      	mov	sl, r2
 80026a8:	eb1b 0509 	adds.w	r5, fp, r9
 80026ac:	eb4c 060a 	adc.w	r6, ip, sl
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	4619      	mov	r1, r3
 80026b6:	f04f 0200 	mov.w	r2, #0
 80026ba:	f04f 0300 	mov.w	r3, #0
 80026be:	f04f 0400 	mov.w	r4, #0
 80026c2:	0094      	lsls	r4, r2, #2
 80026c4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80026c8:	008b      	lsls	r3, r1, #2
 80026ca:	461a      	mov	r2, r3
 80026cc:	4623      	mov	r3, r4
 80026ce:	4628      	mov	r0, r5
 80026d0:	4631      	mov	r1, r6
 80026d2:	f7fd fd8b 	bl	80001ec <__aeabi_uldivmod>
 80026d6:	4603      	mov	r3, r0
 80026d8:	460c      	mov	r4, r1
 80026da:	461a      	mov	r2, r3
 80026dc:	4b0e      	ldr	r3, [pc, #56]	; (8002718 <UART_SetConfig+0x6f4>)
 80026de:	fba3 1302 	umull	r1, r3, r3, r2
 80026e2:	095b      	lsrs	r3, r3, #5
 80026e4:	2164      	movs	r1, #100	; 0x64
 80026e6:	fb01 f303 	mul.w	r3, r1, r3
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	011b      	lsls	r3, r3, #4
 80026ee:	3332      	adds	r3, #50	; 0x32
 80026f0:	4a09      	ldr	r2, [pc, #36]	; (8002718 <UART_SetConfig+0x6f4>)
 80026f2:	fba2 2303 	umull	r2, r3, r2, r3
 80026f6:	095b      	lsrs	r3, r3, #5
 80026f8:	f003 020f 	and.w	r2, r3, #15
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4442      	add	r2, r8
 8002702:	609a      	str	r2, [r3, #8]
}
 8002704:	e7ff      	b.n	8002706 <UART_SetConfig+0x6e2>
 8002706:	bf00      	nop
 8002708:	3714      	adds	r7, #20
 800270a:	46bd      	mov	sp, r7
 800270c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002710:	40011000 	.word	0x40011000
 8002714:	40011400 	.word	0x40011400
 8002718:	51eb851f 	.word	0x51eb851f

0800271c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800271c:	b084      	sub	sp, #16
 800271e:	b580      	push	{r7, lr}
 8002720:	b084      	sub	sp, #16
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
 8002726:	f107 001c 	add.w	r0, r7, #28
 800272a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800272e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002730:	2b01      	cmp	r3, #1
 8002732:	d122      	bne.n	800277a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002738:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002748:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800275c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800275e:	2b01      	cmp	r3, #1
 8002760:	d105      	bne.n	800276e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f001 f872 	bl	8003858 <USB_CoreReset>
 8002774:	4603      	mov	r3, r0
 8002776:	73fb      	strb	r3, [r7, #15]
 8002778:	e01a      	b.n	80027b0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f001 f866 	bl	8003858 <USB_CoreReset>
 800278c:	4603      	mov	r3, r0
 800278e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002790:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002792:	2b00      	cmp	r3, #0
 8002794:	d106      	bne.n	80027a4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800279a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	639a      	str	r2, [r3, #56]	; 0x38
 80027a2:	e005      	b.n	80027b0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80027b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d10b      	bne.n	80027ce <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f043 0206 	orr.w	r2, r3, #6
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f043 0220 	orr.w	r2, r3, #32
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80027ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80027da:	b004      	add	sp, #16
 80027dc:	4770      	bx	lr

080027de <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80027de:	b480      	push	{r7}
 80027e0:	b083      	sub	sp, #12
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f043 0201 	orr.w	r2, r3, #1
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f023 0201 	bic.w	r2, r3, #1
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b082      	sub	sp, #8
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
 800282a:	460b      	mov	r3, r1
 800282c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800283a:	78fb      	ldrb	r3, [r7, #3]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d106      	bne.n	800284e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	60da      	str	r2, [r3, #12]
 800284c:	e00b      	b.n	8002866 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800284e:	78fb      	ldrb	r3, [r7, #3]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d106      	bne.n	8002862 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	60da      	str	r2, [r3, #12]
 8002860:	e001      	b.n	8002866 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e003      	b.n	800286e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8002866:	2032      	movs	r0, #50	; 0x32
 8002868:	f7fe f958 	bl	8000b1c <HAL_Delay>

  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
	...

08002878 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002878:	b084      	sub	sp, #16
 800287a:	b580      	push	{r7, lr}
 800287c:	b086      	sub	sp, #24
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
 8002882:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002886:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800288a:	2300      	movs	r3, #0
 800288c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002892:	2300      	movs	r3, #0
 8002894:	613b      	str	r3, [r7, #16]
 8002896:	e009      	b.n	80028ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	3340      	adds	r3, #64	; 0x40
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4413      	add	r3, r2
 80028a2:	2200      	movs	r2, #0
 80028a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	3301      	adds	r3, #1
 80028aa:	613b      	str	r3, [r7, #16]
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	2b0e      	cmp	r3, #14
 80028b0:	d9f2      	bls.n	8002898 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80028b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d11c      	bne.n	80028f2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028c6:	f043 0302 	orr.w	r3, r3, #2
 80028ca:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028dc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	639a      	str	r2, [r3, #56]	; 0x38
 80028f0:	e00b      	b.n	800290a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002902:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002910:	461a      	mov	r2, r3
 8002912:	2300      	movs	r3, #0
 8002914:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800291c:	4619      	mov	r1, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002924:	461a      	mov	r2, r3
 8002926:	680b      	ldr	r3, [r1, #0]
 8002928:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800292a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800292c:	2b01      	cmp	r3, #1
 800292e:	d10c      	bne.n	800294a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002932:	2b00      	cmp	r3, #0
 8002934:	d104      	bne.n	8002940 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002936:	2100      	movs	r1, #0
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f000 f949 	bl	8002bd0 <USB_SetDevSpeed>
 800293e:	e008      	b.n	8002952 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002940:	2101      	movs	r1, #1
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 f944 	bl	8002bd0 <USB_SetDevSpeed>
 8002948:	e003      	b.n	8002952 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800294a:	2103      	movs	r1, #3
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 f93f 	bl	8002bd0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002952:	2110      	movs	r1, #16
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 f8f3 	bl	8002b40 <USB_FlushTxFifo>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 f911 	bl	8002b8c <USB_FlushRxFifo>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800297a:	461a      	mov	r2, r3
 800297c:	2300      	movs	r3, #0
 800297e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002986:	461a      	mov	r2, r3
 8002988:	2300      	movs	r3, #0
 800298a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002992:	461a      	mov	r2, r3
 8002994:	2300      	movs	r3, #0
 8002996:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002998:	2300      	movs	r3, #0
 800299a:	613b      	str	r3, [r7, #16]
 800299c:	e043      	b.n	8002a26 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	015a      	lsls	r2, r3, #5
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	4413      	add	r3, r2
 80029a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80029b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80029b4:	d118      	bne.n	80029e8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10a      	bne.n	80029d2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	015a      	lsls	r2, r3, #5
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	4413      	add	r3, r2
 80029c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029c8:	461a      	mov	r2, r3
 80029ca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80029ce:	6013      	str	r3, [r2, #0]
 80029d0:	e013      	b.n	80029fa <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	015a      	lsls	r2, r3, #5
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	4413      	add	r3, r2
 80029da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029de:	461a      	mov	r2, r3
 80029e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	e008      	b.n	80029fa <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	015a      	lsls	r2, r3, #5
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	4413      	add	r3, r2
 80029f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029f4:	461a      	mov	r2, r3
 80029f6:	2300      	movs	r3, #0
 80029f8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	015a      	lsls	r2, r3, #5
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	4413      	add	r3, r2
 8002a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a06:	461a      	mov	r2, r3
 8002a08:	2300      	movs	r3, #0
 8002a0a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	015a      	lsls	r2, r3, #5
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4413      	add	r3, r2
 8002a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a18:	461a      	mov	r2, r3
 8002a1a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a1e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	3301      	adds	r3, #1
 8002a24:	613b      	str	r3, [r7, #16]
 8002a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d3b7      	bcc.n	800299e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002a2e:	2300      	movs	r3, #0
 8002a30:	613b      	str	r3, [r7, #16]
 8002a32:	e043      	b.n	8002abc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	015a      	lsls	r2, r3, #5
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a4a:	d118      	bne.n	8002a7e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10a      	bne.n	8002a68 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	015a      	lsls	r2, r3, #5
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	4413      	add	r3, r2
 8002a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a5e:	461a      	mov	r2, r3
 8002a60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002a64:	6013      	str	r3, [r2, #0]
 8002a66:	e013      	b.n	8002a90 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	015a      	lsls	r2, r3, #5
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	4413      	add	r3, r2
 8002a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a74:	461a      	mov	r2, r3
 8002a76:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002a7a:	6013      	str	r3, [r2, #0]
 8002a7c:	e008      	b.n	8002a90 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	015a      	lsls	r2, r3, #5
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	4413      	add	r3, r2
 8002a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	015a      	lsls	r2, r3, #5
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	4413      	add	r3, r2
 8002a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	015a      	lsls	r2, r3, #5
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aae:	461a      	mov	r2, r3
 8002ab0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002ab4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	613b      	str	r3, [r7, #16]
 8002abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d3b7      	bcc.n	8002a34 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ad2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ad6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002ae4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d105      	bne.n	8002af8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	f043 0210 	orr.w	r2, r3, #16
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	699a      	ldr	r2, [r3, #24]
 8002afc:	4b0f      	ldr	r3, [pc, #60]	; (8002b3c <USB_DevInit+0x2c4>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d005      	beq.n	8002b16 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	f043 0208 	orr.w	r2, r3, #8
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d107      	bne.n	8002b2c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b24:	f043 0304 	orr.w	r3, r3, #4
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002b2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3718      	adds	r7, #24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002b38:	b004      	add	sp, #16
 8002b3a:	4770      	bx	lr
 8002b3c:	803c3800 	.word	0x803c3800

08002b40 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	019b      	lsls	r3, r3, #6
 8002b52:	f043 0220 	orr.w	r2, r3, #32
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	4a09      	ldr	r2, [pc, #36]	; (8002b88 <USB_FlushTxFifo+0x48>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d901      	bls.n	8002b6c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e006      	b.n	8002b7a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	f003 0320 	and.w	r3, r3, #32
 8002b74:	2b20      	cmp	r3, #32
 8002b76:	d0f0      	beq.n	8002b5a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3714      	adds	r7, #20
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	00030d40 	.word	0x00030d40

08002b8c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8002b94:	2300      	movs	r3, #0
 8002b96:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2210      	movs	r2, #16
 8002b9c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	60fb      	str	r3, [r7, #12]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	4a09      	ldr	r2, [pc, #36]	; (8002bcc <USB_FlushRxFifo+0x40>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d901      	bls.n	8002bb0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e006      	b.n	8002bbe <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	f003 0310 	and.w	r3, r3, #16
 8002bb8:	2b10      	cmp	r3, #16
 8002bba:	d0f0      	beq.n	8002b9e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3714      	adds	r7, #20
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	00030d40 	.word	0x00030d40

08002bd0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	460b      	mov	r3, r1
 8002bda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	78fb      	ldrb	r3, [r7, #3]
 8002bea:	68f9      	ldr	r1, [r7, #12]
 8002bec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3714      	adds	r7, #20
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002c02:	b480      	push	{r7}
 8002c04:	b085      	sub	sp, #20
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
 8002c0a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	785b      	ldrb	r3, [r3, #1]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d13a      	bne.n	8002c94 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c24:	69da      	ldr	r2, [r3, #28]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	f003 030f 	and.w	r3, r3, #15
 8002c2e:	2101      	movs	r1, #1
 8002c30:	fa01 f303 	lsl.w	r3, r1, r3
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	68f9      	ldr	r1, [r7, #12]
 8002c38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	015a      	lsls	r2, r3, #5
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	4413      	add	r3, r2
 8002c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d155      	bne.n	8002d02 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	015a      	lsls	r2, r3, #5
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	78db      	ldrb	r3, [r3, #3]
 8002c70:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002c72:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	059b      	lsls	r3, r3, #22
 8002c78:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	0151      	lsls	r1, r2, #5
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	440a      	add	r2, r1
 8002c84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c90:	6013      	str	r3, [r2, #0]
 8002c92:	e036      	b.n	8002d02 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c9a:	69da      	ldr	r2, [r3, #28]
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	f003 030f 	and.w	r3, r3, #15
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8002caa:	041b      	lsls	r3, r3, #16
 8002cac:	68f9      	ldr	r1, [r7, #12]
 8002cae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	015a      	lsls	r2, r3, #5
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d11a      	bne.n	8002d02 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	015a      	lsls	r2, r3, #5
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	78db      	ldrb	r3, [r3, #3]
 8002ce6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8002ce8:	430b      	orrs	r3, r1
 8002cea:	4313      	orrs	r3, r2
 8002cec:	68ba      	ldr	r2, [r7, #8]
 8002cee:	0151      	lsls	r1, r2, #5
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	440a      	add	r2, r1
 8002cf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d00:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3714      	adds	r7, #20
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	785b      	ldrb	r3, [r3, #1]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d161      	bne.n	8002df0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	015a      	lsls	r2, r3, #5
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4413      	add	r3, r2
 8002d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d42:	d11f      	bne.n	8002d84 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	015a      	lsls	r2, r3, #5
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	0151      	lsls	r1, r2, #5
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	440a      	add	r2, r1
 8002d5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002d5e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002d62:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	015a      	lsls	r2, r3, #5
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68ba      	ldr	r2, [r7, #8]
 8002d74:	0151      	lsls	r1, r2, #5
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	440a      	add	r2, r1
 8002d7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002d7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002d82:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	f003 030f 	and.w	r3, r3, #15
 8002d94:	2101      	movs	r1, #1
 8002d96:	fa01 f303 	lsl.w	r3, r1, r3
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	68f9      	ldr	r1, [r7, #12]
 8002da0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002da4:	4013      	ands	r3, r2
 8002da6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dae:	69da      	ldr	r2, [r3, #28]
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	f003 030f 	and.w	r3, r3, #15
 8002db8:	2101      	movs	r1, #1
 8002dba:	fa01 f303 	lsl.w	r3, r1, r3
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	68f9      	ldr	r1, [r7, #12]
 8002dc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002dc8:	4013      	ands	r3, r2
 8002dca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	015a      	lsls	r2, r3, #5
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	0159      	lsls	r1, r3, #5
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	440b      	add	r3, r1
 8002de2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002de6:	4619      	mov	r1, r3
 8002de8:	4b35      	ldr	r3, [pc, #212]	; (8002ec0 <USB_DeactivateEndpoint+0x1b0>)
 8002dea:	4013      	ands	r3, r2
 8002dec:	600b      	str	r3, [r1, #0]
 8002dee:	e060      	b.n	8002eb2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	015a      	lsls	r2, r3, #5
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	4413      	add	r3, r2
 8002df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e06:	d11f      	bne.n	8002e48 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	015a      	lsls	r2, r3, #5
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4413      	add	r3, r2
 8002e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68ba      	ldr	r2, [r7, #8]
 8002e18:	0151      	lsls	r1, r2, #5
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	440a      	add	r2, r1
 8002e1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e22:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002e26:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	015a      	lsls	r2, r3, #5
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	4413      	add	r3, r2
 8002e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68ba      	ldr	r2, [r7, #8]
 8002e38:	0151      	lsls	r1, r2, #5
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	440a      	add	r2, r1
 8002e3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002e46:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	f003 030f 	and.w	r3, r3, #15
 8002e58:	2101      	movs	r1, #1
 8002e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e5e:	041b      	lsls	r3, r3, #16
 8002e60:	43db      	mvns	r3, r3
 8002e62:	68f9      	ldr	r1, [r7, #12]
 8002e64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e68:	4013      	ands	r3, r2
 8002e6a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e72:	69da      	ldr	r2, [r3, #28]
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	f003 030f 	and.w	r3, r3, #15
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e82:	041b      	lsls	r3, r3, #16
 8002e84:	43db      	mvns	r3, r3
 8002e86:	68f9      	ldr	r1, [r7, #12]
 8002e88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	015a      	lsls	r2, r3, #5
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	4413      	add	r3, r2
 8002e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	0159      	lsls	r1, r3, #5
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	440b      	add	r3, r1
 8002ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4b05      	ldr	r3, [pc, #20]	; (8002ec4 <USB_DeactivateEndpoint+0x1b4>)
 8002eae:	4013      	ands	r3, r2
 8002eb0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3714      	adds	r7, #20
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr
 8002ec0:	ec337800 	.word	0xec337800
 8002ec4:	eff37800 	.word	0xeff37800

08002ec8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b08a      	sub	sp, #40	; 0x28
 8002ecc:	af02      	add	r7, sp, #8
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	785b      	ldrb	r3, [r3, #1]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	f040 815c 	bne.w	80031a2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d132      	bne.n	8002f58 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	015a      	lsls	r2, r3, #5
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	4413      	add	r3, r2
 8002efa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	0151      	lsls	r1, r2, #5
 8002f04:	69fa      	ldr	r2, [r7, #28]
 8002f06:	440a      	add	r2, r1
 8002f08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002f0c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8002f10:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8002f14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	015a      	lsls	r2, r3, #5
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	0151      	lsls	r1, r2, #5
 8002f28:	69fa      	ldr	r2, [r7, #28]
 8002f2a:	440a      	add	r2, r1
 8002f2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002f30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002f34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	015a      	lsls	r2, r3, #5
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	0151      	lsls	r1, r2, #5
 8002f48:	69fa      	ldr	r2, [r7, #28]
 8002f4a:	440a      	add	r2, r1
 8002f4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002f50:	0cdb      	lsrs	r3, r3, #19
 8002f52:	04db      	lsls	r3, r3, #19
 8002f54:	6113      	str	r3, [r2, #16]
 8002f56:	e074      	b.n	8003042 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	015a      	lsls	r2, r3, #5
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	4413      	add	r3, r2
 8002f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	0151      	lsls	r1, r2, #5
 8002f6a:	69fa      	ldr	r2, [r7, #28]
 8002f6c:	440a      	add	r2, r1
 8002f6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002f72:	0cdb      	lsrs	r3, r3, #19
 8002f74:	04db      	lsls	r3, r3, #19
 8002f76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	015a      	lsls	r2, r3, #5
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	4413      	add	r3, r2
 8002f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	0151      	lsls	r1, r2, #5
 8002f8a:	69fa      	ldr	r2, [r7, #28]
 8002f8c:	440a      	add	r2, r1
 8002f8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002f92:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8002f96:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8002f9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	015a      	lsls	r2, r3, #5
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fa8:	691a      	ldr	r2, [r3, #16]
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	6959      	ldr	r1, [r3, #20]
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	440b      	add	r3, r1
 8002fb4:	1e59      	subs	r1, r3, #1
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fbe:	04d9      	lsls	r1, r3, #19
 8002fc0:	4b9d      	ldr	r3, [pc, #628]	; (8003238 <USB_EPStartXfer+0x370>)
 8002fc2:	400b      	ands	r3, r1
 8002fc4:	69b9      	ldr	r1, [r7, #24]
 8002fc6:	0148      	lsls	r0, r1, #5
 8002fc8:	69f9      	ldr	r1, [r7, #28]
 8002fca:	4401      	add	r1, r0
 8002fcc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	015a      	lsls	r2, r3, #5
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	4413      	add	r3, r2
 8002fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fe0:	691a      	ldr	r2, [r3, #16]
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fea:	69b9      	ldr	r1, [r7, #24]
 8002fec:	0148      	lsls	r0, r1, #5
 8002fee:	69f9      	ldr	r1, [r7, #28]
 8002ff0:	4401      	add	r1, r0
 8002ff2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	78db      	ldrb	r3, [r3, #3]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d11f      	bne.n	8003042 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	015a      	lsls	r2, r3, #5
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	4413      	add	r3, r2
 800300a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	0151      	lsls	r1, r2, #5
 8003014:	69fa      	ldr	r2, [r7, #28]
 8003016:	440a      	add	r2, r1
 8003018:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800301c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003020:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	015a      	lsls	r2, r3, #5
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	4413      	add	r3, r2
 800302a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	0151      	lsls	r1, r2, #5
 8003034:	69fa      	ldr	r2, [r7, #28]
 8003036:	440a      	add	r2, r1
 8003038:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800303c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003040:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003042:	79fb      	ldrb	r3, [r7, #7]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d14b      	bne.n	80030e0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d009      	beq.n	8003064 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	015a      	lsls	r2, r3, #5
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	4413      	add	r3, r2
 8003058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800305c:	461a      	mov	r2, r3
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	78db      	ldrb	r3, [r3, #3]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d128      	bne.n	80030be <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003078:	2b00      	cmp	r3, #0
 800307a:	d110      	bne.n	800309e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	015a      	lsls	r2, r3, #5
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	4413      	add	r3, r2
 8003084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	0151      	lsls	r1, r2, #5
 800308e:	69fa      	ldr	r2, [r7, #28]
 8003090:	440a      	add	r2, r1
 8003092:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003096:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800309a:	6013      	str	r3, [r2, #0]
 800309c:	e00f      	b.n	80030be <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	015a      	lsls	r2, r3, #5
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	4413      	add	r3, r2
 80030a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	0151      	lsls	r1, r2, #5
 80030b0:	69fa      	ldr	r2, [r7, #28]
 80030b2:	440a      	add	r2, r1
 80030b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80030b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030bc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	015a      	lsls	r2, r3, #5
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	4413      	add	r3, r2
 80030c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	0151      	lsls	r1, r2, #5
 80030d0:	69fa      	ldr	r2, [r7, #28]
 80030d2:	440a      	add	r2, r1
 80030d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80030d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	e12f      	b.n	8003340 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	015a      	lsls	r2, r3, #5
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	4413      	add	r3, r2
 80030e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	69ba      	ldr	r2, [r7, #24]
 80030f0:	0151      	lsls	r1, r2, #5
 80030f2:	69fa      	ldr	r2, [r7, #28]
 80030f4:	440a      	add	r2, r1
 80030f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80030fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80030fe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	78db      	ldrb	r3, [r3, #3]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d015      	beq.n	8003134 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	695b      	ldr	r3, [r3, #20]
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 8117 	beq.w	8003340 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003118:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	f003 030f 	and.w	r3, r3, #15
 8003122:	2101      	movs	r1, #1
 8003124:	fa01 f303 	lsl.w	r3, r1, r3
 8003128:	69f9      	ldr	r1, [r7, #28]
 800312a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800312e:	4313      	orrs	r3, r2
 8003130:	634b      	str	r3, [r1, #52]	; 0x34
 8003132:	e105      	b.n	8003340 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003140:	2b00      	cmp	r3, #0
 8003142:	d110      	bne.n	8003166 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	015a      	lsls	r2, r3, #5
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	4413      	add	r3, r2
 800314c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	0151      	lsls	r1, r2, #5
 8003156:	69fa      	ldr	r2, [r7, #28]
 8003158:	440a      	add	r2, r1
 800315a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800315e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003162:	6013      	str	r3, [r2, #0]
 8003164:	e00f      	b.n	8003186 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	015a      	lsls	r2, r3, #5
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	4413      	add	r3, r2
 800316e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	0151      	lsls	r1, r2, #5
 8003178:	69fa      	ldr	r2, [r7, #28]
 800317a:	440a      	add	r2, r1
 800317c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003184:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	68d9      	ldr	r1, [r3, #12]
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	781a      	ldrb	r2, [r3, #0]
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	b298      	uxth	r0, r3
 8003194:	79fb      	ldrb	r3, [r7, #7]
 8003196:	9300      	str	r3, [sp, #0]
 8003198:	4603      	mov	r3, r0
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f000 fa2b 	bl	80035f6 <USB_WritePacket>
 80031a0:	e0ce      	b.n	8003340 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	015a      	lsls	r2, r3, #5
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	4413      	add	r3, r2
 80031aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	0151      	lsls	r1, r2, #5
 80031b4:	69fa      	ldr	r2, [r7, #28]
 80031b6:	440a      	add	r2, r1
 80031b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80031bc:	0cdb      	lsrs	r3, r3, #19
 80031be:	04db      	lsls	r3, r3, #19
 80031c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	015a      	lsls	r2, r3, #5
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	4413      	add	r3, r2
 80031ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	0151      	lsls	r1, r2, #5
 80031d4:	69fa      	ldr	r2, [r7, #28]
 80031d6:	440a      	add	r2, r1
 80031d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80031dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80031e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80031e4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d126      	bne.n	800323c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	015a      	lsls	r2, r3, #5
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	4413      	add	r3, r2
 80031f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031fa:	691a      	ldr	r2, [r3, #16]
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003204:	69b9      	ldr	r1, [r7, #24]
 8003206:	0148      	lsls	r0, r1, #5
 8003208:	69f9      	ldr	r1, [r7, #28]
 800320a:	4401      	add	r1, r0
 800320c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003210:	4313      	orrs	r3, r2
 8003212:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	015a      	lsls	r2, r3, #5
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	4413      	add	r3, r2
 800321c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	0151      	lsls	r1, r2, #5
 8003226:	69fa      	ldr	r2, [r7, #28]
 8003228:	440a      	add	r2, r1
 800322a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800322e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003232:	6113      	str	r3, [r2, #16]
 8003234:	e036      	b.n	80032a4 <USB_EPStartXfer+0x3dc>
 8003236:	bf00      	nop
 8003238:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	695a      	ldr	r2, [r3, #20]
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	4413      	add	r3, r2
 8003246:	1e5a      	subs	r2, r3, #1
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003250:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	015a      	lsls	r2, r3, #5
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	4413      	add	r3, r2
 800325a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800325e:	691a      	ldr	r2, [r3, #16]
 8003260:	8afb      	ldrh	r3, [r7, #22]
 8003262:	04d9      	lsls	r1, r3, #19
 8003264:	4b39      	ldr	r3, [pc, #228]	; (800334c <USB_EPStartXfer+0x484>)
 8003266:	400b      	ands	r3, r1
 8003268:	69b9      	ldr	r1, [r7, #24]
 800326a:	0148      	lsls	r0, r1, #5
 800326c:	69f9      	ldr	r1, [r7, #28]
 800326e:	4401      	add	r1, r0
 8003270:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003274:	4313      	orrs	r3, r2
 8003276:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	015a      	lsls	r2, r3, #5
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	4413      	add	r3, r2
 8003280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003284:	691a      	ldr	r2, [r3, #16]
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	8af9      	ldrh	r1, [r7, #22]
 800328c:	fb01 f303 	mul.w	r3, r1, r3
 8003290:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003294:	69b9      	ldr	r1, [r7, #24]
 8003296:	0148      	lsls	r0, r1, #5
 8003298:	69f9      	ldr	r1, [r7, #28]
 800329a:	4401      	add	r1, r0
 800329c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80032a0:	4313      	orrs	r3, r2
 80032a2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80032a4:	79fb      	ldrb	r3, [r7, #7]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d10d      	bne.n	80032c6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d009      	beq.n	80032c6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	68d9      	ldr	r1, [r3, #12]
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	015a      	lsls	r2, r3, #5
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	4413      	add	r3, r2
 80032be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032c2:	460a      	mov	r2, r1
 80032c4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	78db      	ldrb	r3, [r3, #3]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d128      	bne.n	8003320 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d110      	bne.n	8003300 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	015a      	lsls	r2, r3, #5
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	4413      	add	r3, r2
 80032e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	0151      	lsls	r1, r2, #5
 80032f0:	69fa      	ldr	r2, [r7, #28]
 80032f2:	440a      	add	r2, r1
 80032f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80032f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80032fc:	6013      	str	r3, [r2, #0]
 80032fe:	e00f      	b.n	8003320 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	015a      	lsls	r2, r3, #5
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	4413      	add	r3, r2
 8003308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	0151      	lsls	r1, r2, #5
 8003312:	69fa      	ldr	r2, [r7, #28]
 8003314:	440a      	add	r2, r1
 8003316:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800331a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800331e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	015a      	lsls	r2, r3, #5
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	4413      	add	r3, r2
 8003328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	0151      	lsls	r1, r2, #5
 8003332:	69fa      	ldr	r2, [r7, #28]
 8003334:	440a      	add	r2, r1
 8003336:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800333a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800333e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3720      	adds	r7, #32
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	1ff80000 	.word	0x1ff80000

08003350 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003350:	b480      	push	{r7}
 8003352:	b087      	sub	sp, #28
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	4613      	mov	r3, r2
 800335c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	785b      	ldrb	r3, [r3, #1]
 800336c:	2b01      	cmp	r3, #1
 800336e:	f040 80cd 	bne.w	800350c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d132      	bne.n	80033e0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	015a      	lsls	r2, r3, #5
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	4413      	add	r3, r2
 8003382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	0151      	lsls	r1, r2, #5
 800338c:	697a      	ldr	r2, [r7, #20]
 800338e:	440a      	add	r2, r1
 8003390:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003394:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003398:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800339c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	015a      	lsls	r2, r3, #5
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	4413      	add	r3, r2
 80033a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	0151      	lsls	r1, r2, #5
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	440a      	add	r2, r1
 80033b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80033bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	015a      	lsls	r2, r3, #5
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	4413      	add	r3, r2
 80033c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	0151      	lsls	r1, r2, #5
 80033d0:	697a      	ldr	r2, [r7, #20]
 80033d2:	440a      	add	r2, r1
 80033d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033d8:	0cdb      	lsrs	r3, r3, #19
 80033da:	04db      	lsls	r3, r3, #19
 80033dc:	6113      	str	r3, [r2, #16]
 80033de:	e04e      	b.n	800347e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	015a      	lsls	r2, r3, #5
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	4413      	add	r3, r2
 80033e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	0151      	lsls	r1, r2, #5
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	440a      	add	r2, r1
 80033f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033fa:	0cdb      	lsrs	r3, r3, #19
 80033fc:	04db      	lsls	r3, r3, #19
 80033fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	015a      	lsls	r2, r3, #5
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	4413      	add	r3, r2
 8003408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	0151      	lsls	r1, r2, #5
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	440a      	add	r2, r1
 8003416:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800341a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800341e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003422:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	695a      	ldr	r2, [r3, #20]
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	429a      	cmp	r2, r3
 800342e:	d903      	bls.n	8003438 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	015a      	lsls	r2, r3, #5
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	4413      	add	r3, r2
 8003440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	0151      	lsls	r1, r2, #5
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	440a      	add	r2, r1
 800344e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003452:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003456:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	015a      	lsls	r2, r3, #5
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	4413      	add	r3, r2
 8003460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003464:	691a      	ldr	r2, [r3, #16]
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800346e:	6939      	ldr	r1, [r7, #16]
 8003470:	0148      	lsls	r0, r1, #5
 8003472:	6979      	ldr	r1, [r7, #20]
 8003474:	4401      	add	r1, r0
 8003476:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800347a:	4313      	orrs	r3, r2
 800347c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800347e:	79fb      	ldrb	r3, [r7, #7]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d11e      	bne.n	80034c2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d009      	beq.n	80034a0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	015a      	lsls	r2, r3, #5
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	4413      	add	r3, r2
 8003494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003498:	461a      	mov	r2, r3
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	015a      	lsls	r2, r3, #5
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	4413      	add	r3, r2
 80034a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	0151      	lsls	r1, r2, #5
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	440a      	add	r2, r1
 80034b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80034be:	6013      	str	r3, [r2, #0]
 80034c0:	e092      	b.n	80035e8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	015a      	lsls	r2, r3, #5
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	4413      	add	r3, r2
 80034ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	0151      	lsls	r1, r2, #5
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	440a      	add	r2, r1
 80034d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80034e0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d07e      	beq.n	80035e8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	f003 030f 	and.w	r3, r3, #15
 80034fa:	2101      	movs	r1, #1
 80034fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003500:	6979      	ldr	r1, [r7, #20]
 8003502:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003506:	4313      	orrs	r3, r2
 8003508:	634b      	str	r3, [r1, #52]	; 0x34
 800350a:	e06d      	b.n	80035e8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	015a      	lsls	r2, r3, #5
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	4413      	add	r3, r2
 8003514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	0151      	lsls	r1, r2, #5
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	440a      	add	r2, r1
 8003522:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003526:	0cdb      	lsrs	r3, r3, #19
 8003528:	04db      	lsls	r3, r3, #19
 800352a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	015a      	lsls	r2, r3, #5
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	4413      	add	r3, r2
 8003534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	0151      	lsls	r1, r2, #5
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	440a      	add	r2, r1
 8003542:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003546:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800354a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800354e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d003      	beq.n	8003560 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	689a      	ldr	r2, [r3, #8]
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	015a      	lsls	r2, r3, #5
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	4413      	add	r3, r2
 8003568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	0151      	lsls	r1, r2, #5
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	440a      	add	r2, r1
 8003576:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800357a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800357e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	015a      	lsls	r2, r3, #5
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	4413      	add	r3, r2
 8003588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800358c:	691a      	ldr	r2, [r3, #16]
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003596:	6939      	ldr	r1, [r7, #16]
 8003598:	0148      	lsls	r0, r1, #5
 800359a:	6979      	ldr	r1, [r7, #20]
 800359c:	4401      	add	r1, r0
 800359e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80035a2:	4313      	orrs	r3, r2
 80035a4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80035a6:	79fb      	ldrb	r3, [r7, #7]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d10d      	bne.n	80035c8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d009      	beq.n	80035c8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	68d9      	ldr	r1, [r3, #12]
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	015a      	lsls	r2, r3, #5
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	4413      	add	r3, r2
 80035c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035c4:	460a      	mov	r2, r1
 80035c6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	015a      	lsls	r2, r3, #5
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	4413      	add	r3, r2
 80035d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	0151      	lsls	r1, r2, #5
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	440a      	add	r2, r1
 80035de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80035e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	371c      	adds	r7, #28
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b089      	sub	sp, #36	; 0x24
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	60f8      	str	r0, [r7, #12]
 80035fe:	60b9      	str	r1, [r7, #8]
 8003600:	4611      	mov	r1, r2
 8003602:	461a      	mov	r2, r3
 8003604:	460b      	mov	r3, r1
 8003606:	71fb      	strb	r3, [r7, #7]
 8003608:	4613      	mov	r3, r2
 800360a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8003614:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003618:	2b00      	cmp	r3, #0
 800361a:	d11a      	bne.n	8003652 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800361c:	88bb      	ldrh	r3, [r7, #4]
 800361e:	3303      	adds	r3, #3
 8003620:	089b      	lsrs	r3, r3, #2
 8003622:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003624:	2300      	movs	r3, #0
 8003626:	61bb      	str	r3, [r7, #24]
 8003628:	e00f      	b.n	800364a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800362a:	79fb      	ldrb	r3, [r7, #7]
 800362c:	031a      	lsls	r2, r3, #12
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	4413      	add	r3, r2
 8003632:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003636:	461a      	mov	r2, r3
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	3304      	adds	r3, #4
 8003642:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	3301      	adds	r3, #1
 8003648:	61bb      	str	r3, [r7, #24]
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	429a      	cmp	r2, r3
 8003650:	d3eb      	bcc.n	800362a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3724      	adds	r7, #36	; 0x24
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	785b      	ldrb	r3, [r3, #1]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d12c      	bne.n	80036d6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	015a      	lsls	r2, r3, #5
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	4413      	add	r3, r2
 8003684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	db12      	blt.n	80036b4 <USB_EPSetStall+0x54>
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00f      	beq.n	80036b4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	015a      	lsls	r2, r3, #5
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	4413      	add	r3, r2
 800369c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68ba      	ldr	r2, [r7, #8]
 80036a4:	0151      	lsls	r1, r2, #5
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	440a      	add	r2, r1
 80036aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80036b2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	015a      	lsls	r2, r3, #5
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	4413      	add	r3, r2
 80036bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	0151      	lsls	r1, r2, #5
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	440a      	add	r2, r1
 80036ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80036d2:	6013      	str	r3, [r2, #0]
 80036d4:	e02b      	b.n	800372e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	015a      	lsls	r2, r3, #5
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	4413      	add	r3, r2
 80036de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	db12      	blt.n	800370e <USB_EPSetStall+0xae>
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00f      	beq.n	800370e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	015a      	lsls	r2, r3, #5
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	4413      	add	r3, r2
 80036f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	0151      	lsls	r1, r2, #5
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	440a      	add	r2, r1
 8003704:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003708:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800370c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	015a      	lsls	r2, r3, #5
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	4413      	add	r3, r2
 8003716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68ba      	ldr	r2, [r7, #8]
 800371e:	0151      	lsls	r1, r2, #5
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	440a      	add	r2, r1
 8003724:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003728:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800372c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3714      	adds	r7, #20
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003756:	f023 0302 	bic.w	r3, r3, #2
 800375a:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800375c:	2003      	movs	r0, #3
 800375e:	f7fd f9dd 	bl	8000b1c <HAL_Delay>

  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003786:	f043 0302 	orr.w	r3, r3, #2
 800378a:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800378c:	2003      	movs	r0, #3
 800378e:	f7fd f9c5 	bl	8000b1c <HAL_Delay>

  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3710      	adds	r7, #16
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800379c:	b480      	push	{r7}
 800379e:	b087      	sub	sp, #28
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	460b      	mov	r3, r1
 80037a6:	607a      	str	r2, [r7, #4]
 80037a8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	333c      	adds	r3, #60	; 0x3c
 80037b2:	3304      	adds	r3, #4
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	4a26      	ldr	r2, [pc, #152]	; (8003854 <USB_EP0_OutStart+0xb8>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d90a      	bls.n	80037d6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037d0:	d101      	bne.n	80037d6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80037d2:	2300      	movs	r3, #0
 80037d4:	e037      	b.n	8003846 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037dc:	461a      	mov	r2, r3
 80037de:	2300      	movs	r3, #0
 80037e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80037f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003804:	f043 0318 	orr.w	r3, r3, #24
 8003808:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003818:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800381c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800381e:	7afb      	ldrb	r3, [r7, #11]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d10f      	bne.n	8003844 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800382a:	461a      	mov	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800383e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8003842:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	371c      	adds	r7, #28
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	4f54300a 	.word	0x4f54300a

08003858 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003860:	2300      	movs	r3, #0
 8003862:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	3301      	adds	r3, #1
 8003868:	60fb      	str	r3, [r7, #12]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	4a13      	ldr	r2, [pc, #76]	; (80038bc <USB_CoreReset+0x64>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d901      	bls.n	8003876 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e01b      	b.n	80038ae <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	2b00      	cmp	r3, #0
 800387c:	daf2      	bge.n	8003864 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800387e:	2300      	movs	r3, #0
 8003880:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	f043 0201 	orr.w	r2, r3, #1
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	3301      	adds	r3, #1
 8003892:	60fb      	str	r3, [r7, #12]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	4a09      	ldr	r2, [pc, #36]	; (80038bc <USB_CoreReset+0x64>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d901      	bls.n	80038a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e006      	b.n	80038ae <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d0f0      	beq.n	800388e <USB_CoreReset+0x36>

  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3714      	adds	r7, #20
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	00030d40 	.word	0x00030d40

080038c0 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	460b      	mov	r3, r1
 80038ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80038cc:	2010      	movs	r0, #16
 80038ce:	f000 fd5b 	bl	8004388 <malloc>
 80038d2:	4603      	mov	r3, r0
 80038d4:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d105      	bne.n	80038e8 <USBD_HID_Init+0x28>
  {
    pdev->pClassData = NULL;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80038e4:	2302      	movs	r3, #2
 80038e6:	e01b      	b.n	8003920 <USBD_HID_Init+0x60>
  }

  pdev->pClassData = (void *)hhid;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	7c1b      	ldrb	r3, [r3, #16]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d103      	bne.n	8003900 <USBD_HID_Init+0x40>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2207      	movs	r2, #7
 80038fc:	875a      	strh	r2, [r3, #58]	; 0x3a
 80038fe:	e002      	b.n	8003906 <USBD_HID_Init+0x46>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	220a      	movs	r2, #10
 8003904:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

    /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8003906:	2304      	movs	r3, #4
 8003908:	2203      	movs	r2, #3
 800390a:	2181      	movs	r1, #129	; 0x81
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 fc60 	bl	80041d2 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2201      	movs	r2, #1
 8003916:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	460b      	mov	r3, r1
 8003932:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8003934:	2181      	movs	r1, #129	; 0x81
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 fc71 	bl	800421e <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800394e:	2b00      	cmp	r3, #0
 8003950:	d009      	beq.n	8003966 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003958:	4618      	mov	r0, r3
 800395a:	f000 fd1d 	bl	8004398 <free>
    pdev->pClassData = NULL;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3708      	adds	r7, #8
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003980:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8003982:	2300      	movs	r3, #0
 8003984:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8003986:	2300      	movs	r3, #0
 8003988:	817b      	strh	r3, [r7, #10]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003992:	2b00      	cmp	r3, #0
 8003994:	d045      	beq.n	8003a22 <USBD_HID_Setup+0xb2>
 8003996:	2b20      	cmp	r3, #32
 8003998:	f040 80d4 	bne.w	8003b44 <USBD_HID_Setup+0x1d4>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	785b      	ldrb	r3, [r3, #1]
 80039a0:	3b02      	subs	r3, #2
 80039a2:	2b09      	cmp	r3, #9
 80039a4:	d835      	bhi.n	8003a12 <USBD_HID_Setup+0xa2>
 80039a6:	a201      	add	r2, pc, #4	; (adr r2, 80039ac <USBD_HID_Setup+0x3c>)
 80039a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ac:	08003a03 	.word	0x08003a03
 80039b0:	080039e3 	.word	0x080039e3
 80039b4:	08003a13 	.word	0x08003a13
 80039b8:	08003a13 	.word	0x08003a13
 80039bc:	08003a13 	.word	0x08003a13
 80039c0:	08003a13 	.word	0x08003a13
 80039c4:	08003a13 	.word	0x08003a13
 80039c8:	08003a13 	.word	0x08003a13
 80039cc:	080039f1 	.word	0x080039f1
 80039d0:	080039d5 	.word	0x080039d5
    {
    case HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	885b      	ldrh	r3, [r3, #2]
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	461a      	mov	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	601a      	str	r2, [r3, #0]
      break;
 80039e0:	e01e      	b.n	8003a20 <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2201      	movs	r2, #1
 80039e6:	4619      	mov	r1, r3
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 f9e1 	bl	8003db0 <USBD_CtlSendData>
      break;
 80039ee:	e017      	b.n	8003a20 <USBD_HID_Setup+0xb0>

    case HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	885b      	ldrh	r3, [r3, #2]
 80039f4:	0a1b      	lsrs	r3, r3, #8
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	461a      	mov	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	605a      	str	r2, [r3, #4]
      break;
 8003a00:	e00e      	b.n	8003a20 <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	3304      	adds	r3, #4
 8003a06:	2201      	movs	r2, #1
 8003a08:	4619      	mov	r1, r3
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 f9d0 	bl	8003db0 <USBD_CtlSendData>
      break;
 8003a10:	e006      	b.n	8003a20 <USBD_HID_Setup+0xb0>

    default:
      USBD_CtlError(pdev, req);
 8003a12:	6839      	ldr	r1, [r7, #0]
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 f95a 	bl	8003cce <USBD_CtlError>
      ret = USBD_FAIL;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	75fb      	strb	r3, [r7, #23]
      break;
 8003a1e:	bf00      	nop
    }
    break;
 8003a20:	e097      	b.n	8003b52 <USBD_HID_Setup+0x1e2>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	785b      	ldrb	r3, [r3, #1]
 8003a26:	2b0b      	cmp	r3, #11
 8003a28:	f200 8083 	bhi.w	8003b32 <USBD_HID_Setup+0x1c2>
 8003a2c:	a201      	add	r2, pc, #4	; (adr r2, 8003a34 <USBD_HID_Setup+0xc4>)
 8003a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a32:	bf00      	nop
 8003a34:	08003a65 	.word	0x08003a65
 8003a38:	08003b41 	.word	0x08003b41
 8003a3c:	08003b33 	.word	0x08003b33
 8003a40:	08003b33 	.word	0x08003b33
 8003a44:	08003b33 	.word	0x08003b33
 8003a48:	08003b33 	.word	0x08003b33
 8003a4c:	08003a8d 	.word	0x08003a8d
 8003a50:	08003b33 	.word	0x08003b33
 8003a54:	08003b33 	.word	0x08003b33
 8003a58:	08003b33 	.word	0x08003b33
 8003a5c:	08003ae5 	.word	0x08003ae5
 8003a60:	08003b0d 	.word	0x08003b0d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003a6a:	2b03      	cmp	r3, #3
 8003a6c:	d107      	bne.n	8003a7e <USBD_HID_Setup+0x10e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8003a6e:	f107 030a 	add.w	r3, r7, #10
 8003a72:	2202      	movs	r2, #2
 8003a74:	4619      	mov	r1, r3
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f99a 	bl	8003db0 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8003a7c:	e061      	b.n	8003b42 <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8003a7e:	6839      	ldr	r1, [r7, #0]
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 f924 	bl	8003cce <USBD_CtlError>
        ret = USBD_FAIL;
 8003a86:	2303      	movs	r3, #3
 8003a88:	75fb      	strb	r3, [r7, #23]
      break;
 8003a8a:	e05a      	b.n	8003b42 <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == HID_REPORT_DESC)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	885b      	ldrh	r3, [r3, #2]
 8003a90:	0a1b      	lsrs	r3, r3, #8
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	2b22      	cmp	r3, #34	; 0x22
 8003a96:	d108      	bne.n	8003aaa <USBD_HID_Setup+0x13a>
      {
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	88db      	ldrh	r3, [r3, #6]
 8003a9c:	2b4a      	cmp	r3, #74	; 0x4a
 8003a9e:	bf28      	it	cs
 8003aa0:	234a      	movcs	r3, #74	; 0x4a
 8003aa2:	82bb      	strh	r3, [r7, #20]
        pbuf = HID_MOUSE_ReportDesc;
 8003aa4:	4b2d      	ldr	r3, [pc, #180]	; (8003b5c <USBD_HID_Setup+0x1ec>)
 8003aa6:	613b      	str	r3, [r7, #16]
 8003aa8:	e015      	b.n	8003ad6 <USBD_HID_Setup+0x166>
      }
      else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	885b      	ldrh	r3, [r3, #2]
 8003aae:	0a1b      	lsrs	r3, r3, #8
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	2b21      	cmp	r3, #33	; 0x21
 8003ab4:	d108      	bne.n	8003ac8 <USBD_HID_Setup+0x158>
      {
        pbuf = USBD_HID_Desc;
 8003ab6:	4b2a      	ldr	r3, [pc, #168]	; (8003b60 <USBD_HID_Setup+0x1f0>)
 8003ab8:	613b      	str	r3, [r7, #16]
        len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	88db      	ldrh	r3, [r3, #6]
 8003abe:	2b09      	cmp	r3, #9
 8003ac0:	bf28      	it	cs
 8003ac2:	2309      	movcs	r3, #9
 8003ac4:	82bb      	strh	r3, [r7, #20]
 8003ac6:	e006      	b.n	8003ad6 <USBD_HID_Setup+0x166>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8003ac8:	6839      	ldr	r1, [r7, #0]
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f8ff 	bl	8003cce <USBD_CtlError>
        ret = USBD_FAIL;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	75fb      	strb	r3, [r7, #23]
        break;
 8003ad4:	e035      	b.n	8003b42 <USBD_HID_Setup+0x1d2>
      }
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8003ad6:	8abb      	ldrh	r3, [r7, #20]
 8003ad8:	461a      	mov	r2, r3
 8003ada:	6939      	ldr	r1, [r7, #16]
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f000 f967 	bl	8003db0 <USBD_CtlSendData>
      break;
 8003ae2:	e02e      	b.n	8003b42 <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003aea:	2b03      	cmp	r3, #3
 8003aec:	d107      	bne.n	8003afe <USBD_HID_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	3308      	adds	r3, #8
 8003af2:	2201      	movs	r2, #1
 8003af4:	4619      	mov	r1, r3
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f95a 	bl	8003db0 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8003afc:	e021      	b.n	8003b42 <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8003afe:	6839      	ldr	r1, [r7, #0]
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 f8e4 	bl	8003cce <USBD_CtlError>
        ret = USBD_FAIL;
 8003b06:	2303      	movs	r3, #3
 8003b08:	75fb      	strb	r3, [r7, #23]
      break;
 8003b0a:	e01a      	b.n	8003b42 <USBD_HID_Setup+0x1d2>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003b12:	2b03      	cmp	r3, #3
 8003b14:	d106      	bne.n	8003b24 <USBD_HID_Setup+0x1b4>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	885b      	ldrh	r3, [r3, #2]
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	609a      	str	r2, [r3, #8]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8003b22:	e00e      	b.n	8003b42 <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8003b24:	6839      	ldr	r1, [r7, #0]
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f8d1 	bl	8003cce <USBD_CtlError>
        ret = USBD_FAIL;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	75fb      	strb	r3, [r7, #23]
      break;
 8003b30:	e007      	b.n	8003b42 <USBD_HID_Setup+0x1d2>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8003b32:	6839      	ldr	r1, [r7, #0]
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 f8ca 	bl	8003cce <USBD_CtlError>
      ret = USBD_FAIL;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	75fb      	strb	r3, [r7, #23]
      break;
 8003b3e:	e000      	b.n	8003b42 <USBD_HID_Setup+0x1d2>
      break;
 8003b40:	bf00      	nop
    }
    break;
 8003b42:	e006      	b.n	8003b52 <USBD_HID_Setup+0x1e2>

  default:
    USBD_CtlError(pdev, req);
 8003b44:	6839      	ldr	r1, [r7, #0]
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f8c1 	bl	8003cce <USBD_CtlError>
    ret = USBD_FAIL;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	75fb      	strb	r3, [r7, #23]
    break;
 8003b50:	bf00      	nop
  }

  return (uint8_t)ret;
 8003b52:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3718      	adds	r7, #24
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	200000c8 	.word	0x200000c8
 8003b60:	200000b0 	.word	0x200000b0

08003b64 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2222      	movs	r2, #34	; 0x22
 8003b70:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8003b72:	4b03      	ldr	r3, [pc, #12]	; (8003b80 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	20000044 	.word	0x20000044

08003b84 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2222      	movs	r2, #34	; 0x22
 8003b90:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 8003b92:	4b03      	ldr	r3, [pc, #12]	; (8003ba0 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr
 8003ba0:	20000068 	.word	0x20000068

08003ba4 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2222      	movs	r2, #34	; 0x22
 8003bb0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8003bb2:	4b03      	ldr	r3, [pc, #12]	; (8003bc0 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr
 8003bc0:	2000008c 	.word	0x2000008c

08003bc4 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	460b      	mov	r3, r1
 8003bce:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	220a      	movs	r2, #10
 8003bf4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8003bf6:	4b03      	ldr	r3, [pc, #12]	; (8003c04 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr
 8003c04:	200000bc 	.word	0x200000bc

08003c08 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b086      	sub	sp, #24
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	4613      	mov	r3, r2
 8003c14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d101      	bne.n	8003c20 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e025      	b.n	8003c6c <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d003      	beq.n	8003c44 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d003      	beq.n	8003c52 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	79fa      	ldrb	r2, [r7, #7]
 8003c5e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f000 fa4f 	bl	8004104 <USBD_LL_Init>
 8003c66:	4603      	mov	r3, r0
 8003c68:	75fb      	strb	r3, [r7, #23]

  return ret;
 8003c6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3718      	adds	r7, #24
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d101      	bne.n	8003c8c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e010      	b.n	8003cae <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	683a      	ldr	r2, [r7, #0]
 8003c90:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9c:	f107 020e 	add.w	r2, r7, #14
 8003ca0:	4610      	mov	r0, r2
 8003ca2:	4798      	blx	r3
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b082      	sub	sp, #8
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 fa6c 	bl	800419c <USBD_LL_Start>
 8003cc4:	4603      	mov	r3, r0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3708      	adds	r7, #8
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b082      	sub	sp, #8
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
 8003cd6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8003cd8:	2180      	movs	r1, #128	; 0x80
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 fabe 	bl	800425c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 faba 	bl	800425c <USBD_LL_StallEP>
}
 8003ce8:	bf00      	nop
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d036      	beq.n	8003d74 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8003d0a:	6938      	ldr	r0, [r7, #16]
 8003d0c:	f000 f836 	bl	8003d7c <USBD_GetLen>
 8003d10:	4603      	mov	r3, r0
 8003d12:	3301      	adds	r3, #1
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8003d1e:	7dfb      	ldrb	r3, [r7, #23]
 8003d20:	68ba      	ldr	r2, [r7, #8]
 8003d22:	4413      	add	r3, r2
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	7812      	ldrb	r2, [r2, #0]
 8003d28:	701a      	strb	r2, [r3, #0]
  idx++;
 8003d2a:	7dfb      	ldrb	r3, [r7, #23]
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8003d30:	7dfb      	ldrb	r3, [r7, #23]
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	4413      	add	r3, r2
 8003d36:	2203      	movs	r2, #3
 8003d38:	701a      	strb	r2, [r3, #0]
  idx++;
 8003d3a:	7dfb      	ldrb	r3, [r7, #23]
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8003d40:	e013      	b.n	8003d6a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8003d42:	7dfb      	ldrb	r3, [r7, #23]
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	4413      	add	r3, r2
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	7812      	ldrb	r2, [r2, #0]
 8003d4c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	3301      	adds	r3, #1
 8003d52:	613b      	str	r3, [r7, #16]
    idx++;
 8003d54:	7dfb      	ldrb	r3, [r7, #23]
 8003d56:	3301      	adds	r3, #1
 8003d58:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8003d5a:	7dfb      	ldrb	r3, [r7, #23]
 8003d5c:	68ba      	ldr	r2, [r7, #8]
 8003d5e:	4413      	add	r3, r2
 8003d60:	2200      	movs	r2, #0
 8003d62:	701a      	strb	r2, [r3, #0]
    idx++;
 8003d64:	7dfb      	ldrb	r3, [r7, #23]
 8003d66:	3301      	adds	r3, #1
 8003d68:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1e7      	bne.n	8003d42 <USBD_GetString+0x52>
 8003d72:	e000      	b.n	8003d76 <USBD_GetString+0x86>
    return;
 8003d74:	bf00      	nop
  }
}
 8003d76:	3718      	adds	r7, #24
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8003d84:	2300      	movs	r3, #0
 8003d86:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8003d8c:	e005      	b.n	8003d9a <USBD_GetLen+0x1e>
  {
    len++;
 8003d8e:	7bfb      	ldrb	r3, [r7, #15]
 8003d90:	3301      	adds	r3, #1
 8003d92:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	3301      	adds	r3, #1
 8003d98:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1f5      	bne.n	8003d8e <USBD_GetLen+0x12>
  }

  return len;
 8003da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3714      	adds	r7, #20
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2202      	movs	r2, #2
 8003dc0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f000 fa5f 	bl	800429a <USBD_LL_Transmit>

  return USBD_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3710      	adds	r7, #16
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
	...

08003de8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8003dec:	2200      	movs	r2, #0
 8003dee:	490e      	ldr	r1, [pc, #56]	; (8003e28 <MX_USB_DEVICE_Init+0x40>)
 8003df0:	480e      	ldr	r0, [pc, #56]	; (8003e2c <MX_USB_DEVICE_Init+0x44>)
 8003df2:	f7ff ff09 	bl	8003c08 <USBD_Init>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d001      	beq.n	8003e00 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8003dfc:	f7fc fd0a 	bl	8000814 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8003e00:	490b      	ldr	r1, [pc, #44]	; (8003e30 <MX_USB_DEVICE_Init+0x48>)
 8003e02:	480a      	ldr	r0, [pc, #40]	; (8003e2c <MX_USB_DEVICE_Init+0x44>)
 8003e04:	f7ff ff36 	bl	8003c74 <USBD_RegisterClass>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d001      	beq.n	8003e12 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8003e0e:	f7fc fd01 	bl	8000814 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8003e12:	4806      	ldr	r0, [pc, #24]	; (8003e2c <MX_USB_DEVICE_Init+0x44>)
 8003e14:	f7ff ff4f 	bl	8003cb6 <USBD_Start>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8003e1e:	f7fc fcf9 	bl	8000814 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8003e22:	bf00      	nop
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	20000114 	.word	0x20000114
 8003e2c:	20000234 	.word	0x20000234
 8003e30:	2000000c 	.word	0x2000000c

08003e34 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	6039      	str	r1, [r7, #0]
 8003e3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	2212      	movs	r2, #18
 8003e44:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8003e46:	4b03      	ldr	r3, [pc, #12]	; (8003e54 <USBD_FS_DeviceDescriptor+0x20>)
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	20000130 	.word	0x20000130

08003e58 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	4603      	mov	r3, r0
 8003e60:	6039      	str	r1, [r7, #0]
 8003e62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	2204      	movs	r2, #4
 8003e68:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8003e6a:	4b03      	ldr	r3, [pc, #12]	; (8003e78 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr
 8003e78:	20000144 	.word	0x20000144

08003e7c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	4603      	mov	r3, r0
 8003e84:	6039      	str	r1, [r7, #0]
 8003e86:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8003e88:	79fb      	ldrb	r3, [r7, #7]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d105      	bne.n	8003e9a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003e8e:	683a      	ldr	r2, [r7, #0]
 8003e90:	4907      	ldr	r1, [pc, #28]	; (8003eb0 <USBD_FS_ProductStrDescriptor+0x34>)
 8003e92:	4808      	ldr	r0, [pc, #32]	; (8003eb4 <USBD_FS_ProductStrDescriptor+0x38>)
 8003e94:	f7ff ff2c 	bl	8003cf0 <USBD_GetString>
 8003e98:	e004      	b.n	8003ea4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	4904      	ldr	r1, [pc, #16]	; (8003eb0 <USBD_FS_ProductStrDescriptor+0x34>)
 8003e9e:	4805      	ldr	r0, [pc, #20]	; (8003eb4 <USBD_FS_ProductStrDescriptor+0x38>)
 8003ea0:	f7ff ff26 	bl	8003cf0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8003ea4:	4b02      	ldr	r3, [pc, #8]	; (8003eb0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3708      	adds	r7, #8
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	20000504 	.word	0x20000504
 8003eb4:	08004544 	.word	0x08004544

08003eb8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	6039      	str	r1, [r7, #0]
 8003ec2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	4904      	ldr	r1, [pc, #16]	; (8003ed8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8003ec8:	4804      	ldr	r0, [pc, #16]	; (8003edc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8003eca:	f7ff ff11 	bl	8003cf0 <USBD_GetString>
  return USBD_StrDesc;
 8003ece:	4b02      	ldr	r3, [pc, #8]	; (8003ed8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3708      	adds	r7, #8
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	20000504 	.word	0x20000504
 8003edc:	0800455c 	.word	0x0800455c

08003ee0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	6039      	str	r1, [r7, #0]
 8003eea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	221a      	movs	r2, #26
 8003ef0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8003ef2:	f000 f843 	bl	8003f7c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8003ef6:	4b02      	ldr	r3, [pc, #8]	; (8003f00 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3708      	adds	r7, #8
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	20000148 	.word	0x20000148

08003f04 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	6039      	str	r1, [r7, #0]
 8003f0e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8003f10:	79fb      	ldrb	r3, [r7, #7]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d105      	bne.n	8003f22 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8003f16:	683a      	ldr	r2, [r7, #0]
 8003f18:	4907      	ldr	r1, [pc, #28]	; (8003f38 <USBD_FS_ConfigStrDescriptor+0x34>)
 8003f1a:	4808      	ldr	r0, [pc, #32]	; (8003f3c <USBD_FS_ConfigStrDescriptor+0x38>)
 8003f1c:	f7ff fee8 	bl	8003cf0 <USBD_GetString>
 8003f20:	e004      	b.n	8003f2c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8003f22:	683a      	ldr	r2, [r7, #0]
 8003f24:	4904      	ldr	r1, [pc, #16]	; (8003f38 <USBD_FS_ConfigStrDescriptor+0x34>)
 8003f26:	4805      	ldr	r0, [pc, #20]	; (8003f3c <USBD_FS_ConfigStrDescriptor+0x38>)
 8003f28:	f7ff fee2 	bl	8003cf0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8003f2c:	4b02      	ldr	r3, [pc, #8]	; (8003f38 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3708      	adds	r7, #8
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	20000504 	.word	0x20000504
 8003f3c:	08004570 	.word	0x08004570

08003f40 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	4603      	mov	r3, r0
 8003f48:	6039      	str	r1, [r7, #0]
 8003f4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8003f4c:	79fb      	ldrb	r3, [r7, #7]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d105      	bne.n	8003f5e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8003f52:	683a      	ldr	r2, [r7, #0]
 8003f54:	4907      	ldr	r1, [pc, #28]	; (8003f74 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8003f56:	4808      	ldr	r0, [pc, #32]	; (8003f78 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8003f58:	f7ff feca 	bl	8003cf0 <USBD_GetString>
 8003f5c:	e004      	b.n	8003f68 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	4904      	ldr	r1, [pc, #16]	; (8003f74 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8003f62:	4805      	ldr	r0, [pc, #20]	; (8003f78 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8003f64:	f7ff fec4 	bl	8003cf0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8003f68:	4b02      	ldr	r3, [pc, #8]	; (8003f74 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3708      	adds	r7, #8
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	20000504 	.word	0x20000504
 8003f78:	0800457c 	.word	0x0800457c

08003f7c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8003f82:	4b0f      	ldr	r3, [pc, #60]	; (8003fc0 <Get_SerialNum+0x44>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8003f88:	4b0e      	ldr	r3, [pc, #56]	; (8003fc4 <Get_SerialNum+0x48>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8003f8e:	4b0e      	ldr	r3, [pc, #56]	; (8003fc8 <Get_SerialNum+0x4c>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4413      	add	r3, r2
 8003f9a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d009      	beq.n	8003fb6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8003fa2:	2208      	movs	r2, #8
 8003fa4:	4909      	ldr	r1, [pc, #36]	; (8003fcc <Get_SerialNum+0x50>)
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f000 f814 	bl	8003fd4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8003fac:	2204      	movs	r2, #4
 8003fae:	4908      	ldr	r1, [pc, #32]	; (8003fd0 <Get_SerialNum+0x54>)
 8003fb0:	68b8      	ldr	r0, [r7, #8]
 8003fb2:	f000 f80f 	bl	8003fd4 <IntToUnicode>
  }
}
 8003fb6:	bf00      	nop
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	1fff7a10 	.word	0x1fff7a10
 8003fc4:	1fff7a14 	.word	0x1fff7a14
 8003fc8:	1fff7a18 	.word	0x1fff7a18
 8003fcc:	2000014a 	.word	0x2000014a
 8003fd0:	2000015a 	.word	0x2000015a

08003fd4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b087      	sub	sp, #28
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	75fb      	strb	r3, [r7, #23]
 8003fea:	e027      	b.n	800403c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	0f1b      	lsrs	r3, r3, #28
 8003ff0:	2b09      	cmp	r3, #9
 8003ff2:	d80b      	bhi.n	800400c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	0f1b      	lsrs	r3, r3, #28
 8003ff8:	b2da      	uxtb	r2, r3
 8003ffa:	7dfb      	ldrb	r3, [r7, #23]
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	4619      	mov	r1, r3
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	440b      	add	r3, r1
 8004004:	3230      	adds	r2, #48	; 0x30
 8004006:	b2d2      	uxtb	r2, r2
 8004008:	701a      	strb	r2, [r3, #0]
 800400a:	e00a      	b.n	8004022 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	0f1b      	lsrs	r3, r3, #28
 8004010:	b2da      	uxtb	r2, r3
 8004012:	7dfb      	ldrb	r3, [r7, #23]
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	4619      	mov	r1, r3
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	440b      	add	r3, r1
 800401c:	3237      	adds	r2, #55	; 0x37
 800401e:	b2d2      	uxtb	r2, r2
 8004020:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	011b      	lsls	r3, r3, #4
 8004026:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8004028:	7dfb      	ldrb	r3, [r7, #23]
 800402a:	005b      	lsls	r3, r3, #1
 800402c:	3301      	adds	r3, #1
 800402e:	68ba      	ldr	r2, [r7, #8]
 8004030:	4413      	add	r3, r2
 8004032:	2200      	movs	r2, #0
 8004034:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8004036:	7dfb      	ldrb	r3, [r7, #23]
 8004038:	3301      	adds	r3, #1
 800403a:	75fb      	strb	r3, [r7, #23]
 800403c:	7dfa      	ldrb	r2, [r7, #23]
 800403e:	79fb      	ldrb	r3, [r7, #7]
 8004040:	429a      	cmp	r2, r3
 8004042:	d3d3      	bcc.n	8003fec <IntToUnicode+0x18>
  }
}
 8004044:	bf00      	nop
 8004046:	371c      	adds	r7, #28
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b08a      	sub	sp, #40	; 0x28
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004058:	f107 0314 	add.w	r3, r7, #20
 800405c:	2200      	movs	r2, #0
 800405e:	601a      	str	r2, [r3, #0]
 8004060:	605a      	str	r2, [r3, #4]
 8004062:	609a      	str	r2, [r3, #8]
 8004064:	60da      	str	r2, [r3, #12]
 8004066:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004070:	d13f      	bne.n	80040f2 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004072:	2300      	movs	r3, #0
 8004074:	613b      	str	r3, [r7, #16]
 8004076:	4b21      	ldr	r3, [pc, #132]	; (80040fc <HAL_PCD_MspInit+0xac>)
 8004078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407a:	4a20      	ldr	r2, [pc, #128]	; (80040fc <HAL_PCD_MspInit+0xac>)
 800407c:	f043 0301 	orr.w	r3, r3, #1
 8004080:	6313      	str	r3, [r2, #48]	; 0x30
 8004082:	4b1e      	ldr	r3, [pc, #120]	; (80040fc <HAL_PCD_MspInit+0xac>)
 8004084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	613b      	str	r3, [r7, #16]
 800408c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800408e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8004092:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004094:	2302      	movs	r3, #2
 8004096:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004098:	2300      	movs	r3, #0
 800409a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800409c:	2303      	movs	r3, #3
 800409e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80040a0:	230a      	movs	r3, #10
 80040a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040a4:	f107 0314 	add.w	r3, r7, #20
 80040a8:	4619      	mov	r1, r3
 80040aa:	4815      	ldr	r0, [pc, #84]	; (8004100 <HAL_PCD_MspInit+0xb0>)
 80040ac:	f7fc fe3e 	bl	8000d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80040b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80040b6:	2300      	movs	r3, #0
 80040b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ba:	2300      	movs	r3, #0
 80040bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80040be:	f107 0314 	add.w	r3, r7, #20
 80040c2:	4619      	mov	r1, r3
 80040c4:	480e      	ldr	r0, [pc, #56]	; (8004100 <HAL_PCD_MspInit+0xb0>)
 80040c6:	f7fc fe31 	bl	8000d2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80040ca:	4b0c      	ldr	r3, [pc, #48]	; (80040fc <HAL_PCD_MspInit+0xac>)
 80040cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ce:	4a0b      	ldr	r2, [pc, #44]	; (80040fc <HAL_PCD_MspInit+0xac>)
 80040d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040d4:	6353      	str	r3, [r2, #52]	; 0x34
 80040d6:	2300      	movs	r3, #0
 80040d8:	60fb      	str	r3, [r7, #12]
 80040da:	4b08      	ldr	r3, [pc, #32]	; (80040fc <HAL_PCD_MspInit+0xac>)
 80040dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040de:	4a07      	ldr	r2, [pc, #28]	; (80040fc <HAL_PCD_MspInit+0xac>)
 80040e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040e4:	6453      	str	r3, [r2, #68]	; 0x44
 80040e6:	4b05      	ldr	r3, [pc, #20]	; (80040fc <HAL_PCD_MspInit+0xac>)
 80040e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040ee:	60fb      	str	r3, [r7, #12]
 80040f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80040f2:	bf00      	nop
 80040f4:	3728      	adds	r7, #40	; 0x28
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	40023800 	.word	0x40023800
 8004100:	40020000 	.word	0x40020000

08004104 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d13c      	bne.n	800418e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8004114:	4a20      	ldr	r2, [pc, #128]	; (8004198 <USBD_LL_Init+0x94>)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a1e      	ldr	r2, [pc, #120]	; (8004198 <USBD_LL_Init+0x94>)
 8004120:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004124:	4b1c      	ldr	r3, [pc, #112]	; (8004198 <USBD_LL_Init+0x94>)
 8004126:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800412a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800412c:	4b1a      	ldr	r3, [pc, #104]	; (8004198 <USBD_LL_Init+0x94>)
 800412e:	2204      	movs	r2, #4
 8004130:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8004132:	4b19      	ldr	r3, [pc, #100]	; (8004198 <USBD_LL_Init+0x94>)
 8004134:	2202      	movs	r2, #2
 8004136:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8004138:	4b17      	ldr	r3, [pc, #92]	; (8004198 <USBD_LL_Init+0x94>)
 800413a:	2200      	movs	r2, #0
 800413c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800413e:	4b16      	ldr	r3, [pc, #88]	; (8004198 <USBD_LL_Init+0x94>)
 8004140:	2202      	movs	r2, #2
 8004142:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8004144:	4b14      	ldr	r3, [pc, #80]	; (8004198 <USBD_LL_Init+0x94>)
 8004146:	2201      	movs	r2, #1
 8004148:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800414a:	4b13      	ldr	r3, [pc, #76]	; (8004198 <USBD_LL_Init+0x94>)
 800414c:	2200      	movs	r2, #0
 800414e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8004150:	4b11      	ldr	r3, [pc, #68]	; (8004198 <USBD_LL_Init+0x94>)
 8004152:	2200      	movs	r2, #0
 8004154:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8004156:	4b10      	ldr	r3, [pc, #64]	; (8004198 <USBD_LL_Init+0x94>)
 8004158:	2201      	movs	r2, #1
 800415a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800415c:	4b0e      	ldr	r3, [pc, #56]	; (8004198 <USBD_LL_Init+0x94>)
 800415e:	2200      	movs	r2, #0
 8004160:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8004162:	480d      	ldr	r0, [pc, #52]	; (8004198 <USBD_LL_Init+0x94>)
 8004164:	f7fc ffa5 	bl	80010b2 <HAL_PCD_Init>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800416e:	f7fc fb51 	bl	8000814 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8004172:	2180      	movs	r1, #128	; 0x80
 8004174:	4808      	ldr	r0, [pc, #32]	; (8004198 <USBD_LL_Init+0x94>)
 8004176:	f7fd fa93 	bl	80016a0 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800417a:	2240      	movs	r2, #64	; 0x40
 800417c:	2100      	movs	r1, #0
 800417e:	4806      	ldr	r0, [pc, #24]	; (8004198 <USBD_LL_Init+0x94>)
 8004180:	f7fd fa47 	bl	8001612 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8004184:	2280      	movs	r2, #128	; 0x80
 8004186:	2101      	movs	r1, #1
 8004188:	4803      	ldr	r0, [pc, #12]	; (8004198 <USBD_LL_Init+0x94>)
 800418a:	f7fd fa42 	bl	8001612 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3708      	adds	r7, #8
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	20000704 	.word	0x20000704

0800419c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80041a4:	2300      	movs	r3, #0
 80041a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80041a8:	2300      	movs	r3, #0
 80041aa:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7fd f89a 	bl	80012ec <HAL_PCD_Start>
 80041b8:	4603      	mov	r3, r0
 80041ba:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 80041bc:	7bfb      	ldrb	r3, [r7, #15]
 80041be:	4618      	mov	r0, r3
 80041c0:	f000 f88c 	bl	80042dc <USBD_Get_USB_Status>
 80041c4:	4603      	mov	r3, r0
 80041c6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80041c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b084      	sub	sp, #16
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
 80041da:	4608      	mov	r0, r1
 80041dc:	4611      	mov	r1, r2
 80041de:	461a      	mov	r2, r3
 80041e0:	4603      	mov	r3, r0
 80041e2:	70fb      	strb	r3, [r7, #3]
 80041e4:	460b      	mov	r3, r1
 80041e6:	70bb      	strb	r3, [r7, #2]
 80041e8:	4613      	mov	r3, r2
 80041ea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80041ec:	2300      	movs	r3, #0
 80041ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80041f0:	2300      	movs	r3, #0
 80041f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80041fa:	78bb      	ldrb	r3, [r7, #2]
 80041fc:	883a      	ldrh	r2, [r7, #0]
 80041fe:	78f9      	ldrb	r1, [r7, #3]
 8004200:	f7fd f8a7 	bl	8001352 <HAL_PCD_EP_Open>
 8004204:	4603      	mov	r3, r0
 8004206:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8004208:	7bfb      	ldrb	r3, [r7, #15]
 800420a:	4618      	mov	r0, r3
 800420c:	f000 f866 	bl	80042dc <USBD_Get_USB_Status>
 8004210:	4603      	mov	r3, r0
 8004212:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8004214:	7bbb      	ldrb	r3, [r7, #14]
}
 8004216:	4618      	mov	r0, r3
 8004218:	3710      	adds	r7, #16
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800421e:	b580      	push	{r7, lr}
 8004220:	b084      	sub	sp, #16
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
 8004226:	460b      	mov	r3, r1
 8004228:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800422a:	2300      	movs	r3, #0
 800422c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800422e:	2300      	movs	r3, #0
 8004230:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004238:	78fa      	ldrb	r2, [r7, #3]
 800423a:	4611      	mov	r1, r2
 800423c:	4618      	mov	r0, r3
 800423e:	f7fd f8f0 	bl	8001422 <HAL_PCD_EP_Close>
 8004242:	4603      	mov	r3, r0
 8004244:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8004246:	7bfb      	ldrb	r3, [r7, #15]
 8004248:	4618      	mov	r0, r3
 800424a:	f000 f847 	bl	80042dc <USBD_Get_USB_Status>
 800424e:	4603      	mov	r3, r0
 8004250:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8004252:	7bbb      	ldrb	r3, [r7, #14]
}
 8004254:	4618      	mov	r0, r3
 8004256:	3710      	adds	r7, #16
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	460b      	mov	r3, r1
 8004266:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004268:	2300      	movs	r3, #0
 800426a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800426c:	2300      	movs	r3, #0
 800426e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004276:	78fa      	ldrb	r2, [r7, #3]
 8004278:	4611      	mov	r1, r2
 800427a:	4618      	mov	r0, r3
 800427c:	f7fd f965 	bl	800154a <HAL_PCD_EP_SetStall>
 8004280:	4603      	mov	r3, r0
 8004282:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8004284:	7bfb      	ldrb	r3, [r7, #15]
 8004286:	4618      	mov	r0, r3
 8004288:	f000 f828 	bl	80042dc <USBD_Get_USB_Status>
 800428c:	4603      	mov	r3, r0
 800428e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8004290:	7bbb      	ldrb	r3, [r7, #14]
}
 8004292:	4618      	mov	r0, r3
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b086      	sub	sp, #24
 800429e:	af00      	add	r7, sp, #0
 80042a0:	60f8      	str	r0, [r7, #12]
 80042a2:	607a      	str	r2, [r7, #4]
 80042a4:	603b      	str	r3, [r7, #0]
 80042a6:	460b      	mov	r3, r1
 80042a8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80042aa:	2300      	movs	r3, #0
 80042ac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80042ae:	2300      	movs	r3, #0
 80042b0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80042b8:	7af9      	ldrb	r1, [r7, #11]
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	f7fd f8fa 	bl	80014b6 <HAL_PCD_EP_Transmit>
 80042c2:	4603      	mov	r3, r0
 80042c4:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 80042c6:	7dfb      	ldrb	r3, [r7, #23]
 80042c8:	4618      	mov	r0, r3
 80042ca:	f000 f807 	bl	80042dc <USBD_Get_USB_Status>
 80042ce:	4603      	mov	r3, r0
 80042d0:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80042d2:	7dbb      	ldrb	r3, [r7, #22]
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3718      	adds	r7, #24
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	4603      	mov	r3, r0
 80042e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80042e6:	2300      	movs	r3, #0
 80042e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80042ea:	79fb      	ldrb	r3, [r7, #7]
 80042ec:	2b03      	cmp	r3, #3
 80042ee:	d817      	bhi.n	8004320 <USBD_Get_USB_Status+0x44>
 80042f0:	a201      	add	r2, pc, #4	; (adr r2, 80042f8 <USBD_Get_USB_Status+0x1c>)
 80042f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f6:	bf00      	nop
 80042f8:	08004309 	.word	0x08004309
 80042fc:	0800430f 	.word	0x0800430f
 8004300:	08004315 	.word	0x08004315
 8004304:	0800431b 	.word	0x0800431b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8004308:	2300      	movs	r3, #0
 800430a:	73fb      	strb	r3, [r7, #15]
    break;
 800430c:	e00b      	b.n	8004326 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800430e:	2303      	movs	r3, #3
 8004310:	73fb      	strb	r3, [r7, #15]
    break;
 8004312:	e008      	b.n	8004326 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8004314:	2301      	movs	r3, #1
 8004316:	73fb      	strb	r3, [r7, #15]
    break;
 8004318:	e005      	b.n	8004326 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800431a:	2303      	movs	r3, #3
 800431c:	73fb      	strb	r3, [r7, #15]
    break;
 800431e:	e002      	b.n	8004326 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8004320:	2303      	movs	r3, #3
 8004322:	73fb      	strb	r3, [r7, #15]
    break;
 8004324:	bf00      	nop
  }
  return usb_status;
 8004326:	7bfb      	ldrb	r3, [r7, #15]
}
 8004328:	4618      	mov	r0, r3
 800432a:	3714      	adds	r7, #20
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <__errno>:
 8004334:	4b01      	ldr	r3, [pc, #4]	; (800433c <__errno+0x8>)
 8004336:	6818      	ldr	r0, [r3, #0]
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	20000164 	.word	0x20000164

08004340 <__libc_init_array>:
 8004340:	b570      	push	{r4, r5, r6, lr}
 8004342:	4e0d      	ldr	r6, [pc, #52]	; (8004378 <__libc_init_array+0x38>)
 8004344:	4c0d      	ldr	r4, [pc, #52]	; (800437c <__libc_init_array+0x3c>)
 8004346:	1ba4      	subs	r4, r4, r6
 8004348:	10a4      	asrs	r4, r4, #2
 800434a:	2500      	movs	r5, #0
 800434c:	42a5      	cmp	r5, r4
 800434e:	d109      	bne.n	8004364 <__libc_init_array+0x24>
 8004350:	4e0b      	ldr	r6, [pc, #44]	; (8004380 <__libc_init_array+0x40>)
 8004352:	4c0c      	ldr	r4, [pc, #48]	; (8004384 <__libc_init_array+0x44>)
 8004354:	f000 f8ea 	bl	800452c <_init>
 8004358:	1ba4      	subs	r4, r4, r6
 800435a:	10a4      	asrs	r4, r4, #2
 800435c:	2500      	movs	r5, #0
 800435e:	42a5      	cmp	r5, r4
 8004360:	d105      	bne.n	800436e <__libc_init_array+0x2e>
 8004362:	bd70      	pop	{r4, r5, r6, pc}
 8004364:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004368:	4798      	blx	r3
 800436a:	3501      	adds	r5, #1
 800436c:	e7ee      	b.n	800434c <__libc_init_array+0xc>
 800436e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004372:	4798      	blx	r3
 8004374:	3501      	adds	r5, #1
 8004376:	e7f2      	b.n	800435e <__libc_init_array+0x1e>
 8004378:	080045ac 	.word	0x080045ac
 800437c:	080045ac 	.word	0x080045ac
 8004380:	080045ac 	.word	0x080045ac
 8004384:	080045b0 	.word	0x080045b0

08004388 <malloc>:
 8004388:	4b02      	ldr	r3, [pc, #8]	; (8004394 <malloc+0xc>)
 800438a:	4601      	mov	r1, r0
 800438c:	6818      	ldr	r0, [r3, #0]
 800438e:	f000 b861 	b.w	8004454 <_malloc_r>
 8004392:	bf00      	nop
 8004394:	20000164 	.word	0x20000164

08004398 <free>:
 8004398:	4b02      	ldr	r3, [pc, #8]	; (80043a4 <free+0xc>)
 800439a:	4601      	mov	r1, r0
 800439c:	6818      	ldr	r0, [r3, #0]
 800439e:	f000 b80b 	b.w	80043b8 <_free_r>
 80043a2:	bf00      	nop
 80043a4:	20000164 	.word	0x20000164

080043a8 <memset>:
 80043a8:	4402      	add	r2, r0
 80043aa:	4603      	mov	r3, r0
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d100      	bne.n	80043b2 <memset+0xa>
 80043b0:	4770      	bx	lr
 80043b2:	f803 1b01 	strb.w	r1, [r3], #1
 80043b6:	e7f9      	b.n	80043ac <memset+0x4>

080043b8 <_free_r>:
 80043b8:	b538      	push	{r3, r4, r5, lr}
 80043ba:	4605      	mov	r5, r0
 80043bc:	2900      	cmp	r1, #0
 80043be:	d045      	beq.n	800444c <_free_r+0x94>
 80043c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043c4:	1f0c      	subs	r4, r1, #4
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	bfb8      	it	lt
 80043ca:	18e4      	addlt	r4, r4, r3
 80043cc:	f000 f8ac 	bl	8004528 <__malloc_lock>
 80043d0:	4a1f      	ldr	r2, [pc, #124]	; (8004450 <_free_r+0x98>)
 80043d2:	6813      	ldr	r3, [r2, #0]
 80043d4:	4610      	mov	r0, r2
 80043d6:	b933      	cbnz	r3, 80043e6 <_free_r+0x2e>
 80043d8:	6063      	str	r3, [r4, #4]
 80043da:	6014      	str	r4, [r2, #0]
 80043dc:	4628      	mov	r0, r5
 80043de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043e2:	f000 b8a2 	b.w	800452a <__malloc_unlock>
 80043e6:	42a3      	cmp	r3, r4
 80043e8:	d90c      	bls.n	8004404 <_free_r+0x4c>
 80043ea:	6821      	ldr	r1, [r4, #0]
 80043ec:	1862      	adds	r2, r4, r1
 80043ee:	4293      	cmp	r3, r2
 80043f0:	bf04      	itt	eq
 80043f2:	681a      	ldreq	r2, [r3, #0]
 80043f4:	685b      	ldreq	r3, [r3, #4]
 80043f6:	6063      	str	r3, [r4, #4]
 80043f8:	bf04      	itt	eq
 80043fa:	1852      	addeq	r2, r2, r1
 80043fc:	6022      	streq	r2, [r4, #0]
 80043fe:	6004      	str	r4, [r0, #0]
 8004400:	e7ec      	b.n	80043dc <_free_r+0x24>
 8004402:	4613      	mov	r3, r2
 8004404:	685a      	ldr	r2, [r3, #4]
 8004406:	b10a      	cbz	r2, 800440c <_free_r+0x54>
 8004408:	42a2      	cmp	r2, r4
 800440a:	d9fa      	bls.n	8004402 <_free_r+0x4a>
 800440c:	6819      	ldr	r1, [r3, #0]
 800440e:	1858      	adds	r0, r3, r1
 8004410:	42a0      	cmp	r0, r4
 8004412:	d10b      	bne.n	800442c <_free_r+0x74>
 8004414:	6820      	ldr	r0, [r4, #0]
 8004416:	4401      	add	r1, r0
 8004418:	1858      	adds	r0, r3, r1
 800441a:	4282      	cmp	r2, r0
 800441c:	6019      	str	r1, [r3, #0]
 800441e:	d1dd      	bne.n	80043dc <_free_r+0x24>
 8004420:	6810      	ldr	r0, [r2, #0]
 8004422:	6852      	ldr	r2, [r2, #4]
 8004424:	605a      	str	r2, [r3, #4]
 8004426:	4401      	add	r1, r0
 8004428:	6019      	str	r1, [r3, #0]
 800442a:	e7d7      	b.n	80043dc <_free_r+0x24>
 800442c:	d902      	bls.n	8004434 <_free_r+0x7c>
 800442e:	230c      	movs	r3, #12
 8004430:	602b      	str	r3, [r5, #0]
 8004432:	e7d3      	b.n	80043dc <_free_r+0x24>
 8004434:	6820      	ldr	r0, [r4, #0]
 8004436:	1821      	adds	r1, r4, r0
 8004438:	428a      	cmp	r2, r1
 800443a:	bf04      	itt	eq
 800443c:	6811      	ldreq	r1, [r2, #0]
 800443e:	6852      	ldreq	r2, [r2, #4]
 8004440:	6062      	str	r2, [r4, #4]
 8004442:	bf04      	itt	eq
 8004444:	1809      	addeq	r1, r1, r0
 8004446:	6021      	streq	r1, [r4, #0]
 8004448:	605c      	str	r4, [r3, #4]
 800444a:	e7c7      	b.n	80043dc <_free_r+0x24>
 800444c:	bd38      	pop	{r3, r4, r5, pc}
 800444e:	bf00      	nop
 8004450:	200001e8 	.word	0x200001e8

08004454 <_malloc_r>:
 8004454:	b570      	push	{r4, r5, r6, lr}
 8004456:	1ccd      	adds	r5, r1, #3
 8004458:	f025 0503 	bic.w	r5, r5, #3
 800445c:	3508      	adds	r5, #8
 800445e:	2d0c      	cmp	r5, #12
 8004460:	bf38      	it	cc
 8004462:	250c      	movcc	r5, #12
 8004464:	2d00      	cmp	r5, #0
 8004466:	4606      	mov	r6, r0
 8004468:	db01      	blt.n	800446e <_malloc_r+0x1a>
 800446a:	42a9      	cmp	r1, r5
 800446c:	d903      	bls.n	8004476 <_malloc_r+0x22>
 800446e:	230c      	movs	r3, #12
 8004470:	6033      	str	r3, [r6, #0]
 8004472:	2000      	movs	r0, #0
 8004474:	bd70      	pop	{r4, r5, r6, pc}
 8004476:	f000 f857 	bl	8004528 <__malloc_lock>
 800447a:	4a21      	ldr	r2, [pc, #132]	; (8004500 <_malloc_r+0xac>)
 800447c:	6814      	ldr	r4, [r2, #0]
 800447e:	4621      	mov	r1, r4
 8004480:	b991      	cbnz	r1, 80044a8 <_malloc_r+0x54>
 8004482:	4c20      	ldr	r4, [pc, #128]	; (8004504 <_malloc_r+0xb0>)
 8004484:	6823      	ldr	r3, [r4, #0]
 8004486:	b91b      	cbnz	r3, 8004490 <_malloc_r+0x3c>
 8004488:	4630      	mov	r0, r6
 800448a:	f000 f83d 	bl	8004508 <_sbrk_r>
 800448e:	6020      	str	r0, [r4, #0]
 8004490:	4629      	mov	r1, r5
 8004492:	4630      	mov	r0, r6
 8004494:	f000 f838 	bl	8004508 <_sbrk_r>
 8004498:	1c43      	adds	r3, r0, #1
 800449a:	d124      	bne.n	80044e6 <_malloc_r+0x92>
 800449c:	230c      	movs	r3, #12
 800449e:	6033      	str	r3, [r6, #0]
 80044a0:	4630      	mov	r0, r6
 80044a2:	f000 f842 	bl	800452a <__malloc_unlock>
 80044a6:	e7e4      	b.n	8004472 <_malloc_r+0x1e>
 80044a8:	680b      	ldr	r3, [r1, #0]
 80044aa:	1b5b      	subs	r3, r3, r5
 80044ac:	d418      	bmi.n	80044e0 <_malloc_r+0x8c>
 80044ae:	2b0b      	cmp	r3, #11
 80044b0:	d90f      	bls.n	80044d2 <_malloc_r+0x7e>
 80044b2:	600b      	str	r3, [r1, #0]
 80044b4:	50cd      	str	r5, [r1, r3]
 80044b6:	18cc      	adds	r4, r1, r3
 80044b8:	4630      	mov	r0, r6
 80044ba:	f000 f836 	bl	800452a <__malloc_unlock>
 80044be:	f104 000b 	add.w	r0, r4, #11
 80044c2:	1d23      	adds	r3, r4, #4
 80044c4:	f020 0007 	bic.w	r0, r0, #7
 80044c8:	1ac3      	subs	r3, r0, r3
 80044ca:	d0d3      	beq.n	8004474 <_malloc_r+0x20>
 80044cc:	425a      	negs	r2, r3
 80044ce:	50e2      	str	r2, [r4, r3]
 80044d0:	e7d0      	b.n	8004474 <_malloc_r+0x20>
 80044d2:	428c      	cmp	r4, r1
 80044d4:	684b      	ldr	r3, [r1, #4]
 80044d6:	bf16      	itet	ne
 80044d8:	6063      	strne	r3, [r4, #4]
 80044da:	6013      	streq	r3, [r2, #0]
 80044dc:	460c      	movne	r4, r1
 80044de:	e7eb      	b.n	80044b8 <_malloc_r+0x64>
 80044e0:	460c      	mov	r4, r1
 80044e2:	6849      	ldr	r1, [r1, #4]
 80044e4:	e7cc      	b.n	8004480 <_malloc_r+0x2c>
 80044e6:	1cc4      	adds	r4, r0, #3
 80044e8:	f024 0403 	bic.w	r4, r4, #3
 80044ec:	42a0      	cmp	r0, r4
 80044ee:	d005      	beq.n	80044fc <_malloc_r+0xa8>
 80044f0:	1a21      	subs	r1, r4, r0
 80044f2:	4630      	mov	r0, r6
 80044f4:	f000 f808 	bl	8004508 <_sbrk_r>
 80044f8:	3001      	adds	r0, #1
 80044fa:	d0cf      	beq.n	800449c <_malloc_r+0x48>
 80044fc:	6025      	str	r5, [r4, #0]
 80044fe:	e7db      	b.n	80044b8 <_malloc_r+0x64>
 8004500:	200001e8 	.word	0x200001e8
 8004504:	200001ec 	.word	0x200001ec

08004508 <_sbrk_r>:
 8004508:	b538      	push	{r3, r4, r5, lr}
 800450a:	4c06      	ldr	r4, [pc, #24]	; (8004524 <_sbrk_r+0x1c>)
 800450c:	2300      	movs	r3, #0
 800450e:	4605      	mov	r5, r0
 8004510:	4608      	mov	r0, r1
 8004512:	6023      	str	r3, [r4, #0]
 8004514:	f7fc fa24 	bl	8000960 <_sbrk>
 8004518:	1c43      	adds	r3, r0, #1
 800451a:	d102      	bne.n	8004522 <_sbrk_r+0x1a>
 800451c:	6823      	ldr	r3, [r4, #0]
 800451e:	b103      	cbz	r3, 8004522 <_sbrk_r+0x1a>
 8004520:	602b      	str	r3, [r5, #0]
 8004522:	bd38      	pop	{r3, r4, r5, pc}
 8004524:	20000b0c 	.word	0x20000b0c

08004528 <__malloc_lock>:
 8004528:	4770      	bx	lr

0800452a <__malloc_unlock>:
 800452a:	4770      	bx	lr

0800452c <_init>:
 800452c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800452e:	bf00      	nop
 8004530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004532:	bc08      	pop	{r3}
 8004534:	469e      	mov	lr, r3
 8004536:	4770      	bx	lr

08004538 <_fini>:
 8004538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800453a:	bf00      	nop
 800453c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800453e:	bc08      	pop	{r3}
 8004540:	469e      	mov	lr, r3
 8004542:	4770      	bx	lr
